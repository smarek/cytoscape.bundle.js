(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
  var __commonJS = (callback, module) => () => {
    if (!module) {
      module = {exports: {}};
      callback(module.exports, module);
    }
    return module.exports;
  };
  var __exportStar = (target, module, desc) => {
    __markAsModule(target);
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, {get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable});
    }
    return target;
  };
  var __toModule = (module) => {
    if (module && module.__esModule)
      return module;
    return __exportStar(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", {value: module, enumerable: true}), module);
  };

  // node_modules/lodash.debounce/index.js
  var require_lodash = __commonJS((exports, module) => {
    var FUNC_ERROR_TEXT = "Expected a function";
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    var now = function() {
      return root.Date.now();
    };
    function debounce(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
        return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = debounce;
  });

  // node_modules/heap/lib/heap.js
  var require_heap = __commonJS((exports, module) => {
    (function() {
      var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;
      floor = Math.floor, min = Math.min;
      defaultCmp = function(x, y) {
        if (x < y) {
          return -1;
        }
        if (x > y) {
          return 1;
        }
        return 0;
      };
      insort = function(a, x, lo, hi, cmp) {
        var mid;
        if (lo == null) {
          lo = 0;
        }
        if (cmp == null) {
          cmp = defaultCmp;
        }
        if (lo < 0) {
          throw new Error("lo must be non-negative");
        }
        if (hi == null) {
          hi = a.length;
        }
        while (lo < hi) {
          mid = floor((lo + hi) / 2);
          if (cmp(x, a[mid]) < 0) {
            hi = mid;
          } else {
            lo = mid + 1;
          }
        }
        return [].splice.apply(a, [lo, lo - lo].concat(x)), x;
      };
      heappush = function(array, item, cmp) {
        if (cmp == null) {
          cmp = defaultCmp;
        }
        array.push(item);
        return _siftdown(array, 0, array.length - 1, cmp);
      };
      heappop = function(array, cmp) {
        var lastelt, returnitem;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        lastelt = array.pop();
        if (array.length) {
          returnitem = array[0];
          array[0] = lastelt;
          _siftup(array, 0, cmp);
        } else {
          returnitem = lastelt;
        }
        return returnitem;
      };
      heapreplace = function(array, item, cmp) {
        var returnitem;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        returnitem = array[0];
        array[0] = item;
        _siftup(array, 0, cmp);
        return returnitem;
      };
      heappushpop = function(array, item, cmp) {
        var _ref;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        if (array.length && cmp(array[0], item) < 0) {
          _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];
          _siftup(array, 0, cmp);
        }
        return item;
      };
      heapify = function(array, cmp) {
        var i, _i, _j, _len, _ref, _ref1, _results, _results1;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        _ref1 = function() {
          _results1 = [];
          for (var _j2 = 0, _ref2 = floor(array.length / 2); 0 <= _ref2 ? _j2 < _ref2 : _j2 > _ref2; 0 <= _ref2 ? _j2++ : _j2--) {
            _results1.push(_j2);
          }
          return _results1;
        }.apply(this).reverse();
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          i = _ref1[_i];
          _results.push(_siftup(array, i, cmp));
        }
        return _results;
      };
      updateItem = function(array, item, cmp) {
        var pos;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        pos = array.indexOf(item);
        if (pos === -1) {
          return;
        }
        _siftdown(array, 0, pos, cmp);
        return _siftup(array, pos, cmp);
      };
      nlargest = function(array, n, cmp) {
        var elem, result, _i, _len, _ref;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        result = array.slice(0, n);
        if (!result.length) {
          return result;
        }
        heapify(result, cmp);
        _ref = array.slice(n);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          elem = _ref[_i];
          heappushpop(result, elem, cmp);
        }
        return result.sort(cmp).reverse();
      };
      nsmallest = function(array, n, cmp) {
        var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        if (n * 10 <= array.length) {
          result = array.slice(0, n).sort(cmp);
          if (!result.length) {
            return result;
          }
          los = result[result.length - 1];
          _ref = array.slice(n);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            elem = _ref[_i];
            if (cmp(elem, los) < 0) {
              insort(result, elem, 0, null, cmp);
              result.pop();
              los = result[result.length - 1];
            }
          }
          return result;
        }
        heapify(array, cmp);
        _results = [];
        for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          _results.push(heappop(array, cmp));
        }
        return _results;
      };
      _siftdown = function(array, startpos, pos, cmp) {
        var newitem, parent, parentpos;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        newitem = array[pos];
        while (pos > startpos) {
          parentpos = pos - 1 >> 1;
          parent = array[parentpos];
          if (cmp(newitem, parent) < 0) {
            array[pos] = parent;
            pos = parentpos;
            continue;
          }
          break;
        }
        return array[pos] = newitem;
      };
      _siftup = function(array, pos, cmp) {
        var childpos, endpos, newitem, rightpos, startpos;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        endpos = array.length;
        startpos = pos;
        newitem = array[pos];
        childpos = 2 * pos + 1;
        while (childpos < endpos) {
          rightpos = childpos + 1;
          if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {
            childpos = rightpos;
          }
          array[pos] = array[childpos];
          pos = childpos;
          childpos = 2 * pos + 1;
        }
        array[pos] = newitem;
        return _siftdown(array, startpos, pos, cmp);
      };
      Heap = function() {
        Heap2.push = heappush;
        Heap2.pop = heappop;
        Heap2.replace = heapreplace;
        Heap2.pushpop = heappushpop;
        Heap2.heapify = heapify;
        Heap2.updateItem = updateItem;
        Heap2.nlargest = nlargest;
        Heap2.nsmallest = nsmallest;
        function Heap2(cmp) {
          this.cmp = cmp != null ? cmp : defaultCmp;
          this.nodes = [];
        }
        Heap2.prototype.push = function(x) {
          return heappush(this.nodes, x, this.cmp);
        };
        Heap2.prototype.pop = function() {
          return heappop(this.nodes, this.cmp);
        };
        Heap2.prototype.peek = function() {
          return this.nodes[0];
        };
        Heap2.prototype.contains = function(x) {
          return this.nodes.indexOf(x) !== -1;
        };
        Heap2.prototype.replace = function(x) {
          return heapreplace(this.nodes, x, this.cmp);
        };
        Heap2.prototype.pushpop = function(x) {
          return heappushpop(this.nodes, x, this.cmp);
        };
        Heap2.prototype.heapify = function() {
          return heapify(this.nodes, this.cmp);
        };
        Heap2.prototype.updateItem = function(x) {
          return updateItem(this.nodes, x, this.cmp);
        };
        Heap2.prototype.clear = function() {
          return this.nodes = [];
        };
        Heap2.prototype.empty = function() {
          return this.nodes.length === 0;
        };
        Heap2.prototype.size = function() {
          return this.nodes.length;
        };
        Heap2.prototype.clone = function() {
          var heap;
          heap = new Heap2();
          heap.nodes = this.nodes.slice(0);
          return heap;
        };
        Heap2.prototype.toArray = function() {
          return this.nodes.slice(0);
        };
        Heap2.prototype.insert = Heap2.prototype.push;
        Heap2.prototype.top = Heap2.prototype.peek;
        Heap2.prototype.front = Heap2.prototype.peek;
        Heap2.prototype.has = Heap2.prototype.contains;
        Heap2.prototype.copy = Heap2.prototype.clone;
        return Heap2;
      }();
      (function(root, factory) {
        if (typeof define === "function" && define.amd) {
          return define([], factory);
        } else if (typeof exports === "object") {
          return module.exports = factory();
        } else {
          return root.Heap = factory();
        }
      })(this, function() {
        return Heap;
      });
    }).call(exports);
  });

  // node_modules/heap/index.js
  var require_heap2 = __commonJS((exports, module) => {
    module.exports = require_heap();
  });

  // node_modules/cytoscape/dist/cytoscape.cjs.js
  var require_cytoscape_cjs = __commonJS((exports, module) => {
    "use strict";
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var util = _interopDefault(require_lodash());
    var Heap = _interopDefault(require_heap2());
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _slicedToArray(arr, i2) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _nonIterableRest();
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _iterableToArrayLimit(arr, i2) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i2 && _arr.length === i2)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
    var window$1 = typeof window === "undefined" ? null : window;
    var navigator = window$1 ? window$1.navigator : null;
    var document$1 = window$1 ? window$1.document : null;
    var typeofstr = _typeof("");
    var typeofobj = _typeof({});
    var typeoffn = _typeof(function() {
    });
    var typeofhtmlele = typeof HTMLElement === "undefined" ? "undefined" : _typeof(HTMLElement);
    var instanceStr = function instanceStr2(obj) {
      return obj && obj.instanceString && fn(obj.instanceString) ? obj.instanceString() : null;
    };
    var string = function string2(obj) {
      return obj != null && _typeof(obj) == typeofstr;
    };
    var fn = function fn2(obj) {
      return obj != null && _typeof(obj) === typeoffn;
    };
    var array = function array2(obj) {
      return !elementOrCollection(obj) && (Array.isArray ? Array.isArray(obj) : obj != null && obj instanceof Array);
    };
    var plainObject = function plainObject2(obj) {
      return obj != null && _typeof(obj) === typeofobj && !array(obj) && obj.constructor === Object;
    };
    var object = function object2(obj) {
      return obj != null && _typeof(obj) === typeofobj;
    };
    var number = function number2(obj) {
      return obj != null && _typeof(obj) === _typeof(1) && !isNaN(obj);
    };
    var integer = function integer2(obj) {
      return number(obj) && Math.floor(obj) === obj;
    };
    var htmlElement = function htmlElement2(obj) {
      if (typeofhtmlele === "undefined") {
        return void 0;
      } else {
        return obj != null && obj instanceof HTMLElement;
      }
    };
    var elementOrCollection = function elementOrCollection2(obj) {
      return element(obj) || collection(obj);
    };
    var element = function element2(obj) {
      return instanceStr(obj) === "collection" && obj._private.single;
    };
    var collection = function collection2(obj) {
      return instanceStr(obj) === "collection" && !obj._private.single;
    };
    var core = function core2(obj) {
      return instanceStr(obj) === "core";
    };
    var stylesheet = function stylesheet2(obj) {
      return instanceStr(obj) === "stylesheet";
    };
    var event = function event2(obj) {
      return instanceStr(obj) === "event";
    };
    var emptyString = function emptyString2(obj) {
      if (obj === void 0 || obj === null) {
        return true;
      } else if (obj === "" || obj.match(/^\s+$/)) {
        return true;
      }
      return false;
    };
    var domElement = function domElement2(obj) {
      if (typeof HTMLElement === "undefined") {
        return false;
      } else {
        return obj instanceof HTMLElement;
      }
    };
    var boundingBox = function boundingBox2(obj) {
      return plainObject(obj) && number(obj.x1) && number(obj.x2) && number(obj.y1) && number(obj.y2);
    };
    var promise = function promise2(obj) {
      return object(obj) && fn(obj.then);
    };
    var ms = function ms2() {
      return navigator && navigator.userAgent.match(/msie|trident|edge/i);
    };
    var memoize = function memoize2(fn2, keyFn) {
      if (!keyFn) {
        keyFn = function keyFn2() {
          if (arguments.length === 1) {
            return arguments[0];
          } else if (arguments.length === 0) {
            return "undefined";
          }
          var args = [];
          for (var i2 = 0; i2 < arguments.length; i2++) {
            args.push(arguments[i2]);
          }
          return args.join("$");
        };
      }
      var memoizedFn = function memoizedFn2() {
        var self2 = this;
        var args = arguments;
        var ret;
        var k = keyFn.apply(self2, args);
        var cache2 = memoizedFn2.cache;
        if (!(ret = cache2[k])) {
          ret = cache2[k] = fn2.apply(self2, args);
        }
        return ret;
      };
      memoizedFn.cache = {};
      return memoizedFn;
    };
    var camel2dash = memoize(function(str) {
      return str.replace(/([A-Z])/g, function(v) {
        return "-" + v.toLowerCase();
      });
    });
    var dash2camel = memoize(function(str) {
      return str.replace(/(-\w)/g, function(v) {
        return v[1].toUpperCase();
      });
    });
    var prependCamel = memoize(function(prefix, str) {
      return prefix + str[0].toUpperCase() + str.substring(1);
    }, function(prefix, str) {
      return prefix + "$" + str;
    });
    var capitalize = function capitalize2(str) {
      if (emptyString(str)) {
        return str;
      }
      return str.charAt(0).toUpperCase() + str.substring(1);
    };
    var number$1 = "(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))";
    var rgba = "rgb[a]?\\((" + number$1 + "[%]?)\\s*,\\s*(" + number$1 + "[%]?)\\s*,\\s*(" + number$1 + "[%]?)(?:\\s*,\\s*(" + number$1 + "))?\\)";
    var rgbaNoBackRefs = "rgb[a]?\\((?:" + number$1 + "[%]?)\\s*,\\s*(?:" + number$1 + "[%]?)\\s*,\\s*(?:" + number$1 + "[%]?)(?:\\s*,\\s*(?:" + number$1 + "))?\\)";
    var hsla = "hsl[a]?\\((" + number$1 + ")\\s*,\\s*(" + number$1 + "[%])\\s*,\\s*(" + number$1 + "[%])(?:\\s*,\\s*(" + number$1 + "))?\\)";
    var hslaNoBackRefs = "hsl[a]?\\((?:" + number$1 + ")\\s*,\\s*(?:" + number$1 + "[%])\\s*,\\s*(?:" + number$1 + "[%])(?:\\s*,\\s*(?:" + number$1 + "))?\\)";
    var hex3 = "\\#[0-9a-fA-F]{3}";
    var hex6 = "\\#[0-9a-fA-F]{6}";
    var ascending = function ascending2(a, b) {
      if (a < b) {
        return -1;
      } else if (a > b) {
        return 1;
      } else {
        return 0;
      }
    };
    var descending = function descending2(a, b) {
      return -1 * ascending(a, b);
    };
    var extend = Object.assign != null ? Object.assign.bind(Object) : function(tgt) {
      var args = arguments;
      for (var i2 = 1; i2 < args.length; i2++) {
        var obj = args[i2];
        if (obj == null) {
          continue;
        }
        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; j++) {
          var k = keys[j];
          tgt[k] = obj[k];
        }
      }
      return tgt;
    };
    var hex2tuple = function hex2tuple2(hex) {
      if (!(hex.length === 4 || hex.length === 7) || hex[0] !== "#") {
        return;
      }
      var shortHex = hex.length === 4;
      var r, g, b;
      var base = 16;
      if (shortHex) {
        r = parseInt(hex[1] + hex[1], base);
        g = parseInt(hex[2] + hex[2], base);
        b = parseInt(hex[3] + hex[3], base);
      } else {
        r = parseInt(hex[1] + hex[2], base);
        g = parseInt(hex[3] + hex[4], base);
        b = parseInt(hex[5] + hex[6], base);
      }
      return [r, g, b];
    };
    var hsl2tuple = function hsl2tuple2(hsl) {
      var ret;
      var h, s, l, a, r, g, b;
      function hue2rgb(p3, q2, t) {
        if (t < 0)
          t += 1;
        if (t > 1)
          t -= 1;
        if (t < 1 / 6)
          return p3 + (q2 - p3) * 6 * t;
        if (t < 1 / 2)
          return q2;
        if (t < 2 / 3)
          return p3 + (q2 - p3) * (2 / 3 - t) * 6;
        return p3;
      }
      var m = new RegExp("^" + hsla + "$").exec(hsl);
      if (m) {
        h = parseInt(m[1]);
        if (h < 0) {
          h = (360 - -1 * h % 360) % 360;
        } else if (h > 360) {
          h = h % 360;
        }
        h /= 360;
        s = parseFloat(m[2]);
        if (s < 0 || s > 100) {
          return;
        }
        s = s / 100;
        l = parseFloat(m[3]);
        if (l < 0 || l > 100) {
          return;
        }
        l = l / 100;
        a = m[4];
        if (a !== void 0) {
          a = parseFloat(a);
          if (a < 0 || a > 1) {
            return;
          }
        }
        if (s === 0) {
          r = g = b = Math.round(l * 255);
        } else {
          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var p2 = 2 * l - q;
          r = Math.round(255 * hue2rgb(p2, q, h + 1 / 3));
          g = Math.round(255 * hue2rgb(p2, q, h));
          b = Math.round(255 * hue2rgb(p2, q, h - 1 / 3));
        }
        ret = [r, g, b, a];
      }
      return ret;
    };
    var rgb2tuple = function rgb2tuple2(rgb) {
      var ret;
      var m = new RegExp("^" + rgba + "$").exec(rgb);
      if (m) {
        ret = [];
        var isPct = [];
        for (var i2 = 1; i2 <= 3; i2++) {
          var channel = m[i2];
          if (channel[channel.length - 1] === "%") {
            isPct[i2] = true;
          }
          channel = parseFloat(channel);
          if (isPct[i2]) {
            channel = channel / 100 * 255;
          }
          if (channel < 0 || channel > 255) {
            return;
          }
          ret.push(Math.floor(channel));
        }
        var atLeastOneIsPct = isPct[1] || isPct[2] || isPct[3];
        var allArePct = isPct[1] && isPct[2] && isPct[3];
        if (atLeastOneIsPct && !allArePct) {
          return;
        }
        var alpha = m[4];
        if (alpha !== void 0) {
          alpha = parseFloat(alpha);
          if (alpha < 0 || alpha > 1) {
            return;
          }
          ret.push(alpha);
        }
      }
      return ret;
    };
    var colorname2tuple = function colorname2tuple2(color) {
      return colors[color.toLowerCase()];
    };
    var color2tuple = function color2tuple2(color) {
      return (array(color) ? color : null) || colorname2tuple(color) || hex2tuple(color) || rgb2tuple(color) || hsl2tuple(color);
    };
    var colors = {
      transparent: [0, 0, 0, 0],
      aliceblue: [240, 248, 255],
      antiquewhite: [250, 235, 215],
      aqua: [0, 255, 255],
      aquamarine: [127, 255, 212],
      azure: [240, 255, 255],
      beige: [245, 245, 220],
      bisque: [255, 228, 196],
      black: [0, 0, 0],
      blanchedalmond: [255, 235, 205],
      blue: [0, 0, 255],
      blueviolet: [138, 43, 226],
      brown: [165, 42, 42],
      burlywood: [222, 184, 135],
      cadetblue: [95, 158, 160],
      chartreuse: [127, 255, 0],
      chocolate: [210, 105, 30],
      coral: [255, 127, 80],
      cornflowerblue: [100, 149, 237],
      cornsilk: [255, 248, 220],
      crimson: [220, 20, 60],
      cyan: [0, 255, 255],
      darkblue: [0, 0, 139],
      darkcyan: [0, 139, 139],
      darkgoldenrod: [184, 134, 11],
      darkgray: [169, 169, 169],
      darkgreen: [0, 100, 0],
      darkgrey: [169, 169, 169],
      darkkhaki: [189, 183, 107],
      darkmagenta: [139, 0, 139],
      darkolivegreen: [85, 107, 47],
      darkorange: [255, 140, 0],
      darkorchid: [153, 50, 204],
      darkred: [139, 0, 0],
      darksalmon: [233, 150, 122],
      darkseagreen: [143, 188, 143],
      darkslateblue: [72, 61, 139],
      darkslategray: [47, 79, 79],
      darkslategrey: [47, 79, 79],
      darkturquoise: [0, 206, 209],
      darkviolet: [148, 0, 211],
      deeppink: [255, 20, 147],
      deepskyblue: [0, 191, 255],
      dimgray: [105, 105, 105],
      dimgrey: [105, 105, 105],
      dodgerblue: [30, 144, 255],
      firebrick: [178, 34, 34],
      floralwhite: [255, 250, 240],
      forestgreen: [34, 139, 34],
      fuchsia: [255, 0, 255],
      gainsboro: [220, 220, 220],
      ghostwhite: [248, 248, 255],
      gold: [255, 215, 0],
      goldenrod: [218, 165, 32],
      gray: [128, 128, 128],
      grey: [128, 128, 128],
      green: [0, 128, 0],
      greenyellow: [173, 255, 47],
      honeydew: [240, 255, 240],
      hotpink: [255, 105, 180],
      indianred: [205, 92, 92],
      indigo: [75, 0, 130],
      ivory: [255, 255, 240],
      khaki: [240, 230, 140],
      lavender: [230, 230, 250],
      lavenderblush: [255, 240, 245],
      lawngreen: [124, 252, 0],
      lemonchiffon: [255, 250, 205],
      lightblue: [173, 216, 230],
      lightcoral: [240, 128, 128],
      lightcyan: [224, 255, 255],
      lightgoldenrodyellow: [250, 250, 210],
      lightgray: [211, 211, 211],
      lightgreen: [144, 238, 144],
      lightgrey: [211, 211, 211],
      lightpink: [255, 182, 193],
      lightsalmon: [255, 160, 122],
      lightseagreen: [32, 178, 170],
      lightskyblue: [135, 206, 250],
      lightslategray: [119, 136, 153],
      lightslategrey: [119, 136, 153],
      lightsteelblue: [176, 196, 222],
      lightyellow: [255, 255, 224],
      lime: [0, 255, 0],
      limegreen: [50, 205, 50],
      linen: [250, 240, 230],
      magenta: [255, 0, 255],
      maroon: [128, 0, 0],
      mediumaquamarine: [102, 205, 170],
      mediumblue: [0, 0, 205],
      mediumorchid: [186, 85, 211],
      mediumpurple: [147, 112, 219],
      mediumseagreen: [60, 179, 113],
      mediumslateblue: [123, 104, 238],
      mediumspringgreen: [0, 250, 154],
      mediumturquoise: [72, 209, 204],
      mediumvioletred: [199, 21, 133],
      midnightblue: [25, 25, 112],
      mintcream: [245, 255, 250],
      mistyrose: [255, 228, 225],
      moccasin: [255, 228, 181],
      navajowhite: [255, 222, 173],
      navy: [0, 0, 128],
      oldlace: [253, 245, 230],
      olive: [128, 128, 0],
      olivedrab: [107, 142, 35],
      orange: [255, 165, 0],
      orangered: [255, 69, 0],
      orchid: [218, 112, 214],
      palegoldenrod: [238, 232, 170],
      palegreen: [152, 251, 152],
      paleturquoise: [175, 238, 238],
      palevioletred: [219, 112, 147],
      papayawhip: [255, 239, 213],
      peachpuff: [255, 218, 185],
      peru: [205, 133, 63],
      pink: [255, 192, 203],
      plum: [221, 160, 221],
      powderblue: [176, 224, 230],
      purple: [128, 0, 128],
      red: [255, 0, 0],
      rosybrown: [188, 143, 143],
      royalblue: [65, 105, 225],
      saddlebrown: [139, 69, 19],
      salmon: [250, 128, 114],
      sandybrown: [244, 164, 96],
      seagreen: [46, 139, 87],
      seashell: [255, 245, 238],
      sienna: [160, 82, 45],
      silver: [192, 192, 192],
      skyblue: [135, 206, 235],
      slateblue: [106, 90, 205],
      slategray: [112, 128, 144],
      slategrey: [112, 128, 144],
      snow: [255, 250, 250],
      springgreen: [0, 255, 127],
      steelblue: [70, 130, 180],
      tan: [210, 180, 140],
      teal: [0, 128, 128],
      thistle: [216, 191, 216],
      tomato: [255, 99, 71],
      turquoise: [64, 224, 208],
      violet: [238, 130, 238],
      wheat: [245, 222, 179],
      white: [255, 255, 255],
      whitesmoke: [245, 245, 245],
      yellow: [255, 255, 0],
      yellowgreen: [154, 205, 50]
    };
    var setMap = function setMap2(options) {
      var obj = options.map;
      var keys = options.keys;
      var l = keys.length;
      for (var i2 = 0; i2 < l; i2++) {
        var key = keys[i2];
        if (plainObject(key)) {
          throw Error("Tried to set map with object key");
        }
        if (i2 < keys.length - 1) {
          if (obj[key] == null) {
            obj[key] = {};
          }
          obj = obj[key];
        } else {
          obj[key] = options.value;
        }
      }
    };
    var getMap = function getMap2(options) {
      var obj = options.map;
      var keys = options.keys;
      var l = keys.length;
      for (var i2 = 0; i2 < l; i2++) {
        var key = keys[i2];
        if (plainObject(key)) {
          throw Error("Tried to get map with object key");
        }
        obj = obj[key];
        if (obj == null) {
          return obj;
        }
      }
      return obj;
    };
    var performance = window$1 ? window$1.performance : null;
    var pnow = performance && performance.now ? function() {
      return performance.now();
    } : function() {
      return Date.now();
    };
    var raf = function() {
      if (window$1) {
        if (window$1.requestAnimationFrame) {
          return function(fn2) {
            window$1.requestAnimationFrame(fn2);
          };
        } else if (window$1.mozRequestAnimationFrame) {
          return function(fn2) {
            window$1.mozRequestAnimationFrame(fn2);
          };
        } else if (window$1.webkitRequestAnimationFrame) {
          return function(fn2) {
            window$1.webkitRequestAnimationFrame(fn2);
          };
        } else if (window$1.msRequestAnimationFrame) {
          return function(fn2) {
            window$1.msRequestAnimationFrame(fn2);
          };
        }
      }
      return function(fn2) {
        if (fn2) {
          setTimeout(function() {
            fn2(pnow());
          }, 1e3 / 60);
        }
      };
    }();
    var requestAnimationFrame2 = function requestAnimationFrame3(fn2) {
      return raf(fn2);
    };
    var performanceNow = pnow;
    var DEFAULT_HASH_SEED = 9261;
    var K = 65599;
    var DEFAULT_HASH_SEED_ALT = 5381;
    var hashIterableInts = function hashIterableInts2(iterator) {
      var seed = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_HASH_SEED;
      var hash = seed;
      var entry;
      for (; ; ) {
        entry = iterator.next();
        if (entry.done) {
          break;
        }
        hash = hash * K + entry.value | 0;
      }
      return hash;
    };
    var hashInt = function hashInt2(num) {
      var seed = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_HASH_SEED;
      return seed * K + num | 0;
    };
    var hashIntAlt = function hashIntAlt2(num) {
      var seed = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_HASH_SEED_ALT;
      return (seed << 5) + seed + num | 0;
    };
    var combineHashes = function combineHashes2(hash1, hash2) {
      return hash1 * 2097152 + hash2;
    };
    var combineHashesArray = function combineHashesArray2(hashes) {
      return hashes[0] * 2097152 + hashes[1];
    };
    var hashArrays = function hashArrays2(hashes1, hashes2) {
      return [hashInt(hashes1[0], hashes2[0]), hashIntAlt(hashes1[1], hashes2[1])];
    };
    var hashIntsArray = function hashIntsArray2(ints, seed) {
      var entry = {
        value: 0,
        done: false
      };
      var i2 = 0;
      var length = ints.length;
      var iterator = {
        next: function next2() {
          if (i2 < length) {
            entry.value = ints[i2++];
          } else {
            entry.done = true;
          }
          return entry;
        }
      };
      return hashIterableInts(iterator, seed);
    };
    var hashString = function hashString2(str, seed) {
      var entry = {
        value: 0,
        done: false
      };
      var i2 = 0;
      var length = str.length;
      var iterator = {
        next: function next2() {
          if (i2 < length) {
            entry.value = str.charCodeAt(i2++);
          } else {
            entry.done = true;
          }
          return entry;
        }
      };
      return hashIterableInts(iterator, seed);
    };
    var hashStrings = function hashStrings2() {
      return hashStringsArray(arguments);
    };
    var hashStringsArray = function hashStringsArray2(strs) {
      var hash;
      for (var i2 = 0; i2 < strs.length; i2++) {
        var str = strs[i2];
        if (i2 === 0) {
          hash = hashString(str);
        } else {
          hash = hashString(str, hash);
        }
      }
      return hash;
    };
    var warningsEnabled = true;
    var warnSupported = console.warn != null;
    var traceSupported = console.trace != null;
    var MAX_INT = Number.MAX_SAFE_INTEGER || 9007199254740991;
    var trueify = function trueify2() {
      return true;
    };
    var falsify = function falsify2() {
      return false;
    };
    var zeroify = function zeroify2() {
      return 0;
    };
    var noop = function noop2() {
    };
    var error = function error2(msg) {
      throw new Error(msg);
    };
    var warnings = function warnings2(enabled) {
      if (enabled !== void 0) {
        warningsEnabled = !!enabled;
      } else {
        return warningsEnabled;
      }
    };
    var warn = function warn2(msg) {
      if (!warnings()) {
        return;
      }
      if (warnSupported) {
        console.warn(msg);
      } else {
        console.log(msg);
        if (traceSupported) {
          console.trace();
        }
      }
    };
    var clone = function clone2(obj) {
      return extend({}, obj);
    };
    var copy = function copy2(obj) {
      if (obj == null) {
        return obj;
      }
      if (array(obj)) {
        return obj.slice();
      } else if (plainObject(obj)) {
        return clone(obj);
      } else {
        return obj;
      }
    };
    var copyArray = function copyArray2(arr) {
      return arr.slice();
    };
    var uuid = function uuid2(a, b) {
      for (b = a = ""; a++ < 36; b += a * 51 & 52 ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16) : "-") {
      }
      return b;
    };
    var _staticEmptyObject = {};
    var staticEmptyObject = function staticEmptyObject2() {
      return _staticEmptyObject;
    };
    var defaults = function defaults2(_defaults) {
      var keys = Object.keys(_defaults);
      return function(opts) {
        var filledOpts = {};
        for (var i2 = 0; i2 < keys.length; i2++) {
          var key = keys[i2];
          var optVal = opts == null ? void 0 : opts[key];
          filledOpts[key] = optVal === void 0 ? _defaults[key] : optVal;
        }
        return filledOpts;
      };
    };
    var removeFromArray = function removeFromArray2(arr, ele, manyCopies) {
      for (var i2 = arr.length; i2 >= 0; i2--) {
        if (arr[i2] === ele) {
          arr.splice(i2, 1);
          if (!manyCopies) {
            break;
          }
        }
      }
    };
    var clearArray = function clearArray2(arr) {
      arr.splice(0, arr.length);
    };
    var push = function push2(arr, otherArr) {
      for (var i2 = 0; i2 < otherArr.length; i2++) {
        var el = otherArr[i2];
        arr.push(el);
      }
    };
    var getPrefixedProperty = function getPrefixedProperty2(obj, propName, prefix) {
      if (prefix) {
        propName = prependCamel(prefix, propName);
      }
      return obj[propName];
    };
    var setPrefixedProperty = function setPrefixedProperty2(obj, propName, prefix, value) {
      if (prefix) {
        propName = prependCamel(prefix, propName);
      }
      obj[propName] = value;
    };
    var ObjectMap = /* @__PURE__ */ function() {
      function ObjectMap2() {
        _classCallCheck(this, ObjectMap2);
        this._obj = {};
      }
      _createClass(ObjectMap2, [{
        key: "set",
        value: function set(key, val) {
          this._obj[key] = val;
          return this;
        }
      }, {
        key: "delete",
        value: function _delete(key) {
          this._obj[key] = void 0;
          return this;
        }
      }, {
        key: "clear",
        value: function clear() {
          this._obj = {};
        }
      }, {
        key: "has",
        value: function has(key) {
          return this._obj[key] !== void 0;
        }
      }, {
        key: "get",
        value: function get(key) {
          return this._obj[key];
        }
      }]);
      return ObjectMap2;
    }();
    var Map$1 = typeof Map !== "undefined" ? Map : ObjectMap;
    var undef = "undefined";
    var ObjectSet = /* @__PURE__ */ function() {
      function ObjectSet2(arrayOrObjectSet) {
        _classCallCheck(this, ObjectSet2);
        this._obj = Object.create(null);
        this.size = 0;
        if (arrayOrObjectSet != null) {
          var arr;
          if (arrayOrObjectSet.instanceString != null && arrayOrObjectSet.instanceString() === this.instanceString()) {
            arr = arrayOrObjectSet.toArray();
          } else {
            arr = arrayOrObjectSet;
          }
          for (var i2 = 0; i2 < arr.length; i2++) {
            this.add(arr[i2]);
          }
        }
      }
      _createClass(ObjectSet2, [{
        key: "instanceString",
        value: function instanceString() {
          return "set";
        }
      }, {
        key: "add",
        value: function add(val) {
          var o2 = this._obj;
          if (o2[val] !== 1) {
            o2[val] = 1;
            this.size++;
          }
        }
      }, {
        key: "delete",
        value: function _delete(val) {
          var o2 = this._obj;
          if (o2[val] === 1) {
            o2[val] = 0;
            this.size--;
          }
        }
      }, {
        key: "clear",
        value: function clear() {
          this._obj = Object.create(null);
        }
      }, {
        key: "has",
        value: function has(val) {
          return this._obj[val] === 1;
        }
      }, {
        key: "toArray",
        value: function toArray() {
          var _this = this;
          return Object.keys(this._obj).filter(function(key) {
            return _this.has(key);
          });
        }
      }, {
        key: "forEach",
        value: function forEach(callback, thisArg) {
          return this.toArray().forEach(callback, thisArg);
        }
      }]);
      return ObjectSet2;
    }();
    var Set$1 = (typeof Set === "undefined" ? "undefined" : _typeof(Set)) !== undef ? Set : ObjectSet;
    var Element = function Element2(cy, params) {
      var restore = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      if (cy === void 0 || params === void 0 || !core(cy)) {
        error("An element must have a core reference and parameters set");
        return;
      }
      var group = params.group;
      if (group == null) {
        if (params.data && params.data.source != null && params.data.target != null) {
          group = "edges";
        } else {
          group = "nodes";
        }
      }
      if (group !== "nodes" && group !== "edges") {
        error("An element must be of type `nodes` or `edges`; you specified `" + group + "`");
        return;
      }
      this.length = 1;
      this[0] = this;
      var _p = this._private = {
        cy,
        single: true,
        data: params.data || {},
        position: params.position || {
          x: 0,
          y: 0
        },
        autoWidth: void 0,
        autoHeight: void 0,
        autoPadding: void 0,
        compoundBoundsClean: false,
        listeners: [],
        group,
        style: {},
        rstyle: {},
        styleCxts: [],
        styleKeys: {},
        removed: true,
        selected: params.selected ? true : false,
        selectable: params.selectable === void 0 ? true : params.selectable ? true : false,
        locked: params.locked ? true : false,
        grabbed: false,
        grabbable: params.grabbable === void 0 ? true : params.grabbable ? true : false,
        pannable: params.pannable === void 0 ? group === "edges" ? true : false : params.pannable ? true : false,
        active: false,
        classes: new Set$1(),
        animation: {
          current: [],
          queue: []
        },
        rscratch: {},
        scratch: params.scratch || {},
        edges: [],
        children: [],
        parent: null,
        traversalCache: {},
        backgrounding: false,
        bbCache: null,
        bbCacheShift: {
          x: 0,
          y: 0
        },
        bodyBounds: null,
        overlayBounds: null,
        labelBounds: {
          all: null,
          source: null,
          target: null,
          main: null
        },
        arrowBounds: {
          source: null,
          target: null,
          "mid-source": null,
          "mid-target": null
        }
      };
      if (_p.position.x == null) {
        _p.position.x = 0;
      }
      if (_p.position.y == null) {
        _p.position.y = 0;
      }
      if (params.renderedPosition) {
        var rpos = params.renderedPosition;
        var pan = cy.pan();
        var zoom = cy.zoom();
        _p.position = {
          x: (rpos.x - pan.x) / zoom,
          y: (rpos.y - pan.y) / zoom
        };
      }
      var classes = [];
      if (array(params.classes)) {
        classes = params.classes;
      } else if (string(params.classes)) {
        classes = params.classes.split(/\s+/);
      }
      for (var i2 = 0, l = classes.length; i2 < l; i2++) {
        var cls = classes[i2];
        if (!cls || cls === "") {
          continue;
        }
        _p.classes.add(cls);
      }
      this.createEmitter();
      var bypass = params.style || params.css;
      if (bypass) {
        warn("Setting a `style` bypass at element creation should be done only when absolutely necessary.  Try to use the stylesheet instead.");
        this.style(bypass);
      }
      if (restore === void 0 || restore) {
        this.restore();
      }
    };
    var defineSearch = function defineSearch2(params) {
      params = {
        bfs: params.bfs || !params.dfs,
        dfs: params.dfs || !params.bfs
      };
      return function searchFn(roots, fn$12, directed) {
        var options;
        if (plainObject(roots) && !elementOrCollection(roots)) {
          options = roots;
          roots = options.roots || options.root;
          fn$12 = options.visit;
          directed = options.directed;
        }
        directed = arguments.length === 2 && !fn(fn$12) ? fn$12 : directed;
        fn$12 = fn(fn$12) ? fn$12 : function() {
        };
        var cy = this._private.cy;
        var v = roots = string(roots) ? this.filter(roots) : roots;
        var Q = [];
        var connectedNodes = [];
        var connectedBy = {};
        var id2depth = {};
        var V = {};
        var j = 0;
        var found;
        var _this$byGroup = this.byGroup(), nodes = _this$byGroup.nodes, edges = _this$byGroup.edges;
        for (var i2 = 0; i2 < v.length; i2++) {
          var vi = v[i2];
          var viId = vi.id();
          if (vi.isNode()) {
            Q.unshift(vi);
            if (params.bfs) {
              V[viId] = true;
              connectedNodes.push(vi);
            }
            id2depth[viId] = 0;
          }
        }
        var _loop2 = function _loop22() {
          var v2 = params.bfs ? Q.shift() : Q.pop();
          var vId = v2.id();
          if (params.dfs) {
            if (V[vId]) {
              return "continue";
            }
            V[vId] = true;
            connectedNodes.push(v2);
          }
          var depth = id2depth[vId];
          var prevEdge = connectedBy[vId];
          var src = prevEdge != null ? prevEdge.source() : null;
          var tgt = prevEdge != null ? prevEdge.target() : null;
          var prevNode = prevEdge == null ? void 0 : v2.same(src) ? tgt[0] : src[0];
          var ret = void 0;
          ret = fn$12(v2, prevEdge, prevNode, j++, depth);
          if (ret === true) {
            found = v2;
            return "break";
          }
          if (ret === false) {
            return "break";
          }
          var vwEdges = v2.connectedEdges().filter(function(e2) {
            return (!directed || e2.source().same(v2)) && edges.has(e2);
          });
          for (var _i2 = 0; _i2 < vwEdges.length; _i2++) {
            var e = vwEdges[_i2];
            var w = e.connectedNodes().filter(function(n) {
              return !n.same(v2) && nodes.has(n);
            });
            var wId = w.id();
            if (w.length !== 0 && !V[wId]) {
              w = w[0];
              Q.push(w);
              if (params.bfs) {
                V[wId] = true;
                connectedNodes.push(w);
              }
              connectedBy[wId] = e;
              id2depth[wId] = id2depth[vId] + 1;
            }
          }
        };
        _loop:
          while (Q.length !== 0) {
            var _ret = _loop2();
            switch (_ret) {
              case "continue":
                continue;
              case "break":
                break _loop;
            }
          }
        var connectedEles = cy.collection();
        for (var _i = 0; _i < connectedNodes.length; _i++) {
          var node = connectedNodes[_i];
          var edge = connectedBy[node.id()];
          if (edge != null) {
            connectedEles.push(edge);
          }
          connectedEles.push(node);
        }
        return {
          path: cy.collection(connectedEles),
          found: cy.collection(found)
        };
      };
    };
    var elesfn = {
      breadthFirstSearch: defineSearch({
        bfs: true
      }),
      depthFirstSearch: defineSearch({
        dfs: true
      })
    };
    elesfn.bfs = elesfn.breadthFirstSearch;
    elesfn.dfs = elesfn.depthFirstSearch;
    var dijkstraDefaults = defaults({
      root: null,
      weight: function weight(edge) {
        return 1;
      },
      directed: false
    });
    var elesfn$1 = {
      dijkstra: function dijkstra(options) {
        if (!plainObject(options)) {
          var args = arguments;
          options = {
            root: args[0],
            weight: args[1],
            directed: args[2]
          };
        }
        var _dijkstraDefaults = dijkstraDefaults(options), root = _dijkstraDefaults.root, weight = _dijkstraDefaults.weight, directed = _dijkstraDefaults.directed;
        var eles = this;
        var weightFn = weight;
        var source = string(root) ? this.filter(root)[0] : root[0];
        var dist2 = {};
        var prev = {};
        var knownDist = {};
        var _this$byGroup = this.byGroup(), nodes = _this$byGroup.nodes, edges = _this$byGroup.edges;
        edges.unmergeBy(function(ele) {
          return ele.isLoop();
        });
        var getDist2 = function getDist3(node2) {
          return dist2[node2.id()];
        };
        var setDist = function setDist2(node2, d) {
          dist2[node2.id()] = d;
          Q.updateItem(node2);
        };
        var Q = new Heap(function(a, b) {
          return getDist2(a) - getDist2(b);
        });
        for (var i2 = 0; i2 < nodes.length; i2++) {
          var node = nodes[i2];
          dist2[node.id()] = node.same(source) ? 0 : Infinity;
          Q.push(node);
        }
        var distBetween = function distBetween2(u2, v2) {
          var uvs = (directed ? u2.edgesTo(v2) : u2.edgesWith(v2)).intersect(edges);
          var smallestDistance = Infinity;
          var smallestEdge;
          for (var _i = 0; _i < uvs.length; _i++) {
            var edge = uvs[_i];
            var _weight = weightFn(edge);
            if (_weight < smallestDistance || !smallestEdge) {
              smallestDistance = _weight;
              smallestEdge = edge;
            }
          }
          return {
            edge: smallestEdge,
            dist: smallestDistance
          };
        };
        while (Q.size() > 0) {
          var u = Q.pop();
          var smalletsDist = getDist2(u);
          var uid = u.id();
          knownDist[uid] = smalletsDist;
          if (smalletsDist === Infinity) {
            continue;
          }
          var neighbors = u.neighborhood().intersect(nodes);
          for (var _i2 = 0; _i2 < neighbors.length; _i2++) {
            var v = neighbors[_i2];
            var vid = v.id();
            var vDist = distBetween(u, v);
            var alt = smalletsDist + vDist.dist;
            if (alt < getDist2(v)) {
              setDist(v, alt);
              prev[vid] = {
                node: u,
                edge: vDist.edge
              };
            }
          }
        }
        return {
          distanceTo: function distanceTo(node2) {
            var target = string(node2) ? nodes.filter(node2)[0] : node2[0];
            return knownDist[target.id()];
          },
          pathTo: function pathTo(node2) {
            var target = string(node2) ? nodes.filter(node2)[0] : node2[0];
            var S = [];
            var u2 = target;
            var uid2 = u2.id();
            if (target.length > 0) {
              S.unshift(target);
              while (prev[uid2]) {
                var p2 = prev[uid2];
                S.unshift(p2.edge);
                S.unshift(p2.node);
                u2 = p2.node;
                uid2 = u2.id();
              }
            }
            return eles.spawn(S);
          }
        };
      }
    };
    var elesfn$2 = {
      kruskal: function kruskal(weightFn) {
        weightFn = weightFn || function(edge2) {
          return 1;
        };
        var _this$byGroup = this.byGroup(), nodes = _this$byGroup.nodes, edges = _this$byGroup.edges;
        var numNodes = nodes.length;
        var forest = new Array(numNodes);
        var A = nodes;
        var findSetIndex = function findSetIndex2(ele) {
          for (var i3 = 0; i3 < forest.length; i3++) {
            var eles = forest[i3];
            if (eles.has(ele)) {
              return i3;
            }
          }
        };
        for (var i2 = 0; i2 < numNodes; i2++) {
          forest[i2] = this.spawn(nodes[i2]);
        }
        var S = edges.sort(function(a, b) {
          return weightFn(a) - weightFn(b);
        });
        for (var _i = 0; _i < S.length; _i++) {
          var edge = S[_i];
          var u = edge.source()[0];
          var v = edge.target()[0];
          var setUIndex = findSetIndex(u);
          var setVIndex = findSetIndex(v);
          var setU = forest[setUIndex];
          var setV = forest[setVIndex];
          if (setUIndex !== setVIndex) {
            A.merge(edge);
            setU.merge(setV);
            forest.splice(setVIndex, 1);
          }
        }
        return A;
      }
    };
    var aStarDefaults = defaults({
      root: null,
      goal: null,
      weight: function weight(edge) {
        return 1;
      },
      heuristic: function heuristic(edge) {
        return 0;
      },
      directed: false
    });
    var elesfn$3 = {
      aStar: function aStar(options) {
        var cy = this.cy();
        var _aStarDefaults = aStarDefaults(options), root = _aStarDefaults.root, goal = _aStarDefaults.goal, heuristic = _aStarDefaults.heuristic, directed = _aStarDefaults.directed, weight = _aStarDefaults.weight;
        root = cy.collection(root)[0];
        goal = cy.collection(goal)[0];
        var sid = root.id();
        var tid = goal.id();
        var gScore = {};
        var fScore = {};
        var closedSetIds = {};
        var openSet = new Heap(function(a, b) {
          return fScore[a.id()] - fScore[b.id()];
        });
        var openSetIds = new Set$1();
        var cameFrom = {};
        var cameFromEdge = {};
        var addToOpenSet = function addToOpenSet2(ele, id) {
          openSet.push(ele);
          openSetIds.add(id);
        };
        var cMin, cMinId;
        var popFromOpenSet = function popFromOpenSet2() {
          cMin = openSet.pop();
          cMinId = cMin.id();
          openSetIds["delete"](cMinId);
        };
        var isInOpenSet = function isInOpenSet2(id) {
          return openSetIds.has(id);
        };
        addToOpenSet(root, sid);
        gScore[sid] = 0;
        fScore[sid] = heuristic(root);
        var steps = 0;
        while (openSet.size() > 0) {
          popFromOpenSet();
          steps++;
          if (cMinId === tid) {
            var path = [];
            var pathNode = goal;
            var pathNodeId = tid;
            var pathEdge = cameFromEdge[pathNodeId];
            for (; ; ) {
              path.unshift(pathNode);
              if (pathEdge != null) {
                path.unshift(pathEdge);
              }
              pathNode = cameFrom[pathNodeId];
              if (pathNode == null) {
                break;
              }
              pathNodeId = pathNode.id();
              pathEdge = cameFromEdge[pathNodeId];
            }
            return {
              found: true,
              distance: gScore[cMinId],
              path: this.spawn(path),
              steps
            };
          }
          closedSetIds[cMinId] = true;
          var vwEdges = cMin._private.edges;
          for (var i2 = 0; i2 < vwEdges.length; i2++) {
            var e = vwEdges[i2];
            if (!this.hasElementWithId(e.id())) {
              continue;
            }
            if (directed && e.data("source") !== cMinId) {
              continue;
            }
            var wSrc = e.source();
            var wTgt = e.target();
            var w = wSrc.id() !== cMinId ? wSrc : wTgt;
            var wid = w.id();
            if (!this.hasElementWithId(wid)) {
              continue;
            }
            if (closedSetIds[wid]) {
              continue;
            }
            var tempScore = gScore[cMinId] + weight(e);
            if (!isInOpenSet(wid)) {
              gScore[wid] = tempScore;
              fScore[wid] = tempScore + heuristic(w);
              addToOpenSet(w, wid);
              cameFrom[wid] = cMin;
              cameFromEdge[wid] = e;
              continue;
            }
            if (tempScore < gScore[wid]) {
              gScore[wid] = tempScore;
              fScore[wid] = tempScore + heuristic(w);
              cameFrom[wid] = cMin;
            }
          }
        }
        return {
          found: false,
          distance: void 0,
          path: void 0,
          steps
        };
      }
    };
    var floydWarshallDefaults = defaults({
      weight: function weight(edge) {
        return 1;
      },
      directed: false
    });
    var elesfn$4 = {
      floydWarshall: function floydWarshall(options) {
        var cy = this.cy();
        var _floydWarshallDefault = floydWarshallDefaults(options), weight = _floydWarshallDefault.weight, directed = _floydWarshallDefault.directed;
        var weightFn = weight;
        var _this$byGroup = this.byGroup(), nodes = _this$byGroup.nodes, edges = _this$byGroup.edges;
        var N = nodes.length;
        var Nsq = N * N;
        var indexOf = function indexOf2(node) {
          return nodes.indexOf(node);
        };
        var atIndex = function atIndex2(i3) {
          return nodes[i3];
        };
        var dist2 = new Array(Nsq);
        for (var n = 0; n < Nsq; n++) {
          var j = n % N;
          var i2 = (n - j) / N;
          if (i2 === j) {
            dist2[n] = 0;
          } else {
            dist2[n] = Infinity;
          }
        }
        var next2 = new Array(Nsq);
        var edgeNext = new Array(Nsq);
        for (var _i = 0; _i < edges.length; _i++) {
          var edge = edges[_i];
          var src = edge.source()[0];
          var tgt = edge.target()[0];
          if (src === tgt) {
            continue;
          }
          var s = indexOf(src);
          var t = indexOf(tgt);
          var st = s * N + t;
          var _weight = weightFn(edge);
          if (dist2[st] > _weight) {
            dist2[st] = _weight;
            next2[st] = t;
            edgeNext[st] = edge;
          }
          if (!directed) {
            var ts = t * N + s;
            if (!directed && dist2[ts] > _weight) {
              dist2[ts] = _weight;
              next2[ts] = s;
              edgeNext[ts] = edge;
            }
          }
        }
        for (var k = 0; k < N; k++) {
          for (var _i2 = 0; _i2 < N; _i2++) {
            var ik = _i2 * N + k;
            for (var _j = 0; _j < N; _j++) {
              var ij = _i2 * N + _j;
              var kj = k * N + _j;
              if (dist2[ik] + dist2[kj] < dist2[ij]) {
                dist2[ij] = dist2[ik] + dist2[kj];
                next2[ij] = next2[ik];
              }
            }
          }
        }
        var getArgEle = function getArgEle2(ele) {
          return (string(ele) ? cy.filter(ele) : ele)[0];
        };
        var indexOfArgEle = function indexOfArgEle2(ele) {
          return indexOf(getArgEle(ele));
        };
        var res = {
          distance: function distance(from, to) {
            var i3 = indexOfArgEle(from);
            var j2 = indexOfArgEle(to);
            return dist2[i3 * N + j2];
          },
          path: function path(from, to) {
            var i3 = indexOfArgEle(from);
            var j2 = indexOfArgEle(to);
            var fromNode = atIndex(i3);
            if (i3 === j2) {
              return fromNode.collection();
            }
            if (next2[i3 * N + j2] == null) {
              return cy.collection();
            }
            var path2 = cy.collection();
            var prev = i3;
            var edge2;
            path2.merge(fromNode);
            while (i3 !== j2) {
              prev = i3;
              i3 = next2[i3 * N + j2];
              edge2 = edgeNext[prev * N + i3];
              path2.merge(edge2);
              path2.merge(atIndex(i3));
            }
            return path2;
          }
        };
        return res;
      }
    };
    var bellmanFordDefaults = defaults({
      weight: function weight(edge) {
        return 1;
      },
      directed: false,
      root: null
    });
    var elesfn$5 = {
      bellmanFord: function bellmanFord(options) {
        var _this = this;
        var _bellmanFordDefaults = bellmanFordDefaults(options), weight = _bellmanFordDefaults.weight, directed = _bellmanFordDefaults.directed, root = _bellmanFordDefaults.root;
        var weightFn = weight;
        var eles = this;
        var cy = this.cy();
        var _this$byGroup = this.byGroup(), edges = _this$byGroup.edges, nodes = _this$byGroup.nodes;
        var numNodes = nodes.length;
        var infoMap = new Map$1();
        var hasNegativeWeightCycle = false;
        var negativeWeightCycles = [];
        root = cy.collection(root)[0];
        edges.unmergeBy(function(edge2) {
          return edge2.isLoop();
        });
        var numEdges = edges.length;
        var getInfo2 = function getInfo3(node2) {
          var obj = infoMap.get(node2.id());
          if (!obj) {
            obj = {};
            infoMap.set(node2.id(), obj);
          }
          return obj;
        };
        var getNodeFromTo = function getNodeFromTo2(to) {
          return (string(to) ? cy.$(to) : to)[0];
        };
        var distanceTo = function distanceTo2(to) {
          return getInfo2(getNodeFromTo(to)).dist;
        };
        var pathTo = function pathTo2(to) {
          var thisStart = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : root;
          var end = getNodeFromTo(to);
          var path = [];
          var node2 = end;
          for (; ; ) {
            if (node2 == null) {
              return _this.spawn();
            }
            var _getInfo = getInfo2(node2), edge2 = _getInfo.edge, pred = _getInfo.pred;
            path.unshift(node2[0]);
            if (node2.same(thisStart) && path.length > 0) {
              break;
            }
            if (edge2 != null) {
              path.unshift(edge2);
            }
            node2 = pred;
          }
          return eles.spawn(path);
        };
        for (var i2 = 0; i2 < numNodes; i2++) {
          var node = nodes[i2];
          var info = getInfo2(node);
          if (node.same(root)) {
            info.dist = 0;
          } else {
            info.dist = Infinity;
          }
          info.pred = null;
          info.edge = null;
        }
        var replacedEdge = false;
        var checkForEdgeReplacement = function checkForEdgeReplacement2(node1, node2, edge2, info1, info2, weight2) {
          var dist2 = info1.dist + weight2;
          if (dist2 < info2.dist && !edge2.same(info1.edge)) {
            info2.dist = dist2;
            info2.pred = node1;
            info2.edge = edge2;
            replacedEdge = true;
          }
        };
        for (var _i = 1; _i < numNodes; _i++) {
          replacedEdge = false;
          for (var e = 0; e < numEdges; e++) {
            var edge = edges[e];
            var src = edge.source();
            var tgt = edge.target();
            var _weight = weightFn(edge);
            var srcInfo = getInfo2(src);
            var tgtInfo = getInfo2(tgt);
            checkForEdgeReplacement(src, tgt, edge, srcInfo, tgtInfo, _weight);
            if (!directed) {
              checkForEdgeReplacement(tgt, src, edge, tgtInfo, srcInfo, _weight);
            }
          }
          if (!replacedEdge) {
            break;
          }
        }
        if (replacedEdge) {
          for (var _e = 0; _e < numEdges; _e++) {
            var _edge = edges[_e];
            var _src = _edge.source();
            var _tgt = _edge.target();
            var _weight2 = weightFn(_edge);
            var srcDist = getInfo2(_src).dist;
            var tgtDist = getInfo2(_tgt).dist;
            if (srcDist + _weight2 < tgtDist || !directed && tgtDist + _weight2 < srcDist) {
              warn("Graph contains a negative weight cycle for Bellman-Ford");
              hasNegativeWeightCycle = true;
              break;
            }
          }
        }
        return {
          distanceTo,
          pathTo,
          hasNegativeWeightCycle,
          negativeWeightCycles
        };
      }
    };
    var sqrt2 = Math.sqrt(2);
    var collapse = function collapse2(edgeIndex, nodeMap, remainingEdges) {
      if (remainingEdges.length === 0) {
        error("Karger-Stein must be run on a connected (sub)graph");
      }
      var edgeInfo = remainingEdges[edgeIndex];
      var sourceIn = edgeInfo[1];
      var targetIn = edgeInfo[2];
      var partition1 = nodeMap[sourceIn];
      var partition2 = nodeMap[targetIn];
      var newEdges = remainingEdges;
      for (var i2 = newEdges.length - 1; i2 >= 0; i2--) {
        var edge = newEdges[i2];
        var src = edge[1];
        var tgt = edge[2];
        if (nodeMap[src] === partition1 && nodeMap[tgt] === partition2 || nodeMap[src] === partition2 && nodeMap[tgt] === partition1) {
          newEdges.splice(i2, 1);
        }
      }
      for (var _i = 0; _i < newEdges.length; _i++) {
        var _edge = newEdges[_i];
        if (_edge[1] === partition2) {
          newEdges[_i] = _edge.slice();
          newEdges[_i][1] = partition1;
        } else if (_edge[2] === partition2) {
          newEdges[_i] = _edge.slice();
          newEdges[_i][2] = partition1;
        }
      }
      for (var _i2 = 0; _i2 < nodeMap.length; _i2++) {
        if (nodeMap[_i2] === partition2) {
          nodeMap[_i2] = partition1;
        }
      }
      return newEdges;
    };
    var contractUntil = function contractUntil2(metaNodeMap, remainingEdges, size, sizeLimit) {
      while (size > sizeLimit) {
        var edgeIndex = Math.floor(Math.random() * remainingEdges.length);
        remainingEdges = collapse(edgeIndex, metaNodeMap, remainingEdges);
        size--;
      }
      return remainingEdges;
    };
    var elesfn$6 = {
      kargerStein: function kargerStein() {
        var _this = this;
        var _this$byGroup = this.byGroup(), nodes = _this$byGroup.nodes, edges = _this$byGroup.edges;
        edges.unmergeBy(function(edge) {
          return edge.isLoop();
        });
        var numNodes = nodes.length;
        var numEdges = edges.length;
        var numIter = Math.ceil(Math.pow(Math.log(numNodes) / Math.LN2, 2));
        var stopSize = Math.floor(numNodes / sqrt2);
        if (numNodes < 2) {
          error("At least 2 nodes are required for Karger-Stein algorithm");
          return void 0;
        }
        var edgeIndexes = [];
        for (var i2 = 0; i2 < numEdges; i2++) {
          var e = edges[i2];
          edgeIndexes.push([i2, nodes.indexOf(e.source()), nodes.indexOf(e.target())]);
        }
        var minCutSize = Infinity;
        var minCutEdgeIndexes = [];
        var minCutNodeMap = new Array(numNodes);
        var metaNodeMap = new Array(numNodes);
        var metaNodeMap2 = new Array(numNodes);
        var copyNodesMap = function copyNodesMap2(from, to) {
          for (var _i3 = 0; _i3 < numNodes; _i3++) {
            to[_i3] = from[_i3];
          }
        };
        for (var iter = 0; iter <= numIter; iter++) {
          for (var _i4 = 0; _i4 < numNodes; _i4++) {
            metaNodeMap[_i4] = _i4;
          }
          var edgesState = contractUntil(metaNodeMap, edgeIndexes.slice(), numNodes, stopSize);
          var edgesState2 = edgesState.slice();
          copyNodesMap(metaNodeMap, metaNodeMap2);
          var res1 = contractUntil(metaNodeMap, edgesState, stopSize, 2);
          var res2 = contractUntil(metaNodeMap2, edgesState2, stopSize, 2);
          if (res1.length <= res2.length && res1.length < minCutSize) {
            minCutSize = res1.length;
            minCutEdgeIndexes = res1;
            copyNodesMap(metaNodeMap, minCutNodeMap);
          } else if (res2.length <= res1.length && res2.length < minCutSize) {
            minCutSize = res2.length;
            minCutEdgeIndexes = res2;
            copyNodesMap(metaNodeMap2, minCutNodeMap);
          }
        }
        var cut = this.spawn(minCutEdgeIndexes.map(function(e2) {
          return edges[e2[0]];
        }));
        var partition1 = this.spawn();
        var partition2 = this.spawn();
        var witnessNodePartition = minCutNodeMap[0];
        for (var _i5 = 0; _i5 < minCutNodeMap.length; _i5++) {
          var partitionId = minCutNodeMap[_i5];
          var node = nodes[_i5];
          if (partitionId === witnessNodePartition) {
            partition1.merge(node);
          } else {
            partition2.merge(node);
          }
        }
        var constructComponent = function constructComponent2(subset) {
          var component = _this.spawn();
          subset.forEach(function(node2) {
            component.merge(node2);
            node2.connectedEdges().forEach(function(edge) {
              if (_this.contains(edge) && !cut.contains(edge)) {
                component.merge(edge);
              }
            });
          });
          return component;
        };
        var components = [constructComponent(partition1), constructComponent(partition2)];
        var ret = {
          cut,
          components,
          partition1,
          partition2
        };
        return ret;
      }
    };
    var copyPosition = function copyPosition2(p2) {
      return {
        x: p2.x,
        y: p2.y
      };
    };
    var modelToRenderedPosition = function modelToRenderedPosition2(p2, zoom, pan) {
      return {
        x: p2.x * zoom + pan.x,
        y: p2.y * zoom + pan.y
      };
    };
    var renderedToModelPosition = function renderedToModelPosition2(p2, zoom, pan) {
      return {
        x: (p2.x - pan.x) / zoom,
        y: (p2.y - pan.y) / zoom
      };
    };
    var array2point = function array2point2(arr) {
      return {
        x: arr[0],
        y: arr[1]
      };
    };
    var min = function min2(arr) {
      var begin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : arr.length;
      var min3 = Infinity;
      for (var i2 = begin; i2 < end; i2++) {
        var val = arr[i2];
        if (isFinite(val)) {
          min3 = Math.min(val, min3);
        }
      }
      return min3;
    };
    var max = function max2(arr) {
      var begin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : arr.length;
      var max3 = -Infinity;
      for (var i2 = begin; i2 < end; i2++) {
        var val = arr[i2];
        if (isFinite(val)) {
          max3 = Math.max(val, max3);
        }
      }
      return max3;
    };
    var mean = function mean2(arr) {
      var begin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : arr.length;
      var total = 0;
      var n = 0;
      for (var i2 = begin; i2 < end; i2++) {
        var val = arr[i2];
        if (isFinite(val)) {
          total += val;
          n++;
        }
      }
      return total / n;
    };
    var median = function median2(arr) {
      var begin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : arr.length;
      var copy2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
      var sort = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
      var includeHoles = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
      if (copy2) {
        arr = arr.slice(begin, end);
      } else {
        if (end < arr.length) {
          arr.splice(end, arr.length - end);
        }
        if (begin > 0) {
          arr.splice(0, begin);
        }
      }
      var off = 0;
      for (var i2 = arr.length - 1; i2 >= 0; i2--) {
        var v = arr[i2];
        if (includeHoles) {
          if (!isFinite(v)) {
            arr[i2] = -Infinity;
            off++;
          }
        } else {
          arr.splice(i2, 1);
        }
      }
      if (sort) {
        arr.sort(function(a, b) {
          return a - b;
        });
      }
      var len = arr.length;
      var mid = Math.floor(len / 2);
      if (len % 2 !== 0) {
        return arr[mid + 1 + off];
      } else {
        return (arr[mid - 1 + off] + arr[mid + off]) / 2;
      }
    };
    var deg2rad = function deg2rad2(deg) {
      return Math.PI * deg / 180;
    };
    var getAngleFromDisp = function getAngleFromDisp2(dispX, dispY) {
      return Math.atan2(dispY, dispX) - Math.PI / 2;
    };
    var log2 = Math.log2 || function(n) {
      return Math.log(n) / Math.log(2);
    };
    var signum = function signum2(x) {
      if (x > 0) {
        return 1;
      } else if (x < 0) {
        return -1;
      } else {
        return 0;
      }
    };
    var dist = function dist2(p1, p2) {
      return Math.sqrt(sqdist(p1, p2));
    };
    var sqdist = function sqdist2(p1, p2) {
      var dx = p2.x - p1.x;
      var dy = p2.y - p1.y;
      return dx * dx + dy * dy;
    };
    var inPlaceSumNormalize = function inPlaceSumNormalize2(v) {
      var length = v.length;
      var total = 0;
      for (var i2 = 0; i2 < length; i2++) {
        total += v[i2];
      }
      for (var _i = 0; _i < length; _i++) {
        v[_i] = v[_i] / total;
      }
      return v;
    };
    var qbezierAt = function qbezierAt2(p0, p1, p2, t) {
      return (1 - t) * (1 - t) * p0 + 2 * (1 - t) * t * p1 + t * t * p2;
    };
    var qbezierPtAt = function qbezierPtAt2(p0, p1, p2, t) {
      return {
        x: qbezierAt(p0.x, p1.x, p2.x, t),
        y: qbezierAt(p0.y, p1.y, p2.y, t)
      };
    };
    var lineAt = function lineAt2(p0, p1, t, d) {
      var vec = {
        x: p1.x - p0.x,
        y: p1.y - p0.y
      };
      var vecDist = dist(p0, p1);
      var normVec = {
        x: vec.x / vecDist,
        y: vec.y / vecDist
      };
      t = t == null ? 0 : t;
      d = d != null ? d : t * vecDist;
      return {
        x: p0.x + normVec.x * d,
        y: p0.y + normVec.y * d
      };
    };
    var bound = function bound2(min2, val, max2) {
      return Math.max(min2, Math.min(max2, val));
    };
    var makeBoundingBox = function makeBoundingBox2(bb) {
      if (bb == null) {
        return {
          x1: Infinity,
          y1: Infinity,
          x2: -Infinity,
          y2: -Infinity,
          w: 0,
          h: 0
        };
      } else if (bb.x1 != null && bb.y1 != null) {
        if (bb.x2 != null && bb.y2 != null && bb.x2 >= bb.x1 && bb.y2 >= bb.y1) {
          return {
            x1: bb.x1,
            y1: bb.y1,
            x2: bb.x2,
            y2: bb.y2,
            w: bb.x2 - bb.x1,
            h: bb.y2 - bb.y1
          };
        } else if (bb.w != null && bb.h != null && bb.w >= 0 && bb.h >= 0) {
          return {
            x1: bb.x1,
            y1: bb.y1,
            x2: bb.x1 + bb.w,
            y2: bb.y1 + bb.h,
            w: bb.w,
            h: bb.h
          };
        }
      }
    };
    var copyBoundingBox = function copyBoundingBox2(bb) {
      return {
        x1: bb.x1,
        x2: bb.x2,
        w: bb.w,
        y1: bb.y1,
        y2: bb.y2,
        h: bb.h
      };
    };
    var clearBoundingBox = function clearBoundingBox2(bb) {
      bb.x1 = Infinity;
      bb.y1 = Infinity;
      bb.x2 = -Infinity;
      bb.y2 = -Infinity;
      bb.w = 0;
      bb.h = 0;
    };
    var updateBoundingBox = function updateBoundingBox2(bb1, bb2) {
      bb1.x1 = Math.min(bb1.x1, bb2.x1);
      bb1.x2 = Math.max(bb1.x2, bb2.x2);
      bb1.w = bb1.x2 - bb1.x1;
      bb1.y1 = Math.min(bb1.y1, bb2.y1);
      bb1.y2 = Math.max(bb1.y2, bb2.y2);
      bb1.h = bb1.y2 - bb1.y1;
    };
    var expandBoundingBoxByPoint = function expandBoundingBoxByPoint2(bb, x, y) {
      bb.x1 = Math.min(bb.x1, x);
      bb.x2 = Math.max(bb.x2, x);
      bb.w = bb.x2 - bb.x1;
      bb.y1 = Math.min(bb.y1, y);
      bb.y2 = Math.max(bb.y2, y);
      bb.h = bb.y2 - bb.y1;
    };
    var expandBoundingBox = function expandBoundingBox2(bb) {
      var padding = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      bb.x1 -= padding;
      bb.x2 += padding;
      bb.y1 -= padding;
      bb.y2 += padding;
      bb.w = bb.x2 - bb.x1;
      bb.h = bb.y2 - bb.y1;
      return bb;
    };
    var expandBoundingBoxSides = function expandBoundingBoxSides2(bb) {
      var padding = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [0];
      var top, right, bottom, left;
      if (padding.length === 1) {
        top = right = bottom = left = padding[0];
      } else if (padding.length === 2) {
        top = bottom = padding[0];
        left = right = padding[1];
      } else if (padding.length === 4) {
        var _padding = _slicedToArray(padding, 4);
        top = _padding[0];
        right = _padding[1];
        bottom = _padding[2];
        left = _padding[3];
      }
      bb.x1 -= left;
      bb.x2 += right;
      bb.y1 -= top;
      bb.y2 += bottom;
      bb.w = bb.x2 - bb.x1;
      bb.h = bb.y2 - bb.y1;
      return bb;
    };
    var assignBoundingBox = function assignBoundingBox2(bb1, bb2) {
      bb1.x1 = bb2.x1;
      bb1.y1 = bb2.y1;
      bb1.x2 = bb2.x2;
      bb1.y2 = bb2.y2;
      bb1.w = bb1.x2 - bb1.x1;
      bb1.h = bb1.y2 - bb1.y1;
    };
    var assignShiftToBoundingBox = function assignShiftToBoundingBox2(bb, delta) {
      bb.x1 += delta.x;
      bb.x2 += delta.x;
      bb.y1 += delta.y;
      bb.y2 += delta.y;
    };
    var boundingBoxesIntersect = function boundingBoxesIntersect2(bb1, bb2) {
      if (bb1.x1 > bb2.x2) {
        return false;
      }
      if (bb2.x1 > bb1.x2) {
        return false;
      }
      if (bb1.x2 < bb2.x1) {
        return false;
      }
      if (bb2.x2 < bb1.x1) {
        return false;
      }
      if (bb1.y2 < bb2.y1) {
        return false;
      }
      if (bb2.y2 < bb1.y1) {
        return false;
      }
      if (bb1.y1 > bb2.y2) {
        return false;
      }
      if (bb2.y1 > bb1.y2) {
        return false;
      }
      return true;
    };
    var inBoundingBox = function inBoundingBox2(bb, x, y) {
      return bb.x1 <= x && x <= bb.x2 && bb.y1 <= y && y <= bb.y2;
    };
    var pointInBoundingBox = function pointInBoundingBox2(bb, pt) {
      return inBoundingBox(bb, pt.x, pt.y);
    };
    var boundingBoxInBoundingBox = function boundingBoxInBoundingBox2(bb1, bb2) {
      return inBoundingBox(bb1, bb2.x1, bb2.y1) && inBoundingBox(bb1, bb2.x2, bb2.y2);
    };
    var roundRectangleIntersectLine = function roundRectangleIntersectLine2(x, y, nodeX, nodeY, width, height, padding) {
      var cornerRadius = getRoundRectangleRadius(width, height);
      var halfWidth = width / 2;
      var halfHeight = height / 2;
      var straightLineIntersections;
      {
        var topStartX = nodeX - halfWidth + cornerRadius - padding;
        var topStartY = nodeY - halfHeight - padding;
        var topEndX = nodeX + halfWidth - cornerRadius + padding;
        var topEndY = topStartY;
        straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);
        if (straightLineIntersections.length > 0) {
          return straightLineIntersections;
        }
      }
      {
        var rightStartX = nodeX + halfWidth + padding;
        var rightStartY = nodeY - halfHeight + cornerRadius - padding;
        var rightEndX = rightStartX;
        var rightEndY = nodeY + halfHeight - cornerRadius + padding;
        straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);
        if (straightLineIntersections.length > 0) {
          return straightLineIntersections;
        }
      }
      {
        var bottomStartX = nodeX - halfWidth + cornerRadius - padding;
        var bottomStartY = nodeY + halfHeight + padding;
        var bottomEndX = nodeX + halfWidth - cornerRadius + padding;
        var bottomEndY = bottomStartY;
        straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);
        if (straightLineIntersections.length > 0) {
          return straightLineIntersections;
        }
      }
      {
        var leftStartX = nodeX - halfWidth - padding;
        var leftStartY = nodeY - halfHeight + cornerRadius - padding;
        var leftEndX = leftStartX;
        var leftEndY = nodeY + halfHeight - cornerRadius + padding;
        straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);
        if (straightLineIntersections.length > 0) {
          return straightLineIntersections;
        }
      }
      var arcIntersections;
      {
        var topLeftCenterX = nodeX - halfWidth + cornerRadius;
        var topLeftCenterY = nodeY - halfHeight + cornerRadius;
        arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, topLeftCenterX, topLeftCenterY, cornerRadius + padding);
        if (arcIntersections.length > 0 && arcIntersections[0] <= topLeftCenterX && arcIntersections[1] <= topLeftCenterY) {
          return [arcIntersections[0], arcIntersections[1]];
        }
      }
      {
        var topRightCenterX = nodeX + halfWidth - cornerRadius;
        var topRightCenterY = nodeY - halfHeight + cornerRadius;
        arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, topRightCenterX, topRightCenterY, cornerRadius + padding);
        if (arcIntersections.length > 0 && arcIntersections[0] >= topRightCenterX && arcIntersections[1] <= topRightCenterY) {
          return [arcIntersections[0], arcIntersections[1]];
        }
      }
      {
        var bottomRightCenterX = nodeX + halfWidth - cornerRadius;
        var bottomRightCenterY = nodeY + halfHeight - cornerRadius;
        arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding);
        if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {
          return [arcIntersections[0], arcIntersections[1]];
        }
      }
      {
        var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;
        var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;
        arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding);
        if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {
          return [arcIntersections[0], arcIntersections[1]];
        }
      }
      return [];
    };
    var inLineVicinity = function inLineVicinity2(x, y, lx1, ly1, lx2, ly2, tolerance) {
      var t = tolerance;
      var x1 = Math.min(lx1, lx2);
      var x2 = Math.max(lx1, lx2);
      var y1 = Math.min(ly1, ly2);
      var y2 = Math.max(ly1, ly2);
      return x1 - t <= x && x <= x2 + t && y1 - t <= y && y <= y2 + t;
    };
    var inBezierVicinity = function inBezierVicinity2(x, y, x1, y1, x2, y2, x3, y3, tolerance) {
      var bb = {
        x1: Math.min(x1, x3, x2) - tolerance,
        x2: Math.max(x1, x3, x2) + tolerance,
        y1: Math.min(y1, y3, y2) - tolerance,
        y2: Math.max(y1, y3, y2) + tolerance
      };
      if (x < bb.x1 || x > bb.x2 || y < bb.y1 || y > bb.y2) {
        return false;
      } else {
        return true;
      }
    };
    var solveQuadratic = function solveQuadratic2(a, b, c, val) {
      c -= val;
      var r = b * b - 4 * a * c;
      if (r < 0) {
        return [];
      }
      var sqrtR = Math.sqrt(r);
      var denom = 2 * a;
      var root1 = (-b + sqrtR) / denom;
      var root2 = (-b - sqrtR) / denom;
      return [root1, root2];
    };
    var solveCubic = function solveCubic2(a, b, c, d, result) {
      var epsilon = 1e-5;
      if (a === 0) {
        a = epsilon;
      }
      b /= a;
      c /= a;
      d /= a;
      var discriminant, q, r, dum1, s, t, term1, r13;
      q = (3 * c - b * b) / 9;
      r = -(27 * d) + b * (9 * c - 2 * (b * b));
      r /= 54;
      discriminant = q * q * q + r * r;
      result[1] = 0;
      term1 = b / 3;
      if (discriminant > 0) {
        s = r + Math.sqrt(discriminant);
        s = s < 0 ? -Math.pow(-s, 1 / 3) : Math.pow(s, 1 / 3);
        t = r - Math.sqrt(discriminant);
        t = t < 0 ? -Math.pow(-t, 1 / 3) : Math.pow(t, 1 / 3);
        result[0] = -term1 + s + t;
        term1 += (s + t) / 2;
        result[4] = result[2] = -term1;
        term1 = Math.sqrt(3) * (-t + s) / 2;
        result[3] = term1;
        result[5] = -term1;
        return;
      }
      result[5] = result[3] = 0;
      if (discriminant === 0) {
        r13 = r < 0 ? -Math.pow(-r, 1 / 3) : Math.pow(r, 1 / 3);
        result[0] = -term1 + 2 * r13;
        result[4] = result[2] = -(r13 + term1);
        return;
      }
      q = -q;
      dum1 = q * q * q;
      dum1 = Math.acos(r / Math.sqrt(dum1));
      r13 = 2 * Math.sqrt(q);
      result[0] = -term1 + r13 * Math.cos(dum1 / 3);
      result[2] = -term1 + r13 * Math.cos((dum1 + 2 * Math.PI) / 3);
      result[4] = -term1 + r13 * Math.cos((dum1 + 4 * Math.PI) / 3);
      return;
    };
    var sqdistToQuadraticBezier = function sqdistToQuadraticBezier2(x, y, x1, y1, x2, y2, x3, y3) {
      var a = 1 * x1 * x1 - 4 * x1 * x2 + 2 * x1 * x3 + 4 * x2 * x2 - 4 * x2 * x3 + x3 * x3 + y1 * y1 - 4 * y1 * y2 + 2 * y1 * y3 + 4 * y2 * y2 - 4 * y2 * y3 + y3 * y3;
      var b = 1 * 9 * x1 * x2 - 3 * x1 * x1 - 3 * x1 * x3 - 6 * x2 * x2 + 3 * x2 * x3 + 9 * y1 * y2 - 3 * y1 * y1 - 3 * y1 * y3 - 6 * y2 * y2 + 3 * y2 * y3;
      var c = 1 * 3 * x1 * x1 - 6 * x1 * x2 + x1 * x3 - x1 * x + 2 * x2 * x2 + 2 * x2 * x - x3 * x + 3 * y1 * y1 - 6 * y1 * y2 + y1 * y3 - y1 * y + 2 * y2 * y2 + 2 * y2 * y - y3 * y;
      var d = 1 * x1 * x2 - x1 * x1 + x1 * x - x2 * x + y1 * y2 - y1 * y1 + y1 * y - y2 * y;
      var roots = [];
      solveCubic(a, b, c, d, roots);
      var zeroThreshold = 1e-7;
      var params = [];
      for (var index = 0; index < 6; index += 2) {
        if (Math.abs(roots[index + 1]) < zeroThreshold && roots[index] >= 0 && roots[index] <= 1) {
          params.push(roots[index]);
        }
      }
      params.push(1);
      params.push(0);
      var minDistanceSquared = -1;
      var curX, curY, distSquared;
      for (var i2 = 0; i2 < params.length; i2++) {
        curX = Math.pow(1 - params[i2], 2) * x1 + 2 * (1 - params[i2]) * params[i2] * x2 + params[i2] * params[i2] * x3;
        curY = Math.pow(1 - params[i2], 2) * y1 + 2 * (1 - params[i2]) * params[i2] * y2 + params[i2] * params[i2] * y3;
        distSquared = Math.pow(curX - x, 2) + Math.pow(curY - y, 2);
        if (minDistanceSquared >= 0) {
          if (distSquared < minDistanceSquared) {
            minDistanceSquared = distSquared;
          }
        } else {
          minDistanceSquared = distSquared;
        }
      }
      return minDistanceSquared;
    };
    var sqdistToFiniteLine = function sqdistToFiniteLine2(x, y, x1, y1, x2, y2) {
      var offset = [x - x1, y - y1];
      var line = [x2 - x1, y2 - y1];
      var lineSq = line[0] * line[0] + line[1] * line[1];
      var hypSq = offset[0] * offset[0] + offset[1] * offset[1];
      var dotProduct = offset[0] * line[0] + offset[1] * line[1];
      var adjSq = dotProduct * dotProduct / lineSq;
      if (dotProduct < 0) {
        return hypSq;
      }
      if (adjSq > lineSq) {
        return (x - x2) * (x - x2) + (y - y2) * (y - y2);
      }
      return hypSq - adjSq;
    };
    var pointInsidePolygonPoints = function pointInsidePolygonPoints2(x, y, points) {
      var x1, y1, x2, y2;
      var y3;
      var up = 0;
      for (var i2 = 0; i2 < points.length / 2; i2++) {
        x1 = points[i2 * 2];
        y1 = points[i2 * 2 + 1];
        if (i2 + 1 < points.length / 2) {
          x2 = points[(i2 + 1) * 2];
          y2 = points[(i2 + 1) * 2 + 1];
        } else {
          x2 = points[(i2 + 1 - points.length / 2) * 2];
          y2 = points[(i2 + 1 - points.length / 2) * 2 + 1];
        }
        if (x1 == x && x2 == x)
          ;
        else if (x1 >= x && x >= x2 || x1 <= x && x <= x2) {
          y3 = (x - x1) / (x2 - x1) * (y2 - y1) + y1;
          if (y3 > y) {
            up++;
          }
        } else {
          continue;
        }
      }
      if (up % 2 === 0) {
        return false;
      } else {
        return true;
      }
    };
    var pointInsidePolygon = function pointInsidePolygon2(x, y, basePoints, centerX, centerY, width, height, direction, padding) {
      var transformedPoints = new Array(basePoints.length);
      var angle;
      if (direction[0] != null) {
        angle = Math.atan(direction[1] / direction[0]);
        if (direction[0] < 0) {
          angle = angle + Math.PI / 2;
        } else {
          angle = -angle - Math.PI / 2;
        }
      } else {
        angle = direction;
      }
      var cos2 = Math.cos(-angle);
      var sin2 = Math.sin(-angle);
      for (var i2 = 0; i2 < transformedPoints.length / 2; i2++) {
        transformedPoints[i2 * 2] = width / 2 * (basePoints[i2 * 2] * cos2 - basePoints[i2 * 2 + 1] * sin2);
        transformedPoints[i2 * 2 + 1] = height / 2 * (basePoints[i2 * 2 + 1] * cos2 + basePoints[i2 * 2] * sin2);
        transformedPoints[i2 * 2] += centerX;
        transformedPoints[i2 * 2 + 1] += centerY;
      }
      var points;
      if (padding > 0) {
        var expandedLineSet = expandPolygon(transformedPoints, -padding);
        points = joinLines(expandedLineSet);
      } else {
        points = transformedPoints;
      }
      return pointInsidePolygonPoints(x, y, points);
    };
    var pointInsideRoundPolygon = function pointInsideRoundPolygon2(x, y, basePoints, centerX, centerY, width, height) {
      var cutPolygonPoints = new Array(basePoints.length);
      var halfW = width / 2;
      var halfH = height / 2;
      var cornerRadius = getRoundPolygonRadius(width, height);
      var squaredCornerRadius = cornerRadius * cornerRadius;
      for (var i2 = 0; i2 < basePoints.length / 4; i2++) {
        var sourceUv = void 0, destUv = void 0;
        if (i2 === 0) {
          sourceUv = basePoints.length - 2;
        } else {
          sourceUv = i2 * 4 - 2;
        }
        destUv = i2 * 4 + 2;
        var px = centerX + halfW * basePoints[i2 * 4];
        var py = centerY + halfH * basePoints[i2 * 4 + 1];
        var cosTheta = -basePoints[sourceUv] * basePoints[destUv] - basePoints[sourceUv + 1] * basePoints[destUv + 1];
        var offset = cornerRadius / Math.tan(Math.acos(cosTheta) / 2);
        var cp0x = px - offset * basePoints[sourceUv];
        var cp0y = py - offset * basePoints[sourceUv + 1];
        var cp1x = px + offset * basePoints[destUv];
        var cp1y = py + offset * basePoints[destUv + 1];
        cutPolygonPoints[i2 * 4] = cp0x;
        cutPolygonPoints[i2 * 4 + 1] = cp0y;
        cutPolygonPoints[i2 * 4 + 2] = cp1x;
        cutPolygonPoints[i2 * 4 + 3] = cp1y;
        var orthx = basePoints[sourceUv + 1];
        var orthy = -basePoints[sourceUv];
        var cosAlpha = orthx * basePoints[destUv] + orthy * basePoints[destUv + 1];
        if (cosAlpha < 0) {
          orthx *= -1;
          orthy *= -1;
        }
        var cx = cp0x + orthx * cornerRadius;
        var cy = cp0y + orthy * cornerRadius;
        var squaredDistance = Math.pow(cx - x, 2) + Math.pow(cy - y, 2);
        if (squaredDistance <= squaredCornerRadius) {
          return true;
        }
      }
      return pointInsidePolygonPoints(x, y, cutPolygonPoints);
    };
    var joinLines = function joinLines2(lineSet) {
      var vertices = new Array(lineSet.length / 2);
      var currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY;
      var nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY;
      for (var i2 = 0; i2 < lineSet.length / 4; i2++) {
        currentLineStartX = lineSet[i2 * 4];
        currentLineStartY = lineSet[i2 * 4 + 1];
        currentLineEndX = lineSet[i2 * 4 + 2];
        currentLineEndY = lineSet[i2 * 4 + 3];
        if (i2 < lineSet.length / 4 - 1) {
          nextLineStartX = lineSet[(i2 + 1) * 4];
          nextLineStartY = lineSet[(i2 + 1) * 4 + 1];
          nextLineEndX = lineSet[(i2 + 1) * 4 + 2];
          nextLineEndY = lineSet[(i2 + 1) * 4 + 3];
        } else {
          nextLineStartX = lineSet[0];
          nextLineStartY = lineSet[1];
          nextLineEndX = lineSet[2];
          nextLineEndY = lineSet[3];
        }
        var intersection = finiteLinesIntersect(currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY, nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY, true);
        vertices[i2 * 2] = intersection[0];
        vertices[i2 * 2 + 1] = intersection[1];
      }
      return vertices;
    };
    var expandPolygon = function expandPolygon2(points, pad) {
      var expandedLineSet = new Array(points.length * 2);
      var currentPointX, currentPointY, nextPointX, nextPointY;
      for (var i2 = 0; i2 < points.length / 2; i2++) {
        currentPointX = points[i2 * 2];
        currentPointY = points[i2 * 2 + 1];
        if (i2 < points.length / 2 - 1) {
          nextPointX = points[(i2 + 1) * 2];
          nextPointY = points[(i2 + 1) * 2 + 1];
        } else {
          nextPointX = points[0];
          nextPointY = points[1];
        }
        var offsetX = nextPointY - currentPointY;
        var offsetY = -(nextPointX - currentPointX);
        var offsetLength = Math.sqrt(offsetX * offsetX + offsetY * offsetY);
        var normalizedOffsetX = offsetX / offsetLength;
        var normalizedOffsetY = offsetY / offsetLength;
        expandedLineSet[i2 * 4] = currentPointX + normalizedOffsetX * pad;
        expandedLineSet[i2 * 4 + 1] = currentPointY + normalizedOffsetY * pad;
        expandedLineSet[i2 * 4 + 2] = nextPointX + normalizedOffsetX * pad;
        expandedLineSet[i2 * 4 + 3] = nextPointY + normalizedOffsetY * pad;
      }
      return expandedLineSet;
    };
    var intersectLineEllipse = function intersectLineEllipse2(x, y, centerX, centerY, ellipseWradius, ellipseHradius) {
      var dispX = centerX - x;
      var dispY = centerY - y;
      dispX /= ellipseWradius;
      dispY /= ellipseHradius;
      var len = Math.sqrt(dispX * dispX + dispY * dispY);
      var newLength = len - 1;
      if (newLength < 0) {
        return [];
      }
      var lenProportion = newLength / len;
      return [(centerX - x) * lenProportion + x, (centerY - y) * lenProportion + y];
    };
    var checkInEllipse = function checkInEllipse2(x, y, width, height, centerX, centerY, padding) {
      x -= centerX;
      y -= centerY;
      x /= width / 2 + padding;
      y /= height / 2 + padding;
      return x * x + y * y <= 1;
    };
    var intersectLineCircle = function intersectLineCircle2(x1, y1, x2, y2, centerX, centerY, radius) {
      var d = [x2 - x1, y2 - y1];
      var f = [x1 - centerX, y1 - centerY];
      var a = d[0] * d[0] + d[1] * d[1];
      var b = 2 * (f[0] * d[0] + f[1] * d[1]);
      var c = f[0] * f[0] + f[1] * f[1] - radius * radius;
      var discriminant = b * b - 4 * a * c;
      if (discriminant < 0) {
        return [];
      }
      var t1 = (-b + Math.sqrt(discriminant)) / (2 * a);
      var t2 = (-b - Math.sqrt(discriminant)) / (2 * a);
      var tMin = Math.min(t1, t2);
      var tMax = Math.max(t1, t2);
      var inRangeParams = [];
      if (tMin >= 0 && tMin <= 1) {
        inRangeParams.push(tMin);
      }
      if (tMax >= 0 && tMax <= 1) {
        inRangeParams.push(tMax);
      }
      if (inRangeParams.length === 0) {
        return [];
      }
      var nearIntersectionX = inRangeParams[0] * d[0] + x1;
      var nearIntersectionY = inRangeParams[0] * d[1] + y1;
      if (inRangeParams.length > 1) {
        if (inRangeParams[0] == inRangeParams[1]) {
          return [nearIntersectionX, nearIntersectionY];
        } else {
          var farIntersectionX = inRangeParams[1] * d[0] + x1;
          var farIntersectionY = inRangeParams[1] * d[1] + y1;
          return [nearIntersectionX, nearIntersectionY, farIntersectionX, farIntersectionY];
        }
      } else {
        return [nearIntersectionX, nearIntersectionY];
      }
    };
    var midOfThree = function midOfThree2(a, b, c) {
      if (b <= a && a <= c || c <= a && a <= b) {
        return a;
      } else if (a <= b && b <= c || c <= b && b <= a) {
        return b;
      } else {
        return c;
      }
    };
    var finiteLinesIntersect = function finiteLinesIntersect2(x1, y1, x2, y2, x3, y3, x4, y4, infiniteLines) {
      var dx13 = x1 - x3;
      var dx21 = x2 - x1;
      var dx43 = x4 - x3;
      var dy13 = y1 - y3;
      var dy21 = y2 - y1;
      var dy43 = y4 - y3;
      var ua_t = dx43 * dy13 - dy43 * dx13;
      var ub_t = dx21 * dy13 - dy21 * dx13;
      var u_b = dy43 * dx21 - dx43 * dy21;
      if (u_b !== 0) {
        var ua = ua_t / u_b;
        var ub = ub_t / u_b;
        var flptThreshold = 1e-3;
        var _min = 0 - flptThreshold;
        var _max = 1 + flptThreshold;
        if (_min <= ua && ua <= _max && _min <= ub && ub <= _max) {
          return [x1 + ua * dx21, y1 + ua * dy21];
        } else {
          if (!infiniteLines) {
            return [];
          } else {
            return [x1 + ua * dx21, y1 + ua * dy21];
          }
        }
      } else {
        if (ua_t === 0 || ub_t === 0) {
          if (midOfThree(x1, x2, x4) === x4) {
            return [x4, y4];
          }
          if (midOfThree(x1, x2, x3) === x3) {
            return [x3, y3];
          }
          if (midOfThree(x3, x4, x2) === x2) {
            return [x2, y2];
          }
          return [];
        } else {
          return [];
        }
      }
    };
    var polygonIntersectLine = function polygonIntersectLine2(x, y, basePoints, centerX, centerY, width, height, padding) {
      var intersections = [];
      var intersection;
      var transformedPoints = new Array(basePoints.length);
      var doTransform = true;
      if (width == null) {
        doTransform = false;
      }
      var points;
      if (doTransform) {
        for (var i2 = 0; i2 < transformedPoints.length / 2; i2++) {
          transformedPoints[i2 * 2] = basePoints[i2 * 2] * width + centerX;
          transformedPoints[i2 * 2 + 1] = basePoints[i2 * 2 + 1] * height + centerY;
        }
        if (padding > 0) {
          var expandedLineSet = expandPolygon(transformedPoints, -padding);
          points = joinLines(expandedLineSet);
        } else {
          points = transformedPoints;
        }
      } else {
        points = basePoints;
      }
      var currentX, currentY, nextX, nextY;
      for (var _i2 = 0; _i2 < points.length / 2; _i2++) {
        currentX = points[_i2 * 2];
        currentY = points[_i2 * 2 + 1];
        if (_i2 < points.length / 2 - 1) {
          nextX = points[(_i2 + 1) * 2];
          nextY = points[(_i2 + 1) * 2 + 1];
        } else {
          nextX = points[0];
          nextY = points[1];
        }
        intersection = finiteLinesIntersect(x, y, centerX, centerY, currentX, currentY, nextX, nextY);
        if (intersection.length !== 0) {
          intersections.push(intersection[0], intersection[1]);
        }
      }
      return intersections;
    };
    var roundPolygonIntersectLine = function roundPolygonIntersectLine2(x, y, basePoints, centerX, centerY, width, height, padding) {
      var intersections = [];
      var intersection;
      var lines = new Array(basePoints.length);
      var halfW = width / 2;
      var halfH = height / 2;
      var cornerRadius = getRoundPolygonRadius(width, height);
      for (var i2 = 0; i2 < basePoints.length / 4; i2++) {
        var sourceUv = void 0, destUv = void 0;
        if (i2 === 0) {
          sourceUv = basePoints.length - 2;
        } else {
          sourceUv = i2 * 4 - 2;
        }
        destUv = i2 * 4 + 2;
        var px = centerX + halfW * basePoints[i2 * 4];
        var py = centerY + halfH * basePoints[i2 * 4 + 1];
        var cosTheta = -basePoints[sourceUv] * basePoints[destUv] - basePoints[sourceUv + 1] * basePoints[destUv + 1];
        var offset = cornerRadius / Math.tan(Math.acos(cosTheta) / 2);
        var cp0x = px - offset * basePoints[sourceUv];
        var cp0y = py - offset * basePoints[sourceUv + 1];
        var cp1x = px + offset * basePoints[destUv];
        var cp1y = py + offset * basePoints[destUv + 1];
        if (i2 === 0) {
          lines[basePoints.length - 2] = cp0x;
          lines[basePoints.length - 1] = cp0y;
        } else {
          lines[i2 * 4 - 2] = cp0x;
          lines[i2 * 4 - 1] = cp0y;
        }
        lines[i2 * 4] = cp1x;
        lines[i2 * 4 + 1] = cp1y;
        var orthx = basePoints[sourceUv + 1];
        var orthy = -basePoints[sourceUv];
        var cosAlpha = orthx * basePoints[destUv] + orthy * basePoints[destUv + 1];
        if (cosAlpha < 0) {
          orthx *= -1;
          orthy *= -1;
        }
        var cx = cp0x + orthx * cornerRadius;
        var cy = cp0y + orthy * cornerRadius;
        intersection = intersectLineCircle(x, y, centerX, centerY, cx, cy, cornerRadius);
        if (intersection.length !== 0) {
          intersections.push(intersection[0], intersection[1]);
        }
      }
      for (var _i3 = 0; _i3 < lines.length / 4; _i3++) {
        intersection = finiteLinesIntersect(x, y, centerX, centerY, lines[_i3 * 4], lines[_i3 * 4 + 1], lines[_i3 * 4 + 2], lines[_i3 * 4 + 3], false);
        if (intersection.length !== 0) {
          intersections.push(intersection[0], intersection[1]);
        }
      }
      if (intersections.length > 2) {
        var lowestIntersection = [intersections[0], intersections[1]];
        var lowestSquaredDistance = Math.pow(lowestIntersection[0] - x, 2) + Math.pow(lowestIntersection[1] - y, 2);
        for (var _i4 = 1; _i4 < intersections.length / 2; _i4++) {
          var squaredDistance = Math.pow(intersections[_i4 * 2] - x, 2) + Math.pow(intersections[_i4 * 2 + 1] - y, 2);
          if (squaredDistance <= lowestSquaredDistance) {
            lowestIntersection[0] = intersections[_i4 * 2];
            lowestIntersection[1] = intersections[_i4 * 2 + 1];
            lowestSquaredDistance = squaredDistance;
          }
        }
        return lowestIntersection;
      }
      return intersections;
    };
    var shortenIntersection = function shortenIntersection2(intersection, offset, amount) {
      var disp = [intersection[0] - offset[0], intersection[1] - offset[1]];
      var length = Math.sqrt(disp[0] * disp[0] + disp[1] * disp[1]);
      var lenRatio = (length - amount) / length;
      if (lenRatio < 0) {
        lenRatio = 1e-5;
      }
      return [offset[0] + lenRatio * disp[0], offset[1] + lenRatio * disp[1]];
    };
    var generateUnitNgonPointsFitToSquare = function generateUnitNgonPointsFitToSquare2(sides, rotationRadians) {
      var points = generateUnitNgonPoints(sides, rotationRadians);
      points = fitPolygonToSquare(points);
      return points;
    };
    var fitPolygonToSquare = function fitPolygonToSquare2(points) {
      var x, y;
      var sides = points.length / 2;
      var minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;
      for (var i2 = 0; i2 < sides; i2++) {
        x = points[2 * i2];
        y = points[2 * i2 + 1];
        minX = Math.min(minX, x);
        maxX = Math.max(maxX, x);
        minY = Math.min(minY, y);
        maxY = Math.max(maxY, y);
      }
      var sx = 2 / (maxX - minX);
      var sy = 2 / (maxY - minY);
      for (var _i5 = 0; _i5 < sides; _i5++) {
        x = points[2 * _i5] = points[2 * _i5] * sx;
        y = points[2 * _i5 + 1] = points[2 * _i5 + 1] * sy;
        minX = Math.min(minX, x);
        maxX = Math.max(maxX, x);
        minY = Math.min(minY, y);
        maxY = Math.max(maxY, y);
      }
      if (minY < -1) {
        for (var _i6 = 0; _i6 < sides; _i6++) {
          y = points[2 * _i6 + 1] = points[2 * _i6 + 1] + (-1 - minY);
        }
      }
      return points;
    };
    var generateUnitNgonPoints = function generateUnitNgonPoints2(sides, rotationRadians) {
      var increment = 1 / sides * 2 * Math.PI;
      var startAngle = sides % 2 === 0 ? Math.PI / 2 + increment / 2 : Math.PI / 2;
      startAngle += rotationRadians;
      var points = new Array(sides * 2);
      var currentAngle;
      for (var i2 = 0; i2 < sides; i2++) {
        currentAngle = i2 * increment + startAngle;
        points[2 * i2] = Math.cos(currentAngle);
        points[2 * i2 + 1] = Math.sin(-currentAngle);
      }
      return points;
    };
    var getRoundRectangleRadius = function getRoundRectangleRadius2(width, height) {
      return Math.min(width / 4, height / 4, 8);
    };
    var getRoundPolygonRadius = function getRoundPolygonRadius2(width, height) {
      return Math.min(width / 10, height / 10, 8);
    };
    var getCutRectangleCornerLength = function getCutRectangleCornerLength2() {
      return 8;
    };
    var bezierPtsToQuadCoeff = function bezierPtsToQuadCoeff2(p0, p1, p2) {
      return [p0 - 2 * p1 + p2, 2 * (p1 - p0), p0];
    };
    var getBarrelCurveConstants = function getBarrelCurveConstants2(width, height) {
      return {
        heightOffset: Math.min(15, 0.05 * height),
        widthOffset: Math.min(100, 0.25 * width),
        ctrlPtOffsetPct: 0.05
      };
    };
    var pageRankDefaults = defaults({
      dampingFactor: 0.8,
      precision: 1e-6,
      iterations: 200,
      weight: function weight(edge) {
        return 1;
      }
    });
    var elesfn$7 = {
      pageRank: function pageRank(options) {
        var _pageRankDefaults = pageRankDefaults(options), dampingFactor = _pageRankDefaults.dampingFactor, precision = _pageRankDefaults.precision, iterations = _pageRankDefaults.iterations, weight = _pageRankDefaults.weight;
        var cy = this._private.cy;
        var _this$byGroup = this.byGroup(), nodes = _this$byGroup.nodes, edges = _this$byGroup.edges;
        var numNodes = nodes.length;
        var numNodesSqd = numNodes * numNodes;
        var numEdges = edges.length;
        var matrix = new Array(numNodesSqd);
        var columnSum = new Array(numNodes);
        var additionalProb = (1 - dampingFactor) / numNodes;
        for (var i2 = 0; i2 < numNodes; i2++) {
          for (var j = 0; j < numNodes; j++) {
            var n = i2 * numNodes + j;
            matrix[n] = 0;
          }
          columnSum[i2] = 0;
        }
        for (var _i = 0; _i < numEdges; _i++) {
          var edge = edges[_i];
          var srcId = edge.data("source");
          var tgtId = edge.data("target");
          if (srcId === tgtId) {
            continue;
          }
          var s = nodes.indexOfId(srcId);
          var t = nodes.indexOfId(tgtId);
          var w = weight(edge);
          var _n = t * numNodes + s;
          matrix[_n] += w;
          columnSum[s] += w;
        }
        var p2 = 1 / numNodes + additionalProb;
        for (var _j = 0; _j < numNodes; _j++) {
          if (columnSum[_j] === 0) {
            for (var _i2 = 0; _i2 < numNodes; _i2++) {
              var _n2 = _i2 * numNodes + _j;
              matrix[_n2] = p2;
            }
          } else {
            for (var _i3 = 0; _i3 < numNodes; _i3++) {
              var _n3 = _i3 * numNodes + _j;
              matrix[_n3] = matrix[_n3] / columnSum[_j] + additionalProb;
            }
          }
        }
        var eigenvector = new Array(numNodes);
        var temp = new Array(numNodes);
        var previous;
        for (var _i4 = 0; _i4 < numNodes; _i4++) {
          eigenvector[_i4] = 1;
        }
        for (var iter = 0; iter < iterations; iter++) {
          for (var _i5 = 0; _i5 < numNodes; _i5++) {
            temp[_i5] = 0;
          }
          for (var _i6 = 0; _i6 < numNodes; _i6++) {
            for (var _j2 = 0; _j2 < numNodes; _j2++) {
              var _n4 = _i6 * numNodes + _j2;
              temp[_i6] += matrix[_n4] * eigenvector[_j2];
            }
          }
          inPlaceSumNormalize(temp);
          previous = eigenvector;
          eigenvector = temp;
          temp = previous;
          var diff = 0;
          for (var _i7 = 0; _i7 < numNodes; _i7++) {
            var delta = previous[_i7] - eigenvector[_i7];
            diff += delta * delta;
          }
          if (diff < precision) {
            break;
          }
        }
        var res = {
          rank: function rank(node) {
            node = cy.collection(node)[0];
            return eigenvector[nodes.indexOf(node)];
          }
        };
        return res;
      }
    };
    var defaults$1 = defaults({
      root: null,
      weight: function weight(edge) {
        return 1;
      },
      directed: false,
      alpha: 0
    });
    var elesfn$8 = {
      degreeCentralityNormalized: function degreeCentralityNormalized(options) {
        options = defaults$1(options);
        var cy = this.cy();
        var nodes = this.nodes();
        var numNodes = nodes.length;
        if (!options.directed) {
          var degrees = {};
          var maxDegree = 0;
          for (var i2 = 0; i2 < numNodes; i2++) {
            var node = nodes[i2];
            options.root = node;
            var currDegree = this.degreeCentrality(options);
            if (maxDegree < currDegree.degree) {
              maxDegree = currDegree.degree;
            }
            degrees[node.id()] = currDegree.degree;
          }
          return {
            degree: function degree(node2) {
              if (maxDegree === 0) {
                return 0;
              }
              if (string(node2)) {
                node2 = cy.filter(node2);
              }
              return degrees[node2.id()] / maxDegree;
            }
          };
        } else {
          var indegrees = {};
          var outdegrees = {};
          var maxIndegree = 0;
          var maxOutdegree = 0;
          for (var _i = 0; _i < numNodes; _i++) {
            var _node = nodes[_i];
            var id = _node.id();
            options.root = _node;
            var _currDegree = this.degreeCentrality(options);
            if (maxIndegree < _currDegree.indegree)
              maxIndegree = _currDegree.indegree;
            if (maxOutdegree < _currDegree.outdegree)
              maxOutdegree = _currDegree.outdegree;
            indegrees[id] = _currDegree.indegree;
            outdegrees[id] = _currDegree.outdegree;
          }
          return {
            indegree: function indegree(node2) {
              if (maxIndegree == 0) {
                return 0;
              }
              if (string(node2)) {
                node2 = cy.filter(node2);
              }
              return indegrees[node2.id()] / maxIndegree;
            },
            outdegree: function outdegree(node2) {
              if (maxOutdegree === 0) {
                return 0;
              }
              if (string(node2)) {
                node2 = cy.filter(node2);
              }
              return outdegrees[node2.id()] / maxOutdegree;
            }
          };
        }
      },
      degreeCentrality: function degreeCentrality(options) {
        options = defaults$1(options);
        var cy = this.cy();
        var callingEles = this;
        var _options = options, root = _options.root, weight = _options.weight, directed = _options.directed, alpha = _options.alpha;
        root = cy.collection(root)[0];
        if (!directed) {
          var connEdges = root.connectedEdges().intersection(callingEles);
          var k = connEdges.length;
          var s = 0;
          for (var i2 = 0; i2 < connEdges.length; i2++) {
            s += weight(connEdges[i2]);
          }
          return {
            degree: Math.pow(k, 1 - alpha) * Math.pow(s, alpha)
          };
        } else {
          var edges = root.connectedEdges();
          var incoming = edges.filter(function(edge) {
            return edge.target().same(root) && callingEles.has(edge);
          });
          var outgoing = edges.filter(function(edge) {
            return edge.source().same(root) && callingEles.has(edge);
          });
          var k_in = incoming.length;
          var k_out = outgoing.length;
          var s_in = 0;
          var s_out = 0;
          for (var _i2 = 0; _i2 < incoming.length; _i2++) {
            s_in += weight(incoming[_i2]);
          }
          for (var _i3 = 0; _i3 < outgoing.length; _i3++) {
            s_out += weight(outgoing[_i3]);
          }
          return {
            indegree: Math.pow(k_in, 1 - alpha) * Math.pow(s_in, alpha),
            outdegree: Math.pow(k_out, 1 - alpha) * Math.pow(s_out, alpha)
          };
        }
      }
    };
    elesfn$8.dc = elesfn$8.degreeCentrality;
    elesfn$8.dcn = elesfn$8.degreeCentralityNormalised = elesfn$8.degreeCentralityNormalized;
    var defaults$2 = defaults({
      harmonic: true,
      weight: function weight() {
        return 1;
      },
      directed: false,
      root: null
    });
    var elesfn$9 = {
      closenessCentralityNormalized: function closenessCentralityNormalized(options) {
        var _defaults = defaults$2(options), harmonic = _defaults.harmonic, weight = _defaults.weight, directed = _defaults.directed;
        var cy = this.cy();
        var closenesses = {};
        var maxCloseness = 0;
        var nodes = this.nodes();
        var fw = this.floydWarshall({
          weight,
          directed
        });
        for (var i2 = 0; i2 < nodes.length; i2++) {
          var currCloseness = 0;
          var node_i = nodes[i2];
          for (var j = 0; j < nodes.length; j++) {
            if (i2 !== j) {
              var d = fw.distance(node_i, nodes[j]);
              if (harmonic) {
                currCloseness += 1 / d;
              } else {
                currCloseness += d;
              }
            }
          }
          if (!harmonic) {
            currCloseness = 1 / currCloseness;
          }
          if (maxCloseness < currCloseness) {
            maxCloseness = currCloseness;
          }
          closenesses[node_i.id()] = currCloseness;
        }
        return {
          closeness: function closeness(node) {
            if (maxCloseness == 0) {
              return 0;
            }
            if (string(node)) {
              node = cy.filter(node)[0].id();
            } else {
              node = node.id();
            }
            return closenesses[node] / maxCloseness;
          }
        };
      },
      closenessCentrality: function closenessCentrality(options) {
        var _defaults2 = defaults$2(options), root = _defaults2.root, weight = _defaults2.weight, directed = _defaults2.directed, harmonic = _defaults2.harmonic;
        root = this.filter(root)[0];
        var dijkstra = this.dijkstra({
          root,
          weight,
          directed
        });
        var totalDistance = 0;
        var nodes = this.nodes();
        for (var i2 = 0; i2 < nodes.length; i2++) {
          var n = nodes[i2];
          if (!n.same(root)) {
            var d = dijkstra.distanceTo(n);
            if (harmonic) {
              totalDistance += 1 / d;
            } else {
              totalDistance += d;
            }
          }
        }
        return harmonic ? totalDistance : 1 / totalDistance;
      }
    };
    elesfn$9.cc = elesfn$9.closenessCentrality;
    elesfn$9.ccn = elesfn$9.closenessCentralityNormalised = elesfn$9.closenessCentralityNormalized;
    var defaults$3 = defaults({
      weight: null,
      directed: false
    });
    var elesfn$a = {
      betweennessCentrality: function betweennessCentrality(options) {
        var _defaults = defaults$3(options), directed = _defaults.directed, weight = _defaults.weight;
        var weighted = weight != null;
        var cy = this.cy();
        var V = this.nodes();
        var A = {};
        var _C = {};
        var max2 = 0;
        var C = {
          set: function set(key, val) {
            _C[key] = val;
            if (val > max2) {
              max2 = val;
            }
          },
          get: function get(key) {
            return _C[key];
          }
        };
        for (var i2 = 0; i2 < V.length; i2++) {
          var v = V[i2];
          var vid = v.id();
          if (directed) {
            A[vid] = v.outgoers().nodes();
          } else {
            A[vid] = v.openNeighborhood().nodes();
          }
          C.set(vid, 0);
        }
        var _loop = function _loop2(s2) {
          var sid = V[s2].id();
          var S = [];
          var P = {};
          var g = {};
          var d = {};
          var Q = new Heap(function(a, b) {
            return d[a] - d[b];
          });
          for (var _i = 0; _i < V.length; _i++) {
            var _vid = V[_i].id();
            P[_vid] = [];
            g[_vid] = 0;
            d[_vid] = Infinity;
          }
          g[sid] = 1;
          d[sid] = 0;
          Q.push(sid);
          while (!Q.empty()) {
            var _v = Q.pop();
            S.push(_v);
            if (weighted) {
              for (var j = 0; j < A[_v].length; j++) {
                var w = A[_v][j];
                var vEle = cy.getElementById(_v);
                var edge = void 0;
                if (vEle.edgesTo(w).length > 0) {
                  edge = vEle.edgesTo(w)[0];
                } else {
                  edge = w.edgesTo(vEle)[0];
                }
                var edgeWeight = weight(edge);
                w = w.id();
                if (d[w] > d[_v] + edgeWeight) {
                  d[w] = d[_v] + edgeWeight;
                  if (Q.nodes.indexOf(w) < 0) {
                    Q.push(w);
                  } else {
                    Q.updateItem(w);
                  }
                  g[w] = 0;
                  P[w] = [];
                }
                if (d[w] == d[_v] + edgeWeight) {
                  g[w] = g[w] + g[_v];
                  P[w].push(_v);
                }
              }
            } else {
              for (var _j = 0; _j < A[_v].length; _j++) {
                var _w = A[_v][_j].id();
                if (d[_w] == Infinity) {
                  Q.push(_w);
                  d[_w] = d[_v] + 1;
                }
                if (d[_w] == d[_v] + 1) {
                  g[_w] = g[_w] + g[_v];
                  P[_w].push(_v);
                }
              }
            }
          }
          var e = {};
          for (var _i2 = 0; _i2 < V.length; _i2++) {
            e[V[_i2].id()] = 0;
          }
          while (S.length > 0) {
            var _w2 = S.pop();
            for (var _j2 = 0; _j2 < P[_w2].length; _j2++) {
              var _v2 = P[_w2][_j2];
              e[_v2] = e[_v2] + g[_v2] / g[_w2] * (1 + e[_w2]);
            }
            if (_w2 != V[s2].id()) {
              C.set(_w2, C.get(_w2) + e[_w2]);
            }
          }
        };
        for (var s = 0; s < V.length; s++) {
          _loop(s);
        }
        var ret = {
          betweenness: function betweenness(node) {
            var id = cy.collection(node).id();
            return C.get(id);
          },
          betweennessNormalized: function betweennessNormalized(node) {
            if (max2 == 0) {
              return 0;
            }
            var id = cy.collection(node).id();
            return C.get(id) / max2;
          }
        };
        ret.betweennessNormalised = ret.betweennessNormalized;
        return ret;
      }
    };
    elesfn$a.bc = elesfn$a.betweennessCentrality;
    var defaults$4 = defaults({
      expandFactor: 2,
      inflateFactor: 2,
      multFactor: 1,
      maxIterations: 20,
      attributes: [
        function(edge) {
          return 1;
        }
      ]
    });
    var setOptions = function setOptions2(options) {
      return defaults$4(options);
    };
    var getSimilarity = function getSimilarity2(edge, attributes) {
      var total = 0;
      for (var i2 = 0; i2 < attributes.length; i2++) {
        total += attributes[i2](edge);
      }
      return total;
    };
    var addLoops = function addLoops2(M, n, val) {
      for (var i2 = 0; i2 < n; i2++) {
        M[i2 * n + i2] = val;
      }
    };
    var normalize = function normalize2(M, n) {
      var sum;
      for (var col = 0; col < n; col++) {
        sum = 0;
        for (var row = 0; row < n; row++) {
          sum += M[row * n + col];
        }
        for (var _row = 0; _row < n; _row++) {
          M[_row * n + col] = M[_row * n + col] / sum;
        }
      }
    };
    var mmult = function mmult2(A, B, n) {
      var C = new Array(n * n);
      for (var i2 = 0; i2 < n; i2++) {
        for (var j = 0; j < n; j++) {
          C[i2 * n + j] = 0;
        }
        for (var k = 0; k < n; k++) {
          for (var _j = 0; _j < n; _j++) {
            C[i2 * n + _j] += A[i2 * n + k] * B[k * n + _j];
          }
        }
      }
      return C;
    };
    var expand = function expand2(M, n, expandFactor) {
      var _M = M.slice(0);
      for (var p2 = 1; p2 < expandFactor; p2++) {
        M = mmult(M, _M, n);
      }
      return M;
    };
    var inflate = function inflate2(M, n, inflateFactor) {
      var _M = new Array(n * n);
      for (var i2 = 0; i2 < n * n; i2++) {
        _M[i2] = Math.pow(M[i2], inflateFactor);
      }
      normalize(_M, n);
      return _M;
    };
    var hasConverged = function hasConverged2(M, _M, n2, roundFactor) {
      for (var i2 = 0; i2 < n2; i2++) {
        var v1 = Math.round(M[i2] * Math.pow(10, roundFactor)) / Math.pow(10, roundFactor);
        var v2 = Math.round(_M[i2] * Math.pow(10, roundFactor)) / Math.pow(10, roundFactor);
        if (v1 !== v2) {
          return false;
        }
      }
      return true;
    };
    var assign = function assign2(M, n, nodes, cy) {
      var clusters = [];
      for (var i2 = 0; i2 < n; i2++) {
        var cluster = [];
        for (var j = 0; j < n; j++) {
          if (Math.round(M[i2 * n + j] * 1e3) / 1e3 > 0) {
            cluster.push(nodes[j]);
          }
        }
        if (cluster.length !== 0) {
          clusters.push(cy.collection(cluster));
        }
      }
      return clusters;
    };
    var isDuplicate = function isDuplicate2(c1, c2) {
      for (var i2 = 0; i2 < c1.length; i2++) {
        if (!c2[i2] || c1[i2].id() !== c2[i2].id()) {
          return false;
        }
      }
      return true;
    };
    var removeDuplicates = function removeDuplicates2(clusters) {
      for (var i2 = 0; i2 < clusters.length; i2++) {
        for (var j = 0; j < clusters.length; j++) {
          if (i2 != j && isDuplicate(clusters[i2], clusters[j])) {
            clusters.splice(j, 1);
          }
        }
      }
      return clusters;
    };
    var markovClustering = function markovClustering2(options) {
      var nodes = this.nodes();
      var edges = this.edges();
      var cy = this.cy();
      var opts = setOptions(options);
      var id2position = {};
      for (var i2 = 0; i2 < nodes.length; i2++) {
        id2position[nodes[i2].id()] = i2;
      }
      var n = nodes.length, n2 = n * n;
      var M = new Array(n2), _M;
      for (var _i = 0; _i < n2; _i++) {
        M[_i] = 0;
      }
      for (var e = 0; e < edges.length; e++) {
        var edge = edges[e];
        var _i2 = id2position[edge.source().id()];
        var j = id2position[edge.target().id()];
        var sim = getSimilarity(edge, opts.attributes);
        M[_i2 * n + j] += sim;
        M[j * n + _i2] += sim;
      }
      addLoops(M, n, opts.multFactor);
      normalize(M, n);
      var isStillMoving = true;
      var iterations = 0;
      while (isStillMoving && iterations < opts.maxIterations) {
        isStillMoving = false;
        _M = expand(M, n, opts.expandFactor);
        M = inflate(_M, n, opts.inflateFactor);
        if (!hasConverged(M, _M, n2, 4)) {
          isStillMoving = true;
        }
        iterations++;
      }
      var clusters = assign(M, n, nodes, cy);
      clusters = removeDuplicates(clusters);
      return clusters;
    };
    var markovClustering$1 = {
      markovClustering,
      mcl: markovClustering
    };
    var identity = function identity2(x) {
      return x;
    };
    var absDiff = function absDiff2(p2, q) {
      return Math.abs(q - p2);
    };
    var addAbsDiff = function addAbsDiff2(total, p2, q) {
      return total + absDiff(p2, q);
    };
    var addSquaredDiff = function addSquaredDiff2(total, p2, q) {
      return total + Math.pow(q - p2, 2);
    };
    var sqrt = function sqrt3(x) {
      return Math.sqrt(x);
    };
    var maxAbsDiff = function maxAbsDiff2(currentMax, p2, q) {
      return Math.max(currentMax, absDiff(p2, q));
    };
    var getDistance = function getDistance2(length, getP, getQ, init, visit) {
      var post = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : identity;
      var ret = init;
      var p2, q;
      for (var dim = 0; dim < length; dim++) {
        p2 = getP(dim);
        q = getQ(dim);
        ret = visit(ret, p2, q);
      }
      return post(ret);
    };
    var distances = {
      euclidean: function euclidean(length, getP, getQ) {
        if (length >= 2) {
          return getDistance(length, getP, getQ, 0, addSquaredDiff, sqrt);
        } else {
          return getDistance(length, getP, getQ, 0, addAbsDiff);
        }
      },
      squaredEuclidean: function squaredEuclidean(length, getP, getQ) {
        return getDistance(length, getP, getQ, 0, addSquaredDiff);
      },
      manhattan: function manhattan(length, getP, getQ) {
        return getDistance(length, getP, getQ, 0, addAbsDiff);
      },
      max: function max2(length, getP, getQ) {
        return getDistance(length, getP, getQ, -Infinity, maxAbsDiff);
      }
    };
    distances["squared-euclidean"] = distances["squaredEuclidean"];
    distances["squaredeuclidean"] = distances["squaredEuclidean"];
    function clusteringDistance(method, length, getP, getQ, nodeP, nodeQ) {
      var impl2;
      if (fn(method)) {
        impl2 = method;
      } else {
        impl2 = distances[method] || distances.euclidean;
      }
      if (length === 0 && fn(method)) {
        return impl2(nodeP, nodeQ);
      } else {
        return impl2(length, getP, getQ, nodeP, nodeQ);
      }
    }
    var defaults$5 = defaults({
      k: 2,
      m: 2,
      sensitivityThreshold: 1e-4,
      distance: "euclidean",
      maxIterations: 10,
      attributes: [],
      testMode: false,
      testCentroids: null
    });
    var setOptions$1 = function setOptions2(options) {
      return defaults$5(options);
    };
    var getDist = function getDist2(type, node, centroid, attributes, mode) {
      var noNodeP = mode !== "kMedoids";
      var getP = noNodeP ? function(i2) {
        return centroid[i2];
      } : function(i2) {
        return attributes[i2](centroid);
      };
      var getQ = function getQ2(i2) {
        return attributes[i2](node);
      };
      var nodeP = centroid;
      var nodeQ = node;
      return clusteringDistance(type, attributes.length, getP, getQ, nodeP, nodeQ);
    };
    var randomCentroids = function randomCentroids2(nodes, k, attributes) {
      var ndim = attributes.length;
      var min2 = new Array(ndim);
      var max2 = new Array(ndim);
      var centroids = new Array(k);
      var centroid = null;
      for (var i2 = 0; i2 < ndim; i2++) {
        min2[i2] = nodes.min(attributes[i2]).value;
        max2[i2] = nodes.max(attributes[i2]).value;
      }
      for (var c = 0; c < k; c++) {
        centroid = [];
        for (var _i = 0; _i < ndim; _i++) {
          centroid[_i] = Math.random() * (max2[_i] - min2[_i]) + min2[_i];
        }
        centroids[c] = centroid;
      }
      return centroids;
    };
    var classify = function classify2(node, centroids, distance, attributes, type) {
      var min2 = Infinity;
      var index = 0;
      for (var i2 = 0; i2 < centroids.length; i2++) {
        var dist2 = getDist(distance, node, centroids[i2], attributes, type);
        if (dist2 < min2) {
          min2 = dist2;
          index = i2;
        }
      }
      return index;
    };
    var buildCluster = function buildCluster2(centroid, nodes, assignment) {
      var cluster = [];
      var node = null;
      for (var n = 0; n < nodes.length; n++) {
        node = nodes[n];
        if (assignment[node.id()] === centroid) {
          cluster.push(node);
        }
      }
      return cluster;
    };
    var haveValuesConverged = function haveValuesConverged2(v1, v2, sensitivityThreshold) {
      return Math.abs(v2 - v1) <= sensitivityThreshold;
    };
    var haveMatricesConverged = function haveMatricesConverged2(v1, v2, sensitivityThreshold) {
      for (var i2 = 0; i2 < v1.length; i2++) {
        for (var j = 0; j < v1[i2].length; j++) {
          var diff = Math.abs(v1[i2][j] - v2[i2][j]);
          if (diff > sensitivityThreshold) {
            return false;
          }
        }
      }
      return true;
    };
    var seenBefore = function seenBefore2(node, medoids, n) {
      for (var i2 = 0; i2 < n; i2++) {
        if (node === medoids[i2])
          return true;
      }
      return false;
    };
    var randomMedoids = function randomMedoids2(nodes, k) {
      var medoids = new Array(k);
      if (nodes.length < 50) {
        for (var i2 = 0; i2 < k; i2++) {
          var node = nodes[Math.floor(Math.random() * nodes.length)];
          while (seenBefore(node, medoids, i2)) {
            node = nodes[Math.floor(Math.random() * nodes.length)];
          }
          medoids[i2] = node;
        }
      } else {
        for (var _i2 = 0; _i2 < k; _i2++) {
          medoids[_i2] = nodes[Math.floor(Math.random() * nodes.length)];
        }
      }
      return medoids;
    };
    var findCost = function findCost2(potentialNewMedoid, cluster, attributes) {
      var cost = 0;
      for (var n = 0; n < cluster.length; n++) {
        cost += getDist("manhattan", cluster[n], potentialNewMedoid, attributes, "kMedoids");
      }
      return cost;
    };
    var kMeans = function kMeans2(options) {
      var cy = this.cy();
      var nodes = this.nodes();
      var node = null;
      var opts = setOptions$1(options);
      var clusters = new Array(opts.k);
      var assignment = {};
      var centroids;
      if (opts.testMode) {
        if (typeof opts.testCentroids === "number") {
          centroids = randomCentroids(nodes, opts.k, opts.attributes);
        } else if (_typeof(opts.testCentroids) === "object") {
          centroids = opts.testCentroids;
        } else {
          centroids = randomCentroids(nodes, opts.k, opts.attributes);
        }
      } else {
        centroids = randomCentroids(nodes, opts.k, opts.attributes);
      }
      var isStillMoving = true;
      var iterations = 0;
      while (isStillMoving && iterations < opts.maxIterations) {
        for (var n = 0; n < nodes.length; n++) {
          node = nodes[n];
          assignment[node.id()] = classify(node, centroids, opts.distance, opts.attributes, "kMeans");
        }
        isStillMoving = false;
        for (var c = 0; c < opts.k; c++) {
          var cluster = buildCluster(c, nodes, assignment);
          if (cluster.length === 0) {
            continue;
          }
          var ndim = opts.attributes.length;
          var centroid = centroids[c];
          var newCentroid = new Array(ndim);
          var sum = new Array(ndim);
          for (var d = 0; d < ndim; d++) {
            sum[d] = 0;
            for (var i2 = 0; i2 < cluster.length; i2++) {
              node = cluster[i2];
              sum[d] += opts.attributes[d](node);
            }
            newCentroid[d] = sum[d] / cluster.length;
            if (!haveValuesConverged(newCentroid[d], centroid[d], opts.sensitivityThreshold)) {
              isStillMoving = true;
            }
          }
          centroids[c] = newCentroid;
          clusters[c] = cy.collection(cluster);
        }
        iterations++;
      }
      return clusters;
    };
    var kMedoids = function kMedoids2(options) {
      var cy = this.cy();
      var nodes = this.nodes();
      var node = null;
      var opts = setOptions$1(options);
      var clusters = new Array(opts.k);
      var medoids;
      var assignment = {};
      var curCost;
      var minCosts = new Array(opts.k);
      if (opts.testMode) {
        if (typeof opts.testCentroids === "number")
          ;
        else if (_typeof(opts.testCentroids) === "object") {
          medoids = opts.testCentroids;
        } else {
          medoids = randomMedoids(nodes, opts.k);
        }
      } else {
        medoids = randomMedoids(nodes, opts.k);
      }
      var isStillMoving = true;
      var iterations = 0;
      while (isStillMoving && iterations < opts.maxIterations) {
        for (var n = 0; n < nodes.length; n++) {
          node = nodes[n];
          assignment[node.id()] = classify(node, medoids, opts.distance, opts.attributes, "kMedoids");
        }
        isStillMoving = false;
        for (var m = 0; m < medoids.length; m++) {
          var cluster = buildCluster(m, nodes, assignment);
          if (cluster.length === 0) {
            continue;
          }
          minCosts[m] = findCost(medoids[m], cluster, opts.attributes);
          for (var _n = 0; _n < cluster.length; _n++) {
            curCost = findCost(cluster[_n], cluster, opts.attributes);
            if (curCost < minCosts[m]) {
              minCosts[m] = curCost;
              medoids[m] = cluster[_n];
              isStillMoving = true;
            }
          }
          clusters[m] = cy.collection(cluster);
        }
        iterations++;
      }
      return clusters;
    };
    var updateCentroids = function updateCentroids2(centroids, nodes, U, weight, opts) {
      var numerator, denominator;
      for (var n = 0; n < nodes.length; n++) {
        for (var c = 0; c < centroids.length; c++) {
          weight[n][c] = Math.pow(U[n][c], opts.m);
        }
      }
      for (var _c = 0; _c < centroids.length; _c++) {
        for (var dim = 0; dim < opts.attributes.length; dim++) {
          numerator = 0;
          denominator = 0;
          for (var _n2 = 0; _n2 < nodes.length; _n2++) {
            numerator += weight[_n2][_c] * opts.attributes[dim](nodes[_n2]);
            denominator += weight[_n2][_c];
          }
          centroids[_c][dim] = numerator / denominator;
        }
      }
    };
    var updateMembership = function updateMembership2(U, _U, centroids, nodes, opts) {
      for (var i2 = 0; i2 < U.length; i2++) {
        _U[i2] = U[i2].slice();
      }
      var sum, numerator, denominator;
      var pow = 2 / (opts.m - 1);
      for (var c = 0; c < centroids.length; c++) {
        for (var n = 0; n < nodes.length; n++) {
          sum = 0;
          for (var k = 0; k < centroids.length; k++) {
            numerator = getDist(opts.distance, nodes[n], centroids[c], opts.attributes, "cmeans");
            denominator = getDist(opts.distance, nodes[n], centroids[k], opts.attributes, "cmeans");
            sum += Math.pow(numerator / denominator, pow);
          }
          U[n][c] = 1 / sum;
        }
      }
    };
    var assign$1 = function assign2(nodes, U, opts, cy) {
      var clusters = new Array(opts.k);
      for (var c = 0; c < clusters.length; c++) {
        clusters[c] = [];
      }
      var max2;
      var index;
      for (var n = 0; n < U.length; n++) {
        max2 = -Infinity;
        index = -1;
        for (var _c2 = 0; _c2 < U[0].length; _c2++) {
          if (U[n][_c2] > max2) {
            max2 = U[n][_c2];
            index = _c2;
          }
        }
        clusters[index].push(nodes[n]);
      }
      for (var _c3 = 0; _c3 < clusters.length; _c3++) {
        clusters[_c3] = cy.collection(clusters[_c3]);
      }
      return clusters;
    };
    var fuzzyCMeans = function fuzzyCMeans2(options) {
      var cy = this.cy();
      var nodes = this.nodes();
      var opts = setOptions$1(options);
      var clusters;
      var centroids;
      var U;
      var _U;
      var weight;
      _U = new Array(nodes.length);
      for (var i2 = 0; i2 < nodes.length; i2++) {
        _U[i2] = new Array(opts.k);
      }
      U = new Array(nodes.length);
      for (var _i3 = 0; _i3 < nodes.length; _i3++) {
        U[_i3] = new Array(opts.k);
      }
      for (var _i4 = 0; _i4 < nodes.length; _i4++) {
        var total = 0;
        for (var j = 0; j < opts.k; j++) {
          U[_i4][j] = Math.random();
          total += U[_i4][j];
        }
        for (var _j = 0; _j < opts.k; _j++) {
          U[_i4][_j] = U[_i4][_j] / total;
        }
      }
      centroids = new Array(opts.k);
      for (var _i5 = 0; _i5 < opts.k; _i5++) {
        centroids[_i5] = new Array(opts.attributes.length);
      }
      weight = new Array(nodes.length);
      for (var _i6 = 0; _i6 < nodes.length; _i6++) {
        weight[_i6] = new Array(opts.k);
      }
      var isStillMoving = true;
      var iterations = 0;
      while (isStillMoving && iterations < opts.maxIterations) {
        isStillMoving = false;
        updateCentroids(centroids, nodes, U, weight, opts);
        updateMembership(U, _U, centroids, nodes, opts);
        if (!haveMatricesConverged(U, _U, opts.sensitivityThreshold)) {
          isStillMoving = true;
        }
        iterations++;
      }
      clusters = assign$1(nodes, U, opts, cy);
      return {
        clusters,
        degreeOfMembership: U
      };
    };
    var kClustering = {
      kMeans,
      kMedoids,
      fuzzyCMeans,
      fcm: fuzzyCMeans
    };
    var defaults$6 = defaults({
      distance: "euclidean",
      linkage: "min",
      mode: "threshold",
      threshold: Infinity,
      addDendrogram: false,
      dendrogramDepth: 0,
      attributes: []
    });
    var linkageAliases = {
      single: "min",
      complete: "max"
    };
    var setOptions$2 = function setOptions2(options) {
      var opts = defaults$6(options);
      var preferredAlias = linkageAliases[opts.linkage];
      if (preferredAlias != null) {
        opts.linkage = preferredAlias;
      }
      return opts;
    };
    var mergeClosest = function mergeClosest2(clusters, index, dists, mins, opts) {
      var minKey = 0;
      var min2 = Infinity;
      var dist2;
      var attrs = opts.attributes;
      var getDist2 = function getDist3(n1, n2) {
        return clusteringDistance(opts.distance, attrs.length, function(i3) {
          return attrs[i3](n1);
        }, function(i3) {
          return attrs[i3](n2);
        }, n1, n2);
      };
      for (var i2 = 0; i2 < clusters.length; i2++) {
        var key = clusters[i2].key;
        var _dist = dists[key][mins[key]];
        if (_dist < min2) {
          minKey = key;
          min2 = _dist;
        }
      }
      if (opts.mode === "threshold" && min2 >= opts.threshold || opts.mode === "dendrogram" && clusters.length === 1) {
        return false;
      }
      var c1 = index[minKey];
      var c2 = index[mins[minKey]];
      var merged;
      if (opts.mode === "dendrogram") {
        merged = {
          left: c1,
          right: c2,
          key: c1.key
        };
      } else {
        merged = {
          value: c1.value.concat(c2.value),
          key: c1.key
        };
      }
      clusters[c1.index] = merged;
      clusters.splice(c2.index, 1);
      index[c1.key] = merged;
      for (var _i = 0; _i < clusters.length; _i++) {
        var cur = clusters[_i];
        if (c1.key === cur.key) {
          dist2 = Infinity;
        } else if (opts.linkage === "min") {
          dist2 = dists[c1.key][cur.key];
          if (dists[c1.key][cur.key] > dists[c2.key][cur.key]) {
            dist2 = dists[c2.key][cur.key];
          }
        } else if (opts.linkage === "max") {
          dist2 = dists[c1.key][cur.key];
          if (dists[c1.key][cur.key] < dists[c2.key][cur.key]) {
            dist2 = dists[c2.key][cur.key];
          }
        } else if (opts.linkage === "mean") {
          dist2 = (dists[c1.key][cur.key] * c1.size + dists[c2.key][cur.key] * c2.size) / (c1.size + c2.size);
        } else {
          if (opts.mode === "dendrogram")
            dist2 = getDist2(cur.value, c1.value);
          else
            dist2 = getDist2(cur.value[0], c1.value[0]);
        }
        dists[c1.key][cur.key] = dists[cur.key][c1.key] = dist2;
      }
      for (var _i2 = 0; _i2 < clusters.length; _i2++) {
        var key1 = clusters[_i2].key;
        if (mins[key1] === c1.key || mins[key1] === c2.key) {
          var _min = key1;
          for (var j = 0; j < clusters.length; j++) {
            var key2 = clusters[j].key;
            if (dists[key1][key2] < dists[key1][_min]) {
              _min = key2;
            }
          }
          mins[key1] = _min;
        }
        clusters[_i2].index = _i2;
      }
      c1.key = c2.key = c1.index = c2.index = null;
      return true;
    };
    var getAllChildren = function getAllChildren2(root, arr, cy) {
      if (!root)
        return;
      if (root.value) {
        arr.push(root.value);
      } else {
        if (root.left)
          getAllChildren2(root.left, arr);
        if (root.right)
          getAllChildren2(root.right, arr);
      }
    };
    var buildDendrogram = function buildDendrogram2(root, cy) {
      if (!root)
        return "";
      if (root.left && root.right) {
        var leftStr = buildDendrogram2(root.left, cy);
        var rightStr = buildDendrogram2(root.right, cy);
        var node = cy.add({
          group: "nodes",
          data: {
            id: leftStr + "," + rightStr
          }
        });
        cy.add({
          group: "edges",
          data: {
            source: leftStr,
            target: node.id()
          }
        });
        cy.add({
          group: "edges",
          data: {
            source: rightStr,
            target: node.id()
          }
        });
        return node.id();
      } else if (root.value) {
        return root.value.id();
      }
    };
    var buildClustersFromTree = function buildClustersFromTree2(root, k, cy) {
      if (!root)
        return [];
      var left = [], right = [], leaves = [];
      if (k === 0) {
        if (root.left)
          getAllChildren(root.left, left);
        if (root.right)
          getAllChildren(root.right, right);
        leaves = left.concat(right);
        return [cy.collection(leaves)];
      } else if (k === 1) {
        if (root.value) {
          return [cy.collection(root.value)];
        } else {
          if (root.left)
            getAllChildren(root.left, left);
          if (root.right)
            getAllChildren(root.right, right);
          return [cy.collection(left), cy.collection(right)];
        }
      } else {
        if (root.value) {
          return [cy.collection(root.value)];
        } else {
          if (root.left)
            left = buildClustersFromTree2(root.left, k - 1, cy);
          if (root.right)
            right = buildClustersFromTree2(root.right, k - 1, cy);
          return left.concat(right);
        }
      }
    };
    var hierarchicalClustering = function hierarchicalClustering2(options) {
      var cy = this.cy();
      var nodes = this.nodes();
      var opts = setOptions$2(options);
      var attrs = opts.attributes;
      var getDist2 = function getDist3(n1, n2) {
        return clusteringDistance(opts.distance, attrs.length, function(i3) {
          return attrs[i3](n1);
        }, function(i3) {
          return attrs[i3](n2);
        }, n1, n2);
      };
      var clusters = [];
      var dists = [];
      var mins = [];
      var index = [];
      for (var n = 0; n < nodes.length; n++) {
        var cluster = {
          value: opts.mode === "dendrogram" ? nodes[n] : [nodes[n]],
          key: n,
          index: n
        };
        clusters[n] = cluster;
        index[n] = cluster;
        dists[n] = [];
        mins[n] = 0;
      }
      for (var i2 = 0; i2 < clusters.length; i2++) {
        for (var j = 0; j <= i2; j++) {
          var dist2 = void 0;
          if (opts.mode === "dendrogram") {
            dist2 = i2 === j ? Infinity : getDist2(clusters[i2].value, clusters[j].value);
          } else {
            dist2 = i2 === j ? Infinity : getDist2(clusters[i2].value[0], clusters[j].value[0]);
          }
          dists[i2][j] = dist2;
          dists[j][i2] = dist2;
          if (dist2 < dists[i2][mins[i2]]) {
            mins[i2] = j;
          }
        }
      }
      var merged = mergeClosest(clusters, index, dists, mins, opts);
      while (merged) {
        merged = mergeClosest(clusters, index, dists, mins, opts);
      }
      var retClusters;
      if (opts.mode === "dendrogram") {
        retClusters = buildClustersFromTree(clusters[0], opts.dendrogramDepth, cy);
        if (opts.addDendrogram)
          buildDendrogram(clusters[0], cy);
      } else {
        retClusters = new Array(clusters.length);
        clusters.forEach(function(cluster2, i3) {
          cluster2.key = cluster2.index = null;
          retClusters[i3] = cy.collection(cluster2.value);
        });
      }
      return retClusters;
    };
    var hierarchicalClustering$1 = {
      hierarchicalClustering,
      hca: hierarchicalClustering
    };
    var defaults$7 = defaults({
      distance: "euclidean",
      preference: "median",
      damping: 0.8,
      maxIterations: 1e3,
      minIterations: 100,
      attributes: []
    });
    var setOptions$3 = function setOptions2(options) {
      var dmp = options.damping;
      var pref = options.preference;
      if (!(0.5 <= dmp && dmp < 1)) {
        error("Damping must range on [0.5, 1).  Got: ".concat(dmp));
      }
      var validPrefs = ["median", "mean", "min", "max"];
      if (!(validPrefs.some(function(v) {
        return v === pref;
      }) || number(pref))) {
        error("Preference must be one of [".concat(validPrefs.map(function(p2) {
          return "'".concat(p2, "'");
        }).join(", "), "] or a number.  Got: ").concat(pref));
      }
      return defaults$7(options);
    };
    var getSimilarity$1 = function getSimilarity2(type, n1, n2, attributes) {
      var attr = function attr2(n, i2) {
        return attributes[i2](n);
      };
      return -clusteringDistance(type, attributes.length, function(i2) {
        return attr(n1, i2);
      }, function(i2) {
        return attr(n2, i2);
      }, n1, n2);
    };
    var getPreference = function getPreference2(S, preference) {
      var p2 = null;
      if (preference === "median") {
        p2 = median(S);
      } else if (preference === "mean") {
        p2 = mean(S);
      } else if (preference === "min") {
        p2 = min(S);
      } else if (preference === "max") {
        p2 = max(S);
      } else {
        p2 = preference;
      }
      return p2;
    };
    var findExemplars = function findExemplars2(n, R, A) {
      var indices = [];
      for (var i2 = 0; i2 < n; i2++) {
        if (R[i2 * n + i2] + A[i2 * n + i2] > 0) {
          indices.push(i2);
        }
      }
      return indices;
    };
    var assignClusters = function assignClusters2(n, S, exemplars) {
      var clusters = [];
      for (var i2 = 0; i2 < n; i2++) {
        var index = -1;
        var max2 = -Infinity;
        for (var ei = 0; ei < exemplars.length; ei++) {
          var e = exemplars[ei];
          if (S[i2 * n + e] > max2) {
            index = e;
            max2 = S[i2 * n + e];
          }
        }
        if (index > 0) {
          clusters.push(index);
        }
      }
      for (var _ei = 0; _ei < exemplars.length; _ei++) {
        clusters[exemplars[_ei]] = exemplars[_ei];
      }
      return clusters;
    };
    var assign$2 = function assign2(n, S, exemplars) {
      var clusters = assignClusters(n, S, exemplars);
      for (var ei = 0; ei < exemplars.length; ei++) {
        var ii = [];
        for (var c = 0; c < clusters.length; c++) {
          if (clusters[c] === exemplars[ei]) {
            ii.push(c);
          }
        }
        var maxI = -1;
        var maxSum = -Infinity;
        for (var i2 = 0; i2 < ii.length; i2++) {
          var sum = 0;
          for (var j = 0; j < ii.length; j++) {
            sum += S[ii[j] * n + ii[i2]];
          }
          if (sum > maxSum) {
            maxI = i2;
            maxSum = sum;
          }
        }
        exemplars[ei] = ii[maxI];
      }
      clusters = assignClusters(n, S, exemplars);
      return clusters;
    };
    var affinityPropagation = function affinityPropagation2(options) {
      var cy = this.cy();
      var nodes = this.nodes();
      var opts = setOptions$3(options);
      var id2position = {};
      for (var i2 = 0; i2 < nodes.length; i2++) {
        id2position[nodes[i2].id()] = i2;
      }
      var n;
      var n2;
      var S;
      var p2;
      var R;
      var A;
      n = nodes.length;
      n2 = n * n;
      S = new Array(n2);
      for (var _i = 0; _i < n2; _i++) {
        S[_i] = -Infinity;
      }
      for (var _i2 = 0; _i2 < n; _i2++) {
        for (var j = 0; j < n; j++) {
          if (_i2 !== j) {
            S[_i2 * n + j] = getSimilarity$1(opts.distance, nodes[_i2], nodes[j], opts.attributes);
          }
        }
      }
      p2 = getPreference(S, opts.preference);
      for (var _i3 = 0; _i3 < n; _i3++) {
        S[_i3 * n + _i3] = p2;
      }
      R = new Array(n2);
      for (var _i4 = 0; _i4 < n2; _i4++) {
        R[_i4] = 0;
      }
      A = new Array(n2);
      for (var _i5 = 0; _i5 < n2; _i5++) {
        A[_i5] = 0;
      }
      var old = new Array(n);
      var Rp = new Array(n);
      var se = new Array(n);
      for (var _i6 = 0; _i6 < n; _i6++) {
        old[_i6] = 0;
        Rp[_i6] = 0;
        se[_i6] = 0;
      }
      var e = new Array(n * opts.minIterations);
      for (var _i7 = 0; _i7 < e.length; _i7++) {
        e[_i7] = 0;
      }
      var iter;
      for (iter = 0; iter < opts.maxIterations; iter++) {
        for (var _i8 = 0; _i8 < n; _i8++) {
          var max2 = -Infinity, max22 = -Infinity, maxI = -1, AS = 0;
          for (var _j = 0; _j < n; _j++) {
            old[_j] = R[_i8 * n + _j];
            AS = A[_i8 * n + _j] + S[_i8 * n + _j];
            if (AS >= max2) {
              max22 = max2;
              max2 = AS;
              maxI = _j;
            } else if (AS > max22) {
              max22 = AS;
            }
          }
          for (var _j2 = 0; _j2 < n; _j2++) {
            R[_i8 * n + _j2] = (1 - opts.damping) * (S[_i8 * n + _j2] - max2) + opts.damping * old[_j2];
          }
          R[_i8 * n + maxI] = (1 - opts.damping) * (S[_i8 * n + maxI] - max22) + opts.damping * old[maxI];
        }
        for (var _i9 = 0; _i9 < n; _i9++) {
          var sum = 0;
          for (var _j3 = 0; _j3 < n; _j3++) {
            old[_j3] = A[_j3 * n + _i9];
            Rp[_j3] = Math.max(0, R[_j3 * n + _i9]);
            sum += Rp[_j3];
          }
          sum -= Rp[_i9];
          Rp[_i9] = R[_i9 * n + _i9];
          sum += Rp[_i9];
          for (var _j4 = 0; _j4 < n; _j4++) {
            A[_j4 * n + _i9] = (1 - opts.damping) * Math.min(0, sum - Rp[_j4]) + opts.damping * old[_j4];
          }
          A[_i9 * n + _i9] = (1 - opts.damping) * (sum - Rp[_i9]) + opts.damping * old[_i9];
        }
        var K2 = 0;
        for (var _i10 = 0; _i10 < n; _i10++) {
          var E = A[_i10 * n + _i10] + R[_i10 * n + _i10] > 0 ? 1 : 0;
          e[iter % opts.minIterations * n + _i10] = E;
          K2 += E;
        }
        if (K2 > 0 && (iter >= opts.minIterations - 1 || iter == opts.maxIterations - 1)) {
          var _sum = 0;
          for (var _i11 = 0; _i11 < n; _i11++) {
            se[_i11] = 0;
            for (var _j5 = 0; _j5 < opts.minIterations; _j5++) {
              se[_i11] += e[_j5 * n + _i11];
            }
            if (se[_i11] === 0 || se[_i11] === opts.minIterations) {
              _sum++;
            }
          }
          if (_sum === n) {
            break;
          }
        }
      }
      var exemplarsIndices = findExemplars(n, R, A);
      var clusterIndices = assign$2(n, S, exemplarsIndices);
      var clusters = {};
      for (var c = 0; c < exemplarsIndices.length; c++) {
        clusters[exemplarsIndices[c]] = [];
      }
      for (var _i12 = 0; _i12 < nodes.length; _i12++) {
        var pos = id2position[nodes[_i12].id()];
        var clusterIndex = clusterIndices[pos];
        if (clusterIndex != null) {
          clusters[clusterIndex].push(nodes[_i12]);
        }
      }
      var retClusters = new Array(exemplarsIndices.length);
      for (var _c = 0; _c < exemplarsIndices.length; _c++) {
        retClusters[_c] = cy.collection(clusters[exemplarsIndices[_c]]);
      }
      return retClusters;
    };
    var affinityPropagation$1 = {
      affinityPropagation,
      ap: affinityPropagation
    };
    var hierholzerDefaults = defaults({
      root: void 0,
      directed: false
    });
    var elesfn$b = {
      hierholzer: function hierholzer(options) {
        if (!plainObject(options)) {
          var args = arguments;
          options = {
            root: args[0],
            directed: args[1]
          };
        }
        var _hierholzerDefaults = hierholzerDefaults(options), root = _hierholzerDefaults.root, directed = _hierholzerDefaults.directed;
        var eles = this;
        var dflag = false;
        var oddIn;
        var oddOut;
        var startVertex;
        if (root)
          startVertex = string(root) ? this.filter(root)[0].id() : root[0].id();
        var nodes = {};
        var edges = {};
        if (directed) {
          eles.forEach(function(ele) {
            var id = ele.id();
            if (ele.isNode()) {
              var ind = ele.indegree(true);
              var outd = ele.outdegree(true);
              var d1 = ind - outd;
              var d2 = outd - ind;
              if (d1 == 1) {
                if (oddIn)
                  dflag = true;
                else
                  oddIn = id;
              } else if (d2 == 1) {
                if (oddOut)
                  dflag = true;
                else
                  oddOut = id;
              } else if (d2 > 1 || d1 > 1) {
                dflag = true;
              }
              nodes[id] = [];
              ele.outgoers().forEach(function(e) {
                if (e.isEdge())
                  nodes[id].push(e.id());
              });
            } else {
              edges[id] = [void 0, ele.target().id()];
            }
          });
        } else {
          eles.forEach(function(ele) {
            var id = ele.id();
            if (ele.isNode()) {
              var d2 = ele.degree(true);
              if (d2 % 2) {
                if (!oddIn)
                  oddIn = id;
                else if (!oddOut)
                  oddOut = id;
                else
                  dflag = true;
              }
              nodes[id] = [];
              ele.connectedEdges().forEach(function(e) {
                return nodes[id].push(e.id());
              });
            } else {
              edges[id] = [ele.source().id(), ele.target().id()];
            }
          });
        }
        var result = {
          found: false,
          trail: void 0
        };
        if (dflag)
          return result;
        else if (oddOut && oddIn) {
          if (directed) {
            if (startVertex && oddOut != startVertex) {
              return result;
            }
            startVertex = oddOut;
          } else {
            if (startVertex && oddOut != startVertex && oddIn != startVertex) {
              return result;
            } else if (!startVertex) {
              startVertex = oddOut;
            }
          }
        } else {
          if (!startVertex)
            startVertex = eles[0].id();
        }
        var walk = function walk2(v) {
          var currentNode = v;
          var subtour2 = [v];
          var adj, adjTail, adjHead;
          while (nodes[currentNode].length) {
            adj = nodes[currentNode].shift();
            adjTail = edges[adj][0];
            adjHead = edges[adj][1];
            if (currentNode != adjHead) {
              nodes[adjHead] = nodes[adjHead].filter(function(e) {
                return e != adj;
              });
              currentNode = adjHead;
            } else if (!directed && currentNode != adjTail) {
              nodes[adjTail] = nodes[adjTail].filter(function(e) {
                return e != adj;
              });
              currentNode = adjTail;
            }
            subtour2.unshift(adj);
            subtour2.unshift(currentNode);
          }
          return subtour2;
        };
        var trail = [];
        var subtour = [];
        subtour = walk(startVertex);
        while (subtour.length != 1) {
          if (nodes[subtour[0]].length == 0) {
            trail.unshift(eles.getElementById(subtour.shift()));
            trail.unshift(eles.getElementById(subtour.shift()));
          } else {
            subtour = walk(subtour.shift()).concat(subtour);
          }
        }
        trail.unshift(eles.getElementById(subtour.shift()));
        for (var d in nodes) {
          if (nodes[d].length) {
            return result;
          }
        }
        result.found = true;
        result.trail = this.spawn(trail, true);
        return result;
      }
    };
    var hopcroftTarjanBiconnected = function hopcroftTarjanBiconnected2() {
      var eles = this;
      var nodes = {};
      var id = 0;
      var edgeCount = 0;
      var components = [];
      var stack = [];
      var visitedEdges = {};
      var buildComponent = function buildComponent2(x, y) {
        var i2 = stack.length - 1;
        var cutset = [];
        var component = eles.spawn();
        while (stack[i2].x != x || stack[i2].y != y) {
          cutset.push(stack.pop().edge);
          i2--;
        }
        cutset.push(stack.pop().edge);
        cutset.forEach(function(edge) {
          var connectedNodes = edge.connectedNodes().intersection(eles);
          component.merge(edge);
          connectedNodes.forEach(function(node) {
            var nodeId = node.id();
            var connectedEdges = node.connectedEdges().intersection(eles);
            component.merge(node);
            if (!nodes[nodeId].cutVertex) {
              component.merge(connectedEdges);
            } else {
              component.merge(connectedEdges.filter(function(edge2) {
                return edge2.isLoop();
              }));
            }
          });
        });
        components.push(component);
      };
      var biconnectedSearch = function biconnectedSearch2(root, currentNode, parent) {
        if (root === parent)
          edgeCount += 1;
        nodes[currentNode] = {
          id,
          low: id++,
          cutVertex: false
        };
        var edges = eles.getElementById(currentNode).connectedEdges().intersection(eles);
        if (edges.size() === 0) {
          components.push(eles.spawn(eles.getElementById(currentNode)));
        } else {
          var sourceId, targetId, otherNodeId, edgeId;
          edges.forEach(function(edge) {
            sourceId = edge.source().id();
            targetId = edge.target().id();
            otherNodeId = sourceId === currentNode ? targetId : sourceId;
            if (otherNodeId !== parent) {
              edgeId = edge.id();
              if (!visitedEdges[edgeId]) {
                visitedEdges[edgeId] = true;
                stack.push({
                  x: currentNode,
                  y: otherNodeId,
                  edge
                });
              }
              if (!(otherNodeId in nodes)) {
                biconnectedSearch2(root, otherNodeId, currentNode);
                nodes[currentNode].low = Math.min(nodes[currentNode].low, nodes[otherNodeId].low);
                if (nodes[currentNode].id <= nodes[otherNodeId].low) {
                  nodes[currentNode].cutVertex = true;
                  buildComponent(currentNode, otherNodeId);
                }
              } else {
                nodes[currentNode].low = Math.min(nodes[currentNode].low, nodes[otherNodeId].id);
              }
            }
          });
        }
      };
      eles.forEach(function(ele) {
        if (ele.isNode()) {
          var nodeId = ele.id();
          if (!(nodeId in nodes)) {
            edgeCount = 0;
            biconnectedSearch(nodeId, nodeId);
            nodes[nodeId].cutVertex = edgeCount > 1;
          }
        }
      });
      var cutVertices = Object.keys(nodes).filter(function(id2) {
        return nodes[id2].cutVertex;
      }).map(function(id2) {
        return eles.getElementById(id2);
      });
      return {
        cut: eles.spawn(cutVertices),
        components
      };
    };
    var hopcroftTarjanBiconnected$1 = {
      hopcroftTarjanBiconnected,
      htbc: hopcroftTarjanBiconnected,
      htb: hopcroftTarjanBiconnected,
      hopcroftTarjanBiconnectedComponents: hopcroftTarjanBiconnected
    };
    var tarjanStronglyConnected = function tarjanStronglyConnected2() {
      var eles = this;
      var nodes = {};
      var index = 0;
      var components = [];
      var stack = [];
      var cut = eles.spawn(eles);
      var stronglyConnectedSearch = function stronglyConnectedSearch2(sourceNodeId) {
        stack.push(sourceNodeId);
        nodes[sourceNodeId] = {
          index,
          low: index++,
          explored: false
        };
        var connectedEdges = eles.getElementById(sourceNodeId).connectedEdges().intersection(eles);
        connectedEdges.forEach(function(edge) {
          var targetNodeId = edge.target().id();
          if (targetNodeId !== sourceNodeId) {
            if (!(targetNodeId in nodes)) {
              stronglyConnectedSearch2(targetNodeId);
            }
            if (!nodes[targetNodeId].explored) {
              nodes[sourceNodeId].low = Math.min(nodes[sourceNodeId].low, nodes[targetNodeId].low);
            }
          }
        });
        if (nodes[sourceNodeId].index === nodes[sourceNodeId].low) {
          var componentNodes = eles.spawn();
          for (; ; ) {
            var nodeId = stack.pop();
            componentNodes.merge(eles.getElementById(nodeId));
            nodes[nodeId].low = nodes[sourceNodeId].index;
            nodes[nodeId].explored = true;
            if (nodeId === sourceNodeId) {
              break;
            }
          }
          var componentEdges = componentNodes.edgesWith(componentNodes);
          var component = componentNodes.merge(componentEdges);
          components.push(component);
          cut = cut.difference(component);
        }
      };
      eles.forEach(function(ele) {
        if (ele.isNode()) {
          var nodeId = ele.id();
          if (!(nodeId in nodes)) {
            stronglyConnectedSearch(nodeId);
          }
        }
      });
      return {
        cut,
        components
      };
    };
    var tarjanStronglyConnected$1 = {
      tarjanStronglyConnected,
      tsc: tarjanStronglyConnected,
      tscc: tarjanStronglyConnected,
      tarjanStronglyConnectedComponents: tarjanStronglyConnected
    };
    var elesfn$c = {};
    [elesfn, elesfn$1, elesfn$2, elesfn$3, elesfn$4, elesfn$5, elesfn$6, elesfn$7, elesfn$8, elesfn$9, elesfn$a, markovClustering$1, kClustering, hierarchicalClustering$1, affinityPropagation$1, elesfn$b, hopcroftTarjanBiconnected$1, tarjanStronglyConnected$1].forEach(function(props) {
      extend(elesfn$c, props);
    });
    /*!
    Embeddable Minimum Strictly-Compliant Promises/A+ 1.1.1 Thenable
    Copyright (c) 2013-2014 Ralf S. Engelschall (http://engelschall.com)
    Licensed under The MIT License (http://opensource.org/licenses/MIT)
    */
    var STATE_PENDING = 0;
    var STATE_FULFILLED = 1;
    var STATE_REJECTED = 2;
    var api = function api2(executor) {
      if (!(this instanceof api2))
        return new api2(executor);
      this.id = "Thenable/1.0.7";
      this.state = STATE_PENDING;
      this.fulfillValue = void 0;
      this.rejectReason = void 0;
      this.onFulfilled = [];
      this.onRejected = [];
      this.proxy = {
        then: this.then.bind(this)
      };
      if (typeof executor === "function")
        executor.call(this, this.fulfill.bind(this), this.reject.bind(this));
    };
    api.prototype = {
      fulfill: function fulfill(value) {
        return deliver(this, STATE_FULFILLED, "fulfillValue", value);
      },
      reject: function reject(value) {
        return deliver(this, STATE_REJECTED, "rejectReason", value);
      },
      then: function then(onFulfilled, onRejected) {
        var curr = this;
        var next2 = new api();
        curr.onFulfilled.push(resolver(onFulfilled, next2, "fulfill"));
        curr.onRejected.push(resolver(onRejected, next2, "reject"));
        execute(curr);
        return next2.proxy;
      }
    };
    var deliver = function deliver2(curr, state, name, value) {
      if (curr.state === STATE_PENDING) {
        curr.state = state;
        curr[name] = value;
        execute(curr);
      }
      return curr;
    };
    var execute = function execute2(curr) {
      if (curr.state === STATE_FULFILLED)
        execute_handlers(curr, "onFulfilled", curr.fulfillValue);
      else if (curr.state === STATE_REJECTED)
        execute_handlers(curr, "onRejected", curr.rejectReason);
    };
    var execute_handlers = function execute_handlers2(curr, name, value) {
      if (curr[name].length === 0)
        return;
      var handlers = curr[name];
      curr[name] = [];
      var func = function func2() {
        for (var i2 = 0; i2 < handlers.length; i2++) {
          handlers[i2](value);
        }
      };
      if (typeof setImmediate === "function")
        setImmediate(func);
      else
        setTimeout(func, 0);
    };
    var resolver = function resolver2(cb, next2, method) {
      return function(value) {
        if (typeof cb !== "function")
          next2[method].call(next2, value);
        else {
          var result;
          try {
            result = cb(value);
          } catch (e) {
            next2.reject(e);
            return;
          }
          resolve(next2, result);
        }
      };
    };
    var resolve = function resolve2(promise2, x) {
      if (promise2 === x || promise2.proxy === x) {
        promise2.reject(new TypeError("cannot resolve promise with itself"));
        return;
      }
      var then;
      if (_typeof(x) === "object" && x !== null || typeof x === "function") {
        try {
          then = x.then;
        } catch (e) {
          promise2.reject(e);
          return;
        }
      }
      if (typeof then === "function") {
        var resolved = false;
        try {
          then.call(x, function(y) {
            if (resolved)
              return;
            resolved = true;
            if (y === x)
              promise2.reject(new TypeError("circular thenable chain"));
            else
              resolve2(promise2, y);
          }, function(r) {
            if (resolved)
              return;
            resolved = true;
            promise2.reject(r);
          });
        } catch (e) {
          if (!resolved)
            promise2.reject(e);
        }
        return;
      }
      promise2.fulfill(x);
    };
    api.all = function(ps) {
      return new api(function(resolveAll, rejectAll) {
        var vals = new Array(ps.length);
        var doneCount = 0;
        var fulfill = function fulfill2(i3, val) {
          vals[i3] = val;
          doneCount++;
          if (doneCount === ps.length) {
            resolveAll(vals);
          }
        };
        for (var i2 = 0; i2 < ps.length; i2++) {
          (function(i3) {
            var p2 = ps[i3];
            var isPromise = p2 != null && p2.then != null;
            if (isPromise) {
              p2.then(function(val2) {
                fulfill(i3, val2);
              }, function(err) {
                rejectAll(err);
              });
            } else {
              var val = p2;
              fulfill(i3, val);
            }
          })(i2);
        }
      });
    };
    api.resolve = function(val) {
      return new api(function(resolve2, reject) {
        resolve2(val);
      });
    };
    api.reject = function(val) {
      return new api(function(resolve2, reject) {
        reject(val);
      });
    };
    var Promise$1 = typeof Promise !== "undefined" ? Promise : api;
    var Animation = function Animation2(target, opts, opts2) {
      var isCore = core(target);
      var isEle = !isCore;
      var _p = this._private = extend({
        duration: 1e3
      }, opts, opts2);
      _p.target = target;
      _p.style = _p.style || _p.css;
      _p.started = false;
      _p.playing = false;
      _p.hooked = false;
      _p.applying = false;
      _p.progress = 0;
      _p.completes = [];
      _p.frames = [];
      if (_p.complete && fn(_p.complete)) {
        _p.completes.push(_p.complete);
      }
      if (isEle) {
        var pos = target.position();
        _p.startPosition = _p.startPosition || {
          x: pos.x,
          y: pos.y
        };
        _p.startStyle = _p.startStyle || target.cy().style().getAnimationStartStyle(target, _p.style);
      }
      if (isCore) {
        var pan = target.pan();
        _p.startPan = {
          x: pan.x,
          y: pan.y
        };
        _p.startZoom = target.zoom();
      }
      this.length = 1;
      this[0] = this;
    };
    var anifn = Animation.prototype;
    extend(anifn, {
      instanceString: function instanceString() {
        return "animation";
      },
      hook: function hook() {
        var _p = this._private;
        if (!_p.hooked) {
          var q;
          var tAni = _p.target._private.animation;
          if (_p.queue) {
            q = tAni.queue;
          } else {
            q = tAni.current;
          }
          q.push(this);
          if (elementOrCollection(_p.target)) {
            _p.target.cy().addToAnimationPool(_p.target);
          }
          _p.hooked = true;
        }
        return this;
      },
      play: function play() {
        var _p = this._private;
        if (_p.progress === 1) {
          _p.progress = 0;
        }
        _p.playing = true;
        _p.started = false;
        _p.stopped = false;
        this.hook();
        return this;
      },
      playing: function playing() {
        return this._private.playing;
      },
      apply: function apply() {
        var _p = this._private;
        _p.applying = true;
        _p.started = false;
        _p.stopped = false;
        this.hook();
        return this;
      },
      applying: function applying() {
        return this._private.applying;
      },
      pause: function pause() {
        var _p = this._private;
        _p.playing = false;
        _p.started = false;
        return this;
      },
      stop: function stop() {
        var _p = this._private;
        _p.playing = false;
        _p.started = false;
        _p.stopped = true;
        return this;
      },
      rewind: function rewind() {
        return this.progress(0);
      },
      fastforward: function fastforward() {
        return this.progress(1);
      },
      time: function time(t) {
        var _p = this._private;
        if (t === void 0) {
          return _p.progress * _p.duration;
        } else {
          return this.progress(t / _p.duration);
        }
      },
      progress: function progress(p2) {
        var _p = this._private;
        var wasPlaying = _p.playing;
        if (p2 === void 0) {
          return _p.progress;
        } else {
          if (wasPlaying) {
            this.pause();
          }
          _p.progress = p2;
          _p.started = false;
          if (wasPlaying) {
            this.play();
          }
        }
        return this;
      },
      completed: function completed() {
        return this._private.progress === 1;
      },
      reverse: function reverse() {
        var _p = this._private;
        var wasPlaying = _p.playing;
        if (wasPlaying) {
          this.pause();
        }
        _p.progress = 1 - _p.progress;
        _p.started = false;
        var swap = function swap2(a, b) {
          var _pa = _p[a];
          if (_pa == null) {
            return;
          }
          _p[a] = _p[b];
          _p[b] = _pa;
        };
        swap("zoom", "startZoom");
        swap("pan", "startPan");
        swap("position", "startPosition");
        if (_p.style) {
          for (var i2 = 0; i2 < _p.style.length; i2++) {
            var prop = _p.style[i2];
            var name = prop.name;
            var startStyleProp = _p.startStyle[name];
            _p.startStyle[name] = prop;
            _p.style[i2] = startStyleProp;
          }
        }
        if (wasPlaying) {
          this.play();
        }
        return this;
      },
      promise: function promise2(type) {
        var _p = this._private;
        var arr;
        switch (type) {
          case "frame":
            arr = _p.frames;
            break;
          default:
          case "complete":
          case "completed":
            arr = _p.completes;
        }
        return new Promise$1(function(resolve2, reject) {
          arr.push(function() {
            resolve2();
          });
        });
      }
    });
    anifn.complete = anifn.completed;
    anifn.run = anifn.play;
    anifn.running = anifn.playing;
    var define2 = {
      animated: function animated() {
        return function animatedImpl() {
          var self2 = this;
          var selfIsArrayLike = self2.length !== void 0;
          var all = selfIsArrayLike ? self2 : [self2];
          var cy = this._private.cy || this;
          if (!cy.styleEnabled()) {
            return false;
          }
          var ele = all[0];
          if (ele) {
            return ele._private.animation.current.length > 0;
          }
        };
      },
      clearQueue: function clearQueue() {
        return function clearQueueImpl() {
          var self2 = this;
          var selfIsArrayLike = self2.length !== void 0;
          var all = selfIsArrayLike ? self2 : [self2];
          var cy = this._private.cy || this;
          if (!cy.styleEnabled()) {
            return this;
          }
          for (var i2 = 0; i2 < all.length; i2++) {
            var ele = all[i2];
            ele._private.animation.queue = [];
          }
          return this;
        };
      },
      delay: function delay() {
        return function delayImpl(time, complete) {
          var cy = this._private.cy || this;
          if (!cy.styleEnabled()) {
            return this;
          }
          return this.animate({
            delay: time,
            duration: time,
            complete
          });
        };
      },
      delayAnimation: function delayAnimation() {
        return function delayAnimationImpl(time, complete) {
          var cy = this._private.cy || this;
          if (!cy.styleEnabled()) {
            return this;
          }
          return this.animation({
            delay: time,
            duration: time,
            complete
          });
        };
      },
      animation: function animation() {
        return function animationImpl(properties, params) {
          var self2 = this;
          var selfIsArrayLike = self2.length !== void 0;
          var all = selfIsArrayLike ? self2 : [self2];
          var cy = this._private.cy || this;
          var isCore = !selfIsArrayLike;
          var isEles = !isCore;
          if (!cy.styleEnabled()) {
            return this;
          }
          var style = cy.style();
          properties = extend({}, properties, params);
          var propertiesEmpty = Object.keys(properties).length === 0;
          if (propertiesEmpty) {
            return new Animation(all[0], properties);
          }
          if (properties.duration === void 0) {
            properties.duration = 400;
          }
          switch (properties.duration) {
            case "slow":
              properties.duration = 600;
              break;
            case "fast":
              properties.duration = 200;
              break;
          }
          if (isEles) {
            properties.style = style.getPropsList(properties.style || properties.css);
            properties.css = void 0;
          }
          if (isEles && properties.renderedPosition != null) {
            var rpos = properties.renderedPosition;
            var pan = cy.pan();
            var zoom = cy.zoom();
            properties.position = renderedToModelPosition(rpos, zoom, pan);
          }
          if (isCore && properties.panBy != null) {
            var panBy = properties.panBy;
            var cyPan = cy.pan();
            properties.pan = {
              x: cyPan.x + panBy.x,
              y: cyPan.y + panBy.y
            };
          }
          var center = properties.center || properties.centre;
          if (isCore && center != null) {
            var centerPan = cy.getCenterPan(center.eles, properties.zoom);
            if (centerPan != null) {
              properties.pan = centerPan;
            }
          }
          if (isCore && properties.fit != null) {
            var fit = properties.fit;
            var fitVp = cy.getFitViewport(fit.eles || fit.boundingBox, fit.padding);
            if (fitVp != null) {
              properties.pan = fitVp.pan;
              properties.zoom = fitVp.zoom;
            }
          }
          if (isCore && plainObject(properties.zoom)) {
            var vp = cy.getZoomedViewport(properties.zoom);
            if (vp != null) {
              if (vp.zoomed) {
                properties.zoom = vp.zoom;
              }
              if (vp.panned) {
                properties.pan = vp.pan;
              }
            } else {
              properties.zoom = null;
            }
          }
          return new Animation(all[0], properties);
        };
      },
      animate: function animate() {
        return function animateImpl(properties, params) {
          var self2 = this;
          var selfIsArrayLike = self2.length !== void 0;
          var all = selfIsArrayLike ? self2 : [self2];
          var cy = this._private.cy || this;
          if (!cy.styleEnabled()) {
            return this;
          }
          if (params) {
            properties = extend({}, properties, params);
          }
          for (var i2 = 0; i2 < all.length; i2++) {
            var ele = all[i2];
            var queue = ele.animated() && (properties.queue === void 0 || properties.queue);
            var ani = ele.animation(properties, queue ? {
              queue: true
            } : void 0);
            ani.play();
          }
          return this;
        };
      },
      stop: function stop() {
        return function stopImpl(clearQueue, jumpToEnd) {
          var self2 = this;
          var selfIsArrayLike = self2.length !== void 0;
          var all = selfIsArrayLike ? self2 : [self2];
          var cy = this._private.cy || this;
          if (!cy.styleEnabled()) {
            return this;
          }
          for (var i2 = 0; i2 < all.length; i2++) {
            var ele = all[i2];
            var _p = ele._private;
            var anis = _p.animation.current;
            for (var j = 0; j < anis.length; j++) {
              var ani = anis[j];
              var ani_p = ani._private;
              if (jumpToEnd) {
                ani_p.duration = 0;
              }
            }
            if (clearQueue) {
              _p.animation.queue = [];
            }
            if (!jumpToEnd) {
              _p.animation.current = [];
            }
          }
          cy.notify("draw");
          return this;
        };
      }
    };
    var define$1 = {
      data: function data2(params) {
        var defaults2 = {
          field: "data",
          bindingEvent: "data",
          allowBinding: false,
          allowSetting: false,
          allowGetting: false,
          settingEvent: "data",
          settingTriggersEvent: false,
          triggerFnName: "trigger",
          immutableKeys: {},
          updateStyle: false,
          beforeGet: function beforeGet(self2) {
          },
          beforeSet: function beforeSet(self2, obj) {
          },
          onSet: function onSet(self2) {
          },
          canSet: function canSet(self2) {
            return true;
          }
        };
        params = extend({}, defaults2, params);
        return function dataImpl(name, value) {
          var p2 = params;
          var self2 = this;
          var selfIsArrayLike = self2.length !== void 0;
          var all = selfIsArrayLike ? self2 : [self2];
          var single = selfIsArrayLike ? self2[0] : self2;
          if (string(name)) {
            if (p2.allowGetting && value === void 0) {
              var ret;
              if (single) {
                p2.beforeGet(single);
                ret = single._private[p2.field][name];
              }
              return ret;
            } else if (p2.allowSetting && value !== void 0) {
              var valid2 = !p2.immutableKeys[name];
              if (valid2) {
                var change = _defineProperty({}, name, value);
                p2.beforeSet(self2, change);
                for (var i2 = 0, l = all.length; i2 < l; i2++) {
                  var ele = all[i2];
                  if (p2.canSet(ele)) {
                    ele._private[p2.field][name] = value;
                  }
                }
                if (p2.updateStyle) {
                  self2.updateStyle();
                }
                p2.onSet(self2);
                if (p2.settingTriggersEvent) {
                  self2[p2.triggerFnName](p2.settingEvent);
                }
              }
            }
          } else if (p2.allowSetting && plainObject(name)) {
            var obj = name;
            var k, v;
            var keys = Object.keys(obj);
            p2.beforeSet(self2, obj);
            for (var _i = 0; _i < keys.length; _i++) {
              k = keys[_i];
              v = obj[k];
              var _valid = !p2.immutableKeys[k];
              if (_valid) {
                for (var j = 0; j < all.length; j++) {
                  var _ele = all[j];
                  if (p2.canSet(_ele)) {
                    _ele._private[p2.field][k] = v;
                  }
                }
              }
            }
            if (p2.updateStyle) {
              self2.updateStyle();
            }
            p2.onSet(self2);
            if (p2.settingTriggersEvent) {
              self2[p2.triggerFnName](p2.settingEvent);
            }
          } else if (p2.allowBinding && fn(name)) {
            var fn$12 = name;
            self2.on(p2.bindingEvent, fn$12);
          } else if (p2.allowGetting && name === void 0) {
            var _ret;
            if (single) {
              p2.beforeGet(single);
              _ret = single._private[p2.field];
            }
            return _ret;
          }
          return self2;
        };
      },
      removeData: function removeData(params) {
        var defaults2 = {
          field: "data",
          event: "data",
          triggerFnName: "trigger",
          triggerEvent: false,
          immutableKeys: {}
        };
        params = extend({}, defaults2, params);
        return function removeDataImpl(names) {
          var p2 = params;
          var self2 = this;
          var selfIsArrayLike = self2.length !== void 0;
          var all = selfIsArrayLike ? self2 : [self2];
          if (string(names)) {
            var keys = names.split(/\s+/);
            var l = keys.length;
            for (var i2 = 0; i2 < l; i2++) {
              var key = keys[i2];
              if (emptyString(key)) {
                continue;
              }
              var valid2 = !p2.immutableKeys[key];
              if (valid2) {
                for (var i_a = 0, l_a = all.length; i_a < l_a; i_a++) {
                  all[i_a]._private[p2.field][key] = void 0;
                }
              }
            }
            if (p2.triggerEvent) {
              self2[p2.triggerFnName](p2.event);
            }
          } else if (names === void 0) {
            for (var _i_a = 0, _l_a = all.length; _i_a < _l_a; _i_a++) {
              var _privateFields = all[_i_a]._private[p2.field];
              var _keys = Object.keys(_privateFields);
              for (var _i2 = 0; _i2 < _keys.length; _i2++) {
                var _key = _keys[_i2];
                var validKeyToDelete = !p2.immutableKeys[_key];
                if (validKeyToDelete) {
                  _privateFields[_key] = void 0;
                }
              }
            }
            if (p2.triggerEvent) {
              self2[p2.triggerFnName](p2.event);
            }
          }
          return self2;
        };
      }
    };
    var define$2 = {
      eventAliasesOn: function eventAliasesOn(proto) {
        var p2 = proto;
        p2.addListener = p2.listen = p2.bind = p2.on;
        p2.unlisten = p2.unbind = p2.off = p2.removeListener;
        p2.trigger = p2.emit;
        p2.pon = p2.promiseOn = function(events, selector) {
          var self2 = this;
          var args = Array.prototype.slice.call(arguments, 0);
          return new Promise$1(function(resolve2, reject) {
            var callback = function callback2(e) {
              self2.off.apply(self2, offArgs);
              resolve2(e);
            };
            var onArgs = args.concat([callback]);
            var offArgs = onArgs.concat([]);
            self2.on.apply(self2, onArgs);
          });
        };
      }
    };
    var define$3 = {};
    [define2, define$1, define$2].forEach(function(m) {
      extend(define$3, m);
    });
    var elesfn$d = {
      animate: define$3.animate(),
      animation: define$3.animation(),
      animated: define$3.animated(),
      clearQueue: define$3.clearQueue(),
      delay: define$3.delay(),
      delayAnimation: define$3.delayAnimation(),
      stop: define$3.stop()
    };
    var elesfn$e = {
      classes: function classes(_classes) {
        var self2 = this;
        if (_classes === void 0) {
          var ret = [];
          self2[0]._private.classes.forEach(function(cls2) {
            return ret.push(cls2);
          });
          return ret;
        } else if (!array(_classes)) {
          _classes = (_classes || "").match(/\S+/g) || [];
        }
        var changed = [];
        var classesSet = new Set$1(_classes);
        for (var j = 0; j < self2.length; j++) {
          var ele = self2[j];
          var _p = ele._private;
          var eleClasses = _p.classes;
          var changedEle = false;
          for (var i2 = 0; i2 < _classes.length; i2++) {
            var cls = _classes[i2];
            var eleHasClass = eleClasses.has(cls);
            if (!eleHasClass) {
              changedEle = true;
              break;
            }
          }
          if (!changedEle) {
            changedEle = eleClasses.size !== _classes.length;
          }
          if (changedEle) {
            _p.classes = classesSet;
            changed.push(ele);
          }
        }
        if (changed.length > 0) {
          this.spawn(changed).updateStyle().emit("class");
        }
        return self2;
      },
      addClass: function addClass(classes) {
        return this.toggleClass(classes, true);
      },
      hasClass: function hasClass(className) {
        var ele = this[0];
        return ele != null && ele._private.classes.has(className);
      },
      toggleClass: function toggleClass(classes, toggle) {
        if (!array(classes)) {
          classes = classes.match(/\S+/g) || [];
        }
        var self2 = this;
        var toggleUndefd = toggle === void 0;
        var changed = [];
        for (var i2 = 0, il = self2.length; i2 < il; i2++) {
          var ele = self2[i2];
          var eleClasses = ele._private.classes;
          var changedEle = false;
          for (var j = 0; j < classes.length; j++) {
            var cls = classes[j];
            var hasClass = eleClasses.has(cls);
            var changedNow = false;
            if (toggle || toggleUndefd && !hasClass) {
              eleClasses.add(cls);
              changedNow = true;
            } else if (!toggle || toggleUndefd && hasClass) {
              eleClasses["delete"](cls);
              changedNow = true;
            }
            if (!changedEle && changedNow) {
              changed.push(ele);
              changedEle = true;
            }
          }
        }
        if (changed.length > 0) {
          this.spawn(changed).updateStyle().emit("class");
        }
        return self2;
      },
      removeClass: function removeClass(classes) {
        return this.toggleClass(classes, false);
      },
      flashClass: function flashClass(classes, duration) {
        var self2 = this;
        if (duration == null) {
          duration = 250;
        } else if (duration === 0) {
          return self2;
        }
        self2.addClass(classes);
        setTimeout(function() {
          self2.removeClass(classes);
        }, duration);
        return self2;
      }
    };
    elesfn$e.className = elesfn$e.classNames = elesfn$e.classes;
    var tokens = {
      metaChar: "[\\!\\\"\\#\\$\\%\\&\\'\\(\\)\\*\\+\\,\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\]\\^\\`\\{\\|\\}\\~]",
      comparatorOp: "=|\\!=|>|>=|<|<=|\\$=|\\^=|\\*=",
      boolOp: "\\?|\\!|\\^",
      string: `"(?:\\\\"|[^"])*"|'(?:\\\\'|[^'])*'`,
      number: number$1,
      meta: "degree|indegree|outdegree",
      separator: "\\s*,\\s*",
      descendant: "\\s+",
      child: "\\s+>\\s+",
      subject: "\\$",
      group: "node|edge|\\*",
      directedEdge: "\\s+->\\s+",
      undirectedEdge: "\\s+<->\\s+"
    };
    tokens.variable = "(?:[\\w-]|(?:\\\\" + tokens.metaChar + "))+";
    tokens.value = tokens.string + "|" + tokens.number;
    tokens.className = tokens.variable;
    tokens.id = tokens.variable;
    (function() {
      var ops, op, i2;
      ops = tokens.comparatorOp.split("|");
      for (i2 = 0; i2 < ops.length; i2++) {
        op = ops[i2];
        tokens.comparatorOp += "|@" + op;
      }
      ops = tokens.comparatorOp.split("|");
      for (i2 = 0; i2 < ops.length; i2++) {
        op = ops[i2];
        if (op.indexOf("!") >= 0) {
          continue;
        }
        if (op === "=") {
          continue;
        }
        tokens.comparatorOp += "|\\!" + op;
      }
    })();
    var newQuery = function newQuery2() {
      return {
        checks: []
      };
    };
    var Type = {
      GROUP: 0,
      COLLECTION: 1,
      FILTER: 2,
      DATA_COMPARE: 3,
      DATA_EXIST: 4,
      DATA_BOOL: 5,
      META_COMPARE: 6,
      STATE: 7,
      ID: 8,
      CLASS: 9,
      UNDIRECTED_EDGE: 10,
      DIRECTED_EDGE: 11,
      NODE_SOURCE: 12,
      NODE_TARGET: 13,
      NODE_NEIGHBOR: 14,
      CHILD: 15,
      DESCENDANT: 16,
      PARENT: 17,
      ANCESTOR: 18,
      COMPOUND_SPLIT: 19,
      TRUE: 20
    };
    var stateSelectors = [{
      selector: ":selected",
      matches: function matches2(ele) {
        return ele.selected();
      }
    }, {
      selector: ":unselected",
      matches: function matches2(ele) {
        return !ele.selected();
      }
    }, {
      selector: ":selectable",
      matches: function matches2(ele) {
        return ele.selectable();
      }
    }, {
      selector: ":unselectable",
      matches: function matches2(ele) {
        return !ele.selectable();
      }
    }, {
      selector: ":locked",
      matches: function matches2(ele) {
        return ele.locked();
      }
    }, {
      selector: ":unlocked",
      matches: function matches2(ele) {
        return !ele.locked();
      }
    }, {
      selector: ":visible",
      matches: function matches2(ele) {
        return ele.visible();
      }
    }, {
      selector: ":hidden",
      matches: function matches2(ele) {
        return !ele.visible();
      }
    }, {
      selector: ":transparent",
      matches: function matches2(ele) {
        return ele.transparent();
      }
    }, {
      selector: ":grabbed",
      matches: function matches2(ele) {
        return ele.grabbed();
      }
    }, {
      selector: ":free",
      matches: function matches2(ele) {
        return !ele.grabbed();
      }
    }, {
      selector: ":removed",
      matches: function matches2(ele) {
        return ele.removed();
      }
    }, {
      selector: ":inside",
      matches: function matches2(ele) {
        return !ele.removed();
      }
    }, {
      selector: ":grabbable",
      matches: function matches2(ele) {
        return ele.grabbable();
      }
    }, {
      selector: ":ungrabbable",
      matches: function matches2(ele) {
        return !ele.grabbable();
      }
    }, {
      selector: ":animated",
      matches: function matches2(ele) {
        return ele.animated();
      }
    }, {
      selector: ":unanimated",
      matches: function matches2(ele) {
        return !ele.animated();
      }
    }, {
      selector: ":parent",
      matches: function matches2(ele) {
        return ele.isParent();
      }
    }, {
      selector: ":childless",
      matches: function matches2(ele) {
        return ele.isChildless();
      }
    }, {
      selector: ":child",
      matches: function matches2(ele) {
        return ele.isChild();
      }
    }, {
      selector: ":orphan",
      matches: function matches2(ele) {
        return ele.isOrphan();
      }
    }, {
      selector: ":nonorphan",
      matches: function matches2(ele) {
        return ele.isChild();
      }
    }, {
      selector: ":compound",
      matches: function matches2(ele) {
        if (ele.isNode()) {
          return ele.isParent();
        } else {
          return ele.source().isParent() || ele.target().isParent();
        }
      }
    }, {
      selector: ":loop",
      matches: function matches2(ele) {
        return ele.isLoop();
      }
    }, {
      selector: ":simple",
      matches: function matches2(ele) {
        return ele.isSimple();
      }
    }, {
      selector: ":active",
      matches: function matches2(ele) {
        return ele.active();
      }
    }, {
      selector: ":inactive",
      matches: function matches2(ele) {
        return !ele.active();
      }
    }, {
      selector: ":backgrounding",
      matches: function matches2(ele) {
        return ele.backgrounding();
      }
    }, {
      selector: ":nonbackgrounding",
      matches: function matches2(ele) {
        return !ele.backgrounding();
      }
    }].sort(function(a, b) {
      return descending(a.selector, b.selector);
    });
    var lookup = function() {
      var selToFn = {};
      var s;
      for (var i2 = 0; i2 < stateSelectors.length; i2++) {
        s = stateSelectors[i2];
        selToFn[s.selector] = s.matches;
      }
      return selToFn;
    }();
    var stateSelectorMatches = function stateSelectorMatches2(sel, ele) {
      return lookup[sel](ele);
    };
    var stateSelectorRegex = "(" + stateSelectors.map(function(s) {
      return s.selector;
    }).join("|") + ")";
    var cleanMetaChars = function cleanMetaChars2(str) {
      return str.replace(new RegExp("\\\\(" + tokens.metaChar + ")", "g"), function(match2, $1) {
        return $1;
      });
    };
    var replaceLastQuery = function replaceLastQuery2(selector, examiningQuery, replacementQuery) {
      selector[selector.length - 1] = replacementQuery;
    };
    var exprs = [{
      name: "group",
      query: true,
      regex: "(" + tokens.group + ")",
      populate: function populate(selector, query, _ref) {
        var _ref2 = _slicedToArray(_ref, 1), group = _ref2[0];
        query.checks.push({
          type: Type.GROUP,
          value: group === "*" ? group : group + "s"
        });
      }
    }, {
      name: "state",
      query: true,
      regex: stateSelectorRegex,
      populate: function populate(selector, query, _ref3) {
        var _ref4 = _slicedToArray(_ref3, 1), state = _ref4[0];
        query.checks.push({
          type: Type.STATE,
          value: state
        });
      }
    }, {
      name: "id",
      query: true,
      regex: "\\#(" + tokens.id + ")",
      populate: function populate(selector, query, _ref5) {
        var _ref6 = _slicedToArray(_ref5, 1), id = _ref6[0];
        query.checks.push({
          type: Type.ID,
          value: cleanMetaChars(id)
        });
      }
    }, {
      name: "className",
      query: true,
      regex: "\\.(" + tokens.className + ")",
      populate: function populate(selector, query, _ref7) {
        var _ref8 = _slicedToArray(_ref7, 1), className = _ref8[0];
        query.checks.push({
          type: Type.CLASS,
          value: cleanMetaChars(className)
        });
      }
    }, {
      name: "dataExists",
      query: true,
      regex: "\\[\\s*(" + tokens.variable + ")\\s*\\]",
      populate: function populate(selector, query, _ref9) {
        var _ref10 = _slicedToArray(_ref9, 1), variable = _ref10[0];
        query.checks.push({
          type: Type.DATA_EXIST,
          field: cleanMetaChars(variable)
        });
      }
    }, {
      name: "dataCompare",
      query: true,
      regex: "\\[\\s*(" + tokens.variable + ")\\s*(" + tokens.comparatorOp + ")\\s*(" + tokens.value + ")\\s*\\]",
      populate: function populate(selector, query, _ref11) {
        var _ref12 = _slicedToArray(_ref11, 3), variable = _ref12[0], comparatorOp = _ref12[1], value = _ref12[2];
        var valueIsString = new RegExp("^" + tokens.string + "$").exec(value) != null;
        if (valueIsString) {
          value = value.substring(1, value.length - 1);
        } else {
          value = parseFloat(value);
        }
        query.checks.push({
          type: Type.DATA_COMPARE,
          field: cleanMetaChars(variable),
          operator: comparatorOp,
          value
        });
      }
    }, {
      name: "dataBool",
      query: true,
      regex: "\\[\\s*(" + tokens.boolOp + ")\\s*(" + tokens.variable + ")\\s*\\]",
      populate: function populate(selector, query, _ref13) {
        var _ref14 = _slicedToArray(_ref13, 2), boolOp = _ref14[0], variable = _ref14[1];
        query.checks.push({
          type: Type.DATA_BOOL,
          field: cleanMetaChars(variable),
          operator: boolOp
        });
      }
    }, {
      name: "metaCompare",
      query: true,
      regex: "\\[\\[\\s*(" + tokens.meta + ")\\s*(" + tokens.comparatorOp + ")\\s*(" + tokens.number + ")\\s*\\]\\]",
      populate: function populate(selector, query, _ref15) {
        var _ref16 = _slicedToArray(_ref15, 3), meta2 = _ref16[0], comparatorOp = _ref16[1], number2 = _ref16[2];
        query.checks.push({
          type: Type.META_COMPARE,
          field: cleanMetaChars(meta2),
          operator: comparatorOp,
          value: parseFloat(number2)
        });
      }
    }, {
      name: "nextQuery",
      separator: true,
      regex: tokens.separator,
      populate: function populate(selector, query) {
        var currentSubject = selector.currentSubject;
        var edgeCount = selector.edgeCount;
        var compoundCount = selector.compoundCount;
        var lastQ = selector[selector.length - 1];
        if (currentSubject != null) {
          lastQ.subject = currentSubject;
          selector.currentSubject = null;
        }
        lastQ.edgeCount = edgeCount;
        lastQ.compoundCount = compoundCount;
        selector.edgeCount = 0;
        selector.compoundCount = 0;
        var nextQuery = selector[selector.length++] = newQuery();
        return nextQuery;
      }
    }, {
      name: "directedEdge",
      separator: true,
      regex: tokens.directedEdge,
      populate: function populate(selector, query) {
        if (selector.currentSubject == null) {
          var edgeQuery = newQuery();
          var source = query;
          var target = newQuery();
          edgeQuery.checks.push({
            type: Type.DIRECTED_EDGE,
            source,
            target
          });
          replaceLastQuery(selector, query, edgeQuery);
          selector.edgeCount++;
          return target;
        } else {
          var srcTgtQ = newQuery();
          var _source = query;
          var _target = newQuery();
          srcTgtQ.checks.push({
            type: Type.NODE_SOURCE,
            source: _source,
            target: _target
          });
          replaceLastQuery(selector, query, srcTgtQ);
          selector.edgeCount++;
          return _target;
        }
      }
    }, {
      name: "undirectedEdge",
      separator: true,
      regex: tokens.undirectedEdge,
      populate: function populate(selector, query) {
        if (selector.currentSubject == null) {
          var edgeQuery = newQuery();
          var source = query;
          var target = newQuery();
          edgeQuery.checks.push({
            type: Type.UNDIRECTED_EDGE,
            nodes: [source, target]
          });
          replaceLastQuery(selector, query, edgeQuery);
          selector.edgeCount++;
          return target;
        } else {
          var nhoodQ = newQuery();
          var node = query;
          var neighbor = newQuery();
          nhoodQ.checks.push({
            type: Type.NODE_NEIGHBOR,
            node,
            neighbor
          });
          replaceLastQuery(selector, query, nhoodQ);
          return neighbor;
        }
      }
    }, {
      name: "child",
      separator: true,
      regex: tokens.child,
      populate: function populate(selector, query) {
        if (selector.currentSubject == null) {
          var parentChildQuery = newQuery();
          var child = newQuery();
          var parent = selector[selector.length - 1];
          parentChildQuery.checks.push({
            type: Type.CHILD,
            parent,
            child
          });
          replaceLastQuery(selector, query, parentChildQuery);
          selector.compoundCount++;
          return child;
        } else if (selector.currentSubject === query) {
          var compound = newQuery();
          var left = selector[selector.length - 1];
          var right = newQuery();
          var subject = newQuery();
          var _child = newQuery();
          var _parent = newQuery();
          compound.checks.push({
            type: Type.COMPOUND_SPLIT,
            left,
            right,
            subject
          });
          subject.checks = query.checks;
          query.checks = [{
            type: Type.TRUE
          }];
          _parent.checks.push({
            type: Type.TRUE
          });
          right.checks.push({
            type: Type.PARENT,
            parent: _parent,
            child: _child
          });
          replaceLastQuery(selector, left, compound);
          selector.currentSubject = subject;
          selector.compoundCount++;
          return _child;
        } else {
          var _parent2 = newQuery();
          var _child2 = newQuery();
          var pcQChecks = [{
            type: Type.PARENT,
            parent: _parent2,
            child: _child2
          }];
          _parent2.checks = query.checks;
          query.checks = pcQChecks;
          selector.compoundCount++;
          return _child2;
        }
      }
    }, {
      name: "descendant",
      separator: true,
      regex: tokens.descendant,
      populate: function populate(selector, query) {
        if (selector.currentSubject == null) {
          var ancChQuery = newQuery();
          var descendant = newQuery();
          var ancestor = selector[selector.length - 1];
          ancChQuery.checks.push({
            type: Type.DESCENDANT,
            ancestor,
            descendant
          });
          replaceLastQuery(selector, query, ancChQuery);
          selector.compoundCount++;
          return descendant;
        } else if (selector.currentSubject === query) {
          var compound = newQuery();
          var left = selector[selector.length - 1];
          var right = newQuery();
          var subject = newQuery();
          var _descendant = newQuery();
          var _ancestor = newQuery();
          compound.checks.push({
            type: Type.COMPOUND_SPLIT,
            left,
            right,
            subject
          });
          subject.checks = query.checks;
          query.checks = [{
            type: Type.TRUE
          }];
          _ancestor.checks.push({
            type: Type.TRUE
          });
          right.checks.push({
            type: Type.ANCESTOR,
            ancestor: _ancestor,
            descendant: _descendant
          });
          replaceLastQuery(selector, left, compound);
          selector.currentSubject = subject;
          selector.compoundCount++;
          return _descendant;
        } else {
          var _ancestor2 = newQuery();
          var _descendant2 = newQuery();
          var adQChecks = [{
            type: Type.ANCESTOR,
            ancestor: _ancestor2,
            descendant: _descendant2
          }];
          _ancestor2.checks = query.checks;
          query.checks = adQChecks;
          selector.compoundCount++;
          return _descendant2;
        }
      }
    }, {
      name: "subject",
      modifier: true,
      regex: tokens.subject,
      populate: function populate(selector, query) {
        if (selector.currentSubject != null && selector.currentSubject !== query) {
          warn("Redefinition of subject in selector `" + selector.toString() + "`");
          return false;
        }
        selector.currentSubject = query;
        var topQ = selector[selector.length - 1];
        var topChk = topQ.checks[0];
        var topType = topChk == null ? null : topChk.type;
        if (topType === Type.DIRECTED_EDGE) {
          topChk.type = Type.NODE_TARGET;
        } else if (topType === Type.UNDIRECTED_EDGE) {
          topChk.type = Type.NODE_NEIGHBOR;
          topChk.node = topChk.nodes[1];
          topChk.neighbor = topChk.nodes[0];
          topChk.nodes = null;
        }
      }
    }];
    exprs.forEach(function(e) {
      return e.regexObj = new RegExp("^" + e.regex);
    });
    var consumeExpr = function consumeExpr2(remaining) {
      var expr;
      var match2;
      var name;
      for (var j = 0; j < exprs.length; j++) {
        var e = exprs[j];
        var n = e.name;
        var m = remaining.match(e.regexObj);
        if (m != null) {
          match2 = m;
          expr = e;
          name = n;
          var consumed = m[0];
          remaining = remaining.substring(consumed.length);
          break;
        }
      }
      return {
        expr,
        match: match2,
        name,
        remaining
      };
    };
    var consumeWhitespace = function consumeWhitespace2(remaining) {
      var match2 = remaining.match(/^\s+/);
      if (match2) {
        var consumed = match2[0];
        remaining = remaining.substring(consumed.length);
      }
      return remaining;
    };
    var parse = function parse2(selector) {
      var self2 = this;
      var remaining = self2.inputText = selector;
      var currentQuery = self2[0] = newQuery();
      self2.length = 1;
      remaining = consumeWhitespace(remaining);
      for (; ; ) {
        var exprInfo = consumeExpr(remaining);
        if (exprInfo.expr == null) {
          warn("The selector `" + selector + "`is invalid");
          return false;
        } else {
          var args = exprInfo.match.slice(1);
          var ret = exprInfo.expr.populate(self2, currentQuery, args);
          if (ret === false) {
            return false;
          } else if (ret != null) {
            currentQuery = ret;
          }
        }
        remaining = exprInfo.remaining;
        if (remaining.match(/^\s*$/)) {
          break;
        }
      }
      var lastQ = self2[self2.length - 1];
      if (self2.currentSubject != null) {
        lastQ.subject = self2.currentSubject;
      }
      lastQ.edgeCount = self2.edgeCount;
      lastQ.compoundCount = self2.compoundCount;
      for (var i2 = 0; i2 < self2.length; i2++) {
        var q = self2[i2];
        if (q.compoundCount > 0 && q.edgeCount > 0) {
          warn("The selector `" + selector + "` is invalid because it uses both a compound selector and an edge selector");
          return false;
        }
        if (q.edgeCount > 1) {
          warn("The selector `" + selector + "` is invalid because it uses multiple edge selectors");
          return false;
        } else if (q.edgeCount === 1) {
          warn("The selector `" + selector + "` is deprecated.  Edge selectors do not take effect on changes to source and target nodes after an edge is added, for performance reasons.  Use a class or data selector on edges instead, updating the class or data of an edge when your app detects a change in source or target nodes.");
        }
      }
      return true;
    };
    var toString = function toString2() {
      if (this.toStringCache != null) {
        return this.toStringCache;
      }
      var clean = function clean2(obj) {
        if (obj == null) {
          return "";
        } else {
          return obj;
        }
      };
      var cleanVal = function cleanVal2(val) {
        if (string(val)) {
          return '"' + val + '"';
        } else {
          return clean(val);
        }
      };
      var space = function space2(val) {
        return " " + val + " ";
      };
      var checkToString = function checkToString2(check, subject) {
        var type = check.type, value = check.value;
        switch (type) {
          case Type.GROUP: {
            var group = clean(value);
            return group.substring(0, group.length - 1);
          }
          case Type.DATA_COMPARE: {
            var field = check.field, operator = check.operator;
            return "[" + field + space(clean(operator)) + cleanVal(value) + "]";
          }
          case Type.DATA_BOOL: {
            var _operator = check.operator, _field = check.field;
            return "[" + clean(_operator) + _field + "]";
          }
          case Type.DATA_EXIST: {
            var _field2 = check.field;
            return "[" + _field2 + "]";
          }
          case Type.META_COMPARE: {
            var _operator2 = check.operator, _field3 = check.field;
            return "[[" + _field3 + space(clean(_operator2)) + cleanVal(value) + "]]";
          }
          case Type.STATE: {
            return value;
          }
          case Type.ID: {
            return "#" + value;
          }
          case Type.CLASS: {
            return "." + value;
          }
          case Type.PARENT:
          case Type.CHILD: {
            return queryToString(check.parent, subject) + space(">") + queryToString(check.child, subject);
          }
          case Type.ANCESTOR:
          case Type.DESCENDANT: {
            return queryToString(check.ancestor, subject) + " " + queryToString(check.descendant, subject);
          }
          case Type.COMPOUND_SPLIT: {
            var lhs = queryToString(check.left, subject);
            var sub = queryToString(check.subject, subject);
            var rhs = queryToString(check.right, subject);
            return lhs + (lhs.length > 0 ? " " : "") + sub + rhs;
          }
          case Type.TRUE: {
            return "";
          }
        }
      };
      var queryToString = function queryToString2(query2, subject) {
        return query2.checks.reduce(function(str2, chk, i3) {
          return str2 + (subject === query2 && i3 === 0 ? "$" : "") + checkToString(chk, subject);
        }, "");
      };
      var str = "";
      for (var i2 = 0; i2 < this.length; i2++) {
        var query = this[i2];
        str += queryToString(query, query.subject);
        if (this.length > 1 && i2 < this.length - 1) {
          str += ", ";
        }
      }
      this.toStringCache = str;
      return str;
    };
    var parse$1 = {
      parse,
      toString
    };
    var valCmp = function valCmp2(fieldVal, operator, value) {
      var matches2;
      var isFieldStr = string(fieldVal);
      var isFieldNum = number(fieldVal);
      var isValStr = string(value);
      var fieldStr, valStr;
      var caseInsensitive = false;
      var notExpr = false;
      var isIneqCmp = false;
      if (operator.indexOf("!") >= 0) {
        operator = operator.replace("!", "");
        notExpr = true;
      }
      if (operator.indexOf("@") >= 0) {
        operator = operator.replace("@", "");
        caseInsensitive = true;
      }
      if (isFieldStr || isValStr || caseInsensitive) {
        fieldStr = !isFieldStr && !isFieldNum ? "" : "" + fieldVal;
        valStr = "" + value;
      }
      if (caseInsensitive) {
        fieldVal = fieldStr = fieldStr.toLowerCase();
        value = valStr = valStr.toLowerCase();
      }
      switch (operator) {
        case "*=":
          matches2 = fieldStr.indexOf(valStr) >= 0;
          break;
        case "$=":
          matches2 = fieldStr.indexOf(valStr, fieldStr.length - valStr.length) >= 0;
          break;
        case "^=":
          matches2 = fieldStr.indexOf(valStr) === 0;
          break;
        case "=":
          matches2 = fieldVal === value;
          break;
        case ">":
          isIneqCmp = true;
          matches2 = fieldVal > value;
          break;
        case ">=":
          isIneqCmp = true;
          matches2 = fieldVal >= value;
          break;
        case "<":
          isIneqCmp = true;
          matches2 = fieldVal < value;
          break;
        case "<=":
          isIneqCmp = true;
          matches2 = fieldVal <= value;
          break;
        default:
          matches2 = false;
          break;
      }
      if (notExpr && (fieldVal != null || !isIneqCmp)) {
        matches2 = !matches2;
      }
      return matches2;
    };
    var boolCmp = function boolCmp2(fieldVal, operator) {
      switch (operator) {
        case "?":
          return fieldVal ? true : false;
        case "!":
          return fieldVal ? false : true;
        case "^":
          return fieldVal === void 0;
      }
    };
    var existCmp = function existCmp2(fieldVal) {
      return fieldVal !== void 0;
    };
    var data = function data2(ele, field) {
      return ele.data(field);
    };
    var meta = function meta2(ele, field) {
      return ele[field]();
    };
    var match = [];
    var matches = function matches2(query, ele) {
      return query.checks.every(function(chk) {
        return match[chk.type](chk, ele);
      });
    };
    match[Type.GROUP] = function(check, ele) {
      var group = check.value;
      return group === "*" || group === ele.group();
    };
    match[Type.STATE] = function(check, ele) {
      var stateSelector = check.value;
      return stateSelectorMatches(stateSelector, ele);
    };
    match[Type.ID] = function(check, ele) {
      var id = check.value;
      return ele.id() === id;
    };
    match[Type.CLASS] = function(check, ele) {
      var cls = check.value;
      return ele.hasClass(cls);
    };
    match[Type.META_COMPARE] = function(check, ele) {
      var field = check.field, operator = check.operator, value = check.value;
      return valCmp(meta(ele, field), operator, value);
    };
    match[Type.DATA_COMPARE] = function(check, ele) {
      var field = check.field, operator = check.operator, value = check.value;
      return valCmp(data(ele, field), operator, value);
    };
    match[Type.DATA_BOOL] = function(check, ele) {
      var field = check.field, operator = check.operator;
      return boolCmp(data(ele, field), operator);
    };
    match[Type.DATA_EXIST] = function(check, ele) {
      var field = check.field, operator = check.operator;
      return existCmp(data(ele, field));
    };
    match[Type.UNDIRECTED_EDGE] = function(check, ele) {
      var qA = check.nodes[0];
      var qB = check.nodes[1];
      var src = ele.source();
      var tgt = ele.target();
      return matches(qA, src) && matches(qB, tgt) || matches(qB, src) && matches(qA, tgt);
    };
    match[Type.NODE_NEIGHBOR] = function(check, ele) {
      return matches(check.node, ele) && ele.neighborhood().some(function(n) {
        return n.isNode() && matches(check.neighbor, n);
      });
    };
    match[Type.DIRECTED_EDGE] = function(check, ele) {
      return matches(check.source, ele.source()) && matches(check.target, ele.target());
    };
    match[Type.NODE_SOURCE] = function(check, ele) {
      return matches(check.source, ele) && ele.outgoers().some(function(n) {
        return n.isNode() && matches(check.target, n);
      });
    };
    match[Type.NODE_TARGET] = function(check, ele) {
      return matches(check.target, ele) && ele.incomers().some(function(n) {
        return n.isNode() && matches(check.source, n);
      });
    };
    match[Type.CHILD] = function(check, ele) {
      return matches(check.child, ele) && matches(check.parent, ele.parent());
    };
    match[Type.PARENT] = function(check, ele) {
      return matches(check.parent, ele) && ele.children().some(function(c) {
        return matches(check.child, c);
      });
    };
    match[Type.DESCENDANT] = function(check, ele) {
      return matches(check.descendant, ele) && ele.ancestors().some(function(a) {
        return matches(check.ancestor, a);
      });
    };
    match[Type.ANCESTOR] = function(check, ele) {
      return matches(check.ancestor, ele) && ele.descendants().some(function(d) {
        return matches(check.descendant, d);
      });
    };
    match[Type.COMPOUND_SPLIT] = function(check, ele) {
      return matches(check.subject, ele) && matches(check.left, ele) && matches(check.right, ele);
    };
    match[Type.TRUE] = function() {
      return true;
    };
    match[Type.COLLECTION] = function(check, ele) {
      var collection2 = check.value;
      return collection2.has(ele);
    };
    match[Type.FILTER] = function(check, ele) {
      var filter2 = check.value;
      return filter2(ele);
    };
    var filter = function filter2(collection2) {
      var self2 = this;
      if (self2.length === 1 && self2[0].checks.length === 1 && self2[0].checks[0].type === Type.ID) {
        return collection2.getElementById(self2[0].checks[0].value).collection();
      }
      var selectorFunction = function selectorFunction2(element2) {
        for (var j = 0; j < self2.length; j++) {
          var query = self2[j];
          if (matches(query, element2)) {
            return true;
          }
        }
        return false;
      };
      if (self2.text() == null) {
        selectorFunction = function selectorFunction2() {
          return true;
        };
      }
      return collection2.filter(selectorFunction);
    };
    var matches$1 = function matches$12(ele) {
      var self2 = this;
      for (var j = 0; j < self2.length; j++) {
        var query = self2[j];
        if (matches(query, ele)) {
          return true;
        }
      }
      return false;
    };
    var matching = {
      matches: matches$1,
      filter
    };
    var Selector = function Selector2(selector) {
      this.inputText = selector;
      this.currentSubject = null;
      this.compoundCount = 0;
      this.edgeCount = 0;
      this.length = 0;
      if (selector == null || string(selector) && selector.match(/^\s*$/))
        ;
      else if (elementOrCollection(selector)) {
        this.addQuery({
          checks: [{
            type: Type.COLLECTION,
            value: selector.collection()
          }]
        });
      } else if (fn(selector)) {
        this.addQuery({
          checks: [{
            type: Type.FILTER,
            value: selector
          }]
        });
      } else if (string(selector)) {
        if (!this.parse(selector)) {
          this.invalid = true;
        }
      } else {
        error("A selector must be created from a string; found ");
      }
    };
    var selfn = Selector.prototype;
    [parse$1, matching].forEach(function(p2) {
      return extend(selfn, p2);
    });
    selfn.text = function() {
      return this.inputText;
    };
    selfn.size = function() {
      return this.length;
    };
    selfn.eq = function(i2) {
      return this[i2];
    };
    selfn.sameText = function(otherSel) {
      return !this.invalid && !otherSel.invalid && this.text() === otherSel.text();
    };
    selfn.addQuery = function(q) {
      this[this.length++] = q;
    };
    selfn.selector = selfn.toString;
    var elesfn$f = {
      allAre: function allAre(selector) {
        var selObj = new Selector(selector);
        return this.every(function(ele) {
          return selObj.matches(ele);
        });
      },
      is: function is(selector) {
        var selObj = new Selector(selector);
        return this.some(function(ele) {
          return selObj.matches(ele);
        });
      },
      some: function some(fn2, thisArg) {
        for (var i2 = 0; i2 < this.length; i2++) {
          var ret = !thisArg ? fn2(this[i2], i2, this) : fn2.apply(thisArg, [this[i2], i2, this]);
          if (ret) {
            return true;
          }
        }
        return false;
      },
      every: function every(fn2, thisArg) {
        for (var i2 = 0; i2 < this.length; i2++) {
          var ret = !thisArg ? fn2(this[i2], i2, this) : fn2.apply(thisArg, [this[i2], i2, this]);
          if (!ret) {
            return false;
          }
        }
        return true;
      },
      same: function same(collection2) {
        if (this === collection2) {
          return true;
        }
        collection2 = this.cy().collection(collection2);
        var thisLength = this.length;
        var collectionLength = collection2.length;
        if (thisLength !== collectionLength) {
          return false;
        }
        if (thisLength === 1) {
          return this[0] === collection2[0];
        }
        return this.every(function(ele) {
          return collection2.hasElementWithId(ele.id());
        });
      },
      anySame: function anySame(collection2) {
        collection2 = this.cy().collection(collection2);
        return this.some(function(ele) {
          return collection2.hasElementWithId(ele.id());
        });
      },
      allAreNeighbors: function allAreNeighbors(collection2) {
        collection2 = this.cy().collection(collection2);
        var nhood = this.neighborhood();
        return collection2.every(function(ele) {
          return nhood.hasElementWithId(ele.id());
        });
      },
      contains: function contains(collection2) {
        collection2 = this.cy().collection(collection2);
        var self2 = this;
        return collection2.every(function(ele) {
          return self2.hasElementWithId(ele.id());
        });
      }
    };
    elesfn$f.allAreNeighbours = elesfn$f.allAreNeighbors;
    elesfn$f.has = elesfn$f.contains;
    elesfn$f.equal = elesfn$f.equals = elesfn$f.same;
    var cache = function cache2(fn2, name) {
      return function traversalCache(arg1, arg2, arg3, arg4) {
        var selectorOrEles = arg1;
        var eles = this;
        var key;
        if (selectorOrEles == null) {
          key = "";
        } else if (elementOrCollection(selectorOrEles) && selectorOrEles.length === 1) {
          key = selectorOrEles.id();
        }
        if (eles.length === 1 && key) {
          var _p = eles[0]._private;
          var tch = _p.traversalCache = _p.traversalCache || {};
          var ch = tch[name] = tch[name] || [];
          var hash = hashString(key);
          var cacheHit = ch[hash];
          if (cacheHit) {
            return cacheHit;
          } else {
            return ch[hash] = fn2.call(eles, arg1, arg2, arg3, arg4);
          }
        } else {
          return fn2.call(eles, arg1, arg2, arg3, arg4);
        }
      };
    };
    var elesfn$g = {
      parent: function parent(selector) {
        var parents = [];
        if (this.length === 1) {
          var parent2 = this[0]._private.parent;
          if (parent2) {
            return parent2;
          }
        }
        for (var i2 = 0; i2 < this.length; i2++) {
          var ele = this[i2];
          var _parent = ele._private.parent;
          if (_parent) {
            parents.push(_parent);
          }
        }
        return this.spawn(parents, true).filter(selector);
      },
      parents: function parents(selector) {
        var parents2 = [];
        var eles = this.parent();
        while (eles.nonempty()) {
          for (var i2 = 0; i2 < eles.length; i2++) {
            var ele = eles[i2];
            parents2.push(ele);
          }
          eles = eles.parent();
        }
        return this.spawn(parents2, true).filter(selector);
      },
      commonAncestors: function commonAncestors(selector) {
        var ancestors;
        for (var i2 = 0; i2 < this.length; i2++) {
          var ele = this[i2];
          var parents = ele.parents();
          ancestors = ancestors || parents;
          ancestors = ancestors.intersect(parents);
        }
        return ancestors.filter(selector);
      },
      orphans: function orphans(selector) {
        return this.stdFilter(function(ele) {
          return ele.isOrphan();
        }).filter(selector);
      },
      nonorphans: function nonorphans(selector) {
        return this.stdFilter(function(ele) {
          return ele.isChild();
        }).filter(selector);
      },
      children: cache(function(selector) {
        var children = [];
        for (var i2 = 0; i2 < this.length; i2++) {
          var ele = this[i2];
          var eleChildren = ele._private.children;
          for (var j = 0; j < eleChildren.length; j++) {
            children.push(eleChildren[j]);
          }
        }
        return this.spawn(children, true).filter(selector);
      }, "children"),
      siblings: function siblings(selector) {
        return this.parent().children().not(this).filter(selector);
      },
      isParent: function isParent() {
        var ele = this[0];
        if (ele) {
          return ele.isNode() && ele._private.children.length !== 0;
        }
      },
      isChildless: function isChildless() {
        var ele = this[0];
        if (ele) {
          return ele.isNode() && ele._private.children.length === 0;
        }
      },
      isChild: function isChild() {
        var ele = this[0];
        if (ele) {
          return ele.isNode() && ele._private.parent != null;
        }
      },
      isOrphan: function isOrphan() {
        var ele = this[0];
        if (ele) {
          return ele.isNode() && ele._private.parent == null;
        }
      },
      descendants: function descendants(selector) {
        var elements = [];
        function add(eles) {
          for (var i2 = 0; i2 < eles.length; i2++) {
            var ele = eles[i2];
            elements.push(ele);
            if (ele.children().nonempty()) {
              add(ele.children());
            }
          }
        }
        add(this.children());
        return this.spawn(elements, true).filter(selector);
      }
    };
    function forEachCompound(eles, fn2, includeSelf, recursiveStep) {
      var q = [];
      var did = new Set$1();
      var cy = eles.cy();
      var hasCompounds = cy.hasCompoundNodes();
      for (var i2 = 0; i2 < eles.length; i2++) {
        var ele = eles[i2];
        if (includeSelf) {
          q.push(ele);
        } else if (hasCompounds) {
          recursiveStep(q, did, ele);
        }
      }
      while (q.length > 0) {
        var _ele = q.shift();
        fn2(_ele);
        did.add(_ele.id());
        if (hasCompounds) {
          recursiveStep(q, did, _ele);
        }
      }
      return eles;
    }
    function addChildren(q, did, ele) {
      if (ele.isParent()) {
        var children = ele._private.children;
        for (var i2 = 0; i2 < children.length; i2++) {
          var child = children[i2];
          if (!did.has(child.id())) {
            q.push(child);
          }
        }
      }
    }
    elesfn$g.forEachDown = function(fn2) {
      var includeSelf = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      return forEachCompound(this, fn2, includeSelf, addChildren);
    };
    function addParent(q, did, ele) {
      if (ele.isChild()) {
        var parent = ele._private.parent;
        if (!did.has(parent.id())) {
          q.push(parent);
        }
      }
    }
    elesfn$g.forEachUp = function(fn2) {
      var includeSelf = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      return forEachCompound(this, fn2, includeSelf, addParent);
    };
    function addParentAndChildren(q, did, ele) {
      addParent(q, did, ele);
      addChildren(q, did, ele);
    }
    elesfn$g.forEachUpAndDown = function(fn2) {
      var includeSelf = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      return forEachCompound(this, fn2, includeSelf, addParentAndChildren);
    };
    elesfn$g.ancestors = elesfn$g.parents;
    var fn$1;
    var elesfn$h;
    fn$1 = elesfn$h = {
      data: define$3.data({
        field: "data",
        bindingEvent: "data",
        allowBinding: true,
        allowSetting: true,
        settingEvent: "data",
        settingTriggersEvent: true,
        triggerFnName: "trigger",
        allowGetting: true,
        immutableKeys: {
          id: true,
          source: true,
          target: true,
          parent: true
        },
        updateStyle: true
      }),
      removeData: define$3.removeData({
        field: "data",
        event: "data",
        triggerFnName: "trigger",
        triggerEvent: true,
        immutableKeys: {
          id: true,
          source: true,
          target: true,
          parent: true
        },
        updateStyle: true
      }),
      scratch: define$3.data({
        field: "scratch",
        bindingEvent: "scratch",
        allowBinding: true,
        allowSetting: true,
        settingEvent: "scratch",
        settingTriggersEvent: true,
        triggerFnName: "trigger",
        allowGetting: true,
        updateStyle: true
      }),
      removeScratch: define$3.removeData({
        field: "scratch",
        event: "scratch",
        triggerFnName: "trigger",
        triggerEvent: true,
        updateStyle: true
      }),
      rscratch: define$3.data({
        field: "rscratch",
        allowBinding: false,
        allowSetting: true,
        settingTriggersEvent: false,
        allowGetting: true
      }),
      removeRscratch: define$3.removeData({
        field: "rscratch",
        triggerEvent: false
      }),
      id: function id() {
        var ele = this[0];
        if (ele) {
          return ele._private.data.id;
        }
      }
    };
    fn$1.attr = fn$1.data;
    fn$1.removeAttr = fn$1.removeData;
    var data$1 = elesfn$h;
    var elesfn$i = {};
    function defineDegreeFunction(callback) {
      return function(includeLoops) {
        var self2 = this;
        if (includeLoops === void 0) {
          includeLoops = true;
        }
        if (self2.length === 0) {
          return;
        }
        if (self2.isNode() && !self2.removed()) {
          var degree = 0;
          var node = self2[0];
          var connectedEdges = node._private.edges;
          for (var i2 = 0; i2 < connectedEdges.length; i2++) {
            var edge = connectedEdges[i2];
            if (!includeLoops && edge.isLoop()) {
              continue;
            }
            degree += callback(node, edge);
          }
          return degree;
        } else {
          return;
        }
      };
    }
    extend(elesfn$i, {
      degree: defineDegreeFunction(function(node, edge) {
        if (edge.source().same(edge.target())) {
          return 2;
        } else {
          return 1;
        }
      }),
      indegree: defineDegreeFunction(function(node, edge) {
        if (edge.target().same(node)) {
          return 1;
        } else {
          return 0;
        }
      }),
      outdegree: defineDegreeFunction(function(node, edge) {
        if (edge.source().same(node)) {
          return 1;
        } else {
          return 0;
        }
      })
    });
    function defineDegreeBoundsFunction(degreeFn, callback) {
      return function(includeLoops) {
        var ret;
        var nodes = this.nodes();
        for (var i2 = 0; i2 < nodes.length; i2++) {
          var ele = nodes[i2];
          var degree = ele[degreeFn](includeLoops);
          if (degree !== void 0 && (ret === void 0 || callback(degree, ret))) {
            ret = degree;
          }
        }
        return ret;
      };
    }
    extend(elesfn$i, {
      minDegree: defineDegreeBoundsFunction("degree", function(degree, min2) {
        return degree < min2;
      }),
      maxDegree: defineDegreeBoundsFunction("degree", function(degree, max2) {
        return degree > max2;
      }),
      minIndegree: defineDegreeBoundsFunction("indegree", function(degree, min2) {
        return degree < min2;
      }),
      maxIndegree: defineDegreeBoundsFunction("indegree", function(degree, max2) {
        return degree > max2;
      }),
      minOutdegree: defineDegreeBoundsFunction("outdegree", function(degree, min2) {
        return degree < min2;
      }),
      maxOutdegree: defineDegreeBoundsFunction("outdegree", function(degree, max2) {
        return degree > max2;
      })
    });
    extend(elesfn$i, {
      totalDegree: function totalDegree(includeLoops) {
        var total = 0;
        var nodes = this.nodes();
        for (var i2 = 0; i2 < nodes.length; i2++) {
          total += nodes[i2].degree(includeLoops);
        }
        return total;
      }
    });
    var fn$2;
    var elesfn$j;
    var beforePositionSet = function beforePositionSet2(eles, newPos, silent) {
      for (var i2 = 0; i2 < eles.length; i2++) {
        var ele = eles[i2];
        if (!ele.locked()) {
          var oldPos = ele._private.position;
          var delta = {
            x: newPos.x != null ? newPos.x - oldPos.x : 0,
            y: newPos.y != null ? newPos.y - oldPos.y : 0
          };
          if (ele.isParent() && !(delta.x === 0 && delta.y === 0)) {
            ele.children().shift(delta, silent);
          }
          ele.shiftCachedBoundingBox(delta);
        }
      }
    };
    var positionDef = {
      field: "position",
      bindingEvent: "position",
      allowBinding: true,
      allowSetting: true,
      settingEvent: "position",
      settingTriggersEvent: true,
      triggerFnName: "emitAndNotify",
      allowGetting: true,
      validKeys: ["x", "y"],
      beforeGet: function beforeGet(ele) {
        ele.updateCompoundBounds();
      },
      beforeSet: function beforeSet(eles, newPos) {
        beforePositionSet(eles, newPos, false);
      },
      onSet: function onSet(eles) {
        eles.dirtyCompoundBoundsCache();
      },
      canSet: function canSet(ele) {
        return !ele.locked();
      }
    };
    fn$2 = elesfn$j = {
      position: define$3.data(positionDef),
      silentPosition: define$3.data(extend({}, positionDef, {
        allowBinding: false,
        allowSetting: true,
        settingTriggersEvent: false,
        allowGetting: false,
        beforeSet: function beforeSet(eles, newPos) {
          beforePositionSet(eles, newPos, true);
        }
      })),
      positions: function positions(pos, silent) {
        if (plainObject(pos)) {
          if (silent) {
            this.silentPosition(pos);
          } else {
            this.position(pos);
          }
        } else if (fn(pos)) {
          var _fn = pos;
          var cy = this.cy();
          cy.startBatch();
          for (var i2 = 0; i2 < this.length; i2++) {
            var ele = this[i2];
            var _pos = void 0;
            if (_pos = _fn(ele, i2)) {
              if (silent) {
                ele.silentPosition(_pos);
              } else {
                ele.position(_pos);
              }
            }
          }
          cy.endBatch();
        }
        return this;
      },
      silentPositions: function silentPositions(pos) {
        return this.positions(pos, true);
      },
      shift: function shift(dim, val, silent) {
        var delta;
        if (plainObject(dim)) {
          delta = {
            x: number(dim.x) ? dim.x : 0,
            y: number(dim.y) ? dim.y : 0
          };
          silent = val;
        } else if (string(dim) && number(val)) {
          delta = {
            x: 0,
            y: 0
          };
          delta[dim] = val;
        }
        if (delta != null) {
          var cy = this.cy();
          cy.startBatch();
          for (var i2 = 0; i2 < this.length; i2++) {
            var ele = this[i2];
            var pos = ele.position();
            var newPos = {
              x: pos.x + delta.x,
              y: pos.y + delta.y
            };
            if (silent) {
              ele.silentPosition(newPos);
            } else {
              ele.position(newPos);
            }
          }
          cy.endBatch();
        }
        return this;
      },
      silentShift: function silentShift(dim, val) {
        if (plainObject(dim)) {
          this.shift(dim, true);
        } else if (string(dim) && number(val)) {
          this.shift(dim, val, true);
        }
        return this;
      },
      renderedPosition: function renderedPosition(dim, val) {
        var ele = this[0];
        var cy = this.cy();
        var zoom = cy.zoom();
        var pan = cy.pan();
        var rpos = plainObject(dim) ? dim : void 0;
        var setting = rpos !== void 0 || val !== void 0 && string(dim);
        if (ele && ele.isNode()) {
          if (setting) {
            for (var i2 = 0; i2 < this.length; i2++) {
              var _ele = this[i2];
              if (val !== void 0) {
                _ele.position(dim, (val - pan[dim]) / zoom);
              } else if (rpos !== void 0) {
                _ele.position(renderedToModelPosition(rpos, zoom, pan));
              }
            }
          } else {
            var pos = ele.position();
            rpos = modelToRenderedPosition(pos, zoom, pan);
            if (dim === void 0) {
              return rpos;
            } else {
              return rpos[dim];
            }
          }
        } else if (!setting) {
          return void 0;
        }
        return this;
      },
      relativePosition: function relativePosition(dim, val) {
        var ele = this[0];
        var cy = this.cy();
        var ppos = plainObject(dim) ? dim : void 0;
        var setting = ppos !== void 0 || val !== void 0 && string(dim);
        var hasCompoundNodes = cy.hasCompoundNodes();
        if (ele && ele.isNode()) {
          if (setting) {
            for (var i2 = 0; i2 < this.length; i2++) {
              var _ele2 = this[i2];
              var parent = hasCompoundNodes ? _ele2.parent() : null;
              var hasParent = parent && parent.length > 0;
              var relativeToParent = hasParent;
              if (hasParent) {
                parent = parent[0];
              }
              var origin = relativeToParent ? parent.position() : {
                x: 0,
                y: 0
              };
              if (val !== void 0) {
                _ele2.position(dim, val + origin[dim]);
              } else if (ppos !== void 0) {
                _ele2.position({
                  x: ppos.x + origin.x,
                  y: ppos.y + origin.y
                });
              }
            }
          } else {
            var pos = ele.position();
            var _parent = hasCompoundNodes ? ele.parent() : null;
            var _hasParent = _parent && _parent.length > 0;
            var _relativeToParent = _hasParent;
            if (_hasParent) {
              _parent = _parent[0];
            }
            var _origin = _relativeToParent ? _parent.position() : {
              x: 0,
              y: 0
            };
            ppos = {
              x: pos.x - _origin.x,
              y: pos.y - _origin.y
            };
            if (dim === void 0) {
              return ppos;
            } else {
              return ppos[dim];
            }
          }
        } else if (!setting) {
          return void 0;
        }
        return this;
      }
    };
    fn$2.modelPosition = fn$2.point = fn$2.position;
    fn$2.modelPositions = fn$2.points = fn$2.positions;
    fn$2.renderedPoint = fn$2.renderedPosition;
    fn$2.relativePoint = fn$2.relativePosition;
    var position = elesfn$j;
    var fn$3;
    var elesfn$k;
    fn$3 = elesfn$k = {};
    elesfn$k.renderedBoundingBox = function(options) {
      var bb = this.boundingBox(options);
      var cy = this.cy();
      var zoom = cy.zoom();
      var pan = cy.pan();
      var x1 = bb.x1 * zoom + pan.x;
      var x2 = bb.x2 * zoom + pan.x;
      var y1 = bb.y1 * zoom + pan.y;
      var y2 = bb.y2 * zoom + pan.y;
      return {
        x1,
        x2,
        y1,
        y2,
        w: x2 - x1,
        h: y2 - y1
      };
    };
    elesfn$k.dirtyCompoundBoundsCache = function() {
      var cy = this.cy();
      if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {
        return this;
      }
      this.forEachUp(function(ele) {
        if (ele.isParent()) {
          var _p = ele._private;
          _p.compoundBoundsClean = false;
          _p.bbCache = null;
          ele.emitAndNotify("bounds");
        }
      });
      return this;
    };
    elesfn$k.updateCompoundBounds = function() {
      var force = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      var cy = this.cy();
      if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {
        return this;
      }
      if (!force && cy.batching()) {
        return this;
      }
      function update2(parent) {
        if (!parent.isParent()) {
          return;
        }
        var _p2 = parent._private;
        var children = parent.children();
        var includeLabels = parent.pstyle("compound-sizing-wrt-labels").value === "include";
        var min2 = {
          width: {
            val: parent.pstyle("min-width").pfValue,
            left: parent.pstyle("min-width-bias-left"),
            right: parent.pstyle("min-width-bias-right")
          },
          height: {
            val: parent.pstyle("min-height").pfValue,
            top: parent.pstyle("min-height-bias-top"),
            bottom: parent.pstyle("min-height-bias-bottom")
          }
        };
        var bb = children.boundingBox({
          includeLabels,
          includeOverlays: false,
          useCache: false
        });
        var pos = _p2.position;
        if (bb.w === 0 || bb.h === 0) {
          bb = {
            w: parent.pstyle("width").pfValue,
            h: parent.pstyle("height").pfValue
          };
          bb.x1 = pos.x - bb.w / 2;
          bb.x2 = pos.x + bb.w / 2;
          bb.y1 = pos.y - bb.h / 2;
          bb.y2 = pos.y + bb.h / 2;
        }
        function computeBiasValues(propDiff, propBias, propBiasComplement) {
          var biasDiff = 0;
          var biasComplementDiff = 0;
          var biasTotal = propBias + propBiasComplement;
          if (propDiff > 0 && biasTotal > 0) {
            biasDiff = propBias / biasTotal * propDiff;
            biasComplementDiff = propBiasComplement / biasTotal * propDiff;
          }
          return {
            biasDiff,
            biasComplementDiff
          };
        }
        function computePaddingValues(width, height, paddingObject, relativeTo) {
          if (paddingObject.units === "%") {
            switch (relativeTo) {
              case "width":
                return width > 0 ? paddingObject.pfValue * width : 0;
              case "height":
                return height > 0 ? paddingObject.pfValue * height : 0;
              case "average":
                return width > 0 && height > 0 ? paddingObject.pfValue * (width + height) / 2 : 0;
              case "min":
                return width > 0 && height > 0 ? width > height ? paddingObject.pfValue * height : paddingObject.pfValue * width : 0;
              case "max":
                return width > 0 && height > 0 ? width > height ? paddingObject.pfValue * width : paddingObject.pfValue * height : 0;
              default:
                return 0;
            }
          } else if (paddingObject.units === "px") {
            return paddingObject.pfValue;
          } else {
            return 0;
          }
        }
        var leftVal = min2.width.left.value;
        if (min2.width.left.units === "px" && min2.width.val > 0) {
          leftVal = leftVal * 100 / min2.width.val;
        }
        var rightVal = min2.width.right.value;
        if (min2.width.right.units === "px" && min2.width.val > 0) {
          rightVal = rightVal * 100 / min2.width.val;
        }
        var topVal = min2.height.top.value;
        if (min2.height.top.units === "px" && min2.height.val > 0) {
          topVal = topVal * 100 / min2.height.val;
        }
        var bottomVal = min2.height.bottom.value;
        if (min2.height.bottom.units === "px" && min2.height.val > 0) {
          bottomVal = bottomVal * 100 / min2.height.val;
        }
        var widthBiasDiffs = computeBiasValues(min2.width.val - bb.w, leftVal, rightVal);
        var diffLeft = widthBiasDiffs.biasDiff;
        var diffRight = widthBiasDiffs.biasComplementDiff;
        var heightBiasDiffs = computeBiasValues(min2.height.val - bb.h, topVal, bottomVal);
        var diffTop = heightBiasDiffs.biasDiff;
        var diffBottom = heightBiasDiffs.biasComplementDiff;
        _p2.autoPadding = computePaddingValues(bb.w, bb.h, parent.pstyle("padding"), parent.pstyle("padding-relative-to").value);
        _p2.autoWidth = Math.max(bb.w, min2.width.val);
        pos.x = (-diffLeft + bb.x1 + bb.x2 + diffRight) / 2;
        _p2.autoHeight = Math.max(bb.h, min2.height.val);
        pos.y = (-diffTop + bb.y1 + bb.y2 + diffBottom) / 2;
      }
      for (var i2 = 0; i2 < this.length; i2++) {
        var ele = this[i2];
        var _p = ele._private;
        if (!_p.compoundBoundsClean) {
          update2(ele);
          if (!cy.batching()) {
            _p.compoundBoundsClean = true;
          }
        }
      }
      return this;
    };
    var noninf = function noninf2(x) {
      if (x === Infinity || x === -Infinity) {
        return 0;
      }
      return x;
    };
    var updateBounds = function updateBounds2(b, x1, y1, x2, y2) {
      if (x2 - x1 === 0 || y2 - y1 === 0) {
        return;
      }
      if (x1 == null || y1 == null || x2 == null || y2 == null) {
        return;
      }
      b.x1 = x1 < b.x1 ? x1 : b.x1;
      b.x2 = x2 > b.x2 ? x2 : b.x2;
      b.y1 = y1 < b.y1 ? y1 : b.y1;
      b.y2 = y2 > b.y2 ? y2 : b.y2;
      b.w = b.x2 - b.x1;
      b.h = b.y2 - b.y1;
    };
    var updateBoundsFromBox = function updateBoundsFromBox2(b, b2) {
      if (b2 == null) {
        return b;
      }
      return updateBounds(b, b2.x1, b2.y1, b2.x2, b2.y2);
    };
    var prefixedProperty = function prefixedProperty2(obj, field, prefix) {
      return getPrefixedProperty(obj, field, prefix);
    };
    var updateBoundsFromArrow = function updateBoundsFromArrow2(bounds2, ele, prefix) {
      if (ele.cy().headless()) {
        return;
      }
      var _p = ele._private;
      var rstyle = _p.rstyle;
      var halfArW = rstyle.arrowWidth / 2;
      var arrowType = ele.pstyle(prefix + "-arrow-shape").value;
      var x;
      var y;
      if (arrowType !== "none") {
        if (prefix === "source") {
          x = rstyle.srcX;
          y = rstyle.srcY;
        } else if (prefix === "target") {
          x = rstyle.tgtX;
          y = rstyle.tgtY;
        } else {
          x = rstyle.midX;
          y = rstyle.midY;
        }
        var bbs = _p.arrowBounds = _p.arrowBounds || {};
        var bb = bbs[prefix] = bbs[prefix] || {};
        bb.x1 = x - halfArW;
        bb.y1 = y - halfArW;
        bb.x2 = x + halfArW;
        bb.y2 = y + halfArW;
        bb.w = bb.x2 - bb.x1;
        bb.h = bb.y2 - bb.y1;
        expandBoundingBox(bb, 1);
        updateBounds(bounds2, bb.x1, bb.y1, bb.x2, bb.y2);
      }
    };
    var updateBoundsFromLabel = function updateBoundsFromLabel2(bounds2, ele, prefix) {
      if (ele.cy().headless()) {
        return;
      }
      var prefixDash;
      if (prefix) {
        prefixDash = prefix + "-";
      } else {
        prefixDash = "";
      }
      var _p = ele._private;
      var rstyle = _p.rstyle;
      var label = ele.pstyle(prefixDash + "label").strValue;
      if (label) {
        var halign = ele.pstyle("text-halign");
        var valign = ele.pstyle("text-valign");
        var labelWidth = prefixedProperty(rstyle, "labelWidth", prefix);
        var labelHeight = prefixedProperty(rstyle, "labelHeight", prefix);
        var labelX = prefixedProperty(rstyle, "labelX", prefix);
        var labelY = prefixedProperty(rstyle, "labelY", prefix);
        var marginX = ele.pstyle(prefixDash + "text-margin-x").pfValue;
        var marginY = ele.pstyle(prefixDash + "text-margin-y").pfValue;
        var isEdge = ele.isEdge();
        var rotation = ele.pstyle(prefixDash + "text-rotation");
        var outlineWidth = ele.pstyle("text-outline-width").pfValue;
        var borderWidth = ele.pstyle("text-border-width").pfValue;
        var halfBorderWidth = borderWidth / 2;
        var padding = ele.pstyle("text-background-padding").pfValue;
        var marginOfError = 2;
        var lh = labelHeight;
        var lw = labelWidth;
        var lw_2 = lw / 2;
        var lh_2 = lh / 2;
        var lx1, lx2, ly1, ly2;
        if (isEdge) {
          lx1 = labelX - lw_2;
          lx2 = labelX + lw_2;
          ly1 = labelY - lh_2;
          ly2 = labelY + lh_2;
        } else {
          switch (halign.value) {
            case "left":
              lx1 = labelX - lw;
              lx2 = labelX;
              break;
            case "center":
              lx1 = labelX - lw_2;
              lx2 = labelX + lw_2;
              break;
            case "right":
              lx1 = labelX;
              lx2 = labelX + lw;
              break;
          }
          switch (valign.value) {
            case "top":
              ly1 = labelY - lh;
              ly2 = labelY;
              break;
            case "center":
              ly1 = labelY - lh_2;
              ly2 = labelY + lh_2;
              break;
            case "bottom":
              ly1 = labelY;
              ly2 = labelY + lh;
              break;
          }
        }
        lx1 += marginX - Math.max(outlineWidth, halfBorderWidth) - padding - marginOfError;
        lx2 += marginX + Math.max(outlineWidth, halfBorderWidth) + padding + marginOfError;
        ly1 += marginY - Math.max(outlineWidth, halfBorderWidth) - padding - marginOfError;
        ly2 += marginY + Math.max(outlineWidth, halfBorderWidth) + padding + marginOfError;
        var bbPrefix = prefix || "main";
        var bbs = _p.labelBounds;
        var bb = bbs[bbPrefix] = bbs[bbPrefix] || {};
        bb.x1 = lx1;
        bb.y1 = ly1;
        bb.x2 = lx2;
        bb.y2 = ly2;
        bb.w = lx2 - lx1;
        bb.h = ly2 - ly1;
        var isAutorotate = isEdge && rotation.strValue === "autorotate";
        var isPfValue = rotation.pfValue != null && rotation.pfValue !== 0;
        if (isAutorotate || isPfValue) {
          var theta = isAutorotate ? prefixedProperty(_p.rstyle, "labelAngle", prefix) : rotation.pfValue;
          var cos2 = Math.cos(theta);
          var sin2 = Math.sin(theta);
          var xo = (lx1 + lx2) / 2;
          var yo = (ly1 + ly2) / 2;
          if (!isEdge) {
            switch (halign.value) {
              case "left":
                xo = lx2;
                break;
              case "right":
                xo = lx1;
                break;
            }
            switch (valign.value) {
              case "top":
                yo = ly2;
                break;
              case "bottom":
                yo = ly1;
                break;
            }
          }
          var rotate = function rotate2(x, y) {
            x = x - xo;
            y = y - yo;
            return {
              x: x * cos2 - y * sin2 + xo,
              y: x * sin2 + y * cos2 + yo
            };
          };
          var px1y1 = rotate(lx1, ly1);
          var px1y2 = rotate(lx1, ly2);
          var px2y1 = rotate(lx2, ly1);
          var px2y2 = rotate(lx2, ly2);
          lx1 = Math.min(px1y1.x, px1y2.x, px2y1.x, px2y2.x);
          lx2 = Math.max(px1y1.x, px1y2.x, px2y1.x, px2y2.x);
          ly1 = Math.min(px1y1.y, px1y2.y, px2y1.y, px2y2.y);
          ly2 = Math.max(px1y1.y, px1y2.y, px2y1.y, px2y2.y);
        }
        var bbPrefixRot = bbPrefix + "Rot";
        var bbRot = bbs[bbPrefixRot] = bbs[bbPrefixRot] || {};
        bbRot.x1 = lx1;
        bbRot.y1 = ly1;
        bbRot.x2 = lx2;
        bbRot.y2 = ly2;
        bbRot.w = lx2 - lx1;
        bbRot.h = ly2 - ly1;
        updateBounds(bounds2, lx1, ly1, lx2, ly2);
        updateBounds(_p.labelBounds.all, lx1, ly1, lx2, ly2);
      }
      return bounds2;
    };
    var boundingBoxImpl = function boundingBoxImpl2(ele, options) {
      var cy = ele._private.cy;
      var styleEnabled = cy.styleEnabled();
      var headless = cy.headless();
      var bounds2 = makeBoundingBox();
      var _p = ele._private;
      var isNode = ele.isNode();
      var isEdge = ele.isEdge();
      var ex1, ex2, ey1, ey2;
      var x, y;
      var rstyle = _p.rstyle;
      var manualExpansion = isNode && styleEnabled ? ele.pstyle("bounds-expansion").pfValue : [0];
      var isDisplayed = function isDisplayed2(ele2) {
        return ele2.pstyle("display").value !== "none";
      };
      var displayed = !styleEnabled || isDisplayed(ele) && (!isEdge || isDisplayed(ele.source()) && isDisplayed(ele.target()));
      if (displayed) {
        var overlayOpacity = 0;
        var overlayPadding = 0;
        if (styleEnabled && options.includeOverlays) {
          overlayOpacity = ele.pstyle("overlay-opacity").value;
          if (overlayOpacity !== 0) {
            overlayPadding = ele.pstyle("overlay-padding").value;
          }
        }
        var w = 0;
        var wHalf = 0;
        if (styleEnabled) {
          w = ele.pstyle("width").pfValue;
          wHalf = w / 2;
        }
        if (isNode && options.includeNodes) {
          var pos = ele.position();
          x = pos.x;
          y = pos.y;
          var _w = ele.outerWidth();
          var halfW = _w / 2;
          var h = ele.outerHeight();
          var halfH = h / 2;
          ex1 = x - halfW;
          ex2 = x + halfW;
          ey1 = y - halfH;
          ey2 = y + halfH;
          updateBounds(bounds2, ex1, ey1, ex2, ey2);
        } else if (isEdge && options.includeEdges) {
          if (styleEnabled && !headless) {
            var curveStyle = ele.pstyle("curve-style").strValue;
            ex1 = Math.min(rstyle.srcX, rstyle.midX, rstyle.tgtX);
            ex2 = Math.max(rstyle.srcX, rstyle.midX, rstyle.tgtX);
            ey1 = Math.min(rstyle.srcY, rstyle.midY, rstyle.tgtY);
            ey2 = Math.max(rstyle.srcY, rstyle.midY, rstyle.tgtY);
            ex1 -= wHalf;
            ex2 += wHalf;
            ey1 -= wHalf;
            ey2 += wHalf;
            updateBounds(bounds2, ex1, ey1, ex2, ey2);
            if (curveStyle === "haystack") {
              var hpts = rstyle.haystackPts;
              if (hpts && hpts.length === 2) {
                ex1 = hpts[0].x;
                ey1 = hpts[0].y;
                ex2 = hpts[1].x;
                ey2 = hpts[1].y;
                if (ex1 > ex2) {
                  var temp = ex1;
                  ex1 = ex2;
                  ex2 = temp;
                }
                if (ey1 > ey2) {
                  var _temp = ey1;
                  ey1 = ey2;
                  ey2 = _temp;
                }
                updateBounds(bounds2, ex1 - wHalf, ey1 - wHalf, ex2 + wHalf, ey2 + wHalf);
              }
            } else if (curveStyle === "bezier" || curveStyle === "unbundled-bezier" || curveStyle === "segments" || curveStyle === "taxi") {
              var pts2;
              switch (curveStyle) {
                case "bezier":
                case "unbundled-bezier":
                  pts2 = rstyle.bezierPts;
                  break;
                case "segments":
                case "taxi":
                  pts2 = rstyle.linePts;
                  break;
              }
              if (pts2 != null) {
                for (var j = 0; j < pts2.length; j++) {
                  var pt = pts2[j];
                  ex1 = pt.x - wHalf;
                  ex2 = pt.x + wHalf;
                  ey1 = pt.y - wHalf;
                  ey2 = pt.y + wHalf;
                  updateBounds(bounds2, ex1, ey1, ex2, ey2);
                }
              }
            }
          } else {
            var n1 = ele.source();
            var n1pos = n1.position();
            var n2 = ele.target();
            var n2pos = n2.position();
            ex1 = n1pos.x;
            ex2 = n2pos.x;
            ey1 = n1pos.y;
            ey2 = n2pos.y;
            if (ex1 > ex2) {
              var _temp2 = ex1;
              ex1 = ex2;
              ex2 = _temp2;
            }
            if (ey1 > ey2) {
              var _temp3 = ey1;
              ey1 = ey2;
              ey2 = _temp3;
            }
            ex1 -= wHalf;
            ex2 += wHalf;
            ey1 -= wHalf;
            ey2 += wHalf;
            updateBounds(bounds2, ex1, ey1, ex2, ey2);
          }
        }
        if (styleEnabled && options.includeEdges && isEdge) {
          updateBoundsFromArrow(bounds2, ele, "mid-source");
          updateBoundsFromArrow(bounds2, ele, "mid-target");
          updateBoundsFromArrow(bounds2, ele, "source");
          updateBoundsFromArrow(bounds2, ele, "target");
        }
        if (styleEnabled) {
          var ghost = ele.pstyle("ghost").value === "yes";
          if (ghost) {
            var gx = ele.pstyle("ghost-offset-x").pfValue;
            var gy = ele.pstyle("ghost-offset-y").pfValue;
            updateBounds(bounds2, bounds2.x1 + gx, bounds2.y1 + gy, bounds2.x2 + gx, bounds2.y2 + gy);
          }
        }
        var bbBody = _p.bodyBounds = _p.bodyBounds || {};
        assignBoundingBox(bbBody, bounds2);
        expandBoundingBoxSides(bbBody, manualExpansion);
        expandBoundingBox(bbBody, 1);
        if (styleEnabled) {
          ex1 = bounds2.x1;
          ex2 = bounds2.x2;
          ey1 = bounds2.y1;
          ey2 = bounds2.y2;
          updateBounds(bounds2, ex1 - overlayPadding, ey1 - overlayPadding, ex2 + overlayPadding, ey2 + overlayPadding);
        }
        var bbOverlay = _p.overlayBounds = _p.overlayBounds || {};
        assignBoundingBox(bbOverlay, bounds2);
        expandBoundingBoxSides(bbOverlay, manualExpansion);
        expandBoundingBox(bbOverlay, 1);
        var bbLabels = _p.labelBounds = _p.labelBounds || {};
        if (bbLabels.all != null) {
          clearBoundingBox(bbLabels.all);
        } else {
          bbLabels.all = makeBoundingBox();
        }
        if (styleEnabled && options.includeLabels) {
          if (options.includeMainLabels) {
            updateBoundsFromLabel(bounds2, ele, null);
          }
          if (isEdge) {
            if (options.includeSourceLabels) {
              updateBoundsFromLabel(bounds2, ele, "source");
            }
            if (options.includeTargetLabels) {
              updateBoundsFromLabel(bounds2, ele, "target");
            }
          }
        }
      }
      bounds2.x1 = noninf(bounds2.x1);
      bounds2.y1 = noninf(bounds2.y1);
      bounds2.x2 = noninf(bounds2.x2);
      bounds2.y2 = noninf(bounds2.y2);
      bounds2.w = noninf(bounds2.x2 - bounds2.x1);
      bounds2.h = noninf(bounds2.y2 - bounds2.y1);
      if (bounds2.w > 0 && bounds2.h > 0 && displayed) {
        expandBoundingBoxSides(bounds2, manualExpansion);
        expandBoundingBox(bounds2, 1);
      }
      return bounds2;
    };
    var getKey = function getKey2(opts) {
      var i2 = 0;
      var tf = function tf2(val) {
        return (val ? 1 : 0) << i2++;
      };
      var key = 0;
      key += tf(opts.incudeNodes);
      key += tf(opts.includeEdges);
      key += tf(opts.includeLabels);
      key += tf(opts.includeMainLabels);
      key += tf(opts.includeSourceLabels);
      key += tf(opts.includeTargetLabels);
      key += tf(opts.includeOverlays);
      return key;
    };
    var getBoundingBoxPosKey = function getBoundingBoxPosKey2(ele) {
      if (ele.isEdge()) {
        var p1 = ele.source().position();
        var p2 = ele.target().position();
        var r = function r2(x) {
          return Math.round(x);
        };
        return hashIntsArray([r(p1.x), r(p1.y), r(p2.x), r(p2.y)]);
      } else {
        return 0;
      }
    };
    var cachedBoundingBoxImpl = function cachedBoundingBoxImpl2(ele, opts) {
      var _p = ele._private;
      var bb;
      var isEdge = ele.isEdge();
      var key = opts == null ? defBbOptsKey : getKey(opts);
      var usingDefOpts = key === defBbOptsKey;
      var currPosKey = getBoundingBoxPosKey(ele);
      var isPosKeySame = _p.bbCachePosKey === currPosKey;
      var useCache = opts.useCache && isPosKeySame;
      var isDirty = function isDirty2(ele2) {
        return ele2._private.bbCache == null || ele2._private.styleDirty;
      };
      var needRecalc = !useCache || isDirty(ele) || isEdge && isDirty(ele.source()) || isDirty(ele.target());
      if (needRecalc) {
        if (!isPosKeySame) {
          ele.recalculateRenderedStyle(useCache);
        }
        bb = boundingBoxImpl(ele, defBbOpts);
        _p.bbCache = bb;
        _p.bbCacheShift.x = _p.bbCacheShift.y = 0;
        _p.bbCachePosKey = currPosKey;
      } else {
        bb = _p.bbCache;
      }
      if (!needRecalc && (_p.bbCacheShift.x !== 0 || _p.bbCacheShift.y !== 0)) {
        var shift = assignShiftToBoundingBox;
        var delta = _p.bbCacheShift;
        var safeShift = function safeShift2(bb2, delta2) {
          if (bb2 != null) {
            shift(bb2, delta2);
          }
        };
        shift(bb, delta);
        var bodyBounds = _p.bodyBounds, overlayBounds = _p.overlayBounds, labelBounds = _p.labelBounds, arrowBounds = _p.arrowBounds;
        safeShift(bodyBounds, delta);
        safeShift(overlayBounds, delta);
        if (arrowBounds != null) {
          safeShift(arrowBounds.source, delta);
          safeShift(arrowBounds.target, delta);
          safeShift(arrowBounds["mid-source"], delta);
          safeShift(arrowBounds["mid-target"], delta);
        }
        if (labelBounds != null) {
          safeShift(labelBounds.main, delta);
          safeShift(labelBounds.all, delta);
          safeShift(labelBounds.source, delta);
          safeShift(labelBounds.target, delta);
        }
      }
      _p.bbCacheShift.x = _p.bbCacheShift.y = 0;
      if (!usingDefOpts) {
        var isNode = ele.isNode();
        bb = makeBoundingBox();
        if (opts.includeNodes && isNode || opts.includeEdges && !isNode) {
          if (opts.includeOverlays) {
            updateBoundsFromBox(bb, _p.overlayBounds);
          } else {
            updateBoundsFromBox(bb, _p.bodyBounds);
          }
        }
        if (opts.includeLabels) {
          if (opts.includeMainLabels && (!isEdge || opts.includeSourceLabels && opts.includeTargetLabels)) {
            updateBoundsFromBox(bb, _p.labelBounds.all);
          } else {
            if (opts.includeMainLabels) {
              updateBoundsFromBox(bb, _p.labelBounds.mainRot);
            }
            if (opts.includeSourceLabels) {
              updateBoundsFromBox(bb, _p.labelBounds.sourceRot);
            }
            if (opts.includeTargetLabels) {
              updateBoundsFromBox(bb, _p.labelBounds.targetRot);
            }
          }
        }
        bb.w = bb.x2 - bb.x1;
        bb.h = bb.y2 - bb.y1;
      }
      return bb;
    };
    var defBbOpts = {
      includeNodes: true,
      includeEdges: true,
      includeLabels: true,
      includeMainLabels: true,
      includeSourceLabels: true,
      includeTargetLabels: true,
      includeOverlays: true,
      useCache: true
    };
    var defBbOptsKey = getKey(defBbOpts);
    var filledBbOpts = defaults(defBbOpts);
    elesfn$k.boundingBox = function(options) {
      var bounds2;
      if (this.length === 1 && this[0]._private.bbCache != null && !this[0]._private.styleDirty && (options === void 0 || options.useCache === void 0 || options.useCache === true)) {
        if (options === void 0) {
          options = defBbOpts;
        } else {
          options = filledBbOpts(options);
        }
        bounds2 = cachedBoundingBoxImpl(this[0], options);
      } else {
        bounds2 = makeBoundingBox();
        options = options || defBbOpts;
        var opts = filledBbOpts(options);
        var eles = this;
        var cy = eles.cy();
        var styleEnabled = cy.styleEnabled();
        if (styleEnabled) {
          for (var i2 = 0; i2 < eles.length; i2++) {
            var ele = eles[i2];
            var _p = ele._private;
            var currPosKey = getBoundingBoxPosKey(ele);
            var isPosKeySame = _p.bbCachePosKey === currPosKey;
            var useCache = opts.useCache && isPosKeySame && !_p.styleDirty;
            ele.recalculateRenderedStyle(useCache);
          }
        }
        this.updateCompoundBounds();
        for (var _i = 0; _i < eles.length; _i++) {
          var _ele = eles[_i];
          updateBoundsFromBox(bounds2, cachedBoundingBoxImpl(_ele, opts));
        }
      }
      bounds2.x1 = noninf(bounds2.x1);
      bounds2.y1 = noninf(bounds2.y1);
      bounds2.x2 = noninf(bounds2.x2);
      bounds2.y2 = noninf(bounds2.y2);
      bounds2.w = noninf(bounds2.x2 - bounds2.x1);
      bounds2.h = noninf(bounds2.y2 - bounds2.y1);
      return bounds2;
    };
    elesfn$k.dirtyBoundingBoxCache = function() {
      for (var i2 = 0; i2 < this.length; i2++) {
        var _p = this[i2]._private;
        _p.bbCache = null;
        _p.bbCacheShift.x = _p.bbCacheShift.y = 0;
        _p.bbCachePosKey = null;
        _p.bodyBounds = null;
        _p.overlayBounds = null;
        _p.labelBounds.all = null;
        _p.labelBounds.source = null;
        _p.labelBounds.target = null;
        _p.labelBounds.main = null;
        _p.labelBounds.sourceRot = null;
        _p.labelBounds.targetRot = null;
        _p.labelBounds.mainRot = null;
        _p.arrowBounds.source = null;
        _p.arrowBounds.target = null;
        _p.arrowBounds["mid-source"] = null;
        _p.arrowBounds["mid-target"] = null;
      }
      this.emitAndNotify("bounds");
      return this;
    };
    elesfn$k.shiftCachedBoundingBox = function(delta) {
      for (var i2 = 0; i2 < this.length; i2++) {
        var ele = this[i2];
        var _p = ele._private;
        var bb = _p.bbCache;
        if (bb != null) {
          _p.bbCacheShift.x += delta.x;
          _p.bbCacheShift.y += delta.y;
        }
      }
      this.emitAndNotify("bounds");
      return this;
    };
    elesfn$k.boundingBoxAt = function(fn2) {
      var nodes = this.nodes();
      var cy = this.cy();
      var hasCompoundNodes = cy.hasCompoundNodes();
      if (hasCompoundNodes) {
        nodes = nodes.filter(function(node) {
          return !node.isParent();
        });
      }
      if (plainObject(fn2)) {
        var obj = fn2;
        fn2 = function fn3() {
          return obj;
        };
      }
      var storeOldPos = function storeOldPos2(node, i2) {
        return node._private.bbAtOldPos = fn2(node, i2);
      };
      var getOldPos = function getOldPos2(node) {
        return node._private.bbAtOldPos;
      };
      cy.startBatch();
      nodes.forEach(storeOldPos).silentPositions(fn2);
      if (hasCompoundNodes) {
        this.updateCompoundBounds(true);
      }
      var bb = copyBoundingBox(this.boundingBox({
        useCache: false
      }));
      nodes.silentPositions(getOldPos);
      cy.endBatch();
      return bb;
    };
    fn$3.boundingbox = fn$3.bb = fn$3.boundingBox;
    fn$3.renderedBoundingbox = fn$3.renderedBoundingBox;
    var bounds = elesfn$k;
    var fn$4;
    var elesfn$l;
    fn$4 = elesfn$l = {};
    var defineDimFns = function defineDimFns2(opts) {
      opts.uppercaseName = capitalize(opts.name);
      opts.autoName = "auto" + opts.uppercaseName;
      opts.labelName = "label" + opts.uppercaseName;
      opts.outerName = "outer" + opts.uppercaseName;
      opts.uppercaseOuterName = capitalize(opts.outerName);
      fn$4[opts.name] = function dimImpl() {
        var ele = this[0];
        var _p = ele._private;
        var cy = _p.cy;
        var styleEnabled = cy._private.styleEnabled;
        if (ele) {
          if (styleEnabled) {
            if (ele.isParent()) {
              ele.updateCompoundBounds();
              return _p[opts.autoName] || 0;
            }
            var d = ele.pstyle(opts.name);
            switch (d.strValue) {
              case "label":
                ele.recalculateRenderedStyle();
                return _p.rstyle[opts.labelName] || 0;
              default:
                return d.pfValue;
            }
          } else {
            return 1;
          }
        }
      };
      fn$4["outer" + opts.uppercaseName] = function outerDimImpl() {
        var ele = this[0];
        var _p = ele._private;
        var cy = _p.cy;
        var styleEnabled = cy._private.styleEnabled;
        if (ele) {
          if (styleEnabled) {
            var dim = ele[opts.name]();
            var border = ele.pstyle("border-width").pfValue;
            var padding = 2 * ele.padding();
            return dim + border + padding;
          } else {
            return 1;
          }
        }
      };
      fn$4["rendered" + opts.uppercaseName] = function renderedDimImpl() {
        var ele = this[0];
        if (ele) {
          var d = ele[opts.name]();
          return d * this.cy().zoom();
        }
      };
      fn$4["rendered" + opts.uppercaseOuterName] = function renderedOuterDimImpl() {
        var ele = this[0];
        if (ele) {
          var od = ele[opts.outerName]();
          return od * this.cy().zoom();
        }
      };
    };
    defineDimFns({
      name: "width"
    });
    defineDimFns({
      name: "height"
    });
    elesfn$l.padding = function() {
      var ele = this[0];
      var _p = ele._private;
      if (ele.isParent()) {
        ele.updateCompoundBounds();
        if (_p.autoPadding !== void 0) {
          return _p.autoPadding;
        } else {
          return ele.pstyle("padding").pfValue;
        }
      } else {
        return ele.pstyle("padding").pfValue;
      }
    };
    elesfn$l.paddedHeight = function() {
      var ele = this[0];
      return ele.height() + 2 * ele.padding();
    };
    elesfn$l.paddedWidth = function() {
      var ele = this[0];
      return ele.width() + 2 * ele.padding();
    };
    var widthHeight = elesfn$l;
    var ifEdge = function ifEdge2(ele, getValue2) {
      if (ele.isEdge()) {
        return getValue2(ele);
      }
    };
    var ifEdgeRenderedPosition = function ifEdgeRenderedPosition2(ele, getPoint) {
      if (ele.isEdge()) {
        var cy = ele.cy();
        return modelToRenderedPosition(getPoint(ele), cy.zoom(), cy.pan());
      }
    };
    var ifEdgeRenderedPositions = function ifEdgeRenderedPositions2(ele, getPoints) {
      if (ele.isEdge()) {
        var cy = ele.cy();
        var pan = cy.pan();
        var zoom = cy.zoom();
        return getPoints(ele).map(function(p2) {
          return modelToRenderedPosition(p2, zoom, pan);
        });
      }
    };
    var controlPoints = function controlPoints2(ele) {
      return ele.renderer().getControlPoints(ele);
    };
    var segmentPoints = function segmentPoints2(ele) {
      return ele.renderer().getSegmentPoints(ele);
    };
    var sourceEndpoint = function sourceEndpoint2(ele) {
      return ele.renderer().getSourceEndpoint(ele);
    };
    var targetEndpoint = function targetEndpoint2(ele) {
      return ele.renderer().getTargetEndpoint(ele);
    };
    var midpoint = function midpoint2(ele) {
      return ele.renderer().getEdgeMidpoint(ele);
    };
    var pts = {
      controlPoints: {
        get: controlPoints,
        mult: true
      },
      segmentPoints: {
        get: segmentPoints,
        mult: true
      },
      sourceEndpoint: {
        get: sourceEndpoint
      },
      targetEndpoint: {
        get: targetEndpoint
      },
      midpoint: {
        get: midpoint
      }
    };
    var renderedName = function renderedName2(name) {
      return "rendered" + name[0].toUpperCase() + name.substr(1);
    };
    var edgePoints = Object.keys(pts).reduce(function(obj, name) {
      var spec = pts[name];
      var rName = renderedName(name);
      obj[name] = function() {
        return ifEdge(this, spec.get);
      };
      if (spec.mult) {
        obj[rName] = function() {
          return ifEdgeRenderedPositions(this, spec.get);
        };
      } else {
        obj[rName] = function() {
          return ifEdgeRenderedPosition(this, spec.get);
        };
      }
      return obj;
    }, {});
    var dimensions = extend({}, position, bounds, widthHeight, edgePoints);
    /*!
    Event object based on jQuery events, MIT license
    
    https://jquery.org/license/
    https://tldrlegal.com/license/mit-license
    https://github.com/jquery/jquery/blob/master/src/event.js
    */
    var Event = function Event2(src, props) {
      this.recycle(src, props);
    };
    function returnFalse() {
      return false;
    }
    function returnTrue() {
      return true;
    }
    Event.prototype = {
      instanceString: function instanceString() {
        return "event";
      },
      recycle: function recycle(src, props) {
        this.isImmediatePropagationStopped = this.isPropagationStopped = this.isDefaultPrevented = returnFalse;
        if (src != null && src.preventDefault) {
          this.type = src.type;
          this.isDefaultPrevented = src.defaultPrevented ? returnTrue : returnFalse;
        } else if (src != null && src.type) {
          props = src;
        } else {
          this.type = src;
        }
        if (props != null) {
          this.originalEvent = props.originalEvent;
          this.type = props.type != null ? props.type : this.type;
          this.cy = props.cy;
          this.target = props.target;
          this.position = props.position;
          this.renderedPosition = props.renderedPosition;
          this.namespace = props.namespace;
          this.layout = props.layout;
        }
        if (this.cy != null && this.position != null && this.renderedPosition == null) {
          var pos = this.position;
          var zoom = this.cy.zoom();
          var pan = this.cy.pan();
          this.renderedPosition = {
            x: pos.x * zoom + pan.x,
            y: pos.y * zoom + pan.y
          };
        }
        this.timeStamp = src && src.timeStamp || Date.now();
      },
      preventDefault: function preventDefault() {
        this.isDefaultPrevented = returnTrue;
        var e = this.originalEvent;
        if (!e) {
          return;
        }
        if (e.preventDefault) {
          e.preventDefault();
        }
      },
      stopPropagation: function stopPropagation() {
        this.isPropagationStopped = returnTrue;
        var e = this.originalEvent;
        if (!e) {
          return;
        }
        if (e.stopPropagation) {
          e.stopPropagation();
        }
      },
      stopImmediatePropagation: function stopImmediatePropagation() {
        this.isImmediatePropagationStopped = returnTrue;
        this.stopPropagation();
      },
      isDefaultPrevented: returnFalse,
      isPropagationStopped: returnFalse,
      isImmediatePropagationStopped: returnFalse
    };
    var eventRegex = /^([^.]+)(\.(?:[^.]+))?$/;
    var universalNamespace = ".*";
    var defaults$8 = {
      qualifierCompare: function qualifierCompare(q1, q2) {
        return q1 === q2;
      },
      eventMatches: function eventMatches() {
        return true;
      },
      addEventFields: function addEventFields() {
      },
      callbackContext: function callbackContext(context) {
        return context;
      },
      beforeEmit: function beforeEmit() {
      },
      afterEmit: function afterEmit() {
      },
      bubble: function bubble() {
        return false;
      },
      parent: function parent() {
        return null;
      },
      context: null
    };
    var defaultsKeys = Object.keys(defaults$8);
    var emptyOpts = {};
    function Emitter() {
      var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : emptyOpts;
      var context = arguments.length > 1 ? arguments[1] : void 0;
      for (var i2 = 0; i2 < defaultsKeys.length; i2++) {
        var key = defaultsKeys[i2];
        this[key] = opts[key] || defaults$8[key];
      }
      this.context = context || this.context;
      this.listeners = [];
      this.emitting = 0;
    }
    var p = Emitter.prototype;
    var forEachEvent = function forEachEvent2(self2, handler, events, qualifier, callback, conf, confOverrides) {
      if (fn(qualifier)) {
        callback = qualifier;
        qualifier = null;
      }
      if (confOverrides) {
        if (conf == null) {
          conf = confOverrides;
        } else {
          conf = extend({}, conf, confOverrides);
        }
      }
      var eventList = array(events) ? events : events.split(/\s+/);
      for (var i2 = 0; i2 < eventList.length; i2++) {
        var evt = eventList[i2];
        if (emptyString(evt)) {
          continue;
        }
        var match2 = evt.match(eventRegex);
        if (match2) {
          var type = match2[1];
          var namespace = match2[2] ? match2[2] : null;
          var ret = handler(self2, evt, type, namespace, qualifier, callback, conf);
          if (ret === false) {
            break;
          }
        }
      }
    };
    var makeEventObj = function makeEventObj2(self2, obj) {
      self2.addEventFields(self2.context, obj);
      return new Event(obj.type, obj);
    };
    var forEachEventObj = function forEachEventObj2(self2, handler, events) {
      if (event(events)) {
        handler(self2, events);
        return;
      } else if (plainObject(events)) {
        handler(self2, makeEventObj(self2, events));
        return;
      }
      var eventList = array(events) ? events : events.split(/\s+/);
      for (var i2 = 0; i2 < eventList.length; i2++) {
        var evt = eventList[i2];
        if (emptyString(evt)) {
          continue;
        }
        var match2 = evt.match(eventRegex);
        if (match2) {
          var type = match2[1];
          var namespace = match2[2] ? match2[2] : null;
          var eventObj = makeEventObj(self2, {
            type,
            namespace,
            target: self2.context
          });
          handler(self2, eventObj);
        }
      }
    };
    p.on = p.addListener = function(events, qualifier, callback, conf, confOverrides) {
      forEachEvent(this, function(self2, event2, type, namespace, qualifier2, callback2, conf2) {
        if (fn(callback2)) {
          self2.listeners.push({
            event: event2,
            callback: callback2,
            type,
            namespace,
            qualifier: qualifier2,
            conf: conf2
          });
        }
      }, events, qualifier, callback, conf, confOverrides);
      return this;
    };
    p.one = function(events, qualifier, callback, conf) {
      return this.on(events, qualifier, callback, conf, {
        one: true
      });
    };
    p.removeListener = p.off = function(events, qualifier, callback, conf) {
      var _this = this;
      if (this.emitting !== 0) {
        this.listeners = copyArray(this.listeners);
      }
      var listeners = this.listeners;
      var _loop = function _loop2(i3) {
        var listener = listeners[i3];
        forEachEvent(_this, function(self2, event2, type, namespace, qualifier2, callback2) {
          if ((listener.type === type || events === "*") && (!namespace && listener.namespace !== ".*" || listener.namespace === namespace) && (!qualifier2 || self2.qualifierCompare(listener.qualifier, qualifier2)) && (!callback2 || listener.callback === callback2)) {
            listeners.splice(i3, 1);
            return false;
          }
        }, events, qualifier, callback, conf);
      };
      for (var i2 = listeners.length - 1; i2 >= 0; i2--) {
        _loop(i2);
      }
      return this;
    };
    p.removeAllListeners = function() {
      return this.removeListener("*");
    };
    p.emit = p.trigger = function(events, extraParams, manualCallback) {
      var listeners = this.listeners;
      var numListenersBeforeEmit = listeners.length;
      this.emitting++;
      if (!array(extraParams)) {
        extraParams = [extraParams];
      }
      forEachEventObj(this, function(self2, eventObj) {
        if (manualCallback != null) {
          listeners = [{
            event: eventObj.event,
            type: eventObj.type,
            namespace: eventObj.namespace,
            callback: manualCallback
          }];
          numListenersBeforeEmit = listeners.length;
        }
        var _loop2 = function _loop22(i3) {
          var listener = listeners[i3];
          if (listener.type === eventObj.type && (!listener.namespace || listener.namespace === eventObj.namespace || listener.namespace === universalNamespace) && self2.eventMatches(self2.context, listener, eventObj)) {
            var args = [eventObj];
            if (extraParams != null) {
              push(args, extraParams);
            }
            self2.beforeEmit(self2.context, listener, eventObj);
            if (listener.conf && listener.conf.one) {
              self2.listeners = self2.listeners.filter(function(l) {
                return l !== listener;
              });
            }
            var context = self2.callbackContext(self2.context, listener, eventObj);
            var ret = listener.callback.apply(context, args);
            self2.afterEmit(self2.context, listener, eventObj);
            if (ret === false) {
              eventObj.stopPropagation();
              eventObj.preventDefault();
            }
          }
        };
        for (var i2 = 0; i2 < numListenersBeforeEmit; i2++) {
          _loop2(i2);
        }
        if (self2.bubble(self2.context) && !eventObj.isPropagationStopped()) {
          self2.parent(self2.context).emit(eventObj, extraParams);
        }
      }, events);
      this.emitting--;
      return this;
    };
    var emitterOptions = {
      qualifierCompare: function qualifierCompare(selector1, selector2) {
        if (selector1 == null || selector2 == null) {
          return selector1 == null && selector2 == null;
        } else {
          return selector1.sameText(selector2);
        }
      },
      eventMatches: function eventMatches(ele, listener, eventObj) {
        var selector = listener.qualifier;
        if (selector != null) {
          return ele !== eventObj.target && element(eventObj.target) && selector.matches(eventObj.target);
        }
        return true;
      },
      addEventFields: function addEventFields(ele, evt) {
        evt.cy = ele.cy();
        evt.target = ele;
      },
      callbackContext: function callbackContext(ele, listener, eventObj) {
        return listener.qualifier != null ? eventObj.target : ele;
      },
      beforeEmit: function beforeEmit(context, listener) {
        if (listener.conf && listener.conf.once) {
          listener.conf.onceCollection.removeListener(listener.event, listener.qualifier, listener.callback);
        }
      },
      bubble: function bubble() {
        return true;
      },
      parent: function parent(ele) {
        return ele.isChild() ? ele.parent() : ele.cy();
      }
    };
    var argSelector = function argSelector2(arg) {
      if (string(arg)) {
        return new Selector(arg);
      } else {
        return arg;
      }
    };
    var elesfn$m = {
      createEmitter: function createEmitter() {
        for (var i2 = 0; i2 < this.length; i2++) {
          var ele = this[i2];
          var _p = ele._private;
          if (!_p.emitter) {
            _p.emitter = new Emitter(emitterOptions, ele);
          }
        }
        return this;
      },
      emitter: function emitter() {
        return this._private.emitter;
      },
      on: function on(events, selector, callback) {
        var argSel = argSelector(selector);
        for (var i2 = 0; i2 < this.length; i2++) {
          var ele = this[i2];
          ele.emitter().on(events, argSel, callback);
        }
        return this;
      },
      removeListener: function removeListener(events, selector, callback) {
        var argSel = argSelector(selector);
        for (var i2 = 0; i2 < this.length; i2++) {
          var ele = this[i2];
          ele.emitter().removeListener(events, argSel, callback);
        }
        return this;
      },
      removeAllListeners: function removeAllListeners() {
        for (var i2 = 0; i2 < this.length; i2++) {
          var ele = this[i2];
          ele.emitter().removeAllListeners();
        }
        return this;
      },
      one: function one(events, selector, callback) {
        var argSel = argSelector(selector);
        for (var i2 = 0; i2 < this.length; i2++) {
          var ele = this[i2];
          ele.emitter().one(events, argSel, callback);
        }
        return this;
      },
      once: function once(events, selector, callback) {
        var argSel = argSelector(selector);
        for (var i2 = 0; i2 < this.length; i2++) {
          var ele = this[i2];
          ele.emitter().on(events, argSel, callback, {
            once: true,
            onceCollection: this
          });
        }
      },
      emit: function emit(events, extraParams) {
        for (var i2 = 0; i2 < this.length; i2++) {
          var ele = this[i2];
          ele.emitter().emit(events, extraParams);
        }
        return this;
      },
      emitAndNotify: function emitAndNotify(event2, extraParams) {
        if (this.length === 0) {
          return;
        }
        this.cy().notify(event2, this);
        this.emit(event2, extraParams);
        return this;
      }
    };
    define$3.eventAliasesOn(elesfn$m);
    var elesfn$n = {
      nodes: function nodes(selector) {
        return this.filter(function(ele) {
          return ele.isNode();
        }).filter(selector);
      },
      edges: function edges(selector) {
        return this.filter(function(ele) {
          return ele.isEdge();
        }).filter(selector);
      },
      byGroup: function byGroup() {
        var nodes = this.spawn();
        var edges = this.spawn();
        for (var i2 = 0; i2 < this.length; i2++) {
          var ele = this[i2];
          if (ele.isNode()) {
            nodes.push(ele);
          } else {
            edges.push(ele);
          }
        }
        return {
          nodes,
          edges
        };
      },
      filter: function filter2(_filter, thisArg) {
        if (_filter === void 0) {
          return this;
        } else if (string(_filter) || elementOrCollection(_filter)) {
          return new Selector(_filter).filter(this);
        } else if (fn(_filter)) {
          var filterEles = this.spawn();
          var eles = this;
          for (var i2 = 0; i2 < eles.length; i2++) {
            var ele = eles[i2];
            var include = thisArg ? _filter.apply(thisArg, [ele, i2, eles]) : _filter(ele, i2, eles);
            if (include) {
              filterEles.push(ele);
            }
          }
          return filterEles;
        }
        return this.spawn();
      },
      not: function not(toRemove) {
        if (!toRemove) {
          return this;
        } else {
          if (string(toRemove)) {
            toRemove = this.filter(toRemove);
          }
          var elements = this.spawn();
          for (var i2 = 0; i2 < this.length; i2++) {
            var element2 = this[i2];
            var remove = toRemove.has(element2);
            if (!remove) {
              elements.push(element2);
            }
          }
          return elements;
        }
      },
      absoluteComplement: function absoluteComplement() {
        var cy = this.cy();
        return cy.mutableElements().not(this);
      },
      intersect: function intersect(other) {
        if (string(other)) {
          var selector = other;
          return this.filter(selector);
        }
        var elements = this.spawn();
        var col1 = this;
        var col2 = other;
        var col1Smaller = this.length < other.length;
        var colS = col1Smaller ? col1 : col2;
        var colL = col1Smaller ? col2 : col1;
        for (var i2 = 0; i2 < colS.length; i2++) {
          var ele = colS[i2];
          if (colL.has(ele)) {
            elements.push(ele);
          }
        }
        return elements;
      },
      xor: function xor(other) {
        var cy = this._private.cy;
        if (string(other)) {
          other = cy.$(other);
        }
        var elements = this.spawn();
        var col1 = this;
        var col2 = other;
        var add = function add2(col, other2) {
          for (var i2 = 0; i2 < col.length; i2++) {
            var ele = col[i2];
            var id = ele._private.data.id;
            var inOther = other2.hasElementWithId(id);
            if (!inOther) {
              elements.push(ele);
            }
          }
        };
        add(col1, col2);
        add(col2, col1);
        return elements;
      },
      diff: function diff(other) {
        var cy = this._private.cy;
        if (string(other)) {
          other = cy.$(other);
        }
        var left = this.spawn();
        var right = this.spawn();
        var both = this.spawn();
        var col1 = this;
        var col2 = other;
        var add = function add2(col, other2, retEles) {
          for (var i2 = 0; i2 < col.length; i2++) {
            var ele = col[i2];
            var id = ele._private.data.id;
            var inOther = other2.hasElementWithId(id);
            if (inOther) {
              both.merge(ele);
            } else {
              retEles.push(ele);
            }
          }
        };
        add(col1, col2, left);
        add(col2, col1, right);
        return {
          left,
          right,
          both
        };
      },
      add: function add(toAdd) {
        var cy = this._private.cy;
        if (!toAdd) {
          return this;
        }
        if (string(toAdd)) {
          var selector = toAdd;
          toAdd = cy.mutableElements().filter(selector);
        }
        var elements = this.spawnSelf();
        for (var i2 = 0; i2 < toAdd.length; i2++) {
          var ele = toAdd[i2];
          var add2 = !this.has(ele);
          if (add2) {
            elements.push(ele);
          }
        }
        return elements;
      },
      merge: function merge(toAdd) {
        var _p = this._private;
        var cy = _p.cy;
        if (!toAdd) {
          return this;
        }
        if (toAdd && string(toAdd)) {
          var selector = toAdd;
          toAdd = cy.mutableElements().filter(selector);
        }
        var map = _p.map;
        for (var i2 = 0; i2 < toAdd.length; i2++) {
          var toAddEle = toAdd[i2];
          var id = toAddEle._private.data.id;
          var add = !map.has(id);
          if (add) {
            var index = this.length++;
            this[index] = toAddEle;
            map.set(id, {
              ele: toAddEle,
              index
            });
          }
        }
        return this;
      },
      unmergeAt: function unmergeAt(i2) {
        var ele = this[i2];
        var id = ele.id();
        var _p = this._private;
        var map = _p.map;
        this[i2] = void 0;
        map["delete"](id);
        var unmergedLastEle = i2 === this.length - 1;
        if (this.length > 1 && !unmergedLastEle) {
          var lastEleI = this.length - 1;
          var lastEle = this[lastEleI];
          var lastEleId = lastEle._private.data.id;
          this[lastEleI] = void 0;
          this[i2] = lastEle;
          map.set(lastEleId, {
            ele: lastEle,
            index: i2
          });
        }
        this.length--;
        return this;
      },
      unmergeOne: function unmergeOne(ele) {
        ele = ele[0];
        var _p = this._private;
        var id = ele._private.data.id;
        var map = _p.map;
        var entry = map.get(id);
        if (!entry) {
          return this;
        }
        var i2 = entry.index;
        this.unmergeAt(i2);
        return this;
      },
      unmerge: function unmerge(toRemove) {
        var cy = this._private.cy;
        if (!toRemove) {
          return this;
        }
        if (toRemove && string(toRemove)) {
          var selector = toRemove;
          toRemove = cy.mutableElements().filter(selector);
        }
        for (var i2 = 0; i2 < toRemove.length; i2++) {
          this.unmergeOne(toRemove[i2]);
        }
        return this;
      },
      unmergeBy: function unmergeBy(toRmFn) {
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var ele = this[i2];
          if (toRmFn(ele)) {
            this.unmergeAt(i2);
          }
        }
        return this;
      },
      map: function map(mapFn, thisArg) {
        var arr = [];
        var eles = this;
        for (var i2 = 0; i2 < eles.length; i2++) {
          var ele = eles[i2];
          var ret = thisArg ? mapFn.apply(thisArg, [ele, i2, eles]) : mapFn(ele, i2, eles);
          arr.push(ret);
        }
        return arr;
      },
      reduce: function reduce(fn2, initialValue) {
        var val = initialValue;
        var eles = this;
        for (var i2 = 0; i2 < eles.length; i2++) {
          val = fn2(val, eles[i2], i2, eles);
        }
        return val;
      },
      max: function max2(valFn, thisArg) {
        var max3 = -Infinity;
        var maxEle;
        var eles = this;
        for (var i2 = 0; i2 < eles.length; i2++) {
          var ele = eles[i2];
          var val = thisArg ? valFn.apply(thisArg, [ele, i2, eles]) : valFn(ele, i2, eles);
          if (val > max3) {
            max3 = val;
            maxEle = ele;
          }
        }
        return {
          value: max3,
          ele: maxEle
        };
      },
      min: function min2(valFn, thisArg) {
        var min3 = Infinity;
        var minEle;
        var eles = this;
        for (var i2 = 0; i2 < eles.length; i2++) {
          var ele = eles[i2];
          var val = thisArg ? valFn.apply(thisArg, [ele, i2, eles]) : valFn(ele, i2, eles);
          if (val < min3) {
            min3 = val;
            minEle = ele;
          }
        }
        return {
          value: min3,
          ele: minEle
        };
      }
    };
    var fn$5 = elesfn$n;
    fn$5["u"] = fn$5["|"] = fn$5["+"] = fn$5.union = fn$5.or = fn$5.add;
    fn$5["\\"] = fn$5["!"] = fn$5["-"] = fn$5.difference = fn$5.relativeComplement = fn$5.subtract = fn$5.not;
    fn$5["n"] = fn$5["&"] = fn$5["."] = fn$5.and = fn$5.intersection = fn$5.intersect;
    fn$5["^"] = fn$5["(+)"] = fn$5["(-)"] = fn$5.symmetricDifference = fn$5.symdiff = fn$5.xor;
    fn$5.fnFilter = fn$5.filterFn = fn$5.stdFilter = fn$5.filter;
    fn$5.complement = fn$5.abscomp = fn$5.absoluteComplement;
    var elesfn$o = {
      isNode: function isNode() {
        return this.group() === "nodes";
      },
      isEdge: function isEdge() {
        return this.group() === "edges";
      },
      isLoop: function isLoop() {
        return this.isEdge() && this.source()[0] === this.target()[0];
      },
      isSimple: function isSimple() {
        return this.isEdge() && this.source()[0] !== this.target()[0];
      },
      group: function group() {
        var ele = this[0];
        if (ele) {
          return ele._private.group;
        }
      }
    };
    var zIndexSort = function zIndexSort2(a, b) {
      var cy = a.cy();
      var hasCompoundNodes = cy.hasCompoundNodes();
      function getDepth(ele) {
        var style = ele.pstyle("z-compound-depth");
        if (style.value === "auto") {
          return hasCompoundNodes ? ele.zDepth() : 0;
        } else if (style.value === "bottom") {
          return -1;
        } else if (style.value === "top") {
          return MAX_INT;
        }
        return 0;
      }
      var depthDiff = getDepth(a) - getDepth(b);
      if (depthDiff !== 0) {
        return depthDiff;
      }
      function getEleDepth(ele) {
        var style = ele.pstyle("z-index-compare");
        if (style.value === "auto") {
          return ele.isNode() ? 1 : 0;
        }
        return 0;
      }
      var eleDiff = getEleDepth(a) - getEleDepth(b);
      if (eleDiff !== 0) {
        return eleDiff;
      }
      var zDiff = a.pstyle("z-index").value - b.pstyle("z-index").value;
      if (zDiff !== 0) {
        return zDiff;
      }
      return a.poolIndex() - b.poolIndex();
    };
    var elesfn$p = {
      forEach: function forEach(fn$12, thisArg) {
        if (fn(fn$12)) {
          var N = this.length;
          for (var i2 = 0; i2 < N; i2++) {
            var ele = this[i2];
            var ret = thisArg ? fn$12.apply(thisArg, [ele, i2, this]) : fn$12(ele, i2, this);
            if (ret === false) {
              break;
            }
          }
        }
        return this;
      },
      toArray: function toArray() {
        var array2 = [];
        for (var i2 = 0; i2 < this.length; i2++) {
          array2.push(this[i2]);
        }
        return array2;
      },
      slice: function slice(start, end) {
        var array2 = [];
        var thisSize = this.length;
        if (end == null) {
          end = thisSize;
        }
        if (start == null) {
          start = 0;
        }
        if (start < 0) {
          start = thisSize + start;
        }
        if (end < 0) {
          end = thisSize + end;
        }
        for (var i2 = start; i2 >= 0 && i2 < end && i2 < thisSize; i2++) {
          array2.push(this[i2]);
        }
        return this.spawn(array2);
      },
      size: function size() {
        return this.length;
      },
      eq: function eq(i2) {
        return this[i2] || this.spawn();
      },
      first: function first() {
        return this[0] || this.spawn();
      },
      last: function last() {
        return this[this.length - 1] || this.spawn();
      },
      empty: function empty() {
        return this.length === 0;
      },
      nonempty: function nonempty() {
        return !this.empty();
      },
      sort: function sort(sortFn) {
        if (!fn(sortFn)) {
          return this;
        }
        var sorted = this.toArray().sort(sortFn);
        return this.spawn(sorted);
      },
      sortByZIndex: function sortByZIndex() {
        return this.sort(zIndexSort);
      },
      zDepth: function zDepth() {
        var ele = this[0];
        if (!ele) {
          return void 0;
        }
        var _p = ele._private;
        var group = _p.group;
        if (group === "nodes") {
          var depth = _p.data.parent ? ele.parents().size() : 0;
          if (!ele.isParent()) {
            return MAX_INT - 1;
          }
          return depth;
        } else {
          var src = _p.source;
          var tgt = _p.target;
          var srcDepth = src.zDepth();
          var tgtDepth = tgt.zDepth();
          return Math.max(srcDepth, tgtDepth, 0);
        }
      }
    };
    elesfn$p.each = elesfn$p.forEach;
    var defineSymbolIterator = function defineSymbolIterator2() {
      var typeofUndef = "undefined";
      var isIteratorSupported = (typeof Symbol === "undefined" ? "undefined" : _typeof(Symbol)) != typeofUndef && _typeof(Symbol.iterator) != typeofUndef;
      if (isIteratorSupported) {
        elesfn$p[Symbol.iterator] = function() {
          var _this = this;
          var entry = {
            value: void 0,
            done: false
          };
          var i2 = 0;
          var length = this.length;
          return _defineProperty({
            next: function next2() {
              if (i2 < length) {
                entry.value = _this[i2++];
              } else {
                entry.value = void 0;
                entry.done = true;
              }
              return entry;
            }
          }, Symbol.iterator, function() {
            return this;
          });
        };
      }
    };
    defineSymbolIterator();
    var getLayoutDimensionOptions = defaults({
      nodeDimensionsIncludeLabels: false
    });
    var elesfn$q = {
      layoutDimensions: function layoutDimensions(options) {
        options = getLayoutDimensionOptions(options);
        var dims;
        if (!this.takesUpSpace()) {
          dims = {
            w: 0,
            h: 0
          };
        } else if (options.nodeDimensionsIncludeLabels) {
          var bbDim = this.boundingBox();
          dims = {
            w: bbDim.w,
            h: bbDim.h
          };
        } else {
          dims = {
            w: this.outerWidth(),
            h: this.outerHeight()
          };
        }
        if (dims.w === 0 || dims.h === 0) {
          dims.w = dims.h = 1;
        }
        return dims;
      },
      layoutPositions: function layoutPositions(layout2, options, fn2) {
        var nodes = this.nodes();
        var cy = this.cy();
        var layoutEles = options.eles;
        var getMemoizeKey = function getMemoizeKey2(node2) {
          return node2.id();
        };
        var fnMem = memoize(fn2, getMemoizeKey);
        layout2.emit({
          type: "layoutstart",
          layout: layout2
        });
        layout2.animations = [];
        var calculateSpacing = function calculateSpacing2(spacing, nodesBb, pos) {
          var center = {
            x: nodesBb.x1 + nodesBb.w / 2,
            y: nodesBb.y1 + nodesBb.h / 2
          };
          var spacingVector = {
            x: (pos.x - center.x) * spacing,
            y: (pos.y - center.y) * spacing
          };
          return {
            x: center.x + spacingVector.x,
            y: center.y + spacingVector.y
          };
        };
        var useSpacingFactor = options.spacingFactor && options.spacingFactor !== 1;
        var spacingBb = function spacingBb2() {
          if (!useSpacingFactor) {
            return null;
          }
          var bb2 = makeBoundingBox();
          for (var i3 = 0; i3 < nodes.length; i3++) {
            var node2 = nodes[i3];
            var pos = fnMem(node2, i3);
            expandBoundingBoxByPoint(bb2, pos.x, pos.y);
          }
          return bb2;
        };
        var bb = spacingBb();
        var getFinalPos = memoize(function(node2, i3) {
          var newPos2 = fnMem(node2, i3);
          if (useSpacingFactor) {
            var spacing = Math.abs(options.spacingFactor);
            newPos2 = calculateSpacing(spacing, bb, newPos2);
          }
          if (options.transform != null) {
            newPos2 = options.transform(node2, newPos2);
          }
          return newPos2;
        }, getMemoizeKey);
        if (options.animate) {
          for (var i2 = 0; i2 < nodes.length; i2++) {
            var node = nodes[i2];
            var newPos = getFinalPos(node, i2);
            var animateNode = options.animateFilter == null || options.animateFilter(node, i2);
            if (animateNode) {
              var ani = node.animation({
                position: newPos,
                duration: options.animationDuration,
                easing: options.animationEasing
              });
              layout2.animations.push(ani);
            } else {
              node.position(newPos);
            }
          }
          if (options.fit) {
            var fitAni = cy.animation({
              fit: {
                boundingBox: layoutEles.boundingBoxAt(getFinalPos),
                padding: options.padding
              },
              duration: options.animationDuration,
              easing: options.animationEasing
            });
            layout2.animations.push(fitAni);
          } else if (options.zoom !== void 0 && options.pan !== void 0) {
            var zoomPanAni = cy.animation({
              zoom: options.zoom,
              pan: options.pan,
              duration: options.animationDuration,
              easing: options.animationEasing
            });
            layout2.animations.push(zoomPanAni);
          }
          layout2.animations.forEach(function(ani2) {
            return ani2.play();
          });
          layout2.one("layoutready", options.ready);
          layout2.emit({
            type: "layoutready",
            layout: layout2
          });
          Promise$1.all(layout2.animations.map(function(ani2) {
            return ani2.promise();
          })).then(function() {
            layout2.one("layoutstop", options.stop);
            layout2.emit({
              type: "layoutstop",
              layout: layout2
            });
          });
        } else {
          nodes.positions(getFinalPos);
          if (options.fit) {
            cy.fit(options.eles, options.padding);
          }
          if (options.zoom != null) {
            cy.zoom(options.zoom);
          }
          if (options.pan) {
            cy.pan(options.pan);
          }
          layout2.one("layoutready", options.ready);
          layout2.emit({
            type: "layoutready",
            layout: layout2
          });
          layout2.one("layoutstop", options.stop);
          layout2.emit({
            type: "layoutstop",
            layout: layout2
          });
        }
        return this;
      },
      layout: function layout2(options) {
        var cy = this.cy();
        return cy.makeLayout(extend({}, options, {
          eles: this
        }));
      }
    };
    elesfn$q.createLayout = elesfn$q.makeLayout = elesfn$q.layout;
    function styleCache(key, fn2, ele) {
      var _p = ele._private;
      var cache2 = _p.styleCache = _p.styleCache || [];
      var val;
      if ((val = cache2[key]) != null) {
        return val;
      } else {
        val = cache2[key] = fn2(ele);
        return val;
      }
    }
    function cacheStyleFunction(key, fn2) {
      key = hashString(key);
      return function cachedStyleFunction(ele) {
        return styleCache(key, fn2, ele);
      };
    }
    function cachePrototypeStyleFunction(key, fn2) {
      key = hashString(key);
      var selfFn = function selfFn2(ele) {
        return fn2.call(ele);
      };
      return function cachedPrototypeStyleFunction() {
        var ele = this[0];
        if (ele) {
          return styleCache(key, selfFn, ele);
        }
      };
    }
    var elesfn$r = {
      recalculateRenderedStyle: function recalculateRenderedStyle(useCache) {
        var cy = this.cy();
        var renderer2 = cy.renderer();
        var styleEnabled = cy.styleEnabled();
        if (renderer2 && styleEnabled) {
          renderer2.recalculateRenderedStyle(this, useCache);
        }
        return this;
      },
      dirtyStyleCache: function dirtyStyleCache() {
        var cy = this.cy();
        var dirty = function dirty2(ele) {
          return ele._private.styleCache = null;
        };
        if (cy.hasCompoundNodes()) {
          var eles;
          eles = this.spawnSelf().merge(this.descendants()).merge(this.parents());
          eles.merge(eles.connectedEdges());
          eles.forEach(dirty);
        } else {
          this.forEach(function(ele) {
            dirty(ele);
            ele.connectedEdges().forEach(dirty);
          });
        }
        return this;
      },
      updateStyle: function updateStyle(notifyRenderer) {
        var cy = this._private.cy;
        if (!cy.styleEnabled()) {
          return this;
        }
        if (cy.batching()) {
          var bEles = cy._private.batchStyleEles;
          bEles.merge(this);
          return this;
        }
        var hasCompounds = cy.hasCompoundNodes();
        var updatedEles = this;
        notifyRenderer = notifyRenderer || notifyRenderer === void 0 ? true : false;
        if (hasCompounds) {
          updatedEles = this.spawnSelf().merge(this.descendants()).merge(this.parents());
        }
        var changedEles = updatedEles;
        if (notifyRenderer) {
          changedEles.emitAndNotify("style");
        } else {
          changedEles.emit("style");
        }
        updatedEles.forEach(function(ele) {
          return ele._private.styleDirty = true;
        });
        return this;
      },
      cleanStyle: function cleanStyle() {
        var cy = this.cy();
        if (!cy.styleEnabled()) {
          return;
        }
        for (var i2 = 0; i2 < this.length; i2++) {
          var ele = this[i2];
          if (ele._private.styleDirty) {
            ele._private.styleDirty = false;
            cy.style().apply(ele);
          }
        }
      },
      parsedStyle: function parsedStyle(property) {
        var includeNonDefault = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
        var ele = this[0];
        var cy = ele.cy();
        if (!cy.styleEnabled()) {
          return;
        }
        if (ele) {
          this.cleanStyle();
          var overriddenStyle = ele._private.style[property];
          if (overriddenStyle != null) {
            return overriddenStyle;
          } else if (includeNonDefault) {
            return cy.style().getDefaultProperty(property);
          } else {
            return null;
          }
        }
      },
      numericStyle: function numericStyle(property) {
        var ele = this[0];
        if (!ele.cy().styleEnabled()) {
          return;
        }
        if (ele) {
          var pstyle = ele.pstyle(property);
          return pstyle.pfValue !== void 0 ? pstyle.pfValue : pstyle.value;
        }
      },
      numericStyleUnits: function numericStyleUnits(property) {
        var ele = this[0];
        if (!ele.cy().styleEnabled()) {
          return;
        }
        if (ele) {
          return ele.pstyle(property).units;
        }
      },
      renderedStyle: function renderedStyle(property) {
        var cy = this.cy();
        if (!cy.styleEnabled()) {
          return this;
        }
        var ele = this[0];
        if (ele) {
          return cy.style().getRenderedStyle(ele, property);
        }
      },
      style: function style(name, value) {
        var cy = this.cy();
        if (!cy.styleEnabled()) {
          return this;
        }
        var updateTransitions = false;
        var style2 = cy.style();
        if (plainObject(name)) {
          var props = name;
          style2.applyBypass(this, props, updateTransitions);
          this.emitAndNotify("style");
        } else if (string(name)) {
          if (value === void 0) {
            var ele = this[0];
            if (ele) {
              return style2.getStylePropertyValue(ele, name);
            } else {
              return;
            }
          } else {
            style2.applyBypass(this, name, value, updateTransitions);
            this.emitAndNotify("style");
          }
        } else if (name === void 0) {
          var _ele = this[0];
          if (_ele) {
            return style2.getRawStyle(_ele);
          } else {
            return;
          }
        }
        return this;
      },
      removeStyle: function removeStyle(names) {
        var cy = this.cy();
        if (!cy.styleEnabled()) {
          return this;
        }
        var updateTransitions = false;
        var style = cy.style();
        var eles = this;
        if (names === void 0) {
          for (var i2 = 0; i2 < eles.length; i2++) {
            var ele = eles[i2];
            style.removeAllBypasses(ele, updateTransitions);
          }
        } else {
          names = names.split(/\s+/);
          for (var _i = 0; _i < eles.length; _i++) {
            var _ele2 = eles[_i];
            style.removeBypasses(_ele2, names, updateTransitions);
          }
        }
        this.emitAndNotify("style");
        return this;
      },
      show: function show() {
        this.css("display", "element");
        return this;
      },
      hide: function hide() {
        this.css("display", "none");
        return this;
      },
      effectiveOpacity: function effectiveOpacity() {
        var cy = this.cy();
        if (!cy.styleEnabled()) {
          return 1;
        }
        var hasCompoundNodes = cy.hasCompoundNodes();
        var ele = this[0];
        if (ele) {
          var _p = ele._private;
          var parentOpacity = ele.pstyle("opacity").value;
          if (!hasCompoundNodes) {
            return parentOpacity;
          }
          var parents = !_p.data.parent ? null : ele.parents();
          if (parents) {
            for (var i2 = 0; i2 < parents.length; i2++) {
              var parent = parents[i2];
              var opacity = parent.pstyle("opacity").value;
              parentOpacity = opacity * parentOpacity;
            }
          }
          return parentOpacity;
        }
      },
      transparent: function transparent() {
        var cy = this.cy();
        if (!cy.styleEnabled()) {
          return false;
        }
        var ele = this[0];
        var hasCompoundNodes = ele.cy().hasCompoundNodes();
        if (ele) {
          if (!hasCompoundNodes) {
            return ele.pstyle("opacity").value === 0;
          } else {
            return ele.effectiveOpacity() === 0;
          }
        }
      },
      backgrounding: function backgrounding() {
        var cy = this.cy();
        if (!cy.styleEnabled()) {
          return false;
        }
        var ele = this[0];
        return ele._private.backgrounding ? true : false;
      }
    };
    function checkCompound(ele, parentOk) {
      var _p = ele._private;
      var parents = _p.data.parent ? ele.parents() : null;
      if (parents) {
        for (var i2 = 0; i2 < parents.length; i2++) {
          var parent = parents[i2];
          if (!parentOk(parent)) {
            return false;
          }
        }
      }
      return true;
    }
    function defineDerivedStateFunction(specs) {
      var ok = specs.ok;
      var edgeOkViaNode = specs.edgeOkViaNode || specs.ok;
      var parentOk = specs.parentOk || specs.ok;
      return function() {
        var cy = this.cy();
        if (!cy.styleEnabled()) {
          return true;
        }
        var ele = this[0];
        var hasCompoundNodes = cy.hasCompoundNodes();
        if (ele) {
          var _p = ele._private;
          if (!ok(ele)) {
            return false;
          }
          if (ele.isNode()) {
            return !hasCompoundNodes || checkCompound(ele, parentOk);
          } else {
            var src = _p.source;
            var tgt = _p.target;
            return edgeOkViaNode(src) && (!hasCompoundNodes || checkCompound(src, edgeOkViaNode)) && (src === tgt || edgeOkViaNode(tgt) && (!hasCompoundNodes || checkCompound(tgt, edgeOkViaNode)));
          }
        }
      };
    }
    var eleTakesUpSpace = cacheStyleFunction("eleTakesUpSpace", function(ele) {
      return ele.pstyle("display").value === "element" && ele.width() !== 0 && (ele.isNode() ? ele.height() !== 0 : true);
    });
    elesfn$r.takesUpSpace = cachePrototypeStyleFunction("takesUpSpace", defineDerivedStateFunction({
      ok: eleTakesUpSpace
    }));
    var eleInteractive = cacheStyleFunction("eleInteractive", function(ele) {
      return ele.pstyle("events").value === "yes" && ele.pstyle("visibility").value === "visible" && eleTakesUpSpace(ele);
    });
    var parentInteractive = cacheStyleFunction("parentInteractive", function(parent) {
      return parent.pstyle("visibility").value === "visible" && eleTakesUpSpace(parent);
    });
    elesfn$r.interactive = cachePrototypeStyleFunction("interactive", defineDerivedStateFunction({
      ok: eleInteractive,
      parentOk: parentInteractive,
      edgeOkViaNode: eleTakesUpSpace
    }));
    elesfn$r.noninteractive = function() {
      var ele = this[0];
      if (ele) {
        return !ele.interactive();
      }
    };
    var eleVisible = cacheStyleFunction("eleVisible", function(ele) {
      return ele.pstyle("visibility").value === "visible" && ele.pstyle("opacity").pfValue !== 0 && eleTakesUpSpace(ele);
    });
    var edgeVisibleViaNode = eleTakesUpSpace;
    elesfn$r.visible = cachePrototypeStyleFunction("visible", defineDerivedStateFunction({
      ok: eleVisible,
      edgeOkViaNode: edgeVisibleViaNode
    }));
    elesfn$r.hidden = function() {
      var ele = this[0];
      if (ele) {
        return !ele.visible();
      }
    };
    elesfn$r.isBundledBezier = cachePrototypeStyleFunction("isBundledBezier", function() {
      if (!this.cy().styleEnabled()) {
        return false;
      }
      return !this.removed() && this.pstyle("curve-style").value === "bezier" && this.takesUpSpace();
    });
    elesfn$r.bypass = elesfn$r.css = elesfn$r.style;
    elesfn$r.renderedCss = elesfn$r.renderedStyle;
    elesfn$r.removeBypass = elesfn$r.removeCss = elesfn$r.removeStyle;
    elesfn$r.pstyle = elesfn$r.parsedStyle;
    var elesfn$s = {};
    function defineSwitchFunction(params) {
      return function() {
        var args = arguments;
        var changedEles = [];
        if (args.length === 2) {
          var data2 = args[0];
          var handler = args[1];
          this.on(params.event, data2, handler);
        } else if (args.length === 1 && fn(args[0])) {
          var _handler = args[0];
          this.on(params.event, _handler);
        } else if (args.length === 0 || args.length === 1 && array(args[0])) {
          var addlEvents = args.length === 1 ? args[0] : null;
          for (var i2 = 0; i2 < this.length; i2++) {
            var ele = this[i2];
            var able = !params.ableField || ele._private[params.ableField];
            var changed = ele._private[params.field] != params.value;
            if (params.overrideAble) {
              var overrideAble = params.overrideAble(ele);
              if (overrideAble !== void 0) {
                able = overrideAble;
                if (!overrideAble) {
                  return this;
                }
              }
            }
            if (able) {
              ele._private[params.field] = params.value;
              if (changed) {
                changedEles.push(ele);
              }
            }
          }
          var changedColl = this.spawn(changedEles);
          changedColl.updateStyle();
          changedColl.emit(params.event);
          if (addlEvents) {
            changedColl.emit(addlEvents);
          }
        }
        return this;
      };
    }
    function defineSwitchSet(params) {
      elesfn$s[params.field] = function() {
        var ele = this[0];
        if (ele) {
          if (params.overrideField) {
            var val = params.overrideField(ele);
            if (val !== void 0) {
              return val;
            }
          }
          return ele._private[params.field];
        }
      };
      elesfn$s[params.on] = defineSwitchFunction({
        event: params.on,
        field: params.field,
        ableField: params.ableField,
        overrideAble: params.overrideAble,
        value: true
      });
      elesfn$s[params.off] = defineSwitchFunction({
        event: params.off,
        field: params.field,
        ableField: params.ableField,
        overrideAble: params.overrideAble,
        value: false
      });
    }
    defineSwitchSet({
      field: "locked",
      overrideField: function overrideField(ele) {
        return ele.cy().autolock() ? true : void 0;
      },
      on: "lock",
      off: "unlock"
    });
    defineSwitchSet({
      field: "grabbable",
      overrideField: function overrideField(ele) {
        return ele.cy().autoungrabify() || ele.pannable() ? false : void 0;
      },
      on: "grabify",
      off: "ungrabify"
    });
    defineSwitchSet({
      field: "selected",
      ableField: "selectable",
      overrideAble: function overrideAble(ele) {
        return ele.cy().autounselectify() ? false : void 0;
      },
      on: "select",
      off: "unselect"
    });
    defineSwitchSet({
      field: "selectable",
      overrideField: function overrideField(ele) {
        return ele.cy().autounselectify() ? false : void 0;
      },
      on: "selectify",
      off: "unselectify"
    });
    elesfn$s.deselect = elesfn$s.unselect;
    elesfn$s.grabbed = function() {
      var ele = this[0];
      if (ele) {
        return ele._private.grabbed;
      }
    };
    defineSwitchSet({
      field: "active",
      on: "activate",
      off: "unactivate"
    });
    defineSwitchSet({
      field: "pannable",
      on: "panify",
      off: "unpanify"
    });
    elesfn$s.inactive = function() {
      var ele = this[0];
      if (ele) {
        return !ele._private.active;
      }
    };
    var elesfn$t = {};
    var defineDagExtremity = function defineDagExtremity2(params) {
      return function dagExtremityImpl(selector) {
        var eles = this;
        var ret = [];
        for (var i2 = 0; i2 < eles.length; i2++) {
          var ele = eles[i2];
          if (!ele.isNode()) {
            continue;
          }
          var disqualified = false;
          var edges = ele.connectedEdges();
          for (var j = 0; j < edges.length; j++) {
            var edge = edges[j];
            var src = edge.source();
            var tgt = edge.target();
            if (params.noIncomingEdges && tgt === ele && src !== ele || params.noOutgoingEdges && src === ele && tgt !== ele) {
              disqualified = true;
              break;
            }
          }
          if (!disqualified) {
            ret.push(ele);
          }
        }
        return this.spawn(ret, true).filter(selector);
      };
    };
    var defineDagOneHop = function defineDagOneHop2(params) {
      return function(selector) {
        var eles = this;
        var oEles = [];
        for (var i2 = 0; i2 < eles.length; i2++) {
          var ele = eles[i2];
          if (!ele.isNode()) {
            continue;
          }
          var edges = ele.connectedEdges();
          for (var j = 0; j < edges.length; j++) {
            var edge = edges[j];
            var src = edge.source();
            var tgt = edge.target();
            if (params.outgoing && src === ele) {
              oEles.push(edge);
              oEles.push(tgt);
            } else if (params.incoming && tgt === ele) {
              oEles.push(edge);
              oEles.push(src);
            }
          }
        }
        return this.spawn(oEles, true).filter(selector);
      };
    };
    var defineDagAllHops = function defineDagAllHops2(params) {
      return function(selector) {
        var eles = this;
        var sEles = [];
        var sElesIds = {};
        for (; ; ) {
          var next2 = params.outgoing ? eles.outgoers() : eles.incomers();
          if (next2.length === 0) {
            break;
          }
          var newNext = false;
          for (var i2 = 0; i2 < next2.length; i2++) {
            var n = next2[i2];
            var nid = n.id();
            if (!sElesIds[nid]) {
              sElesIds[nid] = true;
              sEles.push(n);
              newNext = true;
            }
          }
          if (!newNext) {
            break;
          }
          eles = next2;
        }
        return this.spawn(sEles, true).filter(selector);
      };
    };
    elesfn$t.clearTraversalCache = function() {
      for (var i2 = 0; i2 < this.length; i2++) {
        this[i2]._private.traversalCache = null;
      }
    };
    extend(elesfn$t, {
      roots: defineDagExtremity({
        noIncomingEdges: true
      }),
      leaves: defineDagExtremity({
        noOutgoingEdges: true
      }),
      outgoers: cache(defineDagOneHop({
        outgoing: true
      }), "outgoers"),
      successors: defineDagAllHops({
        outgoing: true
      }),
      incomers: cache(defineDagOneHop({
        incoming: true
      }), "incomers"),
      predecessors: defineDagAllHops({
        incoming: true
      })
    });
    extend(elesfn$t, {
      neighborhood: cache(function(selector) {
        var elements = [];
        var nodes = this.nodes();
        for (var i2 = 0; i2 < nodes.length; i2++) {
          var node = nodes[i2];
          var connectedEdges = node.connectedEdges();
          for (var j = 0; j < connectedEdges.length; j++) {
            var edge = connectedEdges[j];
            var src = edge.source();
            var tgt = edge.target();
            var otherNode = node === src ? tgt : src;
            if (otherNode.length > 0) {
              elements.push(otherNode[0]);
            }
            elements.push(edge[0]);
          }
        }
        return this.spawn(elements, true).filter(selector);
      }, "neighborhood"),
      closedNeighborhood: function closedNeighborhood(selector) {
        return this.neighborhood().add(this).filter(selector);
      },
      openNeighborhood: function openNeighborhood(selector) {
        return this.neighborhood(selector);
      }
    });
    elesfn$t.neighbourhood = elesfn$t.neighborhood;
    elesfn$t.closedNeighbourhood = elesfn$t.closedNeighborhood;
    elesfn$t.openNeighbourhood = elesfn$t.openNeighborhood;
    extend(elesfn$t, {
      source: cache(function sourceImpl(selector) {
        var ele = this[0];
        var src;
        if (ele) {
          src = ele._private.source || ele.cy().collection();
        }
        return src && selector ? src.filter(selector) : src;
      }, "source"),
      target: cache(function targetImpl(selector) {
        var ele = this[0];
        var tgt;
        if (ele) {
          tgt = ele._private.target || ele.cy().collection();
        }
        return tgt && selector ? tgt.filter(selector) : tgt;
      }, "target"),
      sources: defineSourceFunction({
        attr: "source"
      }),
      targets: defineSourceFunction({
        attr: "target"
      })
    });
    function defineSourceFunction(params) {
      return function sourceImpl(selector) {
        var sources = [];
        for (var i2 = 0; i2 < this.length; i2++) {
          var ele = this[i2];
          var src = ele._private[params.attr];
          if (src) {
            sources.push(src);
          }
        }
        return this.spawn(sources, true).filter(selector);
      };
    }
    extend(elesfn$t, {
      edgesWith: cache(defineEdgesWithFunction(), "edgesWith"),
      edgesTo: cache(defineEdgesWithFunction({
        thisIsSrc: true
      }), "edgesTo")
    });
    function defineEdgesWithFunction(params) {
      return function edgesWithImpl(otherNodes) {
        var elements = [];
        var cy = this._private.cy;
        var p2 = params || {};
        if (string(otherNodes)) {
          otherNodes = cy.$(otherNodes);
        }
        for (var h = 0; h < otherNodes.length; h++) {
          var edges = otherNodes[h]._private.edges;
          for (var i2 = 0; i2 < edges.length; i2++) {
            var edge = edges[i2];
            var edgeData = edge._private.data;
            var thisToOther = this.hasElementWithId(edgeData.source) && otherNodes.hasElementWithId(edgeData.target);
            var otherToThis = otherNodes.hasElementWithId(edgeData.source) && this.hasElementWithId(edgeData.target);
            var edgeConnectsThisAndOther = thisToOther || otherToThis;
            if (!edgeConnectsThisAndOther) {
              continue;
            }
            if (p2.thisIsSrc || p2.thisIsTgt) {
              if (p2.thisIsSrc && !thisToOther) {
                continue;
              }
              if (p2.thisIsTgt && !otherToThis) {
                continue;
              }
            }
            elements.push(edge);
          }
        }
        return this.spawn(elements, true);
      };
    }
    extend(elesfn$t, {
      connectedEdges: cache(function(selector) {
        var retEles = [];
        var eles = this;
        for (var i2 = 0; i2 < eles.length; i2++) {
          var node = eles[i2];
          if (!node.isNode()) {
            continue;
          }
          var edges = node._private.edges;
          for (var j = 0; j < edges.length; j++) {
            var edge = edges[j];
            retEles.push(edge);
          }
        }
        return this.spawn(retEles, true).filter(selector);
      }, "connectedEdges"),
      connectedNodes: cache(function(selector) {
        var retEles = [];
        var eles = this;
        for (var i2 = 0; i2 < eles.length; i2++) {
          var edge = eles[i2];
          if (!edge.isEdge()) {
            continue;
          }
          retEles.push(edge.source()[0]);
          retEles.push(edge.target()[0]);
        }
        return this.spawn(retEles, true).filter(selector);
      }, "connectedNodes"),
      parallelEdges: cache(defineParallelEdgesFunction(), "parallelEdges"),
      codirectedEdges: cache(defineParallelEdgesFunction({
        codirected: true
      }), "codirectedEdges")
    });
    function defineParallelEdgesFunction(params) {
      var defaults2 = {
        codirected: false
      };
      params = extend({}, defaults2, params);
      return function parallelEdgesImpl(selector) {
        var elements = [];
        var edges = this.edges();
        var p2 = params;
        for (var i2 = 0; i2 < edges.length; i2++) {
          var edge1 = edges[i2];
          var edge1_p = edge1._private;
          var src1 = edge1_p.source;
          var srcid1 = src1._private.data.id;
          var tgtid1 = edge1_p.data.target;
          var srcEdges1 = src1._private.edges;
          for (var j = 0; j < srcEdges1.length; j++) {
            var edge2 = srcEdges1[j];
            var edge2data = edge2._private.data;
            var tgtid2 = edge2data.target;
            var srcid2 = edge2data.source;
            var codirected = tgtid2 === tgtid1 && srcid2 === srcid1;
            var oppdirected = srcid1 === tgtid2 && tgtid1 === srcid2;
            if (p2.codirected && codirected || !p2.codirected && (codirected || oppdirected)) {
              elements.push(edge2);
            }
          }
        }
        return this.spawn(elements, true).filter(selector);
      };
    }
    extend(elesfn$t, {
      components: function components(root) {
        var self2 = this;
        var cy = self2.cy();
        var visited = cy.collection();
        var unvisited = root == null ? self2.nodes() : root.nodes();
        var components2 = [];
        if (root != null && unvisited.empty()) {
          unvisited = root.sources();
        }
        var visitInComponent = function visitInComponent2(node, component) {
          visited.merge(node);
          unvisited.unmerge(node);
          component.merge(node);
        };
        if (unvisited.empty()) {
          return self2.spawn();
        }
        var _loop = function _loop2() {
          var cmpt = cy.collection();
          components2.push(cmpt);
          var root2 = unvisited[0];
          visitInComponent(root2, cmpt);
          self2.bfs({
            directed: false,
            roots: root2,
            visit: function visit(v) {
              return visitInComponent(v, cmpt);
            }
          });
          cmpt.forEach(function(node) {
            node.connectedEdges().forEach(function(e) {
              if (self2.has(e) && cmpt.has(e.source()) && cmpt.has(e.target())) {
                cmpt.merge(e);
              }
            });
          });
        };
        do {
          _loop();
        } while (unvisited.length > 0);
        return components2;
      },
      component: function component() {
        var ele = this[0];
        return ele.cy().mutableElements().components(ele)[0];
      }
    });
    elesfn$t.componentsOf = elesfn$t.components;
    var Collection = function Collection2(cy, elements) {
      var unique = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (cy === void 0) {
        error("A collection must have a reference to the core");
        return;
      }
      var map = new Map$1();
      var createdElements = false;
      if (!elements) {
        elements = [];
      } else if (elements.length > 0 && plainObject(elements[0]) && !element(elements[0])) {
        createdElements = true;
        var eles = [];
        var elesIds = new Set$1();
        for (var i2 = 0, l = elements.length; i2 < l; i2++) {
          var json = elements[i2];
          if (json.data == null) {
            json.data = {};
          }
          var _data = json.data;
          if (_data.id == null) {
            _data.id = uuid();
          } else if (cy.hasElementWithId(_data.id) || elesIds.has(_data.id)) {
            continue;
          }
          var ele = new Element(cy, json, false);
          eles.push(ele);
          elesIds.add(_data.id);
        }
        elements = eles;
      }
      this.length = 0;
      for (var _i = 0, _l = elements.length; _i < _l; _i++) {
        var element$1 = elements[_i][0];
        if (element$1 == null) {
          continue;
        }
        var id = element$1._private.data.id;
        if (!unique || !map.has(id)) {
          if (unique) {
            map.set(id, {
              index: this.length,
              ele: element$1
            });
          }
          this[this.length] = element$1;
          this.length++;
        }
      }
      this._private = {
        eles: this,
        cy,
        get map() {
          if (this.lazyMap == null) {
            this.rebuildMap();
          }
          return this.lazyMap;
        },
        set map(m) {
          this.lazyMap = m;
        },
        rebuildMap: function rebuildMap() {
          var m = this.lazyMap = new Map$1();
          var eles2 = this.eles;
          for (var _i2 = 0; _i2 < eles2.length; _i2++) {
            var _ele = eles2[_i2];
            m.set(_ele.id(), {
              index: _i2,
              ele: _ele
            });
          }
        }
      };
      if (unique) {
        this._private.map = map;
      }
      if (createdElements) {
        this.restore();
      }
    };
    var elesfn$u = Element.prototype = Collection.prototype = Object.create(Array.prototype);
    elesfn$u.instanceString = function() {
      return "collection";
    };
    elesfn$u.spawn = function(eles, unique) {
      return new Collection(this.cy(), eles, unique);
    };
    elesfn$u.spawnSelf = function() {
      return this.spawn(this);
    };
    elesfn$u.cy = function() {
      return this._private.cy;
    };
    elesfn$u.renderer = function() {
      return this._private.cy.renderer();
    };
    elesfn$u.element = function() {
      return this[0];
    };
    elesfn$u.collection = function() {
      if (collection(this)) {
        return this;
      } else {
        return new Collection(this._private.cy, [this]);
      }
    };
    elesfn$u.unique = function() {
      return new Collection(this._private.cy, this, true);
    };
    elesfn$u.hasElementWithId = function(id) {
      id = "" + id;
      return this._private.map.has(id);
    };
    elesfn$u.getElementById = function(id) {
      id = "" + id;
      var cy = this._private.cy;
      var entry = this._private.map.get(id);
      return entry ? entry.ele : new Collection(cy);
    };
    elesfn$u.$id = elesfn$u.getElementById;
    elesfn$u.poolIndex = function() {
      var cy = this._private.cy;
      var eles = cy._private.elements;
      var id = this[0]._private.data.id;
      return eles._private.map.get(id).index;
    };
    elesfn$u.indexOf = function(ele) {
      var id = ele[0]._private.data.id;
      return this._private.map.get(id).index;
    };
    elesfn$u.indexOfId = function(id) {
      id = "" + id;
      return this._private.map.get(id).index;
    };
    elesfn$u.json = function(obj) {
      var ele = this.element();
      var cy = this.cy();
      if (ele == null && obj) {
        return this;
      }
      if (ele == null) {
        return void 0;
      }
      var p2 = ele._private;
      if (plainObject(obj)) {
        cy.startBatch();
        if (obj.data) {
          ele.data(obj.data);
          var _data2 = p2.data;
          if (ele.isEdge()) {
            var move = false;
            var spec = {};
            var src = obj.data.source;
            var tgt = obj.data.target;
            if (src != null && src != _data2.source) {
              spec.source = "" + src;
              move = true;
            }
            if (tgt != null && tgt != _data2.target) {
              spec.target = "" + tgt;
              move = true;
            }
            if (move) {
              ele = ele.move(spec);
            }
          } else {
            var newParentValSpecd = "parent" in obj.data;
            var parent = obj.data.parent;
            if (newParentValSpecd && (parent != null || _data2.parent != null) && parent != _data2.parent) {
              if (parent === void 0) {
                parent = null;
              }
              if (parent != null) {
                parent = "" + parent;
              }
              ele = ele.move({
                parent
              });
            }
          }
        }
        if (obj.position) {
          ele.position(obj.position);
        }
        var checkSwitch = function checkSwitch2(k, trueFnName, falseFnName) {
          var obj_k = obj[k];
          if (obj_k != null && obj_k !== p2[k]) {
            if (obj_k) {
              ele[trueFnName]();
            } else {
              ele[falseFnName]();
            }
          }
        };
        checkSwitch("removed", "remove", "restore");
        checkSwitch("selected", "select", "unselect");
        checkSwitch("selectable", "selectify", "unselectify");
        checkSwitch("locked", "lock", "unlock");
        checkSwitch("grabbable", "grabify", "ungrabify");
        checkSwitch("pannable", "panify", "unpanify");
        if (obj.classes != null) {
          ele.classes(obj.classes);
        }
        cy.endBatch();
        return this;
      } else if (obj === void 0) {
        var json = {
          data: copy(p2.data),
          position: copy(p2.position),
          group: p2.group,
          removed: p2.removed,
          selected: p2.selected,
          selectable: p2.selectable,
          locked: p2.locked,
          grabbable: p2.grabbable,
          pannable: p2.pannable,
          classes: null
        };
        json.classes = "";
        var i2 = 0;
        p2.classes.forEach(function(cls) {
          return json.classes += i2++ === 0 ? cls : " " + cls;
        });
        return json;
      }
    };
    elesfn$u.jsons = function() {
      var jsons = [];
      for (var i2 = 0; i2 < this.length; i2++) {
        var ele = this[i2];
        var json = ele.json();
        jsons.push(json);
      }
      return jsons;
    };
    elesfn$u.clone = function() {
      var cy = this.cy();
      var elesArr = [];
      for (var i2 = 0; i2 < this.length; i2++) {
        var ele = this[i2];
        var json = ele.json();
        var clone2 = new Element(cy, json, false);
        elesArr.push(clone2);
      }
      return new Collection(cy, elesArr);
    };
    elesfn$u.copy = elesfn$u.clone;
    elesfn$u.restore = function() {
      var notifyRenderer = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      var addToPool = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var self2 = this;
      var cy = self2.cy();
      var cy_p = cy._private;
      var nodes = [];
      var edges = [];
      var elements;
      for (var _i3 = 0, l = self2.length; _i3 < l; _i3++) {
        var ele = self2[_i3];
        if (addToPool && !ele.removed()) {
          continue;
        }
        if (ele.isNode()) {
          nodes.push(ele);
        } else {
          edges.push(ele);
        }
      }
      elements = nodes.concat(edges);
      var i2;
      var removeFromElements = function removeFromElements2() {
        elements.splice(i2, 1);
        i2--;
      };
      for (i2 = 0; i2 < elements.length; i2++) {
        var _ele2 = elements[i2];
        var _private = _ele2._private;
        var _data3 = _private.data;
        _ele2.clearTraversalCache();
        if (!addToPool && !_private.removed)
          ;
        else if (_data3.id === void 0) {
          _data3.id = uuid();
        } else if (number(_data3.id)) {
          _data3.id = "" + _data3.id;
        } else if (emptyString(_data3.id) || !string(_data3.id)) {
          error("Can not create element with invalid string ID `" + _data3.id + "`");
          removeFromElements();
          continue;
        } else if (cy.hasElementWithId(_data3.id)) {
          error("Can not create second element with ID `" + _data3.id + "`");
          removeFromElements();
          continue;
        }
        var id = _data3.id;
        if (_ele2.isNode()) {
          var pos = _private.position;
          if (pos.x == null) {
            pos.x = 0;
          }
          if (pos.y == null) {
            pos.y = 0;
          }
        }
        if (_ele2.isEdge()) {
          var edge = _ele2;
          var fields = ["source", "target"];
          var fieldsLength = fields.length;
          var badSourceOrTarget = false;
          for (var j = 0; j < fieldsLength; j++) {
            var field = fields[j];
            var val = _data3[field];
            if (number(val)) {
              val = _data3[field] = "" + _data3[field];
            }
            if (val == null || val === "") {
              error("Can not create edge `" + id + "` with unspecified " + field);
              badSourceOrTarget = true;
            } else if (!cy.hasElementWithId(val)) {
              error("Can not create edge `" + id + "` with nonexistant " + field + " `" + val + "`");
              badSourceOrTarget = true;
            }
          }
          if (badSourceOrTarget) {
            removeFromElements();
            continue;
          }
          var src = cy.getElementById(_data3.source);
          var tgt = cy.getElementById(_data3.target);
          if (src.same(tgt)) {
            src._private.edges.push(edge);
          } else {
            src._private.edges.push(edge);
            tgt._private.edges.push(edge);
          }
          edge._private.source = src;
          edge._private.target = tgt;
        }
        _private.map = new Map$1();
        _private.map.set(id, {
          ele: _ele2,
          index: 0
        });
        _private.removed = false;
        if (addToPool) {
          cy.addToPool(_ele2);
        }
      }
      for (var _i4 = 0; _i4 < nodes.length; _i4++) {
        var node = nodes[_i4];
        var _data4 = node._private.data;
        if (number(_data4.parent)) {
          _data4.parent = "" + _data4.parent;
        }
        var parentId = _data4.parent;
        var specifiedParent = parentId != null;
        if (specifiedParent) {
          var parent = cy.getElementById(parentId);
          if (parent.empty()) {
            _data4.parent = void 0;
          } else {
            var selfAsParent = false;
            var ancestor = parent;
            while (!ancestor.empty()) {
              if (node.same(ancestor)) {
                selfAsParent = true;
                _data4.parent = void 0;
                break;
              }
              ancestor = ancestor.parent();
            }
            if (!selfAsParent) {
              parent[0]._private.children.push(node);
              node._private.parent = parent[0];
              cy_p.hasCompoundNodes = true;
            }
          }
        }
      }
      if (elements.length > 0) {
        var restored = elements.length === self2.length ? self2 : new Collection(cy, elements);
        for (var _i5 = 0; _i5 < restored.length; _i5++) {
          var _ele3 = restored[_i5];
          if (_ele3.isNode()) {
            continue;
          }
          _ele3.parallelEdges().clearTraversalCache();
          _ele3.source().clearTraversalCache();
          _ele3.target().clearTraversalCache();
        }
        var toUpdateStyle;
        if (cy_p.hasCompoundNodes) {
          toUpdateStyle = cy.collection().merge(restored).merge(restored.connectedNodes()).merge(restored.parent());
        } else {
          toUpdateStyle = restored;
        }
        toUpdateStyle.dirtyCompoundBoundsCache().dirtyBoundingBoxCache().updateStyle(notifyRenderer);
        if (notifyRenderer) {
          restored.emitAndNotify("add");
        } else if (addToPool) {
          restored.emit("add");
        }
      }
      return self2;
    };
    elesfn$u.removed = function() {
      var ele = this[0];
      return ele && ele._private.removed;
    };
    elesfn$u.inside = function() {
      var ele = this[0];
      return ele && !ele._private.removed;
    };
    elesfn$u.remove = function() {
      var notifyRenderer = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      var removeFromPool = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var self2 = this;
      var elesToRemove = [];
      var elesToRemoveIds = {};
      var cy = self2._private.cy;
      function addConnectedEdges(node) {
        var edges = node._private.edges;
        for (var i3 = 0; i3 < edges.length; i3++) {
          add(edges[i3]);
        }
      }
      function addChildren2(node) {
        var children = node._private.children;
        for (var i3 = 0; i3 < children.length; i3++) {
          add(children[i3]);
        }
      }
      function add(ele2) {
        var alreadyAdded = elesToRemoveIds[ele2.id()];
        if (removeFromPool && ele2.removed() || alreadyAdded) {
          return;
        } else {
          elesToRemoveIds[ele2.id()] = true;
        }
        if (ele2.isNode()) {
          elesToRemove.push(ele2);
          addConnectedEdges(ele2);
          addChildren2(ele2);
        } else {
          elesToRemove.unshift(ele2);
        }
      }
      for (var i2 = 0, l = self2.length; i2 < l; i2++) {
        var ele = self2[i2];
        add(ele);
      }
      function removeEdgeRef(node, edge) {
        var connectedEdges = node._private.edges;
        removeFromArray(connectedEdges, edge);
        node.clearTraversalCache();
      }
      function removeParallelRef(pllEdge2) {
        pllEdge2.clearTraversalCache();
      }
      var alteredParents = [];
      alteredParents.ids = {};
      function removeChildRef(parent2, ele2) {
        ele2 = ele2[0];
        parent2 = parent2[0];
        var children = parent2._private.children;
        var pid = parent2.id();
        removeFromArray(children, ele2);
        ele2._private.parent = null;
        if (!alteredParents.ids[pid]) {
          alteredParents.ids[pid] = true;
          alteredParents.push(parent2);
        }
      }
      self2.dirtyCompoundBoundsCache();
      if (removeFromPool) {
        cy.removeFromPool(elesToRemove);
      }
      for (var _i6 = 0; _i6 < elesToRemove.length; _i6++) {
        var _ele4 = elesToRemove[_i6];
        if (_ele4.isEdge()) {
          var src = _ele4.source()[0];
          var tgt = _ele4.target()[0];
          removeEdgeRef(src, _ele4);
          removeEdgeRef(tgt, _ele4);
          var pllEdges = _ele4.parallelEdges();
          for (var j = 0; j < pllEdges.length; j++) {
            var pllEdge = pllEdges[j];
            removeParallelRef(pllEdge);
            if (pllEdge.isBundledBezier()) {
              pllEdge.dirtyBoundingBoxCache();
            }
          }
        } else {
          var parent = _ele4.parent();
          if (parent.length !== 0) {
            removeChildRef(parent, _ele4);
          }
        }
        if (removeFromPool) {
          _ele4._private.removed = true;
        }
      }
      var elesStillInside = cy._private.elements;
      cy._private.hasCompoundNodes = false;
      for (var _i7 = 0; _i7 < elesStillInside.length; _i7++) {
        var _ele5 = elesStillInside[_i7];
        if (_ele5.isParent()) {
          cy._private.hasCompoundNodes = true;
          break;
        }
      }
      var removedElements = new Collection(this.cy(), elesToRemove);
      if (removedElements.size() > 0) {
        if (notifyRenderer) {
          removedElements.emitAndNotify("remove");
        } else if (removeFromPool) {
          removedElements.emit("remove");
        }
      }
      for (var _i8 = 0; _i8 < alteredParents.length; _i8++) {
        var _ele6 = alteredParents[_i8];
        if (!removeFromPool || !_ele6.removed()) {
          _ele6.updateStyle();
        }
      }
      return removedElements;
    };
    elesfn$u.move = function(struct) {
      var cy = this._private.cy;
      var eles = this;
      var notifyRenderer = false;
      var modifyPool = false;
      var toString2 = function toString3(id) {
        return id == null ? id : "" + id;
      };
      if (struct.source !== void 0 || struct.target !== void 0) {
        var srcId = toString2(struct.source);
        var tgtId = toString2(struct.target);
        var srcExists = srcId != null && cy.hasElementWithId(srcId);
        var tgtExists = tgtId != null && cy.hasElementWithId(tgtId);
        if (srcExists || tgtExists) {
          cy.batch(function() {
            eles.remove(notifyRenderer, modifyPool);
            eles.emitAndNotify("moveout");
            for (var i2 = 0; i2 < eles.length; i2++) {
              var ele = eles[i2];
              var _data5 = ele._private.data;
              if (ele.isEdge()) {
                if (srcExists) {
                  _data5.source = srcId;
                }
                if (tgtExists) {
                  _data5.target = tgtId;
                }
              }
            }
            eles.restore(notifyRenderer, modifyPool);
          });
          eles.emitAndNotify("move");
        }
      } else if (struct.parent !== void 0) {
        var parentId = toString2(struct.parent);
        var parentExists = parentId === null || cy.hasElementWithId(parentId);
        if (parentExists) {
          var pidToAssign = parentId === null ? void 0 : parentId;
          cy.batch(function() {
            var updated = eles.remove(notifyRenderer, modifyPool);
            updated.emitAndNotify("moveout");
            for (var i2 = 0; i2 < eles.length; i2++) {
              var ele = eles[i2];
              var _data6 = ele._private.data;
              if (ele.isNode()) {
                _data6.parent = pidToAssign;
              }
            }
            updated.restore(notifyRenderer, modifyPool);
          });
          eles.emitAndNotify("move");
        }
      }
      return this;
    };
    [elesfn$c, elesfn$d, elesfn$e, elesfn$f, elesfn$g, data$1, elesfn$i, dimensions, elesfn$m, elesfn$n, elesfn$o, elesfn$p, elesfn$q, elesfn$r, elesfn$s, elesfn$t].forEach(function(props) {
      extend(elesfn$u, props);
    });
    var corefn = {
      add: function add(opts) {
        var elements;
        var cy = this;
        if (elementOrCollection(opts)) {
          var eles = opts;
          if (eles._private.cy === cy) {
            elements = eles.restore();
          } else {
            var jsons = [];
            for (var i2 = 0; i2 < eles.length; i2++) {
              var ele = eles[i2];
              jsons.push(ele.json());
            }
            elements = new Collection(cy, jsons);
          }
        } else if (array(opts)) {
          var _jsons = opts;
          elements = new Collection(cy, _jsons);
        } else if (plainObject(opts) && (array(opts.nodes) || array(opts.edges))) {
          var elesByGroup = opts;
          var _jsons2 = [];
          var grs = ["nodes", "edges"];
          for (var _i = 0, il = grs.length; _i < il; _i++) {
            var group = grs[_i];
            var elesArray = elesByGroup[group];
            if (array(elesArray)) {
              for (var j = 0, jl = elesArray.length; j < jl; j++) {
                var json = extend({
                  group
                }, elesArray[j]);
                _jsons2.push(json);
              }
            }
          }
          elements = new Collection(cy, _jsons2);
        } else {
          var _json = opts;
          elements = new Element(cy, _json).collection();
        }
        return elements;
      },
      remove: function remove(collection2) {
        if (elementOrCollection(collection2))
          ;
        else if (string(collection2)) {
          var selector = collection2;
          collection2 = this.$(selector);
        }
        return collection2.remove();
      }
    };
    /*! Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */
    function generateCubicBezier(mX1, mY1, mX2, mY2) {
      var NEWTON_ITERATIONS = 4, NEWTON_MIN_SLOPE = 1e-3, SUBDIVISION_PRECISION = 1e-7, SUBDIVISION_MAX_ITERATIONS = 10, kSplineTableSize = 11, kSampleStepSize = 1 / (kSplineTableSize - 1), float32ArraySupported = typeof Float32Array !== "undefined";
      if (arguments.length !== 4) {
        return false;
      }
      for (var i2 = 0; i2 < 4; ++i2) {
        if (typeof arguments[i2] !== "number" || isNaN(arguments[i2]) || !isFinite(arguments[i2])) {
          return false;
        }
      }
      mX1 = Math.min(mX1, 1);
      mX2 = Math.min(mX2, 1);
      mX1 = Math.max(mX1, 0);
      mX2 = Math.max(mX2, 0);
      var mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
      function A(aA1, aA2) {
        return 1 - 3 * aA2 + 3 * aA1;
      }
      function B(aA1, aA2) {
        return 3 * aA2 - 6 * aA1;
      }
      function C(aA1) {
        return 3 * aA1;
      }
      function calcBezier(aT, aA1, aA2) {
        return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
      }
      function getSlope(aT, aA1, aA2) {
        return 3 * A(aA1, aA2) * aT * aT + 2 * B(aA1, aA2) * aT + C(aA1);
      }
      function newtonRaphsonIterate(aX, aGuessT) {
        for (var _i = 0; _i < NEWTON_ITERATIONS; ++_i) {
          var currentSlope = getSlope(aGuessT, mX1, mX2);
          if (currentSlope === 0) {
            return aGuessT;
          }
          var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
          aGuessT -= currentX / currentSlope;
        }
        return aGuessT;
      }
      function calcSampleValues() {
        for (var _i2 = 0; _i2 < kSplineTableSize; ++_i2) {
          mSampleValues[_i2] = calcBezier(_i2 * kSampleStepSize, mX1, mX2);
        }
      }
      function binarySubdivide(aX, aA, aB) {
        var currentX, currentT, i3 = 0;
        do {
          currentT = aA + (aB - aA) / 2;
          currentX = calcBezier(currentT, mX1, mX2) - aX;
          if (currentX > 0) {
            aB = currentT;
          } else {
            aA = currentT;
          }
        } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i3 < SUBDIVISION_MAX_ITERATIONS);
        return currentT;
      }
      function getTForX(aX) {
        var intervalStart = 0, currentSample = 1, lastSample = kSplineTableSize - 1;
        for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
          intervalStart += kSampleStepSize;
        }
        --currentSample;
        var dist2 = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]), guessForT = intervalStart + dist2 * kSampleStepSize, initialSlope = getSlope(guessForT, mX1, mX2);
        if (initialSlope >= NEWTON_MIN_SLOPE) {
          return newtonRaphsonIterate(aX, guessForT);
        } else if (initialSlope === 0) {
          return guessForT;
        } else {
          return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize);
        }
      }
      var _precomputed = false;
      function precompute() {
        _precomputed = true;
        if (mX1 !== mY1 || mX2 !== mY2) {
          calcSampleValues();
        }
      }
      var f = function f2(aX) {
        if (!_precomputed) {
          precompute();
        }
        if (mX1 === mY1 && mX2 === mY2) {
          return aX;
        }
        if (aX === 0) {
          return 0;
        }
        if (aX === 1) {
          return 1;
        }
        return calcBezier(getTForX(aX), mY1, mY2);
      };
      f.getControlPoints = function() {
        return [{
          x: mX1,
          y: mY1
        }, {
          x: mX2,
          y: mY2
        }];
      };
      var str = "generateBezier(" + [mX1, mY1, mX2, mY2] + ")";
      f.toString = function() {
        return str;
      };
      return f;
    }
    /*! Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */
    var generateSpringRK4 = function() {
      function springAccelerationForState(state) {
        return -state.tension * state.x - state.friction * state.v;
      }
      function springEvaluateStateWithDerivative(initialState, dt, derivative) {
        var state = {
          x: initialState.x + derivative.dx * dt,
          v: initialState.v + derivative.dv * dt,
          tension: initialState.tension,
          friction: initialState.friction
        };
        return {
          dx: state.v,
          dv: springAccelerationForState(state)
        };
      }
      function springIntegrateState(state, dt) {
        var a = {
          dx: state.v,
          dv: springAccelerationForState(state)
        }, b = springEvaluateStateWithDerivative(state, dt * 0.5, a), c = springEvaluateStateWithDerivative(state, dt * 0.5, b), d = springEvaluateStateWithDerivative(state, dt, c), dxdt = 1 / 6 * (a.dx + 2 * (b.dx + c.dx) + d.dx), dvdt = 1 / 6 * (a.dv + 2 * (b.dv + c.dv) + d.dv);
        state.x = state.x + dxdt * dt;
        state.v = state.v + dvdt * dt;
        return state;
      }
      return function springRK4Factory(tension, friction, duration) {
        var initState = {
          x: -1,
          v: 0,
          tension: null,
          friction: null
        }, path = [0], time_lapsed = 0, tolerance = 1 / 1e4, DT = 16 / 1e3, have_duration, dt, last_state;
        tension = parseFloat(tension) || 500;
        friction = parseFloat(friction) || 20;
        duration = duration || null;
        initState.tension = tension;
        initState.friction = friction;
        have_duration = duration !== null;
        if (have_duration) {
          time_lapsed = springRK4Factory(tension, friction);
          dt = time_lapsed / duration * DT;
        } else {
          dt = DT;
        }
        for (; ; ) {
          last_state = springIntegrateState(last_state || initState, dt);
          path.push(1 + last_state.x);
          time_lapsed += 16;
          if (!(Math.abs(last_state.x) > tolerance && Math.abs(last_state.v) > tolerance)) {
            break;
          }
        }
        return !have_duration ? time_lapsed : function(percentComplete) {
          return path[percentComplete * (path.length - 1) | 0];
        };
      };
    }();
    var cubicBezier = function cubicBezier2(t1, p1, t2, p2) {
      var bezier = generateCubicBezier(t1, p1, t2, p2);
      return function(start, end, percent) {
        return start + (end - start) * bezier(percent);
      };
    };
    var easings = {
      linear: function linear(start, end, percent) {
        return start + (end - start) * percent;
      },
      ease: cubicBezier(0.25, 0.1, 0.25, 1),
      "ease-in": cubicBezier(0.42, 0, 1, 1),
      "ease-out": cubicBezier(0, 0, 0.58, 1),
      "ease-in-out": cubicBezier(0.42, 0, 0.58, 1),
      "ease-in-sine": cubicBezier(0.47, 0, 0.745, 0.715),
      "ease-out-sine": cubicBezier(0.39, 0.575, 0.565, 1),
      "ease-in-out-sine": cubicBezier(0.445, 0.05, 0.55, 0.95),
      "ease-in-quad": cubicBezier(0.55, 0.085, 0.68, 0.53),
      "ease-out-quad": cubicBezier(0.25, 0.46, 0.45, 0.94),
      "ease-in-out-quad": cubicBezier(0.455, 0.03, 0.515, 0.955),
      "ease-in-cubic": cubicBezier(0.55, 0.055, 0.675, 0.19),
      "ease-out-cubic": cubicBezier(0.215, 0.61, 0.355, 1),
      "ease-in-out-cubic": cubicBezier(0.645, 0.045, 0.355, 1),
      "ease-in-quart": cubicBezier(0.895, 0.03, 0.685, 0.22),
      "ease-out-quart": cubicBezier(0.165, 0.84, 0.44, 1),
      "ease-in-out-quart": cubicBezier(0.77, 0, 0.175, 1),
      "ease-in-quint": cubicBezier(0.755, 0.05, 0.855, 0.06),
      "ease-out-quint": cubicBezier(0.23, 1, 0.32, 1),
      "ease-in-out-quint": cubicBezier(0.86, 0, 0.07, 1),
      "ease-in-expo": cubicBezier(0.95, 0.05, 0.795, 0.035),
      "ease-out-expo": cubicBezier(0.19, 1, 0.22, 1),
      "ease-in-out-expo": cubicBezier(1, 0, 0, 1),
      "ease-in-circ": cubicBezier(0.6, 0.04, 0.98, 0.335),
      "ease-out-circ": cubicBezier(0.075, 0.82, 0.165, 1),
      "ease-in-out-circ": cubicBezier(0.785, 0.135, 0.15, 0.86),
      spring: function spring(tension, friction, duration) {
        if (duration === 0) {
          return easings.linear;
        }
        var spring2 = generateSpringRK4(tension, friction, duration);
        return function(start, end, percent) {
          return start + (end - start) * spring2(percent);
        };
      },
      "cubic-bezier": cubicBezier
    };
    function getEasedValue(type, start, end, percent, easingFn) {
      if (percent === 1) {
        return end;
      }
      if (start === end) {
        return end;
      }
      var val = easingFn(start, end, percent);
      if (type == null) {
        return val;
      }
      if (type.roundValue || type.color) {
        val = Math.round(val);
      }
      if (type.min !== void 0) {
        val = Math.max(val, type.min);
      }
      if (type.max !== void 0) {
        val = Math.min(val, type.max);
      }
      return val;
    }
    function getValue(prop, spec) {
      if (prop.pfValue != null || prop.value != null) {
        if (prop.pfValue != null && (spec == null || spec.type.units !== "%")) {
          return prop.pfValue;
        } else {
          return prop.value;
        }
      } else {
        return prop;
      }
    }
    function ease(startProp, endProp, percent, easingFn, propSpec) {
      var type = propSpec != null ? propSpec.type : null;
      if (percent < 0) {
        percent = 0;
      } else if (percent > 1) {
        percent = 1;
      }
      var start = getValue(startProp, propSpec);
      var end = getValue(endProp, propSpec);
      if (number(start) && number(end)) {
        return getEasedValue(type, start, end, percent, easingFn);
      } else if (array(start) && array(end)) {
        var easedArr = [];
        for (var i2 = 0; i2 < end.length; i2++) {
          var si = start[i2];
          var ei = end[i2];
          if (si != null && ei != null) {
            var val = getEasedValue(type, si, ei, percent, easingFn);
            easedArr.push(val);
          } else {
            easedArr.push(ei);
          }
        }
        return easedArr;
      }
      return void 0;
    }
    function step(self2, ani, now, isCore) {
      var isEles = !isCore;
      var _p = self2._private;
      var ani_p = ani._private;
      var pEasing = ani_p.easing;
      var startTime = ani_p.startTime;
      var cy = isCore ? self2 : self2.cy();
      var style = cy.style();
      if (!ani_p.easingImpl) {
        if (pEasing == null) {
          ani_p.easingImpl = easings["linear"];
        } else {
          var easingVals;
          if (string(pEasing)) {
            var easingProp = style.parse("transition-timing-function", pEasing);
            easingVals = easingProp.value;
          } else {
            easingVals = pEasing;
          }
          var name, args;
          if (string(easingVals)) {
            name = easingVals;
            args = [];
          } else {
            name = easingVals[1];
            args = easingVals.slice(2).map(function(n) {
              return +n;
            });
          }
          if (args.length > 0) {
            if (name === "spring") {
              args.push(ani_p.duration);
            }
            ani_p.easingImpl = easings[name].apply(null, args);
          } else {
            ani_p.easingImpl = easings[name];
          }
        }
      }
      var easing = ani_p.easingImpl;
      var percent;
      if (ani_p.duration === 0) {
        percent = 1;
      } else {
        percent = (now - startTime) / ani_p.duration;
      }
      if (ani_p.applying) {
        percent = ani_p.progress;
      }
      if (percent < 0) {
        percent = 0;
      } else if (percent > 1) {
        percent = 1;
      }
      if (ani_p.delay == null) {
        var startPos = ani_p.startPosition;
        var endPos = ani_p.position;
        if (endPos && isEles && !self2.locked()) {
          var newPos = {};
          if (valid(startPos.x, endPos.x)) {
            newPos.x = ease(startPos.x, endPos.x, percent, easing);
          }
          if (valid(startPos.y, endPos.y)) {
            newPos.y = ease(startPos.y, endPos.y, percent, easing);
          }
          self2.position(newPos);
        }
        var startPan = ani_p.startPan;
        var endPan = ani_p.pan;
        var pan = _p.pan;
        var animatingPan = endPan != null && isCore;
        if (animatingPan) {
          if (valid(startPan.x, endPan.x)) {
            pan.x = ease(startPan.x, endPan.x, percent, easing);
          }
          if (valid(startPan.y, endPan.y)) {
            pan.y = ease(startPan.y, endPan.y, percent, easing);
          }
          self2.emit("pan");
        }
        var startZoom = ani_p.startZoom;
        var endZoom = ani_p.zoom;
        var animatingZoom = endZoom != null && isCore;
        if (animatingZoom) {
          if (valid(startZoom, endZoom)) {
            _p.zoom = bound(_p.minZoom, ease(startZoom, endZoom, percent, easing), _p.maxZoom);
          }
          self2.emit("zoom");
        }
        if (animatingPan || animatingZoom) {
          self2.emit("viewport");
        }
        var props = ani_p.style;
        if (props && props.length > 0 && isEles) {
          for (var i2 = 0; i2 < props.length; i2++) {
            var prop = props[i2];
            var _name = prop.name;
            var end = prop;
            var start = ani_p.startStyle[_name];
            var propSpec = style.properties[start.name];
            var easedVal = ease(start, end, percent, easing, propSpec);
            style.overrideBypass(self2, _name, easedVal);
          }
          self2.emit("style");
        }
      }
      ani_p.progress = percent;
      return percent;
    }
    function valid(start, end) {
      if (start == null || end == null) {
        return false;
      }
      if (number(start) && number(end)) {
        return true;
      } else if (start && end) {
        return true;
      }
      return false;
    }
    function startAnimation(self2, ani, now, isCore) {
      var ani_p = ani._private;
      ani_p.started = true;
      ani_p.startTime = now - ani_p.progress * ani_p.duration;
    }
    function stepAll(now, cy) {
      var eles = cy._private.aniEles;
      var doneEles = [];
      function stepOne(ele2, isCore) {
        var _p = ele2._private;
        var current = _p.animation.current;
        var queue = _p.animation.queue;
        var ranAnis = false;
        if (current.length === 0) {
          var next2 = queue.shift();
          if (next2) {
            current.push(next2);
          }
        }
        var callbacks = function callbacks2(_callbacks) {
          for (var j = _callbacks.length - 1; j >= 0; j--) {
            var cb = _callbacks[j];
            cb();
          }
          _callbacks.splice(0, _callbacks.length);
        };
        for (var i2 = current.length - 1; i2 >= 0; i2--) {
          var ani = current[i2];
          var ani_p = ani._private;
          if (ani_p.stopped) {
            current.splice(i2, 1);
            ani_p.hooked = false;
            ani_p.playing = false;
            ani_p.started = false;
            callbacks(ani_p.frames);
            continue;
          }
          if (!ani_p.playing && !ani_p.applying) {
            continue;
          }
          if (ani_p.playing && ani_p.applying) {
            ani_p.applying = false;
          }
          if (!ani_p.started) {
            startAnimation(ele2, ani, now);
          }
          step(ele2, ani, now, isCore);
          if (ani_p.applying) {
            ani_p.applying = false;
          }
          callbacks(ani_p.frames);
          if (ani_p.step != null) {
            ani_p.step(now);
          }
          if (ani.completed()) {
            current.splice(i2, 1);
            ani_p.hooked = false;
            ani_p.playing = false;
            ani_p.started = false;
            callbacks(ani_p.completes);
          }
          ranAnis = true;
        }
        if (!isCore && current.length === 0 && queue.length === 0) {
          doneEles.push(ele2);
        }
        return ranAnis;
      }
      var ranEleAni = false;
      for (var e = 0; e < eles.length; e++) {
        var ele = eles[e];
        var handledThisEle = stepOne(ele);
        ranEleAni = ranEleAni || handledThisEle;
      }
      var ranCoreAni = stepOne(cy, true);
      if (ranEleAni || ranCoreAni) {
        if (eles.length > 0) {
          cy.notify("draw", eles);
        } else {
          cy.notify("draw");
        }
      }
      eles.unmerge(doneEles);
      cy.emit("step");
    }
    var corefn$1 = {
      animate: define$3.animate(),
      animation: define$3.animation(),
      animated: define$3.animated(),
      clearQueue: define$3.clearQueue(),
      delay: define$3.delay(),
      delayAnimation: define$3.delayAnimation(),
      stop: define$3.stop(),
      addToAnimationPool: function addToAnimationPool(eles) {
        var cy = this;
        if (!cy.styleEnabled()) {
          return;
        }
        cy._private.aniEles.merge(eles);
      },
      stopAnimationLoop: function stopAnimationLoop() {
        this._private.animationsRunning = false;
      },
      startAnimationLoop: function startAnimationLoop() {
        var cy = this;
        cy._private.animationsRunning = true;
        if (!cy.styleEnabled()) {
          return;
        }
        function headlessStep() {
          if (!cy._private.animationsRunning) {
            return;
          }
          requestAnimationFrame2(function animationStep(now) {
            stepAll(now, cy);
            headlessStep();
          });
        }
        var renderer2 = cy.renderer();
        if (renderer2 && renderer2.beforeRender) {
          renderer2.beforeRender(function rendererAnimationStep(willDraw, now) {
            stepAll(now, cy);
          }, renderer2.beforeRenderPriorities.animations);
        } else {
          headlessStep();
        }
      }
    };
    var emitterOptions$1 = {
      qualifierCompare: function qualifierCompare(selector1, selector2) {
        if (selector1 == null || selector2 == null) {
          return selector1 == null && selector2 == null;
        } else {
          return selector1.sameText(selector2);
        }
      },
      eventMatches: function eventMatches(cy, listener, eventObj) {
        var selector = listener.qualifier;
        if (selector != null) {
          return cy !== eventObj.target && element(eventObj.target) && selector.matches(eventObj.target);
        }
        return true;
      },
      addEventFields: function addEventFields(cy, evt) {
        evt.cy = cy;
        evt.target = cy;
      },
      callbackContext: function callbackContext(cy, listener, eventObj) {
        return listener.qualifier != null ? eventObj.target : cy;
      }
    };
    var argSelector$1 = function argSelector2(arg) {
      if (string(arg)) {
        return new Selector(arg);
      } else {
        return arg;
      }
    };
    var elesfn$v = {
      createEmitter: function createEmitter() {
        var _p = this._private;
        if (!_p.emitter) {
          _p.emitter = new Emitter(emitterOptions$1, this);
        }
        return this;
      },
      emitter: function emitter() {
        return this._private.emitter;
      },
      on: function on(events, selector, callback) {
        this.emitter().on(events, argSelector$1(selector), callback);
        return this;
      },
      removeListener: function removeListener(events, selector, callback) {
        this.emitter().removeListener(events, argSelector$1(selector), callback);
        return this;
      },
      removeAllListeners: function removeAllListeners() {
        this.emitter().removeAllListeners();
        return this;
      },
      one: function one(events, selector, callback) {
        this.emitter().one(events, argSelector$1(selector), callback);
        return this;
      },
      once: function once(events, selector, callback) {
        this.emitter().one(events, argSelector$1(selector), callback);
        return this;
      },
      emit: function emit(events, extraParams) {
        this.emitter().emit(events, extraParams);
        return this;
      },
      emitAndNotify: function emitAndNotify(event2, eles) {
        this.emit(event2);
        this.notify(event2, eles);
        return this;
      }
    };
    define$3.eventAliasesOn(elesfn$v);
    var corefn$2 = {
      png: function png(options) {
        var renderer2 = this._private.renderer;
        options = options || {};
        return renderer2.png(options);
      },
      jpg: function jpg(options) {
        var renderer2 = this._private.renderer;
        options = options || {};
        options.bg = options.bg || "#fff";
        return renderer2.jpg(options);
      }
    };
    corefn$2.jpeg = corefn$2.jpg;
    var corefn$3 = {
      layout: function layout2(options) {
        var cy = this;
        if (options == null) {
          error("Layout options must be specified to make a layout");
          return;
        }
        if (options.name == null) {
          error("A `name` must be specified to make a layout");
          return;
        }
        var name = options.name;
        var Layout2 = cy.extension("layout", name);
        if (Layout2 == null) {
          error("No such layout `" + name + "` found.  Did you forget to import it and `cytoscape.use()` it?");
          return;
        }
        var eles;
        if (string(options.eles)) {
          eles = cy.$(options.eles);
        } else {
          eles = options.eles != null ? options.eles : cy.$();
        }
        var layout3 = new Layout2(extend({}, options, {
          cy,
          eles
        }));
        return layout3;
      }
    };
    corefn$3.createLayout = corefn$3.makeLayout = corefn$3.layout;
    var corefn$4 = {
      notify: function notify(eventName, eventEles) {
        var _p = this._private;
        if (this.batching()) {
          _p.batchNotifications = _p.batchNotifications || {};
          var eles = _p.batchNotifications[eventName] = _p.batchNotifications[eventName] || this.collection();
          if (eventEles != null) {
            eles.merge(eventEles);
          }
          return;
        }
        if (!_p.notificationsEnabled) {
          return;
        }
        var renderer2 = this.renderer();
        if (this.destroyed() || !renderer2) {
          return;
        }
        renderer2.notify(eventName, eventEles);
      },
      notifications: function notifications(bool) {
        var p2 = this._private;
        if (bool === void 0) {
          return p2.notificationsEnabled;
        } else {
          p2.notificationsEnabled = bool ? true : false;
        }
        return this;
      },
      noNotifications: function noNotifications(callback) {
        this.notifications(false);
        callback();
        this.notifications(true);
      },
      batching: function batching() {
        return this._private.batchCount > 0;
      },
      startBatch: function startBatch() {
        var _p = this._private;
        if (_p.batchCount == null) {
          _p.batchCount = 0;
        }
        if (_p.batchCount === 0) {
          _p.batchStyleEles = this.collection();
          _p.batchNotifications = {};
        }
        _p.batchCount++;
        return this;
      },
      endBatch: function endBatch() {
        var _p = this._private;
        if (_p.batchCount === 0) {
          return this;
        }
        _p.batchCount--;
        if (_p.batchCount === 0) {
          _p.batchStyleEles.updateStyle();
          var renderer2 = this.renderer();
          Object.keys(_p.batchNotifications).forEach(function(eventName) {
            var eles = _p.batchNotifications[eventName];
            if (eles.empty()) {
              renderer2.notify(eventName);
            } else {
              renderer2.notify(eventName, eles);
            }
          });
        }
        return this;
      },
      batch: function batch(callback) {
        this.startBatch();
        callback();
        this.endBatch();
        return this;
      },
      batchData: function batchData(map) {
        var cy = this;
        return this.batch(function() {
          var ids = Object.keys(map);
          for (var i2 = 0; i2 < ids.length; i2++) {
            var id = ids[i2];
            var data2 = map[id];
            var ele = cy.getElementById(id);
            ele.data(data2);
          }
        });
      }
    };
    var rendererDefaults = defaults({
      hideEdgesOnViewport: false,
      textureOnViewport: false,
      motionBlur: false,
      motionBlurOpacity: 0.05,
      pixelRatio: void 0,
      desktopTapThreshold: 4,
      touchTapThreshold: 8,
      wheelSensitivity: 1,
      debug: false,
      showFps: false
    });
    var corefn$5 = {
      renderTo: function renderTo(context, zoom, pan, pxRatio) {
        var r = this._private.renderer;
        r.renderTo(context, zoom, pan, pxRatio);
        return this;
      },
      renderer: function renderer2() {
        return this._private.renderer;
      },
      forceRender: function forceRender() {
        this.notify("draw");
        return this;
      },
      resize: function resize() {
        this.invalidateSize();
        this.emitAndNotify("resize");
        return this;
      },
      initRenderer: function initRenderer(options) {
        var cy = this;
        var RendererProto = cy.extension("renderer", options.name);
        if (RendererProto == null) {
          error("Can not initialise: No such renderer `".concat(options.name, "` found. Did you forget to import it and `cytoscape.use()` it?"));
          return;
        }
        if (options.wheelSensitivity !== void 0) {
          warn("You have set a custom wheel sensitivity.  This will make your app zoom unnaturally when using mainstream mice.  You should change this value from the default only if you can guarantee that all your users will use the same hardware and OS configuration as your current machine.");
        }
        var rOpts = rendererDefaults(options);
        rOpts.cy = cy;
        cy._private.renderer = new RendererProto(rOpts);
        this.notify("init");
      },
      destroyRenderer: function destroyRenderer() {
        var cy = this;
        cy.notify("destroy");
        var domEle = cy.container();
        if (domEle) {
          domEle._cyreg = null;
          while (domEle.childNodes.length > 0) {
            domEle.removeChild(domEle.childNodes[0]);
          }
        }
        cy._private.renderer = null;
        cy.mutableElements().forEach(function(ele) {
          var _p = ele._private;
          _p.rscratch = {};
          _p.rstyle = {};
          _p.animation.current = [];
          _p.animation.queue = [];
        });
      },
      onRender: function onRender(fn2) {
        return this.on("render", fn2);
      },
      offRender: function offRender(fn2) {
        return this.off("render", fn2);
      }
    };
    corefn$5.invalidateDimensions = corefn$5.resize;
    var corefn$6 = {
      collection: function collection2(eles, opts) {
        if (string(eles)) {
          return this.$(eles);
        } else if (elementOrCollection(eles)) {
          return eles.collection();
        } else if (array(eles)) {
          return new Collection(this, eles, opts);
        }
        return new Collection(this);
      },
      nodes: function nodes(selector) {
        var nodes2 = this.$(function(ele) {
          return ele.isNode();
        });
        if (selector) {
          return nodes2.filter(selector);
        }
        return nodes2;
      },
      edges: function edges(selector) {
        var edges2 = this.$(function(ele) {
          return ele.isEdge();
        });
        if (selector) {
          return edges2.filter(selector);
        }
        return edges2;
      },
      $: function $(selector) {
        var eles = this._private.elements;
        if (selector) {
          return eles.filter(selector);
        } else {
          return eles.spawnSelf();
        }
      },
      mutableElements: function mutableElements() {
        return this._private.elements;
      }
    };
    corefn$6.elements = corefn$6.filter = corefn$6.$;
    var styfn = {};
    var TRUE = "t";
    var FALSE = "f";
    styfn.apply = function(eles) {
      var self2 = this;
      var _p = self2._private;
      var cy = _p.cy;
      var updatedEles = cy.collection();
      for (var ie = 0; ie < eles.length; ie++) {
        var ele = eles[ie];
        var cxtMeta = self2.getContextMeta(ele);
        if (cxtMeta.empty) {
          continue;
        }
        var cxtStyle = self2.getContextStyle(cxtMeta);
        var app = self2.applyContextStyle(cxtMeta, cxtStyle, ele);
        if (ele._private.appliedInitStyle) {
          self2.updateTransitions(ele, app.diffProps);
        } else {
          ele._private.appliedInitStyle = true;
        }
        var hintsDiff = self2.updateStyleHints(ele);
        if (hintsDiff) {
          updatedEles.push(ele);
        }
      }
      return updatedEles;
    };
    styfn.getPropertiesDiff = function(oldCxtKey, newCxtKey) {
      var self2 = this;
      var cache2 = self2._private.propDiffs = self2._private.propDiffs || {};
      var dualCxtKey = oldCxtKey + "-" + newCxtKey;
      var cachedVal = cache2[dualCxtKey];
      if (cachedVal) {
        return cachedVal;
      }
      var diffProps = [];
      var addedProp = {};
      for (var i2 = 0; i2 < self2.length; i2++) {
        var cxt = self2[i2];
        var oldHasCxt = oldCxtKey[i2] === TRUE;
        var newHasCxt = newCxtKey[i2] === TRUE;
        var cxtHasDiffed = oldHasCxt !== newHasCxt;
        var cxtHasMappedProps = cxt.mappedProperties.length > 0;
        if (cxtHasDiffed || newHasCxt && cxtHasMappedProps) {
          var props = void 0;
          if (cxtHasDiffed && cxtHasMappedProps) {
            props = cxt.properties;
          } else if (cxtHasDiffed) {
            props = cxt.properties;
          } else if (cxtHasMappedProps) {
            props = cxt.mappedProperties;
          }
          for (var j = 0; j < props.length; j++) {
            var prop = props[j];
            var name = prop.name;
            var laterCxtOverrides = false;
            for (var k = i2 + 1; k < self2.length; k++) {
              var laterCxt = self2[k];
              var hasLaterCxt = newCxtKey[k] === TRUE;
              if (!hasLaterCxt) {
                continue;
              }
              laterCxtOverrides = laterCxt.properties[prop.name] != null;
              if (laterCxtOverrides) {
                break;
              }
            }
            if (!addedProp[name] && !laterCxtOverrides) {
              addedProp[name] = true;
              diffProps.push(name);
            }
          }
        }
      }
      cache2[dualCxtKey] = diffProps;
      return diffProps;
    };
    styfn.getContextMeta = function(ele) {
      var self2 = this;
      var cxtKey = "";
      var diffProps;
      var prevKey = ele._private.styleCxtKey || "";
      for (var i2 = 0; i2 < self2.length; i2++) {
        var context = self2[i2];
        var contextSelectorMatches = context.selector && context.selector.matches(ele);
        if (contextSelectorMatches) {
          cxtKey += TRUE;
        } else {
          cxtKey += FALSE;
        }
      }
      diffProps = self2.getPropertiesDiff(prevKey, cxtKey);
      ele._private.styleCxtKey = cxtKey;
      return {
        key: cxtKey,
        diffPropNames: diffProps,
        empty: diffProps.length === 0
      };
    };
    styfn.getContextStyle = function(cxtMeta) {
      var cxtKey = cxtMeta.key;
      var self2 = this;
      var cxtStyles = this._private.contextStyles = this._private.contextStyles || {};
      if (cxtStyles[cxtKey]) {
        return cxtStyles[cxtKey];
      }
      var style = {
        _private: {
          key: cxtKey
        }
      };
      for (var i2 = 0; i2 < self2.length; i2++) {
        var cxt = self2[i2];
        var hasCxt = cxtKey[i2] === TRUE;
        if (!hasCxt) {
          continue;
        }
        for (var j = 0; j < cxt.properties.length; j++) {
          var prop = cxt.properties[j];
          style[prop.name] = prop;
        }
      }
      cxtStyles[cxtKey] = style;
      return style;
    };
    styfn.applyContextStyle = function(cxtMeta, cxtStyle, ele) {
      var self2 = this;
      var diffProps = cxtMeta.diffPropNames;
      var retDiffProps = {};
      var types = self2.types;
      for (var i2 = 0; i2 < diffProps.length; i2++) {
        var diffPropName = diffProps[i2];
        var cxtProp = cxtStyle[diffPropName];
        var eleProp = ele.pstyle(diffPropName);
        if (!cxtProp) {
          if (!eleProp) {
            continue;
          } else if (eleProp.bypass) {
            cxtProp = {
              name: diffPropName,
              deleteBypassed: true
            };
          } else {
            cxtProp = {
              name: diffPropName,
              delete: true
            };
          }
        }
        if (eleProp === cxtProp) {
          continue;
        }
        if (cxtProp.mapped === types.fn && eleProp != null && eleProp.mapping != null && eleProp.mapping.value === cxtProp.value) {
          var mapping = eleProp.mapping;
          var fnValue = mapping.fnValue = cxtProp.value(ele);
          if (fnValue === mapping.prevFnValue) {
            continue;
          }
        }
        var retDiffProp = retDiffProps[diffPropName] = {
          prev: eleProp
        };
        self2.applyParsedProperty(ele, cxtProp);
        retDiffProp.next = ele.pstyle(diffPropName);
        if (retDiffProp.next && retDiffProp.next.bypass) {
          retDiffProp.next = retDiffProp.next.bypassed;
        }
      }
      return {
        diffProps: retDiffProps
      };
    };
    styfn.updateStyleHints = function(ele) {
      var _p = ele._private;
      var self2 = this;
      var propNames = self2.propertyGroupNames;
      var propGrKeys = self2.propertyGroupKeys;
      var propHash = function propHash2(ele2, propNames2, seedKey) {
        return self2.getPropertiesHash(ele2, propNames2, seedKey);
      };
      var oldStyleKey = _p.styleKey;
      if (ele.removed()) {
        return false;
      }
      var isNode = _p.group === "nodes";
      var overriddenStyles = ele._private.style;
      propNames = Object.keys(overriddenStyles);
      for (var i2 = 0; i2 < propGrKeys.length; i2++) {
        var grKey = propGrKeys[i2];
        _p.styleKeys[grKey] = [DEFAULT_HASH_SEED, DEFAULT_HASH_SEED_ALT];
      }
      var updateGrKey1 = function updateGrKey12(val, grKey2) {
        return _p.styleKeys[grKey2][0] = hashInt(val, _p.styleKeys[grKey2][0]);
      };
      var updateGrKey2 = function updateGrKey22(val, grKey2) {
        return _p.styleKeys[grKey2][1] = hashIntAlt(val, _p.styleKeys[grKey2][1]);
      };
      var updateGrKey = function updateGrKey3(val, grKey2) {
        updateGrKey1(val, grKey2);
        updateGrKey2(val, grKey2);
      };
      var updateGrKeyWStr = function updateGrKeyWStr2(strVal, grKey2) {
        for (var j = 0; j < strVal.length; j++) {
          var ch = strVal.charCodeAt(j);
          updateGrKey1(ch, grKey2);
          updateGrKey2(ch, grKey2);
        }
      };
      var N = 2e9;
      var cleanNum = function cleanNum2(val) {
        return -128 < val && val < 128 && Math.floor(val) !== val ? N - (val * 1024 | 0) : val;
      };
      for (var _i = 0; _i < propNames.length; _i++) {
        var name = propNames[_i];
        var parsedProp = overriddenStyles[name];
        if (parsedProp == null) {
          continue;
        }
        var propInfo = this.properties[name];
        var type = propInfo.type;
        var _grKey = propInfo.groupKey;
        var normalizedNumberVal = void 0;
        if (propInfo.hashOverride != null) {
          normalizedNumberVal = propInfo.hashOverride(ele, parsedProp);
        } else if (parsedProp.pfValue != null) {
          normalizedNumberVal = parsedProp.pfValue;
        }
        var numberVal = propInfo.enums == null ? parsedProp.value : null;
        var haveNormNum = normalizedNumberVal != null;
        var haveUnitedNum = numberVal != null;
        var haveNum = haveNormNum || haveUnitedNum;
        var units = parsedProp.units;
        if (type.number && haveNum && !type.multiple) {
          var v = haveNormNum ? normalizedNumberVal : numberVal;
          updateGrKey(cleanNum(v), _grKey);
          if (!haveNormNum && units != null) {
            updateGrKeyWStr(units, _grKey);
          }
        } else {
          updateGrKeyWStr(parsedProp.strValue, _grKey);
        }
      }
      var hash = [DEFAULT_HASH_SEED, DEFAULT_HASH_SEED_ALT];
      for (var _i2 = 0; _i2 < propGrKeys.length; _i2++) {
        var _grKey2 = propGrKeys[_i2];
        var grHash = _p.styleKeys[_grKey2];
        hash[0] = hashInt(grHash[0], hash[0]);
        hash[1] = hashIntAlt(grHash[1], hash[1]);
      }
      _p.styleKey = combineHashes(hash[0], hash[1]);
      var sk = _p.styleKeys;
      _p.labelDimsKey = combineHashesArray(sk.labelDimensions);
      var labelKeys = propHash(ele, ["label"], sk.labelDimensions);
      _p.labelKey = combineHashesArray(labelKeys);
      _p.labelStyleKey = combineHashesArray(hashArrays(sk.commonLabel, labelKeys));
      if (!isNode) {
        var sourceLabelKeys = propHash(ele, ["source-label"], sk.labelDimensions);
        _p.sourceLabelKey = combineHashesArray(sourceLabelKeys);
        _p.sourceLabelStyleKey = combineHashesArray(hashArrays(sk.commonLabel, sourceLabelKeys));
        var targetLabelKeys = propHash(ele, ["target-label"], sk.labelDimensions);
        _p.targetLabelKey = combineHashesArray(targetLabelKeys);
        _p.targetLabelStyleKey = combineHashesArray(hashArrays(sk.commonLabel, targetLabelKeys));
      }
      if (isNode) {
        var _p$styleKeys = _p.styleKeys, nodeBody = _p$styleKeys.nodeBody, nodeBorder = _p$styleKeys.nodeBorder, backgroundImage = _p$styleKeys.backgroundImage, compound = _p$styleKeys.compound, pie = _p$styleKeys.pie;
        var nodeKeys = [nodeBody, nodeBorder, backgroundImage, compound, pie].filter(function(k) {
          return k != null;
        }).reduce(hashArrays, [DEFAULT_HASH_SEED, DEFAULT_HASH_SEED_ALT]);
        _p.nodeKey = combineHashesArray(nodeKeys);
        _p.hasPie = pie != null && pie[0] !== DEFAULT_HASH_SEED && pie[1] !== DEFAULT_HASH_SEED_ALT;
      }
      return oldStyleKey !== _p.styleKey;
    };
    styfn.clearStyleHints = function(ele) {
      var _p = ele._private;
      _p.styleCxtKey = "";
      _p.styleKeys = {};
      _p.styleKey = null;
      _p.labelKey = null;
      _p.labelStyleKey = null;
      _p.sourceLabelKey = null;
      _p.sourceLabelStyleKey = null;
      _p.targetLabelKey = null;
      _p.targetLabelStyleKey = null;
      _p.nodeKey = null;
      _p.hasPie = null;
    };
    styfn.applyParsedProperty = function(ele, parsedProp) {
      var self2 = this;
      var prop = parsedProp;
      var style = ele._private.style;
      var flatProp;
      var types = self2.types;
      var type = self2.properties[prop.name].type;
      var propIsBypass = prop.bypass;
      var origProp = style[prop.name];
      var origPropIsBypass = origProp && origProp.bypass;
      var _p = ele._private;
      var flatPropMapping = "mapping";
      var getVal = function getVal2(p2) {
        if (p2 == null) {
          return null;
        } else if (p2.pfValue != null) {
          return p2.pfValue;
        } else {
          return p2.value;
        }
      };
      var checkTriggers = function checkTriggers2() {
        var fromVal = getVal(origProp);
        var toVal = getVal(prop);
        self2.checkTriggers(ele, prop.name, fromVal, toVal);
      };
      if (parsedProp.name === "curve-style" && ele.isEdge() && (parsedProp.value !== "bezier" && ele.isLoop() || parsedProp.value === "haystack" && (ele.source().isParent() || ele.target().isParent()))) {
        prop = parsedProp = this.parse(parsedProp.name, "bezier", propIsBypass);
      }
      if (prop["delete"]) {
        style[prop.name] = void 0;
        checkTriggers();
        return true;
      }
      if (prop.deleteBypassed) {
        if (!origProp) {
          checkTriggers();
          return true;
        } else if (origProp.bypass) {
          origProp.bypassed = void 0;
          checkTriggers();
          return true;
        } else {
          return false;
        }
      }
      if (prop.deleteBypass) {
        if (!origProp) {
          checkTriggers();
          return true;
        } else if (origProp.bypass) {
          style[prop.name] = origProp.bypassed;
          checkTriggers();
          return true;
        } else {
          return false;
        }
      }
      var printMappingErr = function printMappingErr2() {
        warn("Do not assign mappings to elements without corresponding data (i.e. ele `" + ele.id() + "` has no mapping for property `" + prop.name + "` with data field `" + prop.field + "`); try a `[" + prop.field + "]` selector to limit scope to elements with `" + prop.field + "` defined");
      };
      switch (prop.mapped) {
        case types.mapData: {
          var fields = prop.field.split(".");
          var fieldVal = _p.data;
          for (var i2 = 0; i2 < fields.length && fieldVal; i2++) {
            var field = fields[i2];
            fieldVal = fieldVal[field];
          }
          if (fieldVal == null) {
            printMappingErr();
            return false;
          }
          var percent;
          if (!number(fieldVal)) {
            warn("Do not use continuous mappers without specifying numeric data (i.e. `" + prop.field + ": " + fieldVal + "` for `" + ele.id() + "` is non-numeric)");
            return false;
          } else {
            var fieldWidth = prop.fieldMax - prop.fieldMin;
            if (fieldWidth === 0) {
              percent = 0;
            } else {
              percent = (fieldVal - prop.fieldMin) / fieldWidth;
            }
          }
          if (percent < 0) {
            percent = 0;
          } else if (percent > 1) {
            percent = 1;
          }
          if (type.color) {
            var r1 = prop.valueMin[0];
            var r2 = prop.valueMax[0];
            var g1 = prop.valueMin[1];
            var g2 = prop.valueMax[1];
            var b1 = prop.valueMin[2];
            var b2 = prop.valueMax[2];
            var a1 = prop.valueMin[3] == null ? 1 : prop.valueMin[3];
            var a2 = prop.valueMax[3] == null ? 1 : prop.valueMax[3];
            var clr = [Math.round(r1 + (r2 - r1) * percent), Math.round(g1 + (g2 - g1) * percent), Math.round(b1 + (b2 - b1) * percent), Math.round(a1 + (a2 - a1) * percent)];
            flatProp = {
              bypass: prop.bypass,
              name: prop.name,
              value: clr,
              strValue: "rgb(" + clr[0] + ", " + clr[1] + ", " + clr[2] + ")"
            };
          } else if (type.number) {
            var calcValue = prop.valueMin + (prop.valueMax - prop.valueMin) * percent;
            flatProp = this.parse(prop.name, calcValue, prop.bypass, flatPropMapping);
          } else {
            return false;
          }
          if (!flatProp) {
            printMappingErr();
            return false;
          }
          flatProp.mapping = prop;
          prop = flatProp;
          break;
        }
        case types.data: {
          var _fields = prop.field.split(".");
          var _fieldVal = _p.data;
          for (var _i3 = 0; _i3 < _fields.length && _fieldVal; _i3++) {
            var _field = _fields[_i3];
            _fieldVal = _fieldVal[_field];
          }
          if (_fieldVal != null) {
            flatProp = this.parse(prop.name, _fieldVal, prop.bypass, flatPropMapping);
          }
          if (!flatProp) {
            printMappingErr();
            return false;
          }
          flatProp.mapping = prop;
          prop = flatProp;
          break;
        }
        case types.fn: {
          var fn2 = prop.value;
          var fnRetVal = prop.fnValue != null ? prop.fnValue : fn2(ele);
          prop.prevFnValue = fnRetVal;
          if (fnRetVal == null) {
            warn("Custom function mappers may not return null (i.e. `" + prop.name + "` for ele `" + ele.id() + "` is null)");
            return false;
          }
          flatProp = this.parse(prop.name, fnRetVal, prop.bypass, flatPropMapping);
          if (!flatProp) {
            warn("Custom function mappers may not return invalid values for the property type (i.e. `" + prop.name + "` for ele `" + ele.id() + "` is invalid)");
            return false;
          }
          flatProp.mapping = copy(prop);
          prop = flatProp;
          break;
        }
        case void 0:
          break;
        default:
          return false;
      }
      if (propIsBypass) {
        if (origPropIsBypass) {
          prop.bypassed = origProp.bypassed;
        } else {
          prop.bypassed = origProp;
        }
        style[prop.name] = prop;
      } else {
        if (origPropIsBypass) {
          origProp.bypassed = prop;
        } else {
          style[prop.name] = prop;
        }
      }
      checkTriggers();
      return true;
    };
    styfn.cleanElements = function(eles, keepBypasses) {
      for (var i2 = 0; i2 < eles.length; i2++) {
        var ele = eles[i2];
        this.clearStyleHints(ele);
        ele.dirtyCompoundBoundsCache();
        ele.dirtyBoundingBoxCache();
        if (!keepBypasses) {
          ele._private.style = {};
        } else {
          var style = ele._private.style;
          var propNames = Object.keys(style);
          for (var j = 0; j < propNames.length; j++) {
            var propName = propNames[j];
            var eleProp = style[propName];
            if (eleProp != null) {
              if (eleProp.bypass) {
                eleProp.bypassed = null;
              } else {
                style[propName] = null;
              }
            }
          }
        }
      }
    };
    styfn.update = function() {
      var cy = this._private.cy;
      var eles = cy.mutableElements();
      eles.updateStyle();
    };
    styfn.updateTransitions = function(ele, diffProps) {
      var self2 = this;
      var _p = ele._private;
      var props = ele.pstyle("transition-property").value;
      var duration = ele.pstyle("transition-duration").pfValue;
      var delay = ele.pstyle("transition-delay").pfValue;
      if (props.length > 0 && duration > 0) {
        var style = {};
        var anyPrev = false;
        for (var i2 = 0; i2 < props.length; i2++) {
          var prop = props[i2];
          var styProp = ele.pstyle(prop);
          var diffProp = diffProps[prop];
          if (!diffProp) {
            continue;
          }
          var prevProp = diffProp.prev;
          var fromProp = prevProp;
          var toProp = diffProp.next != null ? diffProp.next : styProp;
          var diff = false;
          var initVal = void 0;
          var initDt = 1e-6;
          if (!fromProp) {
            continue;
          }
          if (number(fromProp.pfValue) && number(toProp.pfValue)) {
            diff = toProp.pfValue - fromProp.pfValue;
            initVal = fromProp.pfValue + initDt * diff;
          } else if (number(fromProp.value) && number(toProp.value)) {
            diff = toProp.value - fromProp.value;
            initVal = fromProp.value + initDt * diff;
          } else if (array(fromProp.value) && array(toProp.value)) {
            diff = fromProp.value[0] !== toProp.value[0] || fromProp.value[1] !== toProp.value[1] || fromProp.value[2] !== toProp.value[2];
            initVal = fromProp.strValue;
          }
          if (diff) {
            style[prop] = toProp.strValue;
            this.applyBypass(ele, prop, initVal);
            anyPrev = true;
          }
        }
        if (!anyPrev) {
          return;
        }
        _p.transitioning = true;
        new Promise$1(function(resolve2) {
          if (delay > 0) {
            ele.delayAnimation(delay).play().promise().then(resolve2);
          } else {
            resolve2();
          }
        }).then(function() {
          return ele.animation({
            style,
            duration,
            easing: ele.pstyle("transition-timing-function").value,
            queue: false
          }).play().promise();
        }).then(function() {
          self2.removeBypasses(ele, props);
          ele.emitAndNotify("style");
          _p.transitioning = false;
        });
      } else if (_p.transitioning) {
        this.removeBypasses(ele, props);
        ele.emitAndNotify("style");
        _p.transitioning = false;
      }
    };
    styfn.checkTrigger = function(ele, name, fromValue, toValue, getTrigger, onTrigger) {
      var prop = this.properties[name];
      var triggerCheck = getTrigger(prop);
      if (triggerCheck != null && triggerCheck(fromValue, toValue)) {
        onTrigger(prop);
      }
    };
    styfn.checkZOrderTrigger = function(ele, name, fromValue, toValue) {
      var _this = this;
      this.checkTrigger(ele, name, fromValue, toValue, function(prop) {
        return prop.triggersZOrder;
      }, function() {
        _this._private.cy.notify("zorder", ele);
      });
    };
    styfn.checkBoundsTrigger = function(ele, name, fromValue, toValue) {
      this.checkTrigger(ele, name, fromValue, toValue, function(prop) {
        return prop.triggersBounds;
      }, function(prop) {
        ele.dirtyCompoundBoundsCache();
        ele.dirtyBoundingBoxCache();
        if (name === "curve-style" && (fromValue === "bezier" || toValue === "bezier") && prop.triggersBoundsOfParallelBeziers) {
          ele.parallelEdges().forEach(function(pllEdge) {
            if (pllEdge.isBundledBezier()) {
              pllEdge.dirtyBoundingBoxCache();
            }
          });
        }
      });
    };
    styfn.checkTriggers = function(ele, name, fromValue, toValue) {
      ele.dirtyStyleCache();
      this.checkZOrderTrigger(ele, name, fromValue, toValue);
      this.checkBoundsTrigger(ele, name, fromValue, toValue);
    };
    var styfn$1 = {};
    styfn$1.applyBypass = function(eles, name, value, updateTransitions) {
      var self2 = this;
      var props = [];
      var isBypass = true;
      if (name === "*" || name === "**") {
        if (value !== void 0) {
          for (var i2 = 0; i2 < self2.properties.length; i2++) {
            var prop = self2.properties[i2];
            var _name = prop.name;
            var parsedProp = this.parse(_name, value, true);
            if (parsedProp) {
              props.push(parsedProp);
            }
          }
        }
      } else if (string(name)) {
        var _parsedProp = this.parse(name, value, true);
        if (_parsedProp) {
          props.push(_parsedProp);
        }
      } else if (plainObject(name)) {
        var specifiedProps = name;
        updateTransitions = value;
        var names = Object.keys(specifiedProps);
        for (var _i = 0; _i < names.length; _i++) {
          var _name2 = names[_i];
          var _value = specifiedProps[_name2];
          if (_value === void 0) {
            _value = specifiedProps[dash2camel(_name2)];
          }
          if (_value !== void 0) {
            var _parsedProp2 = this.parse(_name2, _value, true);
            if (_parsedProp2) {
              props.push(_parsedProp2);
            }
          }
        }
      } else {
        return false;
      }
      if (props.length === 0) {
        return false;
      }
      var ret = false;
      for (var _i2 = 0; _i2 < eles.length; _i2++) {
        var ele = eles[_i2];
        var diffProps = {};
        var diffProp = void 0;
        for (var j = 0; j < props.length; j++) {
          var _prop = props[j];
          if (updateTransitions) {
            var prevProp = ele.pstyle(_prop.name);
            diffProp = diffProps[_prop.name] = {
              prev: prevProp
            };
          }
          ret = this.applyParsedProperty(ele, copy(_prop)) || ret;
          if (updateTransitions) {
            diffProp.next = ele.pstyle(_prop.name);
          }
        }
        if (ret) {
          this.updateStyleHints(ele);
        }
        if (updateTransitions) {
          this.updateTransitions(ele, diffProps, isBypass);
        }
      }
      return ret;
    };
    styfn$1.overrideBypass = function(eles, name, value) {
      name = camel2dash(name);
      for (var i2 = 0; i2 < eles.length; i2++) {
        var ele = eles[i2];
        var prop = ele._private.style[name];
        var type = this.properties[name].type;
        var isColor = type.color;
        var isMulti = type.mutiple;
        var oldValue = !prop ? null : prop.pfValue != null ? prop.pfValue : prop.value;
        if (!prop || !prop.bypass) {
          this.applyBypass(ele, name, value);
        } else {
          prop.value = value;
          if (prop.pfValue != null) {
            prop.pfValue = value;
          }
          if (isColor) {
            prop.strValue = "rgb(" + value.join(",") + ")";
          } else if (isMulti) {
            prop.strValue = value.join(" ");
          } else {
            prop.strValue = "" + value;
          }
          this.updateStyleHints(ele);
        }
        this.checkTriggers(ele, name, oldValue, value);
      }
    };
    styfn$1.removeAllBypasses = function(eles, updateTransitions) {
      return this.removeBypasses(eles, this.propertyNames, updateTransitions);
    };
    styfn$1.removeBypasses = function(eles, props, updateTransitions) {
      var isBypass = true;
      for (var j = 0; j < eles.length; j++) {
        var ele = eles[j];
        var diffProps = {};
        for (var i2 = 0; i2 < props.length; i2++) {
          var name = props[i2];
          var prop = this.properties[name];
          var prevProp = ele.pstyle(prop.name);
          if (!prevProp || !prevProp.bypass) {
            continue;
          }
          var value = "";
          var parsedProp = this.parse(name, value, true);
          var diffProp = diffProps[prop.name] = {
            prev: prevProp
          };
          this.applyParsedProperty(ele, parsedProp);
          diffProp.next = ele.pstyle(prop.name);
        }
        this.updateStyleHints(ele);
        if (updateTransitions) {
          this.updateTransitions(ele, diffProps, isBypass);
        }
      }
    };
    var styfn$2 = {};
    styfn$2.getEmSizeInPixels = function() {
      var px = this.containerCss("font-size");
      if (px != null) {
        return parseFloat(px);
      } else {
        return 1;
      }
    };
    styfn$2.containerCss = function(propName) {
      var cy = this._private.cy;
      var domElement2 = cy.container();
      if (window$1 && domElement2 && window$1.getComputedStyle) {
        return window$1.getComputedStyle(domElement2).getPropertyValue(propName);
      }
    };
    var styfn$3 = {};
    styfn$3.getRenderedStyle = function(ele, prop) {
      if (prop) {
        return this.getStylePropertyValue(ele, prop, true);
      } else {
        return this.getRawStyle(ele, true);
      }
    };
    styfn$3.getRawStyle = function(ele, isRenderedVal) {
      var self2 = this;
      ele = ele[0];
      if (ele) {
        var rstyle = {};
        for (var i2 = 0; i2 < self2.properties.length; i2++) {
          var prop = self2.properties[i2];
          var val = self2.getStylePropertyValue(ele, prop.name, isRenderedVal);
          if (val != null) {
            rstyle[prop.name] = val;
            rstyle[dash2camel(prop.name)] = val;
          }
        }
        return rstyle;
      }
    };
    styfn$3.getIndexedStyle = function(ele, property, subproperty, index) {
      var pstyle = ele.pstyle(property)[subproperty][index];
      return pstyle != null ? pstyle : ele.cy().style().getDefaultProperty(property)[subproperty][0];
    };
    styfn$3.getStylePropertyValue = function(ele, propName, isRenderedVal) {
      var self2 = this;
      ele = ele[0];
      if (ele) {
        var prop = self2.properties[propName];
        if (prop.alias) {
          prop = prop.pointsTo;
        }
        var type = prop.type;
        var styleProp = ele.pstyle(prop.name);
        if (styleProp) {
          var value = styleProp.value, units = styleProp.units, strValue = styleProp.strValue;
          if (isRenderedVal && type.number && value != null && number(value)) {
            var zoom = ele.cy().zoom();
            var getRenderedValue = function getRenderedValue2(val) {
              return val * zoom;
            };
            var getValueStringWithUnits = function getValueStringWithUnits2(val, units2) {
              return getRenderedValue(val) + units2;
            };
            var isArrayValue = array(value);
            var haveUnits = isArrayValue ? units.every(function(u) {
              return u != null;
            }) : units != null;
            if (haveUnits) {
              if (isArrayValue) {
                return value.map(function(v, i2) {
                  return getValueStringWithUnits(v, units[i2]);
                }).join(" ");
              } else {
                return getValueStringWithUnits(value, units);
              }
            } else {
              if (isArrayValue) {
                return value.map(function(v) {
                  return string(v) ? v : "" + getRenderedValue(v);
                }).join(" ");
              } else {
                return "" + getRenderedValue(value);
              }
            }
          } else if (strValue != null) {
            return strValue;
          }
        }
        return null;
      }
    };
    styfn$3.getAnimationStartStyle = function(ele, aniProps) {
      var rstyle = {};
      for (var i2 = 0; i2 < aniProps.length; i2++) {
        var aniProp = aniProps[i2];
        var name = aniProp.name;
        var styleProp = ele.pstyle(name);
        if (styleProp !== void 0) {
          if (plainObject(styleProp)) {
            styleProp = this.parse(name, styleProp.strValue);
          } else {
            styleProp = this.parse(name, styleProp);
          }
        }
        if (styleProp) {
          rstyle[name] = styleProp;
        }
      }
      return rstyle;
    };
    styfn$3.getPropsList = function(propsObj) {
      var self2 = this;
      var rstyle = [];
      var style = propsObj;
      var props = self2.properties;
      if (style) {
        var names = Object.keys(style);
        for (var i2 = 0; i2 < names.length; i2++) {
          var name = names[i2];
          var val = style[name];
          var prop = props[name] || props[camel2dash(name)];
          var styleProp = this.parse(prop.name, val);
          if (styleProp) {
            rstyle.push(styleProp);
          }
        }
      }
      return rstyle;
    };
    styfn$3.getNonDefaultPropertiesHash = function(ele, propNames, seed) {
      var hash = seed.slice();
      var name, val, strVal, chVal;
      var i2, j;
      for (i2 = 0; i2 < propNames.length; i2++) {
        name = propNames[i2];
        val = ele.pstyle(name, false);
        if (val == null) {
          continue;
        } else if (val.pfValue != null) {
          hash[0] = hashInt(chVal, hash[0]);
          hash[1] = hashIntAlt(chVal, hash[1]);
        } else {
          strVal = val.strValue;
          for (j = 0; j < strVal.length; j++) {
            chVal = strVal.charCodeAt(j);
            hash[0] = hashInt(chVal, hash[0]);
            hash[1] = hashIntAlt(chVal, hash[1]);
          }
        }
      }
      return hash;
    };
    styfn$3.getPropertiesHash = styfn$3.getNonDefaultPropertiesHash;
    var styfn$4 = {};
    styfn$4.appendFromJson = function(json) {
      var style = this;
      for (var i2 = 0; i2 < json.length; i2++) {
        var context = json[i2];
        var selector = context.selector;
        var props = context.style || context.css;
        var names = Object.keys(props);
        style.selector(selector);
        for (var j = 0; j < names.length; j++) {
          var name = names[j];
          var value = props[name];
          style.css(name, value);
        }
      }
      return style;
    };
    styfn$4.fromJson = function(json) {
      var style = this;
      style.resetToDefault();
      style.appendFromJson(json);
      return style;
    };
    styfn$4.json = function() {
      var json = [];
      for (var i2 = this.defaultLength; i2 < this.length; i2++) {
        var cxt = this[i2];
        var selector = cxt.selector;
        var props = cxt.properties;
        var css = {};
        for (var j = 0; j < props.length; j++) {
          var prop = props[j];
          css[prop.name] = prop.strValue;
        }
        json.push({
          selector: !selector ? "core" : selector.toString(),
          style: css
        });
      }
      return json;
    };
    var styfn$5 = {};
    styfn$5.appendFromString = function(string2) {
      var self2 = this;
      var style = this;
      var remaining = "" + string2;
      var selAndBlockStr;
      var blockRem;
      var propAndValStr;
      remaining = remaining.replace(/[/][*](\s|.)+?[*][/]/g, "");
      function removeSelAndBlockFromRemaining() {
        if (remaining.length > selAndBlockStr.length) {
          remaining = remaining.substr(selAndBlockStr.length);
        } else {
          remaining = "";
        }
      }
      function removePropAndValFromRem() {
        if (blockRem.length > propAndValStr.length) {
          blockRem = blockRem.substr(propAndValStr.length);
        } else {
          blockRem = "";
        }
      }
      for (; ; ) {
        var nothingLeftToParse = remaining.match(/^\s*$/);
        if (nothingLeftToParse) {
          break;
        }
        var selAndBlock = remaining.match(/^\s*((?:.|\s)+?)\s*\{((?:.|\s)+?)\}/);
        if (!selAndBlock) {
          warn("Halting stylesheet parsing: String stylesheet contains more to parse but no selector and block found in: " + remaining);
          break;
        }
        selAndBlockStr = selAndBlock[0];
        var selectorStr = selAndBlock[1];
        if (selectorStr !== "core") {
          var selector = new Selector(selectorStr);
          if (selector.invalid) {
            warn("Skipping parsing of block: Invalid selector found in string stylesheet: " + selectorStr);
            removeSelAndBlockFromRemaining();
            continue;
          }
        }
        var blockStr = selAndBlock[2];
        var invalidBlock = false;
        blockRem = blockStr;
        var props = [];
        for (; ; ) {
          var _nothingLeftToParse = blockRem.match(/^\s*$/);
          if (_nothingLeftToParse) {
            break;
          }
          var propAndVal = blockRem.match(/^\s*(.+?)\s*:\s*(.+?)\s*;/);
          if (!propAndVal) {
            warn("Skipping parsing of block: Invalid formatting of style property and value definitions found in:" + blockStr);
            invalidBlock = true;
            break;
          }
          propAndValStr = propAndVal[0];
          var propStr = propAndVal[1];
          var valStr = propAndVal[2];
          var prop = self2.properties[propStr];
          if (!prop) {
            warn("Skipping property: Invalid property name in: " + propAndValStr);
            removePropAndValFromRem();
            continue;
          }
          var parsedProp = style.parse(propStr, valStr);
          if (!parsedProp) {
            warn("Skipping property: Invalid property definition in: " + propAndValStr);
            removePropAndValFromRem();
            continue;
          }
          props.push({
            name: propStr,
            val: valStr
          });
          removePropAndValFromRem();
        }
        if (invalidBlock) {
          removeSelAndBlockFromRemaining();
          break;
        }
        style.selector(selectorStr);
        for (var i2 = 0; i2 < props.length; i2++) {
          var _prop = props[i2];
          style.css(_prop.name, _prop.val);
        }
        removeSelAndBlockFromRemaining();
      }
      return style;
    };
    styfn$5.fromString = function(string2) {
      var style = this;
      style.resetToDefault();
      style.appendFromString(string2);
      return style;
    };
    var styfn$6 = {};
    (function() {
      var number2 = number$1;
      var rgba2 = rgbaNoBackRefs;
      var hsla2 = hslaNoBackRefs;
      var hex3$1 = hex3;
      var hex6$1 = hex6;
      var data2 = function data3(prefix) {
        return "^" + prefix + "\\s*\\(\\s*([\\w\\.]+)\\s*\\)$";
      };
      var mapData = function mapData2(prefix) {
        var mapArg = number2 + "|\\w+|" + rgba2 + "|" + hsla2 + "|" + hex3$1 + "|" + hex6$1;
        return "^" + prefix + "\\s*\\(([\\w\\.]+)\\s*\\,\\s*(" + number2 + ")\\s*\\,\\s*(" + number2 + ")\\s*,\\s*(" + mapArg + ")\\s*\\,\\s*(" + mapArg + ")\\)$";
      };
      var urlRegexes = [`^url\\s*\\(\\s*['"]?(.+?)['"]?\\s*\\)$`, "^(none)$", "^(.+)$"];
      styfn$6.types = {
        time: {
          number: true,
          min: 0,
          units: "s|ms",
          implicitUnits: "ms"
        },
        percent: {
          number: true,
          min: 0,
          max: 100,
          units: "%",
          implicitUnits: "%"
        },
        percentages: {
          number: true,
          min: 0,
          max: 100,
          units: "%",
          implicitUnits: "%",
          multiple: true
        },
        zeroOneNumber: {
          number: true,
          min: 0,
          max: 1,
          unitless: true
        },
        zeroOneNumbers: {
          number: true,
          min: 0,
          max: 1,
          unitless: true,
          multiple: true
        },
        nOneOneNumber: {
          number: true,
          min: -1,
          max: 1,
          unitless: true
        },
        nonNegativeInt: {
          number: true,
          min: 0,
          integer: true,
          unitless: true
        },
        position: {
          enums: ["parent", "origin"]
        },
        nodeSize: {
          number: true,
          min: 0,
          enums: ["label"]
        },
        number: {
          number: true,
          unitless: true
        },
        numbers: {
          number: true,
          unitless: true,
          multiple: true
        },
        positiveNumber: {
          number: true,
          unitless: true,
          min: 0,
          strictMin: true
        },
        size: {
          number: true,
          min: 0
        },
        bidirectionalSize: {
          number: true
        },
        bidirectionalSizeMaybePercent: {
          number: true,
          allowPercent: true
        },
        bidirectionalSizes: {
          number: true,
          multiple: true
        },
        sizeMaybePercent: {
          number: true,
          min: 0,
          allowPercent: true
        },
        axisDirection: {
          enums: ["horizontal", "leftward", "rightward", "vertical", "upward", "downward", "auto"]
        },
        paddingRelativeTo: {
          enums: ["width", "height", "average", "min", "max"]
        },
        bgWH: {
          number: true,
          min: 0,
          allowPercent: true,
          enums: ["auto"],
          multiple: true
        },
        bgPos: {
          number: true,
          allowPercent: true,
          multiple: true
        },
        bgRelativeTo: {
          enums: ["inner", "include-padding"],
          multiple: true
        },
        bgRepeat: {
          enums: ["repeat", "repeat-x", "repeat-y", "no-repeat"],
          multiple: true
        },
        bgFit: {
          enums: ["none", "contain", "cover"],
          multiple: true
        },
        bgCrossOrigin: {
          enums: ["anonymous", "use-credentials"],
          multiple: true
        },
        bgClip: {
          enums: ["none", "node"],
          multiple: true
        },
        color: {
          color: true
        },
        colors: {
          color: true,
          multiple: true
        },
        fill: {
          enums: ["solid", "linear-gradient", "radial-gradient"]
        },
        bool: {
          enums: ["yes", "no"]
        },
        lineStyle: {
          enums: ["solid", "dotted", "dashed"]
        },
        lineCap: {
          enums: ["butt", "round", "square"]
        },
        borderStyle: {
          enums: ["solid", "dotted", "dashed", "double"]
        },
        curveStyle: {
          enums: ["bezier", "unbundled-bezier", "haystack", "segments", "straight", "taxi"]
        },
        fontFamily: {
          regex: '^([\\w- \\"]+(?:\\s*,\\s*[\\w- \\"]+)*)$'
        },
        fontStyle: {
          enums: ["italic", "normal", "oblique"]
        },
        fontWeight: {
          enums: ["normal", "bold", "bolder", "lighter", "100", "200", "300", "400", "500", "600", "800", "900", 100, 200, 300, 400, 500, 600, 700, 800, 900]
        },
        textDecoration: {
          enums: ["none", "underline", "overline", "line-through"]
        },
        textTransform: {
          enums: ["none", "uppercase", "lowercase"]
        },
        textWrap: {
          enums: ["none", "wrap", "ellipsis"]
        },
        textOverflowWrap: {
          enums: ["whitespace", "anywhere"]
        },
        textBackgroundShape: {
          enums: ["rectangle", "roundrectangle", "round-rectangle"]
        },
        nodeShape: {
          enums: ["rectangle", "roundrectangle", "round-rectangle", "cutrectangle", "cut-rectangle", "bottomroundrectangle", "bottom-round-rectangle", "barrel", "ellipse", "triangle", "round-triangle", "square", "pentagon", "round-pentagon", "hexagon", "round-hexagon", "concavehexagon", "concave-hexagon", "heptagon", "round-heptagon", "octagon", "round-octagon", "tag", "round-tag", "star", "diamond", "round-diamond", "vee", "rhomboid", "polygon"]
        },
        compoundIncludeLabels: {
          enums: ["include", "exclude"]
        },
        arrowShape: {
          enums: ["tee", "triangle", "triangle-tee", "circle-triangle", "triangle-cross", "triangle-backcurve", "vee", "square", "circle", "diamond", "chevron", "none"]
        },
        arrowFill: {
          enums: ["filled", "hollow"]
        },
        display: {
          enums: ["element", "none"]
        },
        visibility: {
          enums: ["hidden", "visible"]
        },
        zCompoundDepth: {
          enums: ["bottom", "orphan", "auto", "top"]
        },
        zIndexCompare: {
          enums: ["auto", "manual"]
        },
        valign: {
          enums: ["top", "center", "bottom"]
        },
        halign: {
          enums: ["left", "center", "right"]
        },
        justification: {
          enums: ["left", "center", "right", "auto"]
        },
        text: {
          string: true
        },
        data: {
          mapping: true,
          regex: data2("data")
        },
        layoutData: {
          mapping: true,
          regex: data2("layoutData")
        },
        scratch: {
          mapping: true,
          regex: data2("scratch")
        },
        mapData: {
          mapping: true,
          regex: mapData("mapData")
        },
        mapLayoutData: {
          mapping: true,
          regex: mapData("mapLayoutData")
        },
        mapScratch: {
          mapping: true,
          regex: mapData("mapScratch")
        },
        fn: {
          mapping: true,
          fn: true
        },
        url: {
          regexes: urlRegexes,
          singleRegexMatchValue: true
        },
        urls: {
          regexes: urlRegexes,
          singleRegexMatchValue: true,
          multiple: true
        },
        propList: {
          propList: true
        },
        angle: {
          number: true,
          units: "deg|rad",
          implicitUnits: "rad"
        },
        textRotation: {
          number: true,
          units: "deg|rad",
          implicitUnits: "rad",
          enums: ["none", "autorotate"]
        },
        polygonPointList: {
          number: true,
          multiple: true,
          evenMultiple: true,
          min: -1,
          max: 1,
          unitless: true
        },
        edgeDistances: {
          enums: ["intersection", "node-position"]
        },
        edgeEndpoint: {
          number: true,
          multiple: true,
          units: "%|px|em|deg|rad",
          implicitUnits: "px",
          enums: ["inside-to-node", "outside-to-node", "outside-to-node-or-label", "outside-to-line", "outside-to-line-or-label"],
          singleEnum: true,
          validate: function validate(valArr, unitsArr) {
            switch (valArr.length) {
              case 2:
                return unitsArr[0] !== "deg" && unitsArr[0] !== "rad" && unitsArr[1] !== "deg" && unitsArr[1] !== "rad";
              case 1:
                return string(valArr[0]) || unitsArr[0] === "deg" || unitsArr[0] === "rad";
              default:
                return false;
            }
          }
        },
        easing: {
          regexes: ["^(spring)\\s*\\(\\s*(" + number2 + ")\\s*,\\s*(" + number2 + ")\\s*\\)$", "^(cubic-bezier)\\s*\\(\\s*(" + number2 + ")\\s*,\\s*(" + number2 + ")\\s*,\\s*(" + number2 + ")\\s*,\\s*(" + number2 + ")\\s*\\)$"],
          enums: ["linear", "ease", "ease-in", "ease-out", "ease-in-out", "ease-in-sine", "ease-out-sine", "ease-in-out-sine", "ease-in-quad", "ease-out-quad", "ease-in-out-quad", "ease-in-cubic", "ease-out-cubic", "ease-in-out-cubic", "ease-in-quart", "ease-out-quart", "ease-in-out-quart", "ease-in-quint", "ease-out-quint", "ease-in-out-quint", "ease-in-expo", "ease-out-expo", "ease-in-out-expo", "ease-in-circ", "ease-out-circ", "ease-in-out-circ"]
        },
        gradientDirection: {
          enums: ["to-bottom", "to-top", "to-left", "to-right", "to-bottom-right", "to-bottom-left", "to-top-right", "to-top-left", "to-right-bottom", "to-left-bottom", "to-right-top", "to-left-top"]
        },
        boundsExpansion: {
          number: true,
          multiple: true,
          min: 0,
          validate: function validate(valArr) {
            var length = valArr.length;
            return length === 1 || length === 2 || length === 4;
          }
        }
      };
      var diff = {
        zeroNonZero: function zeroNonZero(val1, val2) {
          if ((val1 == null || val2 == null) && val1 !== val2) {
            return true;
          }
          if (val1 == 0 && val2 != 0) {
            return true;
          } else if (val1 != 0 && val2 == 0) {
            return true;
          } else {
            return false;
          }
        },
        any: function any(val1, val2) {
          return val1 != val2;
        },
        emptyNonEmpty: function emptyNonEmpty(str1, str2) {
          var empty1 = emptyString(str1);
          var empty2 = emptyString(str2);
          return empty1 && !empty2 || !empty1 && empty2;
        }
      };
      var t = styfn$6.types;
      var mainLabel = [{
        name: "label",
        type: t.text,
        triggersBounds: diff.any,
        triggersZOrder: diff.emptyNonEmpty
      }, {
        name: "text-rotation",
        type: t.textRotation,
        triggersBounds: diff.any
      }, {
        name: "text-margin-x",
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }, {
        name: "text-margin-y",
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }];
      var sourceLabel = [{
        name: "source-label",
        type: t.text,
        triggersBounds: diff.any
      }, {
        name: "source-text-rotation",
        type: t.textRotation,
        triggersBounds: diff.any
      }, {
        name: "source-text-margin-x",
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }, {
        name: "source-text-margin-y",
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }, {
        name: "source-text-offset",
        type: t.size,
        triggersBounds: diff.any
      }];
      var targetLabel = [{
        name: "target-label",
        type: t.text,
        triggersBounds: diff.any
      }, {
        name: "target-text-rotation",
        type: t.textRotation,
        triggersBounds: diff.any
      }, {
        name: "target-text-margin-x",
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }, {
        name: "target-text-margin-y",
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }, {
        name: "target-text-offset",
        type: t.size,
        triggersBounds: diff.any
      }];
      var labelDimensions = [{
        name: "font-family",
        type: t.fontFamily,
        triggersBounds: diff.any
      }, {
        name: "font-style",
        type: t.fontStyle,
        triggersBounds: diff.any
      }, {
        name: "font-weight",
        type: t.fontWeight,
        triggersBounds: diff.any
      }, {
        name: "font-size",
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: "text-transform",
        type: t.textTransform,
        triggersBounds: diff.any
      }, {
        name: "text-wrap",
        type: t.textWrap,
        triggersBounds: diff.any
      }, {
        name: "text-overflow-wrap",
        type: t.textOverflowWrap,
        triggersBounds: diff.any
      }, {
        name: "text-max-width",
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: "text-outline-width",
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: "line-height",
        type: t.positiveNumber,
        triggersBounds: diff.any
      }];
      var commonLabel = [{
        name: "text-valign",
        type: t.valign,
        triggersBounds: diff.any
      }, {
        name: "text-halign",
        type: t.halign,
        triggersBounds: diff.any
      }, {
        name: "color",
        type: t.color
      }, {
        name: "text-outline-color",
        type: t.color
      }, {
        name: "text-outline-opacity",
        type: t.zeroOneNumber
      }, {
        name: "text-background-color",
        type: t.color
      }, {
        name: "text-background-opacity",
        type: t.zeroOneNumber
      }, {
        name: "text-background-padding",
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: "text-border-opacity",
        type: t.zeroOneNumber
      }, {
        name: "text-border-color",
        type: t.color
      }, {
        name: "text-border-width",
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: "text-border-style",
        type: t.borderStyle,
        triggersBounds: diff.any
      }, {
        name: "text-background-shape",
        type: t.textBackgroundShape,
        triggersBounds: diff.any
      }, {
        name: "text-justification",
        type: t.justification
      }];
      var behavior = [{
        name: "events",
        type: t.bool
      }, {
        name: "text-events",
        type: t.bool
      }];
      var visibility = [{
        name: "display",
        type: t.display,
        triggersZOrder: diff.any,
        triggersBounds: diff.any,
        triggersBoundsOfParallelBeziers: true
      }, {
        name: "visibility",
        type: t.visibility,
        triggersZOrder: diff.any
      }, {
        name: "opacity",
        type: t.zeroOneNumber,
        triggersZOrder: diff.zeroNonZero
      }, {
        name: "text-opacity",
        type: t.zeroOneNumber
      }, {
        name: "min-zoomed-font-size",
        type: t.size
      }, {
        name: "z-compound-depth",
        type: t.zCompoundDepth,
        triggersZOrder: diff.any
      }, {
        name: "z-index-compare",
        type: t.zIndexCompare,
        triggersZOrder: diff.any
      }, {
        name: "z-index",
        type: t.nonNegativeInt,
        triggersZOrder: diff.any
      }];
      var overlay = [{
        name: "overlay-padding",
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: "overlay-color",
        type: t.color
      }, {
        name: "overlay-opacity",
        type: t.zeroOneNumber,
        triggersBounds: diff.zeroNonZero
      }];
      var transition = [{
        name: "transition-property",
        type: t.propList
      }, {
        name: "transition-duration",
        type: t.time
      }, {
        name: "transition-delay",
        type: t.time
      }, {
        name: "transition-timing-function",
        type: t.easing
      }];
      var nodeSizeHashOverride = function nodeSizeHashOverride2(ele, parsedProp) {
        if (parsedProp.value === "label") {
          return -ele.poolIndex();
        } else {
          return parsedProp.pfValue;
        }
      };
      var nodeBody = [{
        name: "height",
        type: t.nodeSize,
        triggersBounds: diff.any,
        hashOverride: nodeSizeHashOverride
      }, {
        name: "width",
        type: t.nodeSize,
        triggersBounds: diff.any,
        hashOverride: nodeSizeHashOverride
      }, {
        name: "shape",
        type: t.nodeShape,
        triggersBounds: diff.any
      }, {
        name: "shape-polygon-points",
        type: t.polygonPointList,
        triggersBounds: diff.any
      }, {
        name: "background-color",
        type: t.color
      }, {
        name: "background-fill",
        type: t.fill
      }, {
        name: "background-opacity",
        type: t.zeroOneNumber
      }, {
        name: "background-blacken",
        type: t.nOneOneNumber
      }, {
        name: "background-gradient-stop-colors",
        type: t.colors
      }, {
        name: "background-gradient-stop-positions",
        type: t.percentages
      }, {
        name: "background-gradient-direction",
        type: t.gradientDirection
      }, {
        name: "padding",
        type: t.sizeMaybePercent,
        triggersBounds: diff.any
      }, {
        name: "padding-relative-to",
        type: t.paddingRelativeTo,
        triggersBounds: diff.any
      }, {
        name: "bounds-expansion",
        type: t.boundsExpansion,
        triggersBounds: diff.any
      }];
      var nodeBorder = [{
        name: "border-color",
        type: t.color
      }, {
        name: "border-opacity",
        type: t.zeroOneNumber
      }, {
        name: "border-width",
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: "border-style",
        type: t.borderStyle
      }];
      var backgroundImage = [{
        name: "background-image",
        type: t.urls
      }, {
        name: "background-image-crossorigin",
        type: t.bgCrossOrigin
      }, {
        name: "background-image-opacity",
        type: t.zeroOneNumbers
      }, {
        name: "background-position-x",
        type: t.bgPos
      }, {
        name: "background-position-y",
        type: t.bgPos
      }, {
        name: "background-width-relative-to",
        type: t.bgRelativeTo
      }, {
        name: "background-height-relative-to",
        type: t.bgRelativeTo
      }, {
        name: "background-repeat",
        type: t.bgRepeat
      }, {
        name: "background-fit",
        type: t.bgFit
      }, {
        name: "background-clip",
        type: t.bgClip
      }, {
        name: "background-width",
        type: t.bgWH
      }, {
        name: "background-height",
        type: t.bgWH
      }, {
        name: "background-offset-x",
        type: t.bgPos
      }, {
        name: "background-offset-y",
        type: t.bgPos
      }];
      var compound = [{
        name: "position",
        type: t.position,
        triggersBounds: diff.any
      }, {
        name: "compound-sizing-wrt-labels",
        type: t.compoundIncludeLabels,
        triggersBounds: diff.any
      }, {
        name: "min-width",
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: "min-width-bias-left",
        type: t.sizeMaybePercent,
        triggersBounds: diff.any
      }, {
        name: "min-width-bias-right",
        type: t.sizeMaybePercent,
        triggersBounds: diff.any
      }, {
        name: "min-height",
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: "min-height-bias-top",
        type: t.sizeMaybePercent,
        triggersBounds: diff.any
      }, {
        name: "min-height-bias-bottom",
        type: t.sizeMaybePercent,
        triggersBounds: diff.any
      }];
      var edgeLine = [{
        name: "line-style",
        type: t.lineStyle
      }, {
        name: "line-color",
        type: t.color
      }, {
        name: "line-fill",
        type: t.fill
      }, {
        name: "line-cap",
        type: t.lineCap
      }, {
        name: "line-opacity",
        type: t.zeroOneNumber
      }, {
        name: "line-dash-pattern",
        type: t.numbers
      }, {
        name: "line-dash-offset",
        type: t.number
      }, {
        name: "line-gradient-stop-colors",
        type: t.colors
      }, {
        name: "line-gradient-stop-positions",
        type: t.percentages
      }, {
        name: "curve-style",
        type: t.curveStyle,
        triggersBounds: diff.any,
        triggersBoundsOfParallelBeziers: true
      }, {
        name: "haystack-radius",
        type: t.zeroOneNumber,
        triggersBounds: diff.any
      }, {
        name: "source-endpoint",
        type: t.edgeEndpoint,
        triggersBounds: diff.any
      }, {
        name: "target-endpoint",
        type: t.edgeEndpoint,
        triggersBounds: diff.any
      }, {
        name: "control-point-step-size",
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: "control-point-distances",
        type: t.bidirectionalSizes,
        triggersBounds: diff.any
      }, {
        name: "control-point-weights",
        type: t.numbers,
        triggersBounds: diff.any
      }, {
        name: "segment-distances",
        type: t.bidirectionalSizes,
        triggersBounds: diff.any
      }, {
        name: "segment-weights",
        type: t.numbers,
        triggersBounds: diff.any
      }, {
        name: "taxi-turn",
        type: t.bidirectionalSizeMaybePercent,
        triggersBounds: diff.any
      }, {
        name: "taxi-turn-min-distance",
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: "taxi-direction",
        type: t.axisDirection,
        triggersBounds: diff.any
      }, {
        name: "edge-distances",
        type: t.edgeDistances,
        triggersBounds: diff.any
      }, {
        name: "arrow-scale",
        type: t.positiveNumber,
        triggersBounds: diff.any
      }, {
        name: "loop-direction",
        type: t.angle,
        triggersBounds: diff.any
      }, {
        name: "loop-sweep",
        type: t.angle,
        triggersBounds: diff.any
      }, {
        name: "source-distance-from-node",
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: "target-distance-from-node",
        type: t.size,
        triggersBounds: diff.any
      }];
      var ghost = [{
        name: "ghost",
        type: t.bool,
        triggersBounds: diff.any
      }, {
        name: "ghost-offset-x",
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }, {
        name: "ghost-offset-y",
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }, {
        name: "ghost-opacity",
        type: t.zeroOneNumber
      }];
      var core2 = [{
        name: "selection-box-color",
        type: t.color
      }, {
        name: "selection-box-opacity",
        type: t.zeroOneNumber
      }, {
        name: "selection-box-border-color",
        type: t.color
      }, {
        name: "selection-box-border-width",
        type: t.size
      }, {
        name: "active-bg-color",
        type: t.color
      }, {
        name: "active-bg-opacity",
        type: t.zeroOneNumber
      }, {
        name: "active-bg-size",
        type: t.size
      }, {
        name: "outside-texture-bg-color",
        type: t.color
      }, {
        name: "outside-texture-bg-opacity",
        type: t.zeroOneNumber
      }];
      var pie = [];
      styfn$6.pieBackgroundN = 16;
      pie.push({
        name: "pie-size",
        type: t.sizeMaybePercent
      });
      for (var i2 = 1; i2 <= styfn$6.pieBackgroundN; i2++) {
        pie.push({
          name: "pie-" + i2 + "-background-color",
          type: t.color
        });
        pie.push({
          name: "pie-" + i2 + "-background-size",
          type: t.percent
        });
        pie.push({
          name: "pie-" + i2 + "-background-opacity",
          type: t.zeroOneNumber
        });
      }
      var edgeArrow = [];
      var arrowPrefixes = styfn$6.arrowPrefixes = ["source", "mid-source", "target", "mid-target"];
      [{
        name: "arrow-shape",
        type: t.arrowShape,
        triggersBounds: diff.any
      }, {
        name: "arrow-color",
        type: t.color
      }, {
        name: "arrow-fill",
        type: t.arrowFill
      }].forEach(function(prop2) {
        arrowPrefixes.forEach(function(prefix) {
          var name = prefix + "-" + prop2.name;
          var type = prop2.type, triggersBounds = prop2.triggersBounds;
          edgeArrow.push({
            name,
            type,
            triggersBounds
          });
        });
      }, {});
      var props = styfn$6.properties = [].concat(behavior, transition, visibility, overlay, ghost, commonLabel, labelDimensions, mainLabel, sourceLabel, targetLabel, nodeBody, nodeBorder, backgroundImage, pie, compound, edgeLine, edgeArrow, core2);
      var propGroups = styfn$6.propertyGroups = {
        behavior,
        transition,
        visibility,
        overlay,
        ghost,
        commonLabel,
        labelDimensions,
        mainLabel,
        sourceLabel,
        targetLabel,
        nodeBody,
        nodeBorder,
        backgroundImage,
        pie,
        compound,
        edgeLine,
        edgeArrow,
        core: core2
      };
      var propGroupNames = styfn$6.propertyGroupNames = {};
      var propGroupKeys = styfn$6.propertyGroupKeys = Object.keys(propGroups);
      propGroupKeys.forEach(function(key) {
        propGroupNames[key] = propGroups[key].map(function(prop2) {
          return prop2.name;
        });
        propGroups[key].forEach(function(prop2) {
          return prop2.groupKey = key;
        });
      });
      var aliases = styfn$6.aliases = [{
        name: "content",
        pointsTo: "label"
      }, {
        name: "control-point-distance",
        pointsTo: "control-point-distances"
      }, {
        name: "control-point-weight",
        pointsTo: "control-point-weights"
      }, {
        name: "edge-text-rotation",
        pointsTo: "text-rotation"
      }, {
        name: "padding-left",
        pointsTo: "padding"
      }, {
        name: "padding-right",
        pointsTo: "padding"
      }, {
        name: "padding-top",
        pointsTo: "padding"
      }, {
        name: "padding-bottom",
        pointsTo: "padding"
      }];
      styfn$6.propertyNames = props.map(function(p2) {
        return p2.name;
      });
      for (var _i = 0; _i < props.length; _i++) {
        var prop = props[_i];
        props[prop.name] = prop;
      }
      for (var _i2 = 0; _i2 < aliases.length; _i2++) {
        var alias = aliases[_i2];
        var pointsToProp = props[alias.pointsTo];
        var aliasProp = {
          name: alias.name,
          alias: true,
          pointsTo: pointsToProp
        };
        props.push(aliasProp);
        props[alias.name] = aliasProp;
      }
    })();
    styfn$6.getDefaultProperty = function(name) {
      return this.getDefaultProperties()[name];
    };
    styfn$6.getDefaultProperties = function() {
      var _p = this._private;
      if (_p.defaultProperties != null) {
        return _p.defaultProperties;
      }
      var rawProps = extend({
        "selection-box-color": "#ddd",
        "selection-box-opacity": 0.65,
        "selection-box-border-color": "#aaa",
        "selection-box-border-width": 1,
        "active-bg-color": "black",
        "active-bg-opacity": 0.15,
        "active-bg-size": 30,
        "outside-texture-bg-color": "#000",
        "outside-texture-bg-opacity": 0.125,
        events: "yes",
        "text-events": "no",
        "text-valign": "top",
        "text-halign": "center",
        "text-justification": "auto",
        "line-height": 1,
        color: "#000",
        "text-outline-color": "#000",
        "text-outline-width": 0,
        "text-outline-opacity": 1,
        "text-opacity": 1,
        "text-decoration": "none",
        "text-transform": "none",
        "text-wrap": "none",
        "text-overflow-wrap": "whitespace",
        "text-max-width": 9999,
        "text-background-color": "#000",
        "text-background-opacity": 0,
        "text-background-shape": "rectangle",
        "text-background-padding": 0,
        "text-border-opacity": 0,
        "text-border-width": 0,
        "text-border-style": "solid",
        "text-border-color": "#000",
        "font-family": "Helvetica Neue, Helvetica, sans-serif",
        "font-style": "normal",
        "font-weight": "normal",
        "font-size": 16,
        "min-zoomed-font-size": 0,
        "text-rotation": "none",
        "source-text-rotation": "none",
        "target-text-rotation": "none",
        visibility: "visible",
        display: "element",
        opacity: 1,
        "z-compound-depth": "auto",
        "z-index-compare": "auto",
        "z-index": 0,
        label: "",
        "text-margin-x": 0,
        "text-margin-y": 0,
        "source-label": "",
        "source-text-offset": 0,
        "source-text-margin-x": 0,
        "source-text-margin-y": 0,
        "target-label": "",
        "target-text-offset": 0,
        "target-text-margin-x": 0,
        "target-text-margin-y": 0,
        "overlay-opacity": 0,
        "overlay-color": "#000",
        "overlay-padding": 10,
        "transition-property": "none",
        "transition-duration": 0,
        "transition-delay": 0,
        "transition-timing-function": "linear",
        "background-blacken": 0,
        "background-color": "#999",
        "background-fill": "solid",
        "background-opacity": 1,
        "background-image": "none",
        "background-image-crossorigin": "anonymous",
        "background-image-opacity": 1,
        "background-position-x": "50%",
        "background-position-y": "50%",
        "background-offset-x": 0,
        "background-offset-y": 0,
        "background-width-relative-to": "include-padding",
        "background-height-relative-to": "include-padding",
        "background-repeat": "no-repeat",
        "background-fit": "none",
        "background-clip": "node",
        "background-width": "auto",
        "background-height": "auto",
        "border-color": "#000",
        "border-opacity": 1,
        "border-width": 0,
        "border-style": "solid",
        height: 30,
        width: 30,
        shape: "ellipse",
        "shape-polygon-points": "-1, -1,   1, -1,   1, 1,   -1, 1",
        "bounds-expansion": 0,
        "background-gradient-direction": "to-bottom",
        "background-gradient-stop-colors": "#999",
        "background-gradient-stop-positions": "0%",
        ghost: "no",
        "ghost-offset-y": 0,
        "ghost-offset-x": 0,
        "ghost-opacity": 0,
        padding: 0,
        "padding-relative-to": "width",
        position: "origin",
        "compound-sizing-wrt-labels": "include",
        "min-width": 0,
        "min-width-bias-left": 0,
        "min-width-bias-right": 0,
        "min-height": 0,
        "min-height-bias-top": 0,
        "min-height-bias-bottom": 0
      }, {
        "pie-size": "100%"
      }, [{
        name: "pie-{{i}}-background-color",
        value: "black"
      }, {
        name: "pie-{{i}}-background-size",
        value: "0%"
      }, {
        name: "pie-{{i}}-background-opacity",
        value: 1
      }].reduce(function(css, prop2) {
        for (var i3 = 1; i3 <= styfn$6.pieBackgroundN; i3++) {
          var name2 = prop2.name.replace("{{i}}", i3);
          var val2 = prop2.value;
          css[name2] = val2;
        }
        return css;
      }, {}), {
        "line-style": "solid",
        "line-color": "#999",
        "line-fill": "solid",
        "line-cap": "butt",
        "line-opacity": 1,
        "line-gradient-stop-colors": "#999",
        "line-gradient-stop-positions": "0%",
        "control-point-step-size": 40,
        "control-point-weights": 0.5,
        "segment-weights": 0.5,
        "segment-distances": 20,
        "taxi-turn": "50%",
        "taxi-turn-min-distance": 10,
        "taxi-direction": "auto",
        "edge-distances": "intersection",
        "curve-style": "haystack",
        "haystack-radius": 0,
        "arrow-scale": 1,
        "loop-direction": "-45deg",
        "loop-sweep": "-90deg",
        "source-distance-from-node": 0,
        "target-distance-from-node": 0,
        "source-endpoint": "outside-to-node",
        "target-endpoint": "outside-to-node",
        "line-dash-pattern": [6, 3],
        "line-dash-offset": 0
      }, [{
        name: "arrow-shape",
        value: "none"
      }, {
        name: "arrow-color",
        value: "#999"
      }, {
        name: "arrow-fill",
        value: "filled"
      }].reduce(function(css, prop2) {
        styfn$6.arrowPrefixes.forEach(function(prefix) {
          var name2 = prefix + "-" + prop2.name;
          var val2 = prop2.value;
          css[name2] = val2;
        });
        return css;
      }, {}));
      var parsedProps = {};
      for (var i2 = 0; i2 < this.properties.length; i2++) {
        var prop = this.properties[i2];
        if (prop.pointsTo) {
          continue;
        }
        var name = prop.name;
        var val = rawProps[name];
        var parsedProp = this.parse(name, val);
        parsedProps[name] = parsedProp;
      }
      _p.defaultProperties = parsedProps;
      return _p.defaultProperties;
    };
    styfn$6.addDefaultStylesheet = function() {
      this.selector(":parent").css({
        shape: "rectangle",
        padding: 10,
        "background-color": "#eee",
        "border-color": "#ccc",
        "border-width": 1
      }).selector("edge").css({
        width: 3
      }).selector(":loop").css({
        "curve-style": "bezier"
      }).selector("edge:compound").css({
        "curve-style": "bezier",
        "source-endpoint": "outside-to-line",
        "target-endpoint": "outside-to-line"
      }).selector(":selected").css({
        "background-color": "#0169D9",
        "line-color": "#0169D9",
        "source-arrow-color": "#0169D9",
        "target-arrow-color": "#0169D9",
        "mid-source-arrow-color": "#0169D9",
        "mid-target-arrow-color": "#0169D9"
      }).selector(":parent:selected").css({
        "background-color": "#CCE1F9",
        "border-color": "#aec8e5"
      }).selector(":active").css({
        "overlay-color": "black",
        "overlay-padding": 10,
        "overlay-opacity": 0.25
      });
      this.defaultLength = this.length;
    };
    var styfn$7 = {};
    styfn$7.parse = function(name, value, propIsBypass, propIsFlat) {
      var self2 = this;
      if (fn(value)) {
        return self2.parseImplWarn(name, value, propIsBypass, propIsFlat);
      }
      var flatKey = propIsFlat === "mapping" || propIsFlat === true || propIsFlat === false || propIsFlat == null ? "dontcare" : propIsFlat;
      var bypassKey = propIsBypass ? "t" : "f";
      var valueKey = "" + value;
      var argHash = hashStrings(name, valueKey, bypassKey, flatKey);
      var propCache = self2.propCache = self2.propCache || [];
      var ret;
      if (!(ret = propCache[argHash])) {
        ret = propCache[argHash] = self2.parseImplWarn(name, value, propIsBypass, propIsFlat);
      }
      if (propIsBypass || propIsFlat === "mapping") {
        ret = copy(ret);
        if (ret) {
          ret.value = copy(ret.value);
        }
      }
      return ret;
    };
    styfn$7.parseImplWarn = function(name, value, propIsBypass, propIsFlat) {
      var prop = this.parseImpl(name, value, propIsBypass, propIsFlat);
      if (!prop && value != null) {
        warn("The style property `".concat(name, ": ").concat(value, "` is invalid"));
      }
      if (prop && (prop.name === "width" || prop.name === "height") && value === "label") {
        warn("The style value of `label` is deprecated for `" + prop.name + "`");
      }
      return prop;
    };
    styfn$7.parseImpl = function(name, value, propIsBypass, propIsFlat) {
      var self2 = this;
      name = camel2dash(name);
      var property = self2.properties[name];
      var passedValue = value;
      var types = self2.types;
      if (!property) {
        return null;
      }
      if (value === void 0) {
        return null;
      }
      if (property.alias) {
        property = property.pointsTo;
        name = property.name;
      }
      var valueIsString = string(value);
      if (valueIsString) {
        value = value.trim();
      }
      var type = property.type;
      if (!type) {
        return null;
      }
      if (propIsBypass && (value === "" || value === null)) {
        return {
          name,
          value,
          bypass: true,
          deleteBypass: true
        };
      }
      if (fn(value)) {
        return {
          name,
          value,
          strValue: "fn",
          mapped: types.fn,
          bypass: propIsBypass
        };
      }
      var data2, mapData;
      if (!valueIsString || propIsFlat || value.length < 7 || value[1] !== "a")
        ;
      else if (value.length >= 7 && value[0] === "d" && (data2 = new RegExp(types.data.regex).exec(value))) {
        if (propIsBypass) {
          return false;
        }
        var mapped = types.data;
        return {
          name,
          value: data2,
          strValue: "" + value,
          mapped,
          field: data2[1],
          bypass: propIsBypass
        };
      } else if (value.length >= 10 && value[0] === "m" && (mapData = new RegExp(types.mapData.regex).exec(value))) {
        if (propIsBypass) {
          return false;
        }
        if (type.multiple) {
          return false;
        }
        var _mapped = types.mapData;
        if (!(type.color || type.number)) {
          return false;
        }
        var valueMin = this.parse(name, mapData[4]);
        if (!valueMin || valueMin.mapped) {
          return false;
        }
        var valueMax = this.parse(name, mapData[5]);
        if (!valueMax || valueMax.mapped) {
          return false;
        }
        if (valueMin.pfValue === valueMax.pfValue || valueMin.strValue === valueMax.strValue) {
          warn("`" + name + ": " + value + "` is not a valid mapper because the output range is zero; converting to `" + name + ": " + valueMin.strValue + "`");
          return this.parse(name, valueMin.strValue);
        } else if (type.color) {
          var c1 = valueMin.value;
          var c2 = valueMax.value;
          var same = c1[0] === c2[0] && c1[1] === c2[1] && c1[2] === c2[2] && (c1[3] === c2[3] || (c1[3] == null || c1[3] === 1) && (c2[3] == null || c2[3] === 1));
          if (same) {
            return false;
          }
        }
        return {
          name,
          value: mapData,
          strValue: "" + value,
          mapped: _mapped,
          field: mapData[1],
          fieldMin: parseFloat(mapData[2]),
          fieldMax: parseFloat(mapData[3]),
          valueMin: valueMin.value,
          valueMax: valueMax.value,
          bypass: propIsBypass
        };
      }
      if (type.multiple && propIsFlat !== "multiple") {
        var vals;
        if (valueIsString) {
          vals = value.split(/\s+/);
        } else if (array(value)) {
          vals = value;
        } else {
          vals = [value];
        }
        if (type.evenMultiple && vals.length % 2 !== 0) {
          return null;
        }
        var valArr = [];
        var unitsArr = [];
        var pfValArr = [];
        var strVal = "";
        var hasEnum = false;
        for (var i2 = 0; i2 < vals.length; i2++) {
          var p2 = self2.parse(name, vals[i2], propIsBypass, "multiple");
          hasEnum = hasEnum || string(p2.value);
          valArr.push(p2.value);
          pfValArr.push(p2.pfValue != null ? p2.pfValue : p2.value);
          unitsArr.push(p2.units);
          strVal += (i2 > 0 ? " " : "") + p2.strValue;
        }
        if (type.validate && !type.validate(valArr, unitsArr)) {
          return null;
        }
        if (type.singleEnum && hasEnum) {
          if (valArr.length === 1 && string(valArr[0])) {
            return {
              name,
              value: valArr[0],
              strValue: valArr[0],
              bypass: propIsBypass
            };
          } else {
            return null;
          }
        }
        return {
          name,
          value: valArr,
          pfValue: pfValArr,
          strValue: strVal,
          bypass: propIsBypass,
          units: unitsArr
        };
      }
      var checkEnums = function checkEnums2() {
        for (var _i = 0; _i < type.enums.length; _i++) {
          var en = type.enums[_i];
          if (en === value) {
            return {
              name,
              value,
              strValue: "" + value,
              bypass: propIsBypass
            };
          }
        }
        return null;
      };
      if (type.number) {
        var units;
        var implicitUnits = "px";
        if (type.units) {
          units = type.units;
        }
        if (type.implicitUnits) {
          implicitUnits = type.implicitUnits;
        }
        if (!type.unitless) {
          if (valueIsString) {
            var unitsRegex = "px|em" + (type.allowPercent ? "|\\%" : "");
            if (units) {
              unitsRegex = units;
            }
            var match2 = value.match("^(" + number$1 + ")(" + unitsRegex + ")?$");
            if (match2) {
              value = match2[1];
              units = match2[2] || implicitUnits;
            }
          } else if (!units || type.implicitUnits) {
            units = implicitUnits;
          }
        }
        value = parseFloat(value);
        if (isNaN(value) && type.enums === void 0) {
          return null;
        }
        if (isNaN(value) && type.enums !== void 0) {
          value = passedValue;
          return checkEnums();
        }
        if (type.integer && !integer(value)) {
          return null;
        }
        if (type.min !== void 0 && (value < type.min || type.strictMin && value === type.min) || type.max !== void 0 && (value > type.max || type.strictMax && value === type.max)) {
          return null;
        }
        var ret = {
          name,
          value,
          strValue: "" + value + (units ? units : ""),
          units,
          bypass: propIsBypass
        };
        if (type.unitless || units !== "px" && units !== "em") {
          ret.pfValue = value;
        } else {
          ret.pfValue = units === "px" || !units ? value : this.getEmSizeInPixels() * value;
        }
        if (units === "ms" || units === "s") {
          ret.pfValue = units === "ms" ? value : 1e3 * value;
        }
        if (units === "deg" || units === "rad") {
          ret.pfValue = units === "rad" ? value : deg2rad(value);
        }
        if (units === "%") {
          ret.pfValue = value / 100;
        }
        return ret;
      } else if (type.propList) {
        var props = [];
        var propsStr = "" + value;
        if (propsStr === "none")
          ;
        else {
          var propsSplit = propsStr.split(/\s*,\s*|\s+/);
          for (var _i2 = 0; _i2 < propsSplit.length; _i2++) {
            var propName = propsSplit[_i2].trim();
            if (self2.properties[propName]) {
              props.push(propName);
            } else {
              warn("`" + propName + "` is not a valid property name");
            }
          }
          if (props.length === 0) {
            return null;
          }
        }
        return {
          name,
          value: props,
          strValue: props.length === 0 ? "none" : props.join(" "),
          bypass: propIsBypass
        };
      } else if (type.color) {
        var tuple = color2tuple(value);
        if (!tuple) {
          return null;
        }
        return {
          name,
          value: tuple,
          pfValue: tuple,
          strValue: "rgb(" + tuple[0] + "," + tuple[1] + "," + tuple[2] + ")",
          bypass: propIsBypass
        };
      } else if (type.regex || type.regexes) {
        if (type.enums) {
          var enumProp = checkEnums();
          if (enumProp) {
            return enumProp;
          }
        }
        var regexes = type.regexes ? type.regexes : [type.regex];
        for (var _i3 = 0; _i3 < regexes.length; _i3++) {
          var regex = new RegExp(regexes[_i3]);
          var m = regex.exec(value);
          if (m) {
            return {
              name,
              value: type.singleRegexMatchValue ? m[1] : m,
              strValue: "" + value,
              bypass: propIsBypass
            };
          }
        }
        return null;
      } else if (type.string) {
        return {
          name,
          value: "" + value,
          strValue: "" + value,
          bypass: propIsBypass
        };
      } else if (type.enums) {
        return checkEnums();
      } else {
        return null;
      }
    };
    var Style = function Style2(cy) {
      if (!(this instanceof Style2)) {
        return new Style2(cy);
      }
      if (!core(cy)) {
        error("A style must have a core reference");
        return;
      }
      this._private = {
        cy,
        coreStyle: {}
      };
      this.length = 0;
      this.resetToDefault();
    };
    var styfn$8 = Style.prototype;
    styfn$8.instanceString = function() {
      return "style";
    };
    styfn$8.clear = function() {
      var _p = this._private;
      var cy = _p.cy;
      var eles = cy.elements();
      for (var i2 = 0; i2 < this.length; i2++) {
        this[i2] = void 0;
      }
      this.length = 0;
      _p.contextStyles = {};
      _p.propDiffs = {};
      this.cleanElements(eles, true);
      eles.forEach(function(ele) {
        var ele_p = ele[0]._private;
        ele_p.styleDirty = true;
        ele_p.appliedInitStyle = false;
      });
      return this;
    };
    styfn$8.resetToDefault = function() {
      this.clear();
      this.addDefaultStylesheet();
      return this;
    };
    styfn$8.core = function(propName) {
      return this._private.coreStyle[propName] || this.getDefaultProperty(propName);
    };
    styfn$8.selector = function(selectorStr) {
      var selector = selectorStr === "core" ? null : new Selector(selectorStr);
      var i2 = this.length++;
      this[i2] = {
        selector,
        properties: [],
        mappedProperties: [],
        index: i2
      };
      return this;
    };
    styfn$8.css = function() {
      var self2 = this;
      var args = arguments;
      if (args.length === 1) {
        var map = args[0];
        for (var i2 = 0; i2 < self2.properties.length; i2++) {
          var prop = self2.properties[i2];
          var mapVal = map[prop.name];
          if (mapVal === void 0) {
            mapVal = map[dash2camel(prop.name)];
          }
          if (mapVal !== void 0) {
            this.cssRule(prop.name, mapVal);
          }
        }
      } else if (args.length === 2) {
        this.cssRule(args[0], args[1]);
      }
      return this;
    };
    styfn$8.style = styfn$8.css;
    styfn$8.cssRule = function(name, value) {
      var property = this.parse(name, value);
      if (property) {
        var i2 = this.length - 1;
        this[i2].properties.push(property);
        this[i2].properties[property.name] = property;
        if (property.name.match(/pie-(\d+)-background-size/) && property.value) {
          this._private.hasPie = true;
        }
        if (property.mapped) {
          this[i2].mappedProperties.push(property);
        }
        var currentSelectorIsCore = !this[i2].selector;
        if (currentSelectorIsCore) {
          this._private.coreStyle[property.name] = property;
        }
      }
      return this;
    };
    styfn$8.append = function(style) {
      if (stylesheet(style)) {
        style.appendToStyle(this);
      } else if (array(style)) {
        this.appendFromJson(style);
      } else if (string(style)) {
        this.appendFromString(style);
      }
      return this;
    };
    Style.fromJson = function(cy, json) {
      var style = new Style(cy);
      style.fromJson(json);
      return style;
    };
    Style.fromString = function(cy, string2) {
      return new Style(cy).fromString(string2);
    };
    [styfn, styfn$1, styfn$2, styfn$3, styfn$4, styfn$5, styfn$6, styfn$7].forEach(function(props) {
      extend(styfn$8, props);
    });
    Style.types = styfn$8.types;
    Style.properties = styfn$8.properties;
    Style.propertyGroups = styfn$8.propertyGroups;
    Style.propertyGroupNames = styfn$8.propertyGroupNames;
    Style.propertyGroupKeys = styfn$8.propertyGroupKeys;
    var corefn$7 = {
      style: function style(newStyle) {
        if (newStyle) {
          var s = this.setStyle(newStyle);
          s.update();
        }
        return this._private.style;
      },
      setStyle: function setStyle(style) {
        var _p = this._private;
        if (stylesheet(style)) {
          _p.style = style.generateStyle(this);
        } else if (array(style)) {
          _p.style = Style.fromJson(this, style);
        } else if (string(style)) {
          _p.style = Style.fromString(this, style);
        } else {
          _p.style = Style(this);
        }
        return _p.style;
      }
    };
    var defaultSelectionType = "single";
    var corefn$8 = {
      autolock: function autolock(bool) {
        if (bool !== void 0) {
          this._private.autolock = bool ? true : false;
        } else {
          return this._private.autolock;
        }
        return this;
      },
      autoungrabify: function autoungrabify(bool) {
        if (bool !== void 0) {
          this._private.autoungrabify = bool ? true : false;
        } else {
          return this._private.autoungrabify;
        }
        return this;
      },
      autounselectify: function autounselectify(bool) {
        if (bool !== void 0) {
          this._private.autounselectify = bool ? true : false;
        } else {
          return this._private.autounselectify;
        }
        return this;
      },
      selectionType: function selectionType(selType) {
        var _p = this._private;
        if (_p.selectionType == null) {
          _p.selectionType = defaultSelectionType;
        }
        if (selType !== void 0) {
          if (selType === "additive" || selType === "single") {
            _p.selectionType = selType;
          }
        } else {
          return _p.selectionType;
        }
        return this;
      },
      panningEnabled: function panningEnabled(bool) {
        if (bool !== void 0) {
          this._private.panningEnabled = bool ? true : false;
        } else {
          return this._private.panningEnabled;
        }
        return this;
      },
      userPanningEnabled: function userPanningEnabled(bool) {
        if (bool !== void 0) {
          this._private.userPanningEnabled = bool ? true : false;
        } else {
          return this._private.userPanningEnabled;
        }
        return this;
      },
      zoomingEnabled: function zoomingEnabled(bool) {
        if (bool !== void 0) {
          this._private.zoomingEnabled = bool ? true : false;
        } else {
          return this._private.zoomingEnabled;
        }
        return this;
      },
      userZoomingEnabled: function userZoomingEnabled(bool) {
        if (bool !== void 0) {
          this._private.userZoomingEnabled = bool ? true : false;
        } else {
          return this._private.userZoomingEnabled;
        }
        return this;
      },
      boxSelectionEnabled: function boxSelectionEnabled(bool) {
        if (bool !== void 0) {
          this._private.boxSelectionEnabled = bool ? true : false;
        } else {
          return this._private.boxSelectionEnabled;
        }
        return this;
      },
      pan: function pan() {
        var args = arguments;
        var pan2 = this._private.pan;
        var dim, val, dims, x, y;
        switch (args.length) {
          case 0:
            return pan2;
          case 1:
            if (string(args[0])) {
              dim = args[0];
              return pan2[dim];
            } else if (plainObject(args[0])) {
              if (!this._private.panningEnabled) {
                return this;
              }
              dims = args[0];
              x = dims.x;
              y = dims.y;
              if (number(x)) {
                pan2.x = x;
              }
              if (number(y)) {
                pan2.y = y;
              }
              this.emit("pan viewport");
            }
            break;
          case 2:
            if (!this._private.panningEnabled) {
              return this;
            }
            dim = args[0];
            val = args[1];
            if ((dim === "x" || dim === "y") && number(val)) {
              pan2[dim] = val;
            }
            this.emit("pan viewport");
            break;
        }
        this.notify("viewport");
        return this;
      },
      panBy: function panBy(arg0, arg1) {
        var args = arguments;
        var pan = this._private.pan;
        var dim, val, dims, x, y;
        if (!this._private.panningEnabled) {
          return this;
        }
        switch (args.length) {
          case 1:
            if (plainObject(arg0)) {
              dims = args[0];
              x = dims.x;
              y = dims.y;
              if (number(x)) {
                pan.x += x;
              }
              if (number(y)) {
                pan.y += y;
              }
              this.emit("pan viewport");
            }
            break;
          case 2:
            dim = arg0;
            val = arg1;
            if ((dim === "x" || dim === "y") && number(val)) {
              pan[dim] += val;
            }
            this.emit("pan viewport");
            break;
        }
        this.notify("viewport");
        return this;
      },
      fit: function fit(elements, padding) {
        var viewportState = this.getFitViewport(elements, padding);
        if (viewportState) {
          var _p = this._private;
          _p.zoom = viewportState.zoom;
          _p.pan = viewportState.pan;
          this.emit("pan zoom viewport");
          this.notify("viewport");
        }
        return this;
      },
      getFitViewport: function getFitViewport(elements, padding) {
        if (number(elements) && padding === void 0) {
          padding = elements;
          elements = void 0;
        }
        if (!this._private.panningEnabled || !this._private.zoomingEnabled) {
          return;
        }
        var bb;
        if (string(elements)) {
          var sel = elements;
          elements = this.$(sel);
        } else if (boundingBox(elements)) {
          var bbe = elements;
          bb = {
            x1: bbe.x1,
            y1: bbe.y1,
            x2: bbe.x2,
            y2: bbe.y2
          };
          bb.w = bb.x2 - bb.x1;
          bb.h = bb.y2 - bb.y1;
        } else if (!elementOrCollection(elements)) {
          elements = this.mutableElements();
        }
        if (elementOrCollection(elements) && elements.empty()) {
          return;
        }
        bb = bb || elements.boundingBox();
        var w = this.width();
        var h = this.height();
        var zoom;
        padding = number(padding) ? padding : 0;
        if (!isNaN(w) && !isNaN(h) && w > 0 && h > 0 && !isNaN(bb.w) && !isNaN(bb.h) && bb.w > 0 && bb.h > 0) {
          zoom = Math.min((w - 2 * padding) / bb.w, (h - 2 * padding) / bb.h);
          zoom = zoom > this._private.maxZoom ? this._private.maxZoom : zoom;
          zoom = zoom < this._private.minZoom ? this._private.minZoom : zoom;
          var pan = {
            x: (w - zoom * (bb.x1 + bb.x2)) / 2,
            y: (h - zoom * (bb.y1 + bb.y2)) / 2
          };
          return {
            zoom,
            pan
          };
        }
        return;
      },
      zoomRange: function zoomRange(min2, max2) {
        var _p = this._private;
        if (max2 == null) {
          var opts = min2;
          min2 = opts.min;
          max2 = opts.max;
        }
        if (number(min2) && number(max2) && min2 <= max2) {
          _p.minZoom = min2;
          _p.maxZoom = max2;
        } else if (number(min2) && max2 === void 0 && min2 <= _p.maxZoom) {
          _p.minZoom = min2;
        } else if (number(max2) && min2 === void 0 && max2 >= _p.minZoom) {
          _p.maxZoom = max2;
        }
        return this;
      },
      minZoom: function minZoom(zoom) {
        if (zoom === void 0) {
          return this._private.minZoom;
        } else {
          return this.zoomRange({
            min: zoom
          });
        }
      },
      maxZoom: function maxZoom2(zoom) {
        if (zoom === void 0) {
          return this._private.maxZoom;
        } else {
          return this.zoomRange({
            max: zoom
          });
        }
      },
      getZoomedViewport: function getZoomedViewport(params) {
        var _p = this._private;
        var currentPan = _p.pan;
        var currentZoom = _p.zoom;
        var pos;
        var zoom;
        var bail = false;
        if (!_p.zoomingEnabled) {
          bail = true;
        }
        if (number(params)) {
          zoom = params;
        } else if (plainObject(params)) {
          zoom = params.level;
          if (params.position != null) {
            pos = modelToRenderedPosition(params.position, currentZoom, currentPan);
          } else if (params.renderedPosition != null) {
            pos = params.renderedPosition;
          }
          if (pos != null && !_p.panningEnabled) {
            bail = true;
          }
        }
        zoom = zoom > _p.maxZoom ? _p.maxZoom : zoom;
        zoom = zoom < _p.minZoom ? _p.minZoom : zoom;
        if (bail || !number(zoom) || zoom === currentZoom || pos != null && (!number(pos.x) || !number(pos.y))) {
          return null;
        }
        if (pos != null) {
          var pan1 = currentPan;
          var zoom1 = currentZoom;
          var zoom2 = zoom;
          var pan2 = {
            x: -zoom2 / zoom1 * (pos.x - pan1.x) + pos.x,
            y: -zoom2 / zoom1 * (pos.y - pan1.y) + pos.y
          };
          return {
            zoomed: true,
            panned: true,
            zoom: zoom2,
            pan: pan2
          };
        } else {
          return {
            zoomed: true,
            panned: false,
            zoom,
            pan: currentPan
          };
        }
      },
      zoom: function zoom(params) {
        if (params === void 0) {
          return this._private.zoom;
        } else {
          var vp = this.getZoomedViewport(params);
          var _p = this._private;
          if (vp == null || !vp.zoomed) {
            return this;
          }
          _p.zoom = vp.zoom;
          if (vp.panned) {
            _p.pan.x = vp.pan.x;
            _p.pan.y = vp.pan.y;
          }
          this.emit("zoom" + (vp.panned ? " pan" : "") + " viewport");
          this.notify("viewport");
          return this;
        }
      },
      viewport: function viewport(opts) {
        var _p = this._private;
        var zoomDefd = true;
        var panDefd = true;
        var events = [];
        var zoomFailed = false;
        var panFailed = false;
        if (!opts) {
          return this;
        }
        if (!number(opts.zoom)) {
          zoomDefd = false;
        }
        if (!plainObject(opts.pan)) {
          panDefd = false;
        }
        if (!zoomDefd && !panDefd) {
          return this;
        }
        if (zoomDefd) {
          var z = opts.zoom;
          if (z < _p.minZoom || z > _p.maxZoom || !_p.zoomingEnabled) {
            zoomFailed = true;
          } else {
            _p.zoom = z;
            events.push("zoom");
          }
        }
        if (panDefd && (!zoomFailed || !opts.cancelOnFailedZoom) && _p.panningEnabled) {
          var p2 = opts.pan;
          if (number(p2.x)) {
            _p.pan.x = p2.x;
            panFailed = false;
          }
          if (number(p2.y)) {
            _p.pan.y = p2.y;
            panFailed = false;
          }
          if (!panFailed) {
            events.push("pan");
          }
        }
        if (events.length > 0) {
          events.push("viewport");
          this.emit(events.join(" "));
          this.notify("viewport");
        }
        return this;
      },
      center: function center(elements) {
        var pan = this.getCenterPan(elements);
        if (pan) {
          this._private.pan = pan;
          this.emit("pan viewport");
          this.notify("viewport");
        }
        return this;
      },
      getCenterPan: function getCenterPan(elements, zoom) {
        if (!this._private.panningEnabled) {
          return;
        }
        if (string(elements)) {
          var selector = elements;
          elements = this.mutableElements().filter(selector);
        } else if (!elementOrCollection(elements)) {
          elements = this.mutableElements();
        }
        if (elements.length === 0) {
          return;
        }
        var bb = elements.boundingBox();
        var w = this.width();
        var h = this.height();
        zoom = zoom === void 0 ? this._private.zoom : zoom;
        var pan = {
          x: (w - zoom * (bb.x1 + bb.x2)) / 2,
          y: (h - zoom * (bb.y1 + bb.y2)) / 2
        };
        return pan;
      },
      reset: function reset() {
        if (!this._private.panningEnabled || !this._private.zoomingEnabled) {
          return this;
        }
        this.viewport({
          pan: {
            x: 0,
            y: 0
          },
          zoom: 1
        });
        return this;
      },
      invalidateSize: function invalidateSize() {
        this._private.sizeCache = null;
      },
      size: function size() {
        var _p = this._private;
        var container = _p.container;
        return _p.sizeCache = _p.sizeCache || (container ? function() {
          var style = window$1.getComputedStyle(container);
          var val = function val2(name) {
            return parseFloat(style.getPropertyValue(name));
          };
          return {
            width: container.clientWidth - val("padding-left") - val("padding-right"),
            height: container.clientHeight - val("padding-top") - val("padding-bottom")
          };
        }() : {
          width: 1,
          height: 1
        });
      },
      width: function width() {
        return this.size().width;
      },
      height: function height() {
        return this.size().height;
      },
      extent: function extent() {
        var pan = this._private.pan;
        var zoom = this._private.zoom;
        var rb = this.renderedExtent();
        var b = {
          x1: (rb.x1 - pan.x) / zoom,
          x2: (rb.x2 - pan.x) / zoom,
          y1: (rb.y1 - pan.y) / zoom,
          y2: (rb.y2 - pan.y) / zoom
        };
        b.w = b.x2 - b.x1;
        b.h = b.y2 - b.y1;
        return b;
      },
      renderedExtent: function renderedExtent() {
        var width = this.width();
        var height = this.height();
        return {
          x1: 0,
          y1: 0,
          x2: width,
          y2: height,
          w: width,
          h: height
        };
      }
    };
    corefn$8.centre = corefn$8.center;
    corefn$8.autolockNodes = corefn$8.autolock;
    corefn$8.autoungrabifyNodes = corefn$8.autoungrabify;
    var fn$6 = {
      data: define$3.data({
        field: "data",
        bindingEvent: "data",
        allowBinding: true,
        allowSetting: true,
        settingEvent: "data",
        settingTriggersEvent: true,
        triggerFnName: "trigger",
        allowGetting: true
      }),
      removeData: define$3.removeData({
        field: "data",
        event: "data",
        triggerFnName: "trigger",
        triggerEvent: true
      }),
      scratch: define$3.data({
        field: "scratch",
        bindingEvent: "scratch",
        allowBinding: true,
        allowSetting: true,
        settingEvent: "scratch",
        settingTriggersEvent: true,
        triggerFnName: "trigger",
        allowGetting: true
      }),
      removeScratch: define$3.removeData({
        field: "scratch",
        event: "scratch",
        triggerFnName: "trigger",
        triggerEvent: true
      })
    };
    fn$6.attr = fn$6.data;
    fn$6.removeAttr = fn$6.removeData;
    var Core = function Core2(opts) {
      var cy = this;
      opts = extend({}, opts);
      var container = opts.container;
      if (container && !htmlElement(container) && htmlElement(container[0])) {
        container = container[0];
      }
      var reg = container ? container._cyreg : null;
      reg = reg || {};
      if (reg && reg.cy) {
        reg.cy.destroy();
        reg = {};
      }
      var readies = reg.readies = reg.readies || [];
      if (container) {
        container._cyreg = reg;
      }
      reg.cy = cy;
      var head = window$1 !== void 0 && container !== void 0 && !opts.headless;
      var options = opts;
      options.layout = extend({
        name: head ? "grid" : "null"
      }, options.layout);
      options.renderer = extend({
        name: head ? "canvas" : "null"
      }, options.renderer);
      var defVal = function defVal2(def, val, altVal) {
        if (val !== void 0) {
          return val;
        } else if (altVal !== void 0) {
          return altVal;
        } else {
          return def;
        }
      };
      var _p = this._private = {
        container,
        ready: false,
        options,
        elements: new Collection(this),
        listeners: [],
        aniEles: new Collection(this),
        data: {},
        scratch: {},
        layout: null,
        renderer: null,
        destroyed: false,
        notificationsEnabled: true,
        minZoom: 1e-50,
        maxZoom: 1e50,
        zoomingEnabled: defVal(true, options.zoomingEnabled),
        userZoomingEnabled: defVal(true, options.userZoomingEnabled),
        panningEnabled: defVal(true, options.panningEnabled),
        userPanningEnabled: defVal(true, options.userPanningEnabled),
        boxSelectionEnabled: defVal(true, options.boxSelectionEnabled),
        autolock: defVal(false, options.autolock, options.autolockNodes),
        autoungrabify: defVal(false, options.autoungrabify, options.autoungrabifyNodes),
        autounselectify: defVal(false, options.autounselectify),
        styleEnabled: options.styleEnabled === void 0 ? head : options.styleEnabled,
        zoom: number(options.zoom) ? options.zoom : 1,
        pan: {
          x: plainObject(options.pan) && number(options.pan.x) ? options.pan.x : 0,
          y: plainObject(options.pan) && number(options.pan.y) ? options.pan.y : 0
        },
        animation: {
          current: [],
          queue: []
        },
        hasCompoundNodes: false
      };
      this.createEmitter();
      this.selectionType(options.selectionType);
      this.zoomRange({
        min: options.minZoom,
        max: options.maxZoom
      });
      var loadExtData = function loadExtData2(extData, next2) {
        var anyIsPromise = extData.some(promise);
        if (anyIsPromise) {
          return Promise$1.all(extData).then(next2);
        } else {
          next2(extData);
        }
      };
      if (_p.styleEnabled) {
        cy.setStyle([]);
      }
      var rendererOptions = extend({}, options, options.renderer);
      cy.initRenderer(rendererOptions);
      var setElesAndLayout = function setElesAndLayout2(elements, onload, ondone) {
        cy.notifications(false);
        var oldEles = cy.mutableElements();
        if (oldEles.length > 0) {
          oldEles.remove();
        }
        if (elements != null) {
          if (plainObject(elements) || array(elements)) {
            cy.add(elements);
          }
        }
        cy.one("layoutready", function(e) {
          cy.notifications(true);
          cy.emit(e);
          cy.one("load", onload);
          cy.emitAndNotify("load");
        }).one("layoutstop", function() {
          cy.one("done", ondone);
          cy.emit("done");
        });
        var layoutOpts = extend({}, cy._private.options.layout);
        layoutOpts.eles = cy.elements();
        cy.layout(layoutOpts).run();
      };
      loadExtData([options.style, options.elements], function(thens) {
        var initStyle = thens[0];
        var initEles = thens[1];
        if (_p.styleEnabled) {
          cy.style().append(initStyle);
        }
        setElesAndLayout(initEles, function() {
          cy.startAnimationLoop();
          _p.ready = true;
          if (fn(options.ready)) {
            cy.on("ready", options.ready);
          }
          for (var i2 = 0; i2 < readies.length; i2++) {
            var fn$12 = readies[i2];
            cy.on("ready", fn$12);
          }
          if (reg) {
            reg.readies = [];
          }
          cy.emit("ready");
        }, options.done);
      });
    };
    var corefn$9 = Core.prototype;
    extend(corefn$9, {
      instanceString: function instanceString() {
        return "core";
      },
      isReady: function isReady() {
        return this._private.ready;
      },
      destroyed: function destroyed() {
        return this._private.destroyed;
      },
      ready: function ready(fn2) {
        if (this.isReady()) {
          this.emitter().emit("ready", [], fn2);
        } else {
          this.on("ready", fn2);
        }
        return this;
      },
      destroy: function destroy() {
        var cy = this;
        if (cy.destroyed())
          return;
        cy.stopAnimationLoop();
        cy.destroyRenderer();
        this.emit("destroy");
        cy._private.destroyed = true;
        return cy;
      },
      hasElementWithId: function hasElementWithId(id) {
        return this._private.elements.hasElementWithId(id);
      },
      getElementById: function getElementById(id) {
        return this._private.elements.getElementById(id);
      },
      hasCompoundNodes: function hasCompoundNodes() {
        return this._private.hasCompoundNodes;
      },
      headless: function headless() {
        return this._private.renderer.isHeadless();
      },
      styleEnabled: function styleEnabled() {
        return this._private.styleEnabled;
      },
      addToPool: function addToPool(eles) {
        this._private.elements.merge(eles);
        return this;
      },
      removeFromPool: function removeFromPool(eles) {
        this._private.elements.unmerge(eles);
        return this;
      },
      container: function container() {
        return this._private.container || null;
      },
      mount: function mount(container) {
        if (container == null) {
          return;
        }
        var cy = this;
        var _p = cy._private;
        var options = _p.options;
        if (!htmlElement(container) && htmlElement(container[0])) {
          container = container[0];
        }
        cy.stopAnimationLoop();
        cy.destroyRenderer();
        _p.container = container;
        _p.styleEnabled = true;
        cy.invalidateSize();
        cy.initRenderer(extend({}, options, options.renderer, {
          name: options.renderer.name === "null" ? "canvas" : options.renderer.name
        }));
        cy.startAnimationLoop();
        cy.style(options.style);
        cy.emit("mount");
        return cy;
      },
      unmount: function unmount() {
        var cy = this;
        cy.stopAnimationLoop();
        cy.destroyRenderer();
        cy.initRenderer({
          name: "null"
        });
        cy.emit("unmount");
        return cy;
      },
      options: function options() {
        return copy(this._private.options);
      },
      json: function json(obj) {
        var cy = this;
        var _p = cy._private;
        var eles = cy.mutableElements();
        var getFreshRef = function getFreshRef2(ele) {
          return cy.getElementById(ele.id());
        };
        if (plainObject(obj)) {
          cy.startBatch();
          if (obj.elements) {
            var idInJson = {};
            var updateEles = function updateEles2(jsons, gr2) {
              var toAdd = [];
              var toMod = [];
              for (var i3 = 0; i3 < jsons.length; i3++) {
                var json3 = jsons[i3];
                var id = "" + json3.data.id;
                var ele = cy.getElementById(id);
                idInJson[id] = true;
                if (ele.length !== 0) {
                  toMod.push({
                    ele,
                    json: json3
                  });
                } else {
                  if (gr2) {
                    json3.group = gr2;
                    toAdd.push(json3);
                  } else {
                    toAdd.push(json3);
                  }
                }
              }
              cy.add(toAdd);
              for (var _i = 0; _i < toMod.length; _i++) {
                var _toMod$_i = toMod[_i], _ele = _toMod$_i.ele, _json = _toMod$_i.json;
                _ele.json(_json);
              }
            };
            if (array(obj.elements)) {
              updateEles(obj.elements);
            } else {
              var grs = ["nodes", "edges"];
              for (var i2 = 0; i2 < grs.length; i2++) {
                var gr = grs[i2];
                var elements = obj.elements[gr];
                if (array(elements)) {
                  updateEles(elements, gr);
                }
              }
            }
            var parentsToRemove = cy.collection();
            eles.filter(function(ele) {
              return !idInJson[ele.id()];
            }).forEach(function(ele) {
              if (ele.isParent()) {
                parentsToRemove.merge(ele);
              } else {
                ele.remove();
              }
            });
            parentsToRemove.forEach(function(ele) {
              return ele.children().move({
                parent: null
              });
            });
            parentsToRemove.forEach(function(ele) {
              return getFreshRef(ele).remove();
            });
          }
          if (obj.style) {
            cy.style(obj.style);
          }
          if (obj.zoom != null && obj.zoom !== _p.zoom) {
            cy.zoom(obj.zoom);
          }
          if (obj.pan) {
            if (obj.pan.x !== _p.pan.x || obj.pan.y !== _p.pan.y) {
              cy.pan(obj.pan);
            }
          }
          if (obj.data) {
            cy.data(obj.data);
          }
          var fields = ["minZoom", "maxZoom", "zoomingEnabled", "userZoomingEnabled", "panningEnabled", "userPanningEnabled", "boxSelectionEnabled", "autolock", "autoungrabify", "autounselectify"];
          for (var _i2 = 0; _i2 < fields.length; _i2++) {
            var f = fields[_i2];
            if (obj[f] != null) {
              cy[f](obj[f]);
            }
          }
          cy.endBatch();
          return this;
        } else {
          var flat = !!obj;
          var json2 = {};
          if (flat) {
            json2.elements = this.elements().map(function(ele) {
              return ele.json();
            });
          } else {
            json2.elements = {};
            eles.forEach(function(ele) {
              var group = ele.group();
              if (!json2.elements[group]) {
                json2.elements[group] = [];
              }
              json2.elements[group].push(ele.json());
            });
          }
          if (this._private.styleEnabled) {
            json2.style = cy.style().json();
          }
          json2.data = copy(cy.data());
          var options = _p.options;
          json2.zoomingEnabled = _p.zoomingEnabled;
          json2.userZoomingEnabled = _p.userZoomingEnabled;
          json2.zoom = _p.zoom;
          json2.minZoom = _p.minZoom;
          json2.maxZoom = _p.maxZoom;
          json2.panningEnabled = _p.panningEnabled;
          json2.userPanningEnabled = _p.userPanningEnabled;
          json2.pan = copy(_p.pan);
          json2.boxSelectionEnabled = _p.boxSelectionEnabled;
          json2.renderer = copy(options.renderer);
          json2.hideEdgesOnViewport = options.hideEdgesOnViewport;
          json2.textureOnViewport = options.textureOnViewport;
          json2.wheelSensitivity = options.wheelSensitivity;
          json2.motionBlur = options.motionBlur;
          return json2;
        }
      }
    });
    corefn$9.$id = corefn$9.getElementById;
    [corefn, corefn$1, elesfn$v, corefn$2, corefn$3, corefn$4, corefn$5, corefn$6, corefn$7, corefn$8, fn$6].forEach(function(props) {
      extend(corefn$9, props);
    });
    var defaults$9 = {
      fit: true,
      directed: false,
      padding: 30,
      circle: false,
      grid: false,
      spacingFactor: 1.75,
      boundingBox: void 0,
      avoidOverlap: true,
      nodeDimensionsIncludeLabels: false,
      roots: void 0,
      maximal: false,
      animate: false,
      animationDuration: 500,
      animationEasing: void 0,
      animateFilter: function animateFilter(node, i2) {
        return true;
      },
      ready: void 0,
      stop: void 0,
      transform: function transform(node, position2) {
        return position2;
      }
    };
    var getInfo = function getInfo2(ele) {
      return ele.scratch("breadthfirst");
    };
    var setInfo = function setInfo2(ele, obj) {
      return ele.scratch("breadthfirst", obj);
    };
    function BreadthFirstLayout(options) {
      this.options = extend({}, defaults$9, options);
    }
    BreadthFirstLayout.prototype.run = function() {
      var params = this.options;
      var options = params;
      var cy = params.cy;
      var eles = options.eles;
      var nodes = eles.nodes().filter(function(n2) {
        return !n2.isParent();
      });
      var graph = eles;
      var directed = options.directed;
      var maximal = options.maximal || options.maximalAdjustments > 0;
      var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
        x1: 0,
        y1: 0,
        w: cy.width(),
        h: cy.height()
      });
      var roots;
      if (elementOrCollection(options.roots)) {
        roots = options.roots;
      } else if (array(options.roots)) {
        var rootsArray = [];
        for (var i2 = 0; i2 < options.roots.length; i2++) {
          var id = options.roots[i2];
          var ele = cy.getElementById(id);
          rootsArray.push(ele);
        }
        roots = cy.collection(rootsArray);
      } else if (string(options.roots)) {
        roots = cy.$(options.roots);
      } else {
        if (directed) {
          roots = nodes.roots();
        } else {
          var components = eles.components();
          roots = cy.collection();
          var _loop = function _loop2(_i3) {
            var comp = components[_i3];
            var maxDegree = comp.maxDegree(false);
            var compRoots = comp.filter(function(ele2) {
              return ele2.degree(false) === maxDegree;
            });
            roots = roots.add(compRoots);
          };
          for (var _i = 0; _i < components.length; _i++) {
            _loop(_i);
          }
        }
      }
      var depths = [];
      var foundByBfs = {};
      var addToDepth = function addToDepth2(ele2, d) {
        if (depths[d] == null) {
          depths[d] = [];
        }
        var i3 = depths[d].length;
        depths[d].push(ele2);
        setInfo(ele2, {
          index: i3,
          depth: d
        });
      };
      var changeDepth = function changeDepth2(ele2, newDepth) {
        var _getInfo = getInfo(ele2), depth = _getInfo.depth, index = _getInfo.index;
        depths[depth][index] = null;
        addToDepth(ele2, newDepth);
      };
      graph.bfs({
        roots,
        directed: options.directed,
        visit: function visit(node, edge, pNode, i3, depth) {
          var ele2 = node[0];
          var id2 = ele2.id();
          addToDepth(ele2, depth);
          foundByBfs[id2] = true;
        }
      });
      var orphanNodes = [];
      for (var _i2 = 0; _i2 < nodes.length; _i2++) {
        var _ele = nodes[_i2];
        if (foundByBfs[_ele.id()]) {
          continue;
        } else {
          orphanNodes.push(_ele);
        }
      }
      var assignDepthsAt = function assignDepthsAt2(i3) {
        var eles2 = depths[i3];
        for (var j = 0; j < eles2.length; j++) {
          var _ele2 = eles2[j];
          if (_ele2 == null) {
            eles2.splice(j, 1);
            j--;
            continue;
          }
          setInfo(_ele2, {
            depth: i3,
            index: j
          });
        }
      };
      var assignDepths = function assignDepths2() {
        for (var _i3 = 0; _i3 < depths.length; _i3++) {
          assignDepthsAt(_i3);
        }
      };
      var adjustMaximally = function adjustMaximally2(ele2, shifted2) {
        var eInfo = getInfo(ele2);
        var incomers = ele2.incomers().filter(function(el) {
          return el.isNode() && eles.has(el);
        });
        var maxDepth = -1;
        var id2 = ele2.id();
        for (var k = 0; k < incomers.length; k++) {
          var incmr = incomers[k];
          var iInfo = getInfo(incmr);
          maxDepth = Math.max(maxDepth, iInfo.depth);
        }
        if (eInfo.depth <= maxDepth) {
          if (shifted2[id2]) {
            return null;
          }
          changeDepth(ele2, maxDepth + 1);
          shifted2[id2] = true;
          return true;
        }
        return false;
      };
      if (directed && maximal) {
        var Q = [];
        var shifted = {};
        var enqueue = function enqueue2(n2) {
          return Q.push(n2);
        };
        var dequeue = function dequeue2() {
          return Q.shift();
        };
        nodes.forEach(function(n2) {
          return Q.push(n2);
        });
        while (Q.length > 0) {
          var _ele3 = dequeue();
          var didShift = adjustMaximally(_ele3, shifted);
          if (didShift) {
            _ele3.outgoers().filter(function(el) {
              return el.isNode() && eles.has(el);
            }).forEach(enqueue);
          } else if (didShift === null) {
            warn("Detected double maximal shift for node `" + _ele3.id() + "`.  Bailing maximal adjustment due to cycle.  Use `options.maximal: true` only on DAGs.");
            break;
          }
        }
      }
      assignDepths();
      var minDistance = 0;
      if (options.avoidOverlap) {
        for (var _i4 = 0; _i4 < nodes.length; _i4++) {
          var n = nodes[_i4];
          var nbb = n.layoutDimensions(options);
          var w = nbb.w;
          var h = nbb.h;
          minDistance = Math.max(minDistance, w, h);
        }
      }
      var cachedWeightedPercent = {};
      var getWeightedPercent = function getWeightedPercent2(ele2) {
        if (cachedWeightedPercent[ele2.id()]) {
          return cachedWeightedPercent[ele2.id()];
        }
        var eleDepth = getInfo(ele2).depth;
        var neighbors = ele2.neighborhood();
        var percent = 0;
        var samples = 0;
        for (var _i5 = 0; _i5 < neighbors.length; _i5++) {
          var neighbor = neighbors[_i5];
          if (neighbor.isEdge() || neighbor.isParent() || !nodes.has(neighbor)) {
            continue;
          }
          var bf = getInfo(neighbor);
          var index = bf.index;
          var depth = bf.depth;
          if (index == null || depth == null) {
            continue;
          }
          var nDepth = depths[depth].length;
          if (depth < eleDepth) {
            percent += index / nDepth;
            samples++;
          }
        }
        samples = Math.max(1, samples);
        percent = percent / samples;
        if (samples === 0) {
          percent = 0;
        }
        cachedWeightedPercent[ele2.id()] = percent;
        return percent;
      };
      var sortFn = function sortFn2(a, b) {
        var apct = getWeightedPercent(a);
        var bpct = getWeightedPercent(b);
        var diff = apct - bpct;
        if (diff === 0) {
          return ascending(a.id(), b.id());
        } else {
          return diff;
        }
      };
      for (var _i6 = 0; _i6 < depths.length; _i6++) {
        depths[_i6].sort(sortFn);
        assignDepthsAt(_i6);
      }
      var orphanDepth = [];
      for (var _i7 = 0; _i7 < orphanNodes.length; _i7++) {
        orphanDepth.push(orphanNodes[_i7]);
      }
      depths.unshift(orphanDepth);
      assignDepths();
      var biggestDepthSize = 0;
      for (var _i8 = 0; _i8 < depths.length; _i8++) {
        biggestDepthSize = Math.max(depths[_i8].length, biggestDepthSize);
      }
      var center = {
        x: bb.x1 + bb.w / 2,
        y: bb.x1 + bb.h / 2
      };
      var maxDepthSize = depths.reduce(function(max2, eles2) {
        return Math.max(max2, eles2.length);
      }, 0);
      var getPosition = function getPosition2(ele2) {
        var _getInfo2 = getInfo(ele2), depth = _getInfo2.depth, index = _getInfo2.index;
        var depthSize = depths[depth].length;
        var distanceX = Math.max(bb.w / ((options.grid ? maxDepthSize : depthSize) + 1), minDistance);
        var distanceY = Math.max(bb.h / (depths.length + 1), minDistance);
        var radiusStepSize = Math.min(bb.w / 2 / depths.length, bb.h / 2 / depths.length);
        radiusStepSize = Math.max(radiusStepSize, minDistance);
        if (!options.circle) {
          var epos = {
            x: center.x + (index + 1 - (depthSize + 1) / 2) * distanceX,
            y: (depth + 1) * distanceY
          };
          return epos;
        } else {
          var radius = radiusStepSize * depth + radiusStepSize - (depths.length > 0 && depths[0].length <= 3 ? radiusStepSize / 2 : 0);
          var theta = 2 * Math.PI / depths[depth].length * index;
          if (depth === 0 && depths[0].length === 1) {
            radius = 1;
          }
          return {
            x: center.x + radius * Math.cos(theta),
            y: center.y + radius * Math.sin(theta)
          };
        }
      };
      nodes.layoutPositions(this, options, getPosition);
      return this;
    };
    var defaults$a = {
      fit: true,
      padding: 30,
      boundingBox: void 0,
      avoidOverlap: true,
      nodeDimensionsIncludeLabels: false,
      spacingFactor: void 0,
      radius: void 0,
      startAngle: 3 / 2 * Math.PI,
      sweep: void 0,
      clockwise: true,
      sort: void 0,
      animate: false,
      animationDuration: 500,
      animationEasing: void 0,
      animateFilter: function animateFilter(node, i2) {
        return true;
      },
      ready: void 0,
      stop: void 0,
      transform: function transform(node, position2) {
        return position2;
      }
    };
    function CircleLayout(options) {
      this.options = extend({}, defaults$a, options);
    }
    CircleLayout.prototype.run = function() {
      var params = this.options;
      var options = params;
      var cy = params.cy;
      var eles = options.eles;
      var clockwise = options.counterclockwise !== void 0 ? !options.counterclockwise : options.clockwise;
      var nodes = eles.nodes().not(":parent");
      if (options.sort) {
        nodes = nodes.sort(options.sort);
      }
      var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
        x1: 0,
        y1: 0,
        w: cy.width(),
        h: cy.height()
      });
      var center = {
        x: bb.x1 + bb.w / 2,
        y: bb.y1 + bb.h / 2
      };
      var sweep = options.sweep === void 0 ? 2 * Math.PI - 2 * Math.PI / nodes.length : options.sweep;
      var dTheta = sweep / Math.max(1, nodes.length - 1);
      var r;
      var minDistance = 0;
      for (var i2 = 0; i2 < nodes.length; i2++) {
        var n = nodes[i2];
        var nbb = n.layoutDimensions(options);
        var w = nbb.w;
        var h = nbb.h;
        minDistance = Math.max(minDistance, w, h);
      }
      if (number(options.radius)) {
        r = options.radius;
      } else if (nodes.length <= 1) {
        r = 0;
      } else {
        r = Math.min(bb.h, bb.w) / 2 - minDistance;
      }
      if (nodes.length > 1 && options.avoidOverlap) {
        minDistance *= 1.75;
        var dcos = Math.cos(dTheta) - Math.cos(0);
        var dsin = Math.sin(dTheta) - Math.sin(0);
        var rMin = Math.sqrt(minDistance * minDistance / (dcos * dcos + dsin * dsin));
        r = Math.max(rMin, r);
      }
      var getPos = function getPos2(ele, i3) {
        var theta = options.startAngle + i3 * dTheta * (clockwise ? 1 : -1);
        var rx = r * Math.cos(theta);
        var ry = r * Math.sin(theta);
        var pos = {
          x: center.x + rx,
          y: center.y + ry
        };
        return pos;
      };
      nodes.layoutPositions(this, options, getPos);
      return this;
    };
    var defaults$b = {
      fit: true,
      padding: 30,
      startAngle: 3 / 2 * Math.PI,
      sweep: void 0,
      clockwise: true,
      equidistant: false,
      minNodeSpacing: 10,
      boundingBox: void 0,
      avoidOverlap: true,
      nodeDimensionsIncludeLabels: false,
      height: void 0,
      width: void 0,
      spacingFactor: void 0,
      concentric: function concentric(node) {
        return node.degree();
      },
      levelWidth: function levelWidth(nodes) {
        return nodes.maxDegree() / 4;
      },
      animate: false,
      animationDuration: 500,
      animationEasing: void 0,
      animateFilter: function animateFilter(node, i2) {
        return true;
      },
      ready: void 0,
      stop: void 0,
      transform: function transform(node, position2) {
        return position2;
      }
    };
    function ConcentricLayout(options) {
      this.options = extend({}, defaults$b, options);
    }
    ConcentricLayout.prototype.run = function() {
      var params = this.options;
      var options = params;
      var clockwise = options.counterclockwise !== void 0 ? !options.counterclockwise : options.clockwise;
      var cy = params.cy;
      var eles = options.eles;
      var nodes = eles.nodes().not(":parent");
      var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
        x1: 0,
        y1: 0,
        w: cy.width(),
        h: cy.height()
      });
      var center = {
        x: bb.x1 + bb.w / 2,
        y: bb.y1 + bb.h / 2
      };
      var nodeValues = [];
      var maxNodeSize = 0;
      for (var i2 = 0; i2 < nodes.length; i2++) {
        var node = nodes[i2];
        var value = void 0;
        value = options.concentric(node);
        nodeValues.push({
          value,
          node
        });
        node._private.scratch.concentric = value;
      }
      nodes.updateStyle();
      for (var _i = 0; _i < nodes.length; _i++) {
        var _node = nodes[_i];
        var nbb = _node.layoutDimensions(options);
        maxNodeSize = Math.max(maxNodeSize, nbb.w, nbb.h);
      }
      nodeValues.sort(function(a, b) {
        return b.value - a.value;
      });
      var levelWidth = options.levelWidth(nodes);
      var levels = [[]];
      var currentLevel = levels[0];
      for (var _i2 = 0; _i2 < nodeValues.length; _i2++) {
        var val = nodeValues[_i2];
        if (currentLevel.length > 0) {
          var diff = Math.abs(currentLevel[0].value - val.value);
          if (diff >= levelWidth) {
            currentLevel = [];
            levels.push(currentLevel);
          }
        }
        currentLevel.push(val);
      }
      var minDist = maxNodeSize + options.minNodeSpacing;
      if (!options.avoidOverlap) {
        var firstLvlHasMulti = levels.length > 0 && levels[0].length > 1;
        var maxR = Math.min(bb.w, bb.h) / 2 - minDist;
        var rStep = maxR / (levels.length + firstLvlHasMulti ? 1 : 0);
        minDist = Math.min(minDist, rStep);
      }
      var r = 0;
      for (var _i3 = 0; _i3 < levels.length; _i3++) {
        var level = levels[_i3];
        var sweep = options.sweep === void 0 ? 2 * Math.PI - 2 * Math.PI / level.length : options.sweep;
        var dTheta = level.dTheta = sweep / Math.max(1, level.length - 1);
        if (level.length > 1 && options.avoidOverlap) {
          var dcos = Math.cos(dTheta) - Math.cos(0);
          var dsin = Math.sin(dTheta) - Math.sin(0);
          var rMin = Math.sqrt(minDist * minDist / (dcos * dcos + dsin * dsin));
          r = Math.max(rMin, r);
        }
        level.r = r;
        r += minDist;
      }
      if (options.equidistant) {
        var rDeltaMax = 0;
        var _r = 0;
        for (var _i4 = 0; _i4 < levels.length; _i4++) {
          var _level = levels[_i4];
          var rDelta = _level.r - _r;
          rDeltaMax = Math.max(rDeltaMax, rDelta);
        }
        _r = 0;
        for (var _i5 = 0; _i5 < levels.length; _i5++) {
          var _level2 = levels[_i5];
          if (_i5 === 0) {
            _r = _level2.r;
          }
          _level2.r = _r;
          _r += rDeltaMax;
        }
      }
      var pos = {};
      for (var _i6 = 0; _i6 < levels.length; _i6++) {
        var _level3 = levels[_i6];
        var _dTheta = _level3.dTheta;
        var _r2 = _level3.r;
        for (var j = 0; j < _level3.length; j++) {
          var _val = _level3[j];
          var theta = options.startAngle + (clockwise ? 1 : -1) * _dTheta * j;
          var p2 = {
            x: center.x + _r2 * Math.cos(theta),
            y: center.y + _r2 * Math.sin(theta)
          };
          pos[_val.node.id()] = p2;
        }
      }
      nodes.layoutPositions(this, options, function(ele) {
        var id = ele.id();
        return pos[id];
      });
      return this;
    };
    var DEBUG;
    var defaults$c = {
      ready: function ready() {
      },
      stop: function stop() {
      },
      animate: true,
      animationEasing: void 0,
      animationDuration: void 0,
      animateFilter: function animateFilter(node, i2) {
        return true;
      },
      animationThreshold: 250,
      refresh: 20,
      fit: true,
      padding: 30,
      boundingBox: void 0,
      nodeDimensionsIncludeLabels: false,
      randomize: false,
      componentSpacing: 40,
      nodeRepulsion: function nodeRepulsion2(node) {
        return 2048;
      },
      nodeOverlap: 4,
      idealEdgeLength: function idealEdgeLength(edge) {
        return 32;
      },
      edgeElasticity: function edgeElasticity(edge) {
        return 32;
      },
      nestingFactor: 1.2,
      gravity: 1,
      numIter: 1e3,
      initialTemp: 1e3,
      coolingFactor: 0.99,
      minTemp: 1
    };
    function CoseLayout(options) {
      this.options = extend({}, defaults$c, options);
      this.options.layout = this;
    }
    CoseLayout.prototype.run = function() {
      var options = this.options;
      var cy = options.cy;
      var layout2 = this;
      layout2.stopped = false;
      if (options.animate === true || options.animate === false) {
        layout2.emit({
          type: "layoutstart",
          layout: layout2
        });
      }
      if (options.debug === true) {
        DEBUG = true;
      } else {
        DEBUG = false;
      }
      var layoutInfo = createLayoutInfo(cy, layout2, options);
      if (DEBUG) {
        printLayoutInfo(layoutInfo);
      }
      if (options.randomize) {
        randomizePositions(layoutInfo);
      }
      var startTime = performanceNow();
      var refresh = function refresh2() {
        refreshPositions(layoutInfo, cy, options);
        if (options.fit === true) {
          cy.fit(options.padding);
        }
      };
      var mainLoop = function mainLoop2(i3) {
        if (layout2.stopped || i3 >= options.numIter) {
          return false;
        }
        step$1(layoutInfo, options);
        layoutInfo.temperature = layoutInfo.temperature * options.coolingFactor;
        if (layoutInfo.temperature < options.minTemp) {
          return false;
        }
        return true;
      };
      var done = function done2() {
        if (options.animate === true || options.animate === false) {
          refresh();
          layout2.one("layoutstop", options.stop);
          layout2.emit({
            type: "layoutstop",
            layout: layout2
          });
        } else {
          var nodes = options.eles.nodes();
          var getScaledPos = getScaleInBoundsFn(layoutInfo, options, nodes);
          nodes.layoutPositions(layout2, options, getScaledPos);
        }
      };
      var i2 = 0;
      var loopRet = true;
      if (options.animate === true) {
        var frame = function frame2() {
          var f = 0;
          while (loopRet && f < options.refresh) {
            loopRet = mainLoop(i2);
            i2++;
            f++;
          }
          if (!loopRet) {
            separateComponents(layoutInfo, options);
            done();
          } else {
            var now = performanceNow();
            if (now - startTime >= options.animationThreshold) {
              refresh();
            }
            requestAnimationFrame2(frame2);
          }
        };
        frame();
      } else {
        while (loopRet) {
          loopRet = mainLoop(i2);
          i2++;
        }
        separateComponents(layoutInfo, options);
        done();
      }
      return this;
    };
    CoseLayout.prototype.stop = function() {
      this.stopped = true;
      if (this.thread) {
        this.thread.stop();
      }
      this.emit("layoutstop");
      return this;
    };
    CoseLayout.prototype.destroy = function() {
      if (this.thread) {
        this.thread.stop();
      }
      return this;
    };
    var createLayoutInfo = function createLayoutInfo2(cy, layout2, options) {
      var edges = options.eles.edges();
      var nodes = options.eles.nodes();
      var layoutInfo = {
        isCompound: cy.hasCompoundNodes(),
        layoutNodes: [],
        idToIndex: {},
        nodeSize: nodes.size(),
        graphSet: [],
        indexToGraph: [],
        layoutEdges: [],
        edgeSize: edges.size(),
        temperature: options.initialTemp,
        clientWidth: cy.width(),
        clientHeight: cy.width(),
        boundingBox: makeBoundingBox(options.boundingBox ? options.boundingBox : {
          x1: 0,
          y1: 0,
          w: cy.width(),
          h: cy.height()
        })
      };
      var components = options.eles.components();
      var id2cmptId = {};
      for (var i2 = 0; i2 < components.length; i2++) {
        var component = components[i2];
        for (var j = 0; j < component.length; j++) {
          var node = component[j];
          id2cmptId[node.id()] = i2;
        }
      }
      for (var i2 = 0; i2 < layoutInfo.nodeSize; i2++) {
        var n = nodes[i2];
        var nbb = n.layoutDimensions(options);
        var tempNode = {};
        tempNode.isLocked = n.locked();
        tempNode.id = n.data("id");
        tempNode.parentId = n.data("parent");
        tempNode.cmptId = id2cmptId[n.id()];
        tempNode.children = [];
        tempNode.positionX = n.position("x");
        tempNode.positionY = n.position("y");
        tempNode.offsetX = 0;
        tempNode.offsetY = 0;
        tempNode.height = nbb.w;
        tempNode.width = nbb.h;
        tempNode.maxX = tempNode.positionX + tempNode.width / 2;
        tempNode.minX = tempNode.positionX - tempNode.width / 2;
        tempNode.maxY = tempNode.positionY + tempNode.height / 2;
        tempNode.minY = tempNode.positionY - tempNode.height / 2;
        tempNode.padLeft = parseFloat(n.style("padding"));
        tempNode.padRight = parseFloat(n.style("padding"));
        tempNode.padTop = parseFloat(n.style("padding"));
        tempNode.padBottom = parseFloat(n.style("padding"));
        tempNode.nodeRepulsion = fn(options.nodeRepulsion) ? options.nodeRepulsion(n) : options.nodeRepulsion;
        layoutInfo.layoutNodes.push(tempNode);
        layoutInfo.idToIndex[tempNode.id] = i2;
      }
      var queue = [];
      var start = 0;
      var end = -1;
      var tempGraph = [];
      for (var i2 = 0; i2 < layoutInfo.nodeSize; i2++) {
        var n = layoutInfo.layoutNodes[i2];
        var p_id = n.parentId;
        if (p_id != null) {
          layoutInfo.layoutNodes[layoutInfo.idToIndex[p_id]].children.push(n.id);
        } else {
          queue[++end] = n.id;
          tempGraph.push(n.id);
        }
      }
      layoutInfo.graphSet.push(tempGraph);
      while (start <= end) {
        var node_id = queue[start++];
        var node_ix = layoutInfo.idToIndex[node_id];
        var node = layoutInfo.layoutNodes[node_ix];
        var children = node.children;
        if (children.length > 0) {
          layoutInfo.graphSet.push(children);
          for (var i2 = 0; i2 < children.length; i2++) {
            queue[++end] = children[i2];
          }
        }
      }
      for (var i2 = 0; i2 < layoutInfo.graphSet.length; i2++) {
        var graph = layoutInfo.graphSet[i2];
        for (var j = 0; j < graph.length; j++) {
          var index = layoutInfo.idToIndex[graph[j]];
          layoutInfo.indexToGraph[index] = i2;
        }
      }
      for (var i2 = 0; i2 < layoutInfo.edgeSize; i2++) {
        var e = edges[i2];
        var tempEdge = {};
        tempEdge.id = e.data("id");
        tempEdge.sourceId = e.data("source");
        tempEdge.targetId = e.data("target");
        var idealLength = fn(options.idealEdgeLength) ? options.idealEdgeLength(e) : options.idealEdgeLength;
        var elasticity = fn(options.edgeElasticity) ? options.edgeElasticity(e) : options.edgeElasticity;
        var sourceIx = layoutInfo.idToIndex[tempEdge.sourceId];
        var targetIx = layoutInfo.idToIndex[tempEdge.targetId];
        var sourceGraph = layoutInfo.indexToGraph[sourceIx];
        var targetGraph = layoutInfo.indexToGraph[targetIx];
        if (sourceGraph != targetGraph) {
          var lca = findLCA(tempEdge.sourceId, tempEdge.targetId, layoutInfo);
          var lcaGraph = layoutInfo.graphSet[lca];
          var depth = 0;
          var tempNode = layoutInfo.layoutNodes[sourceIx];
          while (lcaGraph.indexOf(tempNode.id) === -1) {
            tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
            depth++;
          }
          tempNode = layoutInfo.layoutNodes[targetIx];
          while (lcaGraph.indexOf(tempNode.id) === -1) {
            tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
            depth++;
          }
          idealLength *= depth * options.nestingFactor;
        }
        tempEdge.idealLength = idealLength;
        tempEdge.elasticity = elasticity;
        layoutInfo.layoutEdges.push(tempEdge);
      }
      return layoutInfo;
    };
    var findLCA = function findLCA2(node1, node2, layoutInfo) {
      var res = findLCA_aux(node1, node2, 0, layoutInfo);
      if (2 > res.count) {
        return 0;
      } else {
        return res.graph;
      }
    };
    var findLCA_aux = function findLCA_aux2(node1, node2, graphIx, layoutInfo) {
      var graph = layoutInfo.graphSet[graphIx];
      if (-1 < graph.indexOf(node1) && -1 < graph.indexOf(node2)) {
        return {
          count: 2,
          graph: graphIx
        };
      }
      var c = 0;
      for (var i2 = 0; i2 < graph.length; i2++) {
        var nodeId = graph[i2];
        var nodeIx = layoutInfo.idToIndex[nodeId];
        var children = layoutInfo.layoutNodes[nodeIx].children;
        if (children.length === 0) {
          continue;
        }
        var childGraphIx = layoutInfo.indexToGraph[layoutInfo.idToIndex[children[0]]];
        var result = findLCA_aux2(node1, node2, childGraphIx, layoutInfo);
        if (result.count === 0) {
          continue;
        } else if (result.count === 1) {
          c++;
          if (c === 2) {
            break;
          }
        } else {
          return result;
        }
      }
      return {
        count: c,
        graph: graphIx
      };
    };
    if (false) {
    }
    var printLayoutInfo;
    var randomizePositions = function randomizePositions2(layoutInfo, cy) {
      var width = layoutInfo.clientWidth;
      var height = layoutInfo.clientHeight;
      for (var i2 = 0; i2 < layoutInfo.nodeSize; i2++) {
        var n = layoutInfo.layoutNodes[i2];
        if (n.children.length === 0 && !n.isLocked) {
          n.positionX = Math.random() * width;
          n.positionY = Math.random() * height;
        }
      }
    };
    var getScaleInBoundsFn = function getScaleInBoundsFn2(layoutInfo, options, nodes) {
      var bb = layoutInfo.boundingBox;
      var coseBB = {
        x1: Infinity,
        x2: -Infinity,
        y1: Infinity,
        y2: -Infinity
      };
      if (options.boundingBox) {
        nodes.forEach(function(node) {
          var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[node.data("id")]];
          coseBB.x1 = Math.min(coseBB.x1, lnode.positionX);
          coseBB.x2 = Math.max(coseBB.x2, lnode.positionX);
          coseBB.y1 = Math.min(coseBB.y1, lnode.positionY);
          coseBB.y2 = Math.max(coseBB.y2, lnode.positionY);
        });
        coseBB.w = coseBB.x2 - coseBB.x1;
        coseBB.h = coseBB.y2 - coseBB.y1;
      }
      return function(ele, i2) {
        var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[ele.data("id")]];
        if (options.boundingBox) {
          var pctX = (lnode.positionX - coseBB.x1) / coseBB.w;
          var pctY = (lnode.positionY - coseBB.y1) / coseBB.h;
          return {
            x: bb.x1 + pctX * bb.w,
            y: bb.y1 + pctY * bb.h
          };
        } else {
          return {
            x: lnode.positionX,
            y: lnode.positionY
          };
        }
      };
    };
    var refreshPositions = function refreshPositions2(layoutInfo, cy, options) {
      var layout2 = options.layout;
      var nodes = options.eles.nodes();
      var getScaledPos = getScaleInBoundsFn(layoutInfo, options, nodes);
      nodes.positions(getScaledPos);
      if (layoutInfo.ready !== true) {
        layoutInfo.ready = true;
        layout2.one("layoutready", options.ready);
        layout2.emit({
          type: "layoutready",
          layout: this
        });
      }
    };
    var step$1 = function step2(layoutInfo, options, _step) {
      calculateNodeForces(layoutInfo, options);
      calculateEdgeForces(layoutInfo);
      calculateGravityForces(layoutInfo, options);
      propagateForces(layoutInfo);
      updatePositions(layoutInfo);
    };
    var calculateNodeForces = function calculateNodeForces2(layoutInfo, options) {
      for (var i2 = 0; i2 < layoutInfo.graphSet.length; i2++) {
        var graph = layoutInfo.graphSet[i2];
        var numNodes = graph.length;
        for (var j = 0; j < numNodes; j++) {
          var node1 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]];
          for (var k = j + 1; k < numNodes; k++) {
            var node2 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[k]]];
            nodeRepulsion(node1, node2, layoutInfo, options);
          }
        }
      }
    };
    var randomDistance = function randomDistance2(max2) {
      return -max2 + 2 * max2 * Math.random();
    };
    var nodeRepulsion = function nodeRepulsion2(node1, node2, layoutInfo, options) {
      var cmptId1 = node1.cmptId;
      var cmptId2 = node2.cmptId;
      if (cmptId1 !== cmptId2 && !layoutInfo.isCompound) {
        return;
      }
      var directionX = node2.positionX - node1.positionX;
      var directionY = node2.positionY - node1.positionY;
      var maxRandDist = 1;
      if (directionX === 0 && directionY === 0) {
        directionX = randomDistance(maxRandDist);
        directionY = randomDistance(maxRandDist);
      }
      var overlap = nodesOverlap(node1, node2, directionX, directionY);
      if (overlap > 0) {
        var force = options.nodeOverlap * overlap;
        var distance = Math.sqrt(directionX * directionX + directionY * directionY);
        var forceX = force * directionX / distance;
        var forceY = force * directionY / distance;
      } else {
        var point1 = findClippingPoint(node1, directionX, directionY);
        var point2 = findClippingPoint(node2, -1 * directionX, -1 * directionY);
        var distanceX = point2.x - point1.x;
        var distanceY = point2.y - point1.y;
        var distanceSqr = distanceX * distanceX + distanceY * distanceY;
        var distance = Math.sqrt(distanceSqr);
        var force = (node1.nodeRepulsion + node2.nodeRepulsion) / distanceSqr;
        var forceX = force * distanceX / distance;
        var forceY = force * distanceY / distance;
      }
      if (!node1.isLocked) {
        node1.offsetX -= forceX;
        node1.offsetY -= forceY;
      }
      if (!node2.isLocked) {
        node2.offsetX += forceX;
        node2.offsetY += forceY;
      }
      return;
    };
    var nodesOverlap = function nodesOverlap2(node1, node2, dX, dY) {
      if (dX > 0) {
        var overlapX = node1.maxX - node2.minX;
      } else {
        var overlapX = node2.maxX - node1.minX;
      }
      if (dY > 0) {
        var overlapY = node1.maxY - node2.minY;
      } else {
        var overlapY = node2.maxY - node1.minY;
      }
      if (overlapX >= 0 && overlapY >= 0) {
        return Math.sqrt(overlapX * overlapX + overlapY * overlapY);
      } else {
        return 0;
      }
    };
    var findClippingPoint = function findClippingPoint2(node, dX, dY) {
      var X = node.positionX;
      var Y = node.positionY;
      var H = node.height || 1;
      var W = node.width || 1;
      var dirSlope = dY / dX;
      var nodeSlope = H / W;
      var res = {};
      if (dX === 0 && 0 < dY) {
        res.x = X;
        res.y = Y + H / 2;
        return res;
      }
      if (dX === 0 && 0 > dY) {
        res.x = X;
        res.y = Y + H / 2;
        return res;
      }
      if (0 < dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {
        res.x = X + W / 2;
        res.y = Y + W * dY / 2 / dX;
        return res;
      }
      if (0 > dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {
        res.x = X - W / 2;
        res.y = Y - W * dY / 2 / dX;
        return res;
      }
      if (0 < dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {
        res.x = X + H * dX / 2 / dY;
        res.y = Y + H / 2;
        return res;
      }
      if (0 > dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {
        res.x = X - H * dX / 2 / dY;
        res.y = Y - H / 2;
        return res;
      }
      return res;
    };
    var calculateEdgeForces = function calculateEdgeForces2(layoutInfo, options) {
      for (var i2 = 0; i2 < layoutInfo.edgeSize; i2++) {
        var edge = layoutInfo.layoutEdges[i2];
        var sourceIx = layoutInfo.idToIndex[edge.sourceId];
        var source = layoutInfo.layoutNodes[sourceIx];
        var targetIx = layoutInfo.idToIndex[edge.targetId];
        var target = layoutInfo.layoutNodes[targetIx];
        var directionX = target.positionX - source.positionX;
        var directionY = target.positionY - source.positionY;
        if (directionX === 0 && directionY === 0) {
          continue;
        }
        var point1 = findClippingPoint(source, directionX, directionY);
        var point2 = findClippingPoint(target, -1 * directionX, -1 * directionY);
        var lx = point2.x - point1.x;
        var ly = point2.y - point1.y;
        var l = Math.sqrt(lx * lx + ly * ly);
        var force = Math.pow(edge.idealLength - l, 2) / edge.elasticity;
        if (l !== 0) {
          var forceX = force * lx / l;
          var forceY = force * ly / l;
        } else {
          var forceX = 0;
          var forceY = 0;
        }
        if (!source.isLocked) {
          source.offsetX += forceX;
          source.offsetY += forceY;
        }
        if (!target.isLocked) {
          target.offsetX -= forceX;
          target.offsetY -= forceY;
        }
      }
    };
    var calculateGravityForces = function calculateGravityForces2(layoutInfo, options) {
      var distThreshold = 1;
      for (var i2 = 0; i2 < layoutInfo.graphSet.length; i2++) {
        var graph = layoutInfo.graphSet[i2];
        var numNodes = graph.length;
        if (i2 === 0) {
          var centerX = layoutInfo.clientHeight / 2;
          var centerY = layoutInfo.clientWidth / 2;
        } else {
          var temp = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[0]]];
          var parent = layoutInfo.layoutNodes[layoutInfo.idToIndex[temp.parentId]];
          var centerX = parent.positionX;
          var centerY = parent.positionY;
        }
        for (var j = 0; j < numNodes; j++) {
          var node = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]];
          if (node.isLocked) {
            continue;
          }
          var dx = centerX - node.positionX;
          var dy = centerY - node.positionY;
          var d = Math.sqrt(dx * dx + dy * dy);
          if (d > distThreshold) {
            var fx = options.gravity * dx / d;
            var fy = options.gravity * dy / d;
            node.offsetX += fx;
            node.offsetY += fy;
          }
        }
      }
    };
    var propagateForces = function propagateForces2(layoutInfo, options) {
      var queue = [];
      var start = 0;
      var end = -1;
      queue.push.apply(queue, layoutInfo.graphSet[0]);
      end += layoutInfo.graphSet[0].length;
      while (start <= end) {
        var nodeId = queue[start++];
        var nodeIndex = layoutInfo.idToIndex[nodeId];
        var node = layoutInfo.layoutNodes[nodeIndex];
        var children = node.children;
        if (0 < children.length && !node.isLocked) {
          var offX = node.offsetX;
          var offY = node.offsetY;
          for (var i2 = 0; i2 < children.length; i2++) {
            var childNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[children[i2]]];
            childNode.offsetX += offX;
            childNode.offsetY += offY;
            queue[++end] = children[i2];
          }
          node.offsetX = 0;
          node.offsetY = 0;
        }
      }
    };
    var updatePositions = function updatePositions2(layoutInfo, options) {
      for (var i2 = 0; i2 < layoutInfo.nodeSize; i2++) {
        var n = layoutInfo.layoutNodes[i2];
        if (0 < n.children.length) {
          n.maxX = void 0;
          n.minX = void 0;
          n.maxY = void 0;
          n.minY = void 0;
        }
      }
      for (var i2 = 0; i2 < layoutInfo.nodeSize; i2++) {
        var n = layoutInfo.layoutNodes[i2];
        if (0 < n.children.length || n.isLocked) {
          continue;
        }
        var tempForce = limitForce(n.offsetX, n.offsetY, layoutInfo.temperature);
        n.positionX += tempForce.x;
        n.positionY += tempForce.y;
        n.offsetX = 0;
        n.offsetY = 0;
        n.minX = n.positionX - n.width;
        n.maxX = n.positionX + n.width;
        n.minY = n.positionY - n.height;
        n.maxY = n.positionY + n.height;
        updateAncestryBoundaries(n, layoutInfo);
      }
      for (var i2 = 0; i2 < layoutInfo.nodeSize; i2++) {
        var n = layoutInfo.layoutNodes[i2];
        if (0 < n.children.length && !n.isLocked) {
          n.positionX = (n.maxX + n.minX) / 2;
          n.positionY = (n.maxY + n.minY) / 2;
          n.width = n.maxX - n.minX;
          n.height = n.maxY - n.minY;
        }
      }
    };
    var limitForce = function limitForce2(forceX, forceY, max2) {
      var force = Math.sqrt(forceX * forceX + forceY * forceY);
      if (force > max2) {
        var res = {
          x: max2 * forceX / force,
          y: max2 * forceY / force
        };
      } else {
        var res = {
          x: forceX,
          y: forceY
        };
      }
      return res;
    };
    var updateAncestryBoundaries = function updateAncestryBoundaries2(node, layoutInfo) {
      var parentId = node.parentId;
      if (parentId == null) {
        return;
      }
      var p2 = layoutInfo.layoutNodes[layoutInfo.idToIndex[parentId]];
      var flag = false;
      if (p2.maxX == null || node.maxX + p2.padRight > p2.maxX) {
        p2.maxX = node.maxX + p2.padRight;
        flag = true;
      }
      if (p2.minX == null || node.minX - p2.padLeft < p2.minX) {
        p2.minX = node.minX - p2.padLeft;
        flag = true;
      }
      if (p2.maxY == null || node.maxY + p2.padBottom > p2.maxY) {
        p2.maxY = node.maxY + p2.padBottom;
        flag = true;
      }
      if (p2.minY == null || node.minY - p2.padTop < p2.minY) {
        p2.minY = node.minY - p2.padTop;
        flag = true;
      }
      if (flag) {
        return updateAncestryBoundaries2(p2, layoutInfo);
      }
      return;
    };
    var separateComponents = function separateComponents2(layoutInfo, options) {
      var nodes = layoutInfo.layoutNodes;
      var components = [];
      for (var i2 = 0; i2 < nodes.length; i2++) {
        var node = nodes[i2];
        var cid = node.cmptId;
        var component = components[cid] = components[cid] || [];
        component.push(node);
      }
      var totalA = 0;
      for (var i2 = 0; i2 < components.length; i2++) {
        var c = components[i2];
        if (!c) {
          continue;
        }
        c.x1 = Infinity;
        c.x2 = -Infinity;
        c.y1 = Infinity;
        c.y2 = -Infinity;
        for (var j = 0; j < c.length; j++) {
          var n = c[j];
          c.x1 = Math.min(c.x1, n.positionX - n.width / 2);
          c.x2 = Math.max(c.x2, n.positionX + n.width / 2);
          c.y1 = Math.min(c.y1, n.positionY - n.height / 2);
          c.y2 = Math.max(c.y2, n.positionY + n.height / 2);
        }
        c.w = c.x2 - c.x1;
        c.h = c.y2 - c.y1;
        totalA += c.w * c.h;
      }
      components.sort(function(c1, c2) {
        return c2.w * c2.h - c1.w * c1.h;
      });
      var x = 0;
      var y = 0;
      var usedW = 0;
      var rowH = 0;
      var maxRowW = Math.sqrt(totalA) * layoutInfo.clientWidth / layoutInfo.clientHeight;
      for (var i2 = 0; i2 < components.length; i2++) {
        var c = components[i2];
        if (!c) {
          continue;
        }
        for (var j = 0; j < c.length; j++) {
          var n = c[j];
          if (!n.isLocked) {
            n.positionX += x - c.x1;
            n.positionY += y - c.y1;
          }
        }
        x += c.w + options.componentSpacing;
        usedW += c.w + options.componentSpacing;
        rowH = Math.max(rowH, c.h);
        if (usedW > maxRowW) {
          y += rowH + options.componentSpacing;
          x = 0;
          usedW = 0;
          rowH = 0;
        }
      }
    };
    var defaults$d = {
      fit: true,
      padding: 30,
      boundingBox: void 0,
      avoidOverlap: true,
      avoidOverlapPadding: 10,
      nodeDimensionsIncludeLabels: false,
      spacingFactor: void 0,
      condense: false,
      rows: void 0,
      cols: void 0,
      position: function position2(node) {
      },
      sort: void 0,
      animate: false,
      animationDuration: 500,
      animationEasing: void 0,
      animateFilter: function animateFilter(node, i2) {
        return true;
      },
      ready: void 0,
      stop: void 0,
      transform: function transform(node, position2) {
        return position2;
      }
    };
    function GridLayout(options) {
      this.options = extend({}, defaults$d, options);
    }
    GridLayout.prototype.run = function() {
      var params = this.options;
      var options = params;
      var cy = params.cy;
      var eles = options.eles;
      var nodes = eles.nodes().not(":parent");
      if (options.sort) {
        nodes = nodes.sort(options.sort);
      }
      var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
        x1: 0,
        y1: 0,
        w: cy.width(),
        h: cy.height()
      });
      if (bb.h === 0 || bb.w === 0) {
        nodes.layoutPositions(this, options, function(ele) {
          return {
            x: bb.x1,
            y: bb.y1
          };
        });
      } else {
        var cells = nodes.size();
        var splits = Math.sqrt(cells * bb.h / bb.w);
        var rows = Math.round(splits);
        var cols = Math.round(bb.w / bb.h * splits);
        var small = function small2(val) {
          if (val == null) {
            return Math.min(rows, cols);
          } else {
            var min2 = Math.min(rows, cols);
            if (min2 == rows) {
              rows = val;
            } else {
              cols = val;
            }
          }
        };
        var large = function large2(val) {
          if (val == null) {
            return Math.max(rows, cols);
          } else {
            var max2 = Math.max(rows, cols);
            if (max2 == rows) {
              rows = val;
            } else {
              cols = val;
            }
          }
        };
        var oRows = options.rows;
        var oCols = options.cols != null ? options.cols : options.columns;
        if (oRows != null && oCols != null) {
          rows = oRows;
          cols = oCols;
        } else if (oRows != null && oCols == null) {
          rows = oRows;
          cols = Math.ceil(cells / rows);
        } else if (oRows == null && oCols != null) {
          cols = oCols;
          rows = Math.ceil(cells / cols);
        } else if (cols * rows > cells) {
          var sm = small();
          var lg = large();
          if ((sm - 1) * lg >= cells) {
            small(sm - 1);
          } else if ((lg - 1) * sm >= cells) {
            large(lg - 1);
          }
        } else {
          while (cols * rows < cells) {
            var _sm = small();
            var _lg = large();
            if ((_lg + 1) * _sm >= cells) {
              large(_lg + 1);
            } else {
              small(_sm + 1);
            }
          }
        }
        var cellWidth = bb.w / cols;
        var cellHeight = bb.h / rows;
        if (options.condense) {
          cellWidth = 0;
          cellHeight = 0;
        }
        if (options.avoidOverlap) {
          for (var i2 = 0; i2 < nodes.length; i2++) {
            var node = nodes[i2];
            var pos = node._private.position;
            if (pos.x == null || pos.y == null) {
              pos.x = 0;
              pos.y = 0;
            }
            var nbb = node.layoutDimensions(options);
            var p2 = options.avoidOverlapPadding;
            var w = nbb.w + p2;
            var h = nbb.h + p2;
            cellWidth = Math.max(cellWidth, w);
            cellHeight = Math.max(cellHeight, h);
          }
        }
        var cellUsed = {};
        var used = function used2(row2, col2) {
          return cellUsed["c-" + row2 + "-" + col2] ? true : false;
        };
        var use = function use2(row2, col2) {
          cellUsed["c-" + row2 + "-" + col2] = true;
        };
        var row = 0;
        var col = 0;
        var moveToNextCell = function moveToNextCell2() {
          col++;
          if (col >= cols) {
            col = 0;
            row++;
          }
        };
        var id2manPos = {};
        for (var _i = 0; _i < nodes.length; _i++) {
          var _node = nodes[_i];
          var rcPos = options.position(_node);
          if (rcPos && (rcPos.row !== void 0 || rcPos.col !== void 0)) {
            var _pos = {
              row: rcPos.row,
              col: rcPos.col
            };
            if (_pos.col === void 0) {
              _pos.col = 0;
              while (used(_pos.row, _pos.col)) {
                _pos.col++;
              }
            } else if (_pos.row === void 0) {
              _pos.row = 0;
              while (used(_pos.row, _pos.col)) {
                _pos.row++;
              }
            }
            id2manPos[_node.id()] = _pos;
            use(_pos.row, _pos.col);
          }
        }
        var getPos = function getPos2(element2, i3) {
          var x, y;
          if (element2.locked() || element2.isParent()) {
            return false;
          }
          var rcPos2 = id2manPos[element2.id()];
          if (rcPos2) {
            x = rcPos2.col * cellWidth + cellWidth / 2 + bb.x1;
            y = rcPos2.row * cellHeight + cellHeight / 2 + bb.y1;
          } else {
            while (used(row, col)) {
              moveToNextCell();
            }
            x = col * cellWidth + cellWidth / 2 + bb.x1;
            y = row * cellHeight + cellHeight / 2 + bb.y1;
            use(row, col);
            moveToNextCell();
          }
          return {
            x,
            y
          };
        };
        nodes.layoutPositions(this, options, getPos);
      }
      return this;
    };
    var defaults$e = {
      ready: function ready() {
      },
      stop: function stop() {
      }
    };
    function NullLayout(options) {
      this.options = extend({}, defaults$e, options);
    }
    NullLayout.prototype.run = function() {
      var options = this.options;
      var eles = options.eles;
      var layout2 = this;
      var cy = options.cy;
      layout2.emit("layoutstart");
      eles.nodes().positions(function() {
        return {
          x: 0,
          y: 0
        };
      });
      layout2.one("layoutready", options.ready);
      layout2.emit("layoutready");
      layout2.one("layoutstop", options.stop);
      layout2.emit("layoutstop");
      return this;
    };
    NullLayout.prototype.stop = function() {
      return this;
    };
    var defaults$f = {
      positions: void 0,
      zoom: void 0,
      pan: void 0,
      fit: true,
      padding: 30,
      animate: false,
      animationDuration: 500,
      animationEasing: void 0,
      animateFilter: function animateFilter(node, i2) {
        return true;
      },
      ready: void 0,
      stop: void 0,
      transform: function transform(node, position2) {
        return position2;
      }
    };
    function PresetLayout(options) {
      this.options = extend({}, defaults$f, options);
    }
    PresetLayout.prototype.run = function() {
      var options = this.options;
      var eles = options.eles;
      var nodes = eles.nodes();
      var posIsFn = fn(options.positions);
      function getPosition(node) {
        if (options.positions == null) {
          return copyPosition(node.position());
        }
        if (posIsFn) {
          return options.positions(node);
        }
        var pos = options.positions[node._private.data.id];
        if (pos == null) {
          return null;
        }
        return pos;
      }
      nodes.layoutPositions(this, options, function(node, i2) {
        var position2 = getPosition(node);
        if (node.locked() || position2 == null) {
          return false;
        }
        return position2;
      });
      return this;
    };
    var defaults$g = {
      fit: true,
      padding: 30,
      boundingBox: void 0,
      animate: false,
      animationDuration: 500,
      animationEasing: void 0,
      animateFilter: function animateFilter(node, i2) {
        return true;
      },
      ready: void 0,
      stop: void 0,
      transform: function transform(node, position2) {
        return position2;
      }
    };
    function RandomLayout(options) {
      this.options = extend({}, defaults$g, options);
    }
    RandomLayout.prototype.run = function() {
      var options = this.options;
      var cy = options.cy;
      var eles = options.eles;
      var nodes = eles.nodes().not(":parent");
      var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
        x1: 0,
        y1: 0,
        w: cy.width(),
        h: cy.height()
      });
      var getPos = function getPos2(node, i2) {
        return {
          x: bb.x1 + Math.round(Math.random() * bb.w),
          y: bb.y1 + Math.round(Math.random() * bb.h)
        };
      };
      nodes.layoutPositions(this, options, getPos);
      return this;
    };
    var layout = [{
      name: "breadthfirst",
      impl: BreadthFirstLayout
    }, {
      name: "circle",
      impl: CircleLayout
    }, {
      name: "concentric",
      impl: ConcentricLayout
    }, {
      name: "cose",
      impl: CoseLayout
    }, {
      name: "grid",
      impl: GridLayout
    }, {
      name: "null",
      impl: NullLayout
    }, {
      name: "preset",
      impl: PresetLayout
    }, {
      name: "random",
      impl: RandomLayout
    }];
    function NullRenderer(options) {
      this.options = options;
      this.notifications = 0;
    }
    var noop$1 = function noop2() {
    };
    var throwImgErr = function throwImgErr2() {
      throw new Error("A headless instance can not render images");
    };
    NullRenderer.prototype = {
      recalculateRenderedStyle: noop$1,
      notify: function notify() {
        this.notifications++;
      },
      init: noop$1,
      isHeadless: function isHeadless() {
        return true;
      },
      png: throwImgErr,
      jpg: throwImgErr
    };
    var BRp = {};
    BRp.arrowShapeWidth = 0.3;
    BRp.registerArrowShapes = function() {
      var arrowShapes = this.arrowShapes = {};
      var renderer2 = this;
      var bbCollide = function bbCollide2(x, y, size, angle, translation, edgeWidth, padding) {
        var x1 = translation.x - size / 2 - padding;
        var x2 = translation.x + size / 2 + padding;
        var y1 = translation.y - size / 2 - padding;
        var y2 = translation.y + size / 2 + padding;
        var inside = x1 <= x && x <= x2 && y1 <= y && y <= y2;
        return inside;
      };
      var transform = function transform2(x, y, size, angle, translation) {
        var xRotated = x * Math.cos(angle) - y * Math.sin(angle);
        var yRotated = x * Math.sin(angle) + y * Math.cos(angle);
        var xScaled = xRotated * size;
        var yScaled = yRotated * size;
        var xTranslated = xScaled + translation.x;
        var yTranslated = yScaled + translation.y;
        return {
          x: xTranslated,
          y: yTranslated
        };
      };
      var transformPoints = function transformPoints2(pts2, size, angle, translation) {
        var retPts = [];
        for (var i2 = 0; i2 < pts2.length; i2 += 2) {
          var x = pts2[i2];
          var y = pts2[i2 + 1];
          retPts.push(transform(x, y, size, angle, translation));
        }
        return retPts;
      };
      var pointsToArr = function pointsToArr2(pts2) {
        var ret = [];
        for (var i2 = 0; i2 < pts2.length; i2++) {
          var p2 = pts2[i2];
          ret.push(p2.x, p2.y);
        }
        return ret;
      };
      var standardGap = function standardGap2(edge) {
        return edge.pstyle("width").pfValue * edge.pstyle("arrow-scale").pfValue * 2;
      };
      var defineArrowShape = function defineArrowShape2(name, defn) {
        if (string(defn)) {
          defn = arrowShapes[defn];
        }
        arrowShapes[name] = extend({
          name,
          points: [-0.15, -0.3, 0.15, -0.3, 0.15, 0.3, -0.15, 0.3],
          collide: function collide(x, y, size, angle, translation, padding) {
            var points = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
            var inside = pointInsidePolygonPoints(x, y, points);
            return inside;
          },
          roughCollide: bbCollide,
          draw: function draw(context, size, angle, translation) {
            var points = transformPoints(this.points, size, angle, translation);
            renderer2.arrowShapeImpl("polygon")(context, points);
          },
          spacing: function spacing(edge) {
            return 0;
          },
          gap: standardGap
        }, defn);
      };
      defineArrowShape("none", {
        collide: falsify,
        roughCollide: falsify,
        draw: noop,
        spacing: zeroify,
        gap: zeroify
      });
      defineArrowShape("triangle", {
        points: [-0.15, -0.3, 0, 0, 0.15, -0.3]
      });
      defineArrowShape("arrow", "triangle");
      defineArrowShape("triangle-backcurve", {
        points: arrowShapes["triangle"].points,
        controlPoint: [0, -0.15],
        roughCollide: bbCollide,
        draw: function draw(context, size, angle, translation, edgeWidth) {
          var ptsTrans = transformPoints(this.points, size, angle, translation);
          var ctrlPt = this.controlPoint;
          var ctrlPtTrans = transform(ctrlPt[0], ctrlPt[1], size, angle, translation);
          renderer2.arrowShapeImpl(this.name)(context, ptsTrans, ctrlPtTrans);
        },
        gap: function gap(edge) {
          return standardGap(edge) * 0.8;
        }
      });
      defineArrowShape("triangle-tee", {
        points: [0, 0, 0.15, -0.3, -0.15, -0.3, 0, 0],
        pointsTee: [-0.15, -0.4, -0.15, -0.5, 0.15, -0.5, 0.15, -0.4],
        collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
          var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
          var teePts = pointsToArr(transformPoints(this.pointsTee, size + 2 * padding, angle, translation));
          var inside = pointInsidePolygonPoints(x, y, triPts) || pointInsidePolygonPoints(x, y, teePts);
          return inside;
        },
        draw: function draw(context, size, angle, translation, edgeWidth) {
          var triPts = transformPoints(this.points, size, angle, translation);
          var teePts = transformPoints(this.pointsTee, size, angle, translation);
          renderer2.arrowShapeImpl(this.name)(context, triPts, teePts);
        }
      });
      defineArrowShape("circle-triangle", {
        radius: 0.15,
        pointsTr: [0, -0.15, 0.15, -0.45, -0.15, -0.45, 0, -0.15],
        collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
          var t = translation;
          var circleInside = Math.pow(t.x - x, 2) + Math.pow(t.y - y, 2) <= Math.pow((size + 2 * padding) * this.radius, 2);
          var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
          return pointInsidePolygonPoints(x, y, triPts) || circleInside;
        },
        draw: function draw(context, size, angle, translation, edgeWidth) {
          var triPts = transformPoints(this.pointsTr, size, angle, translation);
          renderer2.arrowShapeImpl(this.name)(context, triPts, translation.x, translation.y, this.radius * size);
        },
        spacing: function spacing(edge) {
          return renderer2.getArrowWidth(edge.pstyle("width").pfValue, edge.pstyle("arrow-scale").value) * this.radius;
        }
      });
      defineArrowShape("triangle-cross", {
        points: [0, 0, 0.15, -0.3, -0.15, -0.3, 0, 0],
        baseCrossLinePts: [
          -0.15,
          -0.4,
          -0.15,
          -0.4,
          0.15,
          -0.4,
          0.15,
          -0.4
        ],
        crossLinePts: function crossLinePts(size, edgeWidth) {
          var p2 = this.baseCrossLinePts.slice();
          var shiftFactor = edgeWidth / size;
          var y0 = 3;
          var y1 = 5;
          p2[y0] = p2[y0] - shiftFactor;
          p2[y1] = p2[y1] - shiftFactor;
          return p2;
        },
        collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
          var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
          var teePts = pointsToArr(transformPoints(this.crossLinePts(size, edgeWidth), size + 2 * padding, angle, translation));
          var inside = pointInsidePolygonPoints(x, y, triPts) || pointInsidePolygonPoints(x, y, teePts);
          return inside;
        },
        draw: function draw(context, size, angle, translation, edgeWidth) {
          var triPts = transformPoints(this.points, size, angle, translation);
          var crossLinePts = transformPoints(this.crossLinePts(size, edgeWidth), size, angle, translation);
          renderer2.arrowShapeImpl(this.name)(context, triPts, crossLinePts);
        }
      });
      defineArrowShape("vee", {
        points: [-0.15, -0.3, 0, 0, 0.15, -0.3, 0, -0.15],
        gap: function gap(edge) {
          return standardGap(edge) * 0.525;
        }
      });
      defineArrowShape("circle", {
        radius: 0.15,
        collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
          var t = translation;
          var inside = Math.pow(t.x - x, 2) + Math.pow(t.y - y, 2) <= Math.pow((size + 2 * padding) * this.radius, 2);
          return inside;
        },
        draw: function draw(context, size, angle, translation, edgeWidth) {
          renderer2.arrowShapeImpl(this.name)(context, translation.x, translation.y, this.radius * size);
        },
        spacing: function spacing(edge) {
          return renderer2.getArrowWidth(edge.pstyle("width").pfValue, edge.pstyle("arrow-scale").value) * this.radius;
        }
      });
      defineArrowShape("tee", {
        points: [-0.15, 0, -0.15, -0.1, 0.15, -0.1, 0.15, 0],
        spacing: function spacing(edge) {
          return 1;
        },
        gap: function gap(edge) {
          return 1;
        }
      });
      defineArrowShape("square", {
        points: [-0.15, 0, 0.15, 0, 0.15, -0.3, -0.15, -0.3]
      });
      defineArrowShape("diamond", {
        points: [-0.15, -0.15, 0, -0.3, 0.15, -0.15, 0, 0],
        gap: function gap(edge) {
          return edge.pstyle("width").pfValue * edge.pstyle("arrow-scale").value;
        }
      });
      defineArrowShape("chevron", {
        points: [0, 0, -0.15, -0.15, -0.1, -0.2, 0, -0.1, 0.1, -0.2, 0.15, -0.15],
        gap: function gap(edge) {
          return 0.95 * edge.pstyle("width").pfValue * edge.pstyle("arrow-scale").value;
        }
      });
    };
    var BRp$1 = {};
    BRp$1.projectIntoViewport = function(clientX, clientY) {
      var cy = this.cy;
      var offsets = this.findContainerClientCoords();
      var offsetLeft = offsets[0];
      var offsetTop = offsets[1];
      var scale = offsets[4];
      var pan = cy.pan();
      var zoom = cy.zoom();
      var x = ((clientX - offsetLeft) / scale - pan.x) / zoom;
      var y = ((clientY - offsetTop) / scale - pan.y) / zoom;
      return [x, y];
    };
    BRp$1.findContainerClientCoords = function() {
      if (this.containerBB) {
        return this.containerBB;
      }
      var container = this.container;
      var rect = container.getBoundingClientRect();
      var style = window$1.getComputedStyle(container);
      var styleValue = function styleValue2(name) {
        return parseFloat(style.getPropertyValue(name));
      };
      var padding = {
        left: styleValue("padding-left"),
        right: styleValue("padding-right"),
        top: styleValue("padding-top"),
        bottom: styleValue("padding-bottom")
      };
      var border = {
        left: styleValue("border-left-width"),
        right: styleValue("border-right-width"),
        top: styleValue("border-top-width"),
        bottom: styleValue("border-bottom-width")
      };
      var clientWidth = container.clientWidth;
      var clientHeight = container.clientHeight;
      var paddingHor = padding.left + padding.right;
      var paddingVer = padding.top + padding.bottom;
      var borderHor = border.left + border.right;
      var scale = rect.width / (clientWidth + borderHor);
      var unscaledW = clientWidth - paddingHor;
      var unscaledH = clientHeight - paddingVer;
      var left = rect.left + padding.left + border.left;
      var top = rect.top + padding.top + border.top;
      return this.containerBB = [left, top, unscaledW, unscaledH, scale];
    };
    BRp$1.invalidateContainerClientCoordsCache = function() {
      this.containerBB = null;
    };
    BRp$1.findNearestElement = function(x, y, interactiveElementsOnly, isTouch) {
      return this.findNearestElements(x, y, interactiveElementsOnly, isTouch)[0];
    };
    BRp$1.findNearestElements = function(x, y, interactiveElementsOnly, isTouch) {
      var self2 = this;
      var r = this;
      var eles = r.getCachedZSortedEles();
      var near = [];
      var zoom = r.cy.zoom();
      var hasCompounds = r.cy.hasCompoundNodes();
      var edgeThreshold = (isTouch ? 24 : 8) / zoom;
      var nodeThreshold = (isTouch ? 8 : 2) / zoom;
      var labelThreshold = (isTouch ? 8 : 2) / zoom;
      var minSqDist = Infinity;
      var nearEdge;
      var nearNode;
      if (interactiveElementsOnly) {
        eles = eles.interactive;
      }
      function addEle(ele2, sqDist) {
        if (ele2.isNode()) {
          if (nearNode) {
            return;
          } else {
            nearNode = ele2;
            near.push(ele2);
          }
        }
        if (ele2.isEdge() && (sqDist == null || sqDist < minSqDist)) {
          if (nearEdge) {
            if (nearEdge.pstyle("z-compound-depth").value === ele2.pstyle("z-compound-depth").value && nearEdge.pstyle("z-compound-depth").value === ele2.pstyle("z-compound-depth").value) {
              for (var i3 = 0; i3 < near.length; i3++) {
                if (near[i3].isEdge()) {
                  near[i3] = ele2;
                  nearEdge = ele2;
                  minSqDist = sqDist != null ? sqDist : minSqDist;
                  break;
                }
              }
            }
          } else {
            near.push(ele2);
            nearEdge = ele2;
            minSqDist = sqDist != null ? sqDist : minSqDist;
          }
        }
      }
      function checkNode(node) {
        var width = node.outerWidth() + 2 * nodeThreshold;
        var height = node.outerHeight() + 2 * nodeThreshold;
        var hw = width / 2;
        var hh = height / 2;
        var pos = node.position();
        if (pos.x - hw <= x && x <= pos.x + hw && pos.y - hh <= y && y <= pos.y + hh) {
          var shape = r.nodeShapes[self2.getNodeShape(node)];
          if (shape.checkPoint(x, y, 0, width, height, pos.x, pos.y)) {
            addEle(node, 0);
            return true;
          }
        }
      }
      function checkEdge(edge) {
        var _p = edge._private;
        var rs = _p.rscratch;
        var styleWidth = edge.pstyle("width").pfValue;
        var scale = edge.pstyle("arrow-scale").value;
        var width = styleWidth / 2 + edgeThreshold;
        var widthSq = width * width;
        var width2 = width * 2;
        var src = _p.source;
        var tgt = _p.target;
        var sqDist;
        if (rs.edgeType === "segments" || rs.edgeType === "straight" || rs.edgeType === "haystack") {
          var pts2 = rs.allpts;
          for (var i3 = 0; i3 + 3 < pts2.length; i3 += 2) {
            if (inLineVicinity(x, y, pts2[i3], pts2[i3 + 1], pts2[i3 + 2], pts2[i3 + 3], width2) && widthSq > (sqDist = sqdistToFiniteLine(x, y, pts2[i3], pts2[i3 + 1], pts2[i3 + 2], pts2[i3 + 3]))) {
              addEle(edge, sqDist);
              return true;
            }
          }
        } else if (rs.edgeType === "bezier" || rs.edgeType === "multibezier" || rs.edgeType === "self" || rs.edgeType === "compound") {
          var pts2 = rs.allpts;
          for (var i3 = 0; i3 + 5 < rs.allpts.length; i3 += 4) {
            if (inBezierVicinity(x, y, pts2[i3], pts2[i3 + 1], pts2[i3 + 2], pts2[i3 + 3], pts2[i3 + 4], pts2[i3 + 5], width2) && widthSq > (sqDist = sqdistToQuadraticBezier(x, y, pts2[i3], pts2[i3 + 1], pts2[i3 + 2], pts2[i3 + 3], pts2[i3 + 4], pts2[i3 + 5]))) {
              addEle(edge, sqDist);
              return true;
            }
          }
        }
        var src = src || _p.source;
        var tgt = tgt || _p.target;
        var arSize = self2.getArrowWidth(styleWidth, scale);
        var arrows = [{
          name: "source",
          x: rs.arrowStartX,
          y: rs.arrowStartY,
          angle: rs.srcArrowAngle
        }, {
          name: "target",
          x: rs.arrowEndX,
          y: rs.arrowEndY,
          angle: rs.tgtArrowAngle
        }, {
          name: "mid-source",
          x: rs.midX,
          y: rs.midY,
          angle: rs.midsrcArrowAngle
        }, {
          name: "mid-target",
          x: rs.midX,
          y: rs.midY,
          angle: rs.midtgtArrowAngle
        }];
        for (var i3 = 0; i3 < arrows.length; i3++) {
          var ar = arrows[i3];
          var shape = r.arrowShapes[edge.pstyle(ar.name + "-arrow-shape").value];
          var edgeWidth = edge.pstyle("width").pfValue;
          if (shape.roughCollide(x, y, arSize, ar.angle, {
            x: ar.x,
            y: ar.y
          }, edgeWidth, edgeThreshold) && shape.collide(x, y, arSize, ar.angle, {
            x: ar.x,
            y: ar.y
          }, edgeWidth, edgeThreshold)) {
            addEle(edge);
            return true;
          }
        }
        if (hasCompounds && near.length > 0) {
          checkNode(src);
          checkNode(tgt);
        }
      }
      function preprop(obj, name, pre) {
        return getPrefixedProperty(obj, name, pre);
      }
      function checkLabel(ele2, prefix) {
        var _p = ele2._private;
        var th = labelThreshold;
        var prefixDash;
        if (prefix) {
          prefixDash = prefix + "-";
        } else {
          prefixDash = "";
        }
        ele2.boundingBox();
        var bb = _p.labelBounds[prefix || "main"];
        var text = ele2.pstyle(prefixDash + "label").value;
        var eventsEnabled = ele2.pstyle("text-events").strValue === "yes";
        if (!eventsEnabled || !text) {
          return;
        }
        var rstyle = _p.rstyle;
        var lx = preprop(rstyle, "labelX", prefix);
        var ly = preprop(rstyle, "labelY", prefix);
        var theta = preprop(_p.rscratch, "labelAngle", prefix);
        var lx1 = bb.x1 - th;
        var lx2 = bb.x2 + th;
        var ly1 = bb.y1 - th;
        var ly2 = bb.y2 + th;
        if (theta) {
          var cos2 = Math.cos(theta);
          var sin2 = Math.sin(theta);
          var rotate = function rotate2(x2, y2) {
            x2 = x2 - lx;
            y2 = y2 - ly;
            return {
              x: x2 * cos2 - y2 * sin2 + lx,
              y: x2 * sin2 + y2 * cos2 + ly
            };
          };
          var px1y1 = rotate(lx1, ly1);
          var px1y2 = rotate(lx1, ly2);
          var px2y1 = rotate(lx2, ly1);
          var px2y2 = rotate(lx2, ly2);
          var points = [px1y1.x, px1y1.y, px2y1.x, px2y1.y, px2y2.x, px2y2.y, px1y2.x, px1y2.y];
          if (pointInsidePolygonPoints(x, y, points)) {
            addEle(ele2);
            return true;
          }
        } else {
          if (inBoundingBox(bb, x, y)) {
            addEle(ele2);
            return true;
          }
        }
      }
      for (var i2 = eles.length - 1; i2 >= 0; i2--) {
        var ele = eles[i2];
        if (ele.isNode()) {
          checkNode(ele) || checkLabel(ele);
        } else {
          checkEdge(ele) || checkLabel(ele) || checkLabel(ele, "source") || checkLabel(ele, "target");
        }
      }
      return near;
    };
    BRp$1.getAllInBox = function(x1, y1, x2, y2) {
      var eles = this.getCachedZSortedEles().interactive;
      var box = [];
      var x1c = Math.min(x1, x2);
      var x2c = Math.max(x1, x2);
      var y1c = Math.min(y1, y2);
      var y2c = Math.max(y1, y2);
      x1 = x1c;
      x2 = x2c;
      y1 = y1c;
      y2 = y2c;
      var boxBb = makeBoundingBox({
        x1,
        y1,
        x2,
        y2
      });
      for (var e = 0; e < eles.length; e++) {
        var ele = eles[e];
        if (ele.isNode()) {
          var node = ele;
          var nodeBb = node.boundingBox({
            includeNodes: true,
            includeEdges: false,
            includeLabels: false
          });
          if (boundingBoxesIntersect(boxBb, nodeBb) && !boundingBoxInBoundingBox(nodeBb, boxBb)) {
            box.push(node);
          }
        } else {
          var edge = ele;
          var _p = edge._private;
          var rs = _p.rscratch;
          if (rs.startX != null && rs.startY != null && !inBoundingBox(boxBb, rs.startX, rs.startY)) {
            continue;
          }
          if (rs.endX != null && rs.endY != null && !inBoundingBox(boxBb, rs.endX, rs.endY)) {
            continue;
          }
          if (rs.edgeType === "bezier" || rs.edgeType === "multibezier" || rs.edgeType === "self" || rs.edgeType === "compound" || rs.edgeType === "segments" || rs.edgeType === "haystack") {
            var pts2 = _p.rstyle.bezierPts || _p.rstyle.linePts || _p.rstyle.haystackPts;
            var allInside = true;
            for (var i2 = 0; i2 < pts2.length; i2++) {
              if (!pointInBoundingBox(boxBb, pts2[i2])) {
                allInside = false;
                break;
              }
            }
            if (allInside) {
              box.push(edge);
            }
          } else if (rs.edgeType === "haystack" || rs.edgeType === "straight") {
            box.push(edge);
          }
        }
      }
      return box;
    };
    var BRp$2 = {};
    BRp$2.calculateArrowAngles = function(edge) {
      var rs = edge._private.rscratch;
      var isHaystack = rs.edgeType === "haystack";
      var isBezier = rs.edgeType === "bezier";
      var isMultibezier = rs.edgeType === "multibezier";
      var isSegments = rs.edgeType === "segments";
      var isCompound = rs.edgeType === "compound";
      var isSelf = rs.edgeType === "self";
      var dispX, dispY;
      var startX, startY, endX, endY, midX, midY;
      if (isHaystack) {
        startX = rs.haystackPts[0];
        startY = rs.haystackPts[1];
        endX = rs.haystackPts[2];
        endY = rs.haystackPts[3];
      } else {
        startX = rs.arrowStartX;
        startY = rs.arrowStartY;
        endX = rs.arrowEndX;
        endY = rs.arrowEndY;
      }
      midX = rs.midX;
      midY = rs.midY;
      if (isSegments) {
        dispX = startX - rs.segpts[0];
        dispY = startY - rs.segpts[1];
      } else if (isMultibezier || isCompound || isSelf || isBezier) {
        var pts2 = rs.allpts;
        var bX = qbezierAt(pts2[0], pts2[2], pts2[4], 0.1);
        var bY = qbezierAt(pts2[1], pts2[3], pts2[5], 0.1);
        dispX = startX - bX;
        dispY = startY - bY;
      } else {
        dispX = startX - midX;
        dispY = startY - midY;
      }
      rs.srcArrowAngle = getAngleFromDisp(dispX, dispY);
      var midX = rs.midX;
      var midY = rs.midY;
      if (isHaystack) {
        midX = (startX + endX) / 2;
        midY = (startY + endY) / 2;
      }
      dispX = endX - startX;
      dispY = endY - startY;
      if (isSegments) {
        var pts2 = rs.allpts;
        if (pts2.length / 2 % 2 === 0) {
          var i2 = pts2.length / 2;
          var i1 = i2 - 2;
          dispX = pts2[i2] - pts2[i1];
          dispY = pts2[i2 + 1] - pts2[i1 + 1];
        } else {
          var i2 = pts2.length / 2 - 1;
          var i1 = i2 - 2;
          var i3 = i2 + 2;
          dispX = pts2[i2] - pts2[i1];
          dispY = pts2[i2 + 1] - pts2[i1 + 1];
        }
      } else if (isMultibezier || isCompound || isSelf) {
        var pts2 = rs.allpts;
        var cpts = rs.ctrlpts;
        var bp0x, bp0y;
        var bp1x, bp1y;
        if (cpts.length / 2 % 2 === 0) {
          var p0 = pts2.length / 2 - 1;
          var ic = p0 + 2;
          var p1 = ic + 2;
          bp0x = qbezierAt(pts2[p0], pts2[ic], pts2[p1], 0);
          bp0y = qbezierAt(pts2[p0 + 1], pts2[ic + 1], pts2[p1 + 1], 0);
          bp1x = qbezierAt(pts2[p0], pts2[ic], pts2[p1], 1e-4);
          bp1y = qbezierAt(pts2[p0 + 1], pts2[ic + 1], pts2[p1 + 1], 1e-4);
        } else {
          var ic = pts2.length / 2 - 1;
          var p0 = ic - 2;
          var p1 = ic + 2;
          bp0x = qbezierAt(pts2[p0], pts2[ic], pts2[p1], 0.4999);
          bp0y = qbezierAt(pts2[p0 + 1], pts2[ic + 1], pts2[p1 + 1], 0.4999);
          bp1x = qbezierAt(pts2[p0], pts2[ic], pts2[p1], 0.5);
          bp1y = qbezierAt(pts2[p0 + 1], pts2[ic + 1], pts2[p1 + 1], 0.5);
        }
        dispX = bp1x - bp0x;
        dispY = bp1y - bp0y;
      }
      rs.midtgtArrowAngle = getAngleFromDisp(dispX, dispY);
      rs.midDispX = dispX;
      rs.midDispY = dispY;
      dispX *= -1;
      dispY *= -1;
      if (isSegments) {
        var pts2 = rs.allpts;
        if (pts2.length / 2 % 2 === 0)
          ;
        else {
          var i2 = pts2.length / 2 - 1;
          var i3 = i2 + 2;
          dispX = -(pts2[i3] - pts2[i2]);
          dispY = -(pts2[i3 + 1] - pts2[i2 + 1]);
        }
      }
      rs.midsrcArrowAngle = getAngleFromDisp(dispX, dispY);
      if (isSegments) {
        dispX = endX - rs.segpts[rs.segpts.length - 2];
        dispY = endY - rs.segpts[rs.segpts.length - 1];
      } else if (isMultibezier || isCompound || isSelf || isBezier) {
        var pts2 = rs.allpts;
        var l = pts2.length;
        var bX = qbezierAt(pts2[l - 6], pts2[l - 4], pts2[l - 2], 0.9);
        var bY = qbezierAt(pts2[l - 5], pts2[l - 3], pts2[l - 1], 0.9);
        dispX = endX - bX;
        dispY = endY - bY;
      } else {
        dispX = endX - midX;
        dispY = endY - midY;
      }
      rs.tgtArrowAngle = getAngleFromDisp(dispX, dispY);
    };
    BRp$2.getArrowWidth = BRp$2.getArrowHeight = function(edgeWidth, scale) {
      var cache2 = this.arrowWidthCache = this.arrowWidthCache || {};
      var cachedVal = cache2[edgeWidth + ", " + scale];
      if (cachedVal) {
        return cachedVal;
      }
      cachedVal = Math.max(Math.pow(edgeWidth * 13.37, 0.9), 29) * scale;
      cache2[edgeWidth + ", " + scale] = cachedVal;
      return cachedVal;
    };
    var BRp$3 = {};
    BRp$3.findHaystackPoints = function(edges) {
      for (var i2 = 0; i2 < edges.length; i2++) {
        var edge = edges[i2];
        var _p = edge._private;
        var rs = _p.rscratch;
        if (!rs.haystack) {
          var angle = Math.random() * 2 * Math.PI;
          rs.source = {
            x: Math.cos(angle),
            y: Math.sin(angle)
          };
          angle = Math.random() * 2 * Math.PI;
          rs.target = {
            x: Math.cos(angle),
            y: Math.sin(angle)
          };
        }
        var src = _p.source;
        var tgt = _p.target;
        var srcPos = src.position();
        var tgtPos = tgt.position();
        var srcW = src.width();
        var tgtW = tgt.width();
        var srcH = src.height();
        var tgtH = tgt.height();
        var radius = edge.pstyle("haystack-radius").value;
        var halfRadius = radius / 2;
        rs.haystackPts = rs.allpts = [rs.source.x * srcW * halfRadius + srcPos.x, rs.source.y * srcH * halfRadius + srcPos.y, rs.target.x * tgtW * halfRadius + tgtPos.x, rs.target.y * tgtH * halfRadius + tgtPos.y];
        rs.midX = (rs.allpts[0] + rs.allpts[2]) / 2;
        rs.midY = (rs.allpts[1] + rs.allpts[3]) / 2;
        rs.edgeType = "haystack";
        rs.haystack = true;
        this.storeEdgeProjections(edge);
        this.calculateArrowAngles(edge);
        this.recalculateEdgeLabelProjections(edge);
        this.calculateLabelAngles(edge);
      }
    };
    BRp$3.findSegmentsPoints = function(edge, pairInfo) {
      var rs = edge._private.rscratch;
      var posPts = pairInfo.posPts, intersectionPts = pairInfo.intersectionPts, vectorNormInverse = pairInfo.vectorNormInverse;
      var edgeDistances = edge.pstyle("edge-distances").value;
      var segmentWs = edge.pstyle("segment-weights");
      var segmentDs = edge.pstyle("segment-distances");
      var segmentsN = Math.min(segmentWs.pfValue.length, segmentDs.pfValue.length);
      rs.edgeType = "segments";
      rs.segpts = [];
      for (var s = 0; s < segmentsN; s++) {
        var w = segmentWs.pfValue[s];
        var d = segmentDs.pfValue[s];
        var w1 = 1 - w;
        var w2 = w;
        var midptPts = edgeDistances === "node-position" ? posPts : intersectionPts;
        var adjustedMidpt = {
          x: midptPts.x1 * w1 + midptPts.x2 * w2,
          y: midptPts.y1 * w1 + midptPts.y2 * w2
        };
        rs.segpts.push(adjustedMidpt.x + vectorNormInverse.x * d, adjustedMidpt.y + vectorNormInverse.y * d);
      }
    };
    BRp$3.findLoopPoints = function(edge, pairInfo, i2, edgeIsUnbundled) {
      var rs = edge._private.rscratch;
      var dirCounts = pairInfo.dirCounts, srcPos = pairInfo.srcPos;
      var ctrlptDists = edge.pstyle("control-point-distances");
      var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : void 0;
      var loopDir = edge.pstyle("loop-direction").pfValue;
      var loopSwp = edge.pstyle("loop-sweep").pfValue;
      var stepSize = edge.pstyle("control-point-step-size").pfValue;
      rs.edgeType = "self";
      var j = i2;
      var loopDist = stepSize;
      if (edgeIsUnbundled) {
        j = 0;
        loopDist = ctrlptDist;
      }
      var loopAngle = loopDir - Math.PI / 2;
      var outAngle = loopAngle - loopSwp / 2;
      var inAngle = loopAngle + loopSwp / 2;
      var dc = String(loopDir + "_" + loopSwp);
      j = dirCounts[dc] === void 0 ? dirCounts[dc] = 0 : ++dirCounts[dc];
      rs.ctrlpts = [srcPos.x + Math.cos(outAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.y + Math.sin(outAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.x + Math.cos(inAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.y + Math.sin(inAngle) * 1.4 * loopDist * (j / 3 + 1)];
    };
    BRp$3.findCompoundLoopPoints = function(edge, pairInfo, i2, edgeIsUnbundled) {
      var rs = edge._private.rscratch;
      rs.edgeType = "compound";
      var srcPos = pairInfo.srcPos, tgtPos = pairInfo.tgtPos, srcW = pairInfo.srcW, srcH = pairInfo.srcH, tgtW = pairInfo.tgtW, tgtH = pairInfo.tgtH;
      var stepSize = edge.pstyle("control-point-step-size").pfValue;
      var ctrlptDists = edge.pstyle("control-point-distances");
      var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : void 0;
      var j = i2;
      var loopDist = stepSize;
      if (edgeIsUnbundled) {
        j = 0;
        loopDist = ctrlptDist;
      }
      var loopW = 50;
      var loopaPos = {
        x: srcPos.x - srcW / 2,
        y: srcPos.y - srcH / 2
      };
      var loopbPos = {
        x: tgtPos.x - tgtW / 2,
        y: tgtPos.y - tgtH / 2
      };
      var loopPos = {
        x: Math.min(loopaPos.x, loopbPos.x),
        y: Math.min(loopaPos.y, loopbPos.y)
      };
      var minCompoundStretch = 0.5;
      var compoundStretchA = Math.max(minCompoundStretch, Math.log(srcW * 0.01));
      var compoundStretchB = Math.max(minCompoundStretch, Math.log(tgtW * 0.01));
      rs.ctrlpts = [loopPos.x, loopPos.y - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchA, loopPos.x - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchB, loopPos.y];
    };
    BRp$3.findStraightEdgePoints = function(edge) {
      edge._private.rscratch.edgeType = "straight";
    };
    BRp$3.findBezierPoints = function(edge, pairInfo, i2, edgeIsUnbundled, edgeIsSwapped) {
      var rs = edge._private.rscratch;
      var vectorNormInverse = pairInfo.vectorNormInverse, posPts = pairInfo.posPts, intersectionPts = pairInfo.intersectionPts;
      var edgeDistances = edge.pstyle("edge-distances").value;
      var stepSize = edge.pstyle("control-point-step-size").pfValue;
      var ctrlptDists = edge.pstyle("control-point-distances");
      var ctrlptWs = edge.pstyle("control-point-weights");
      var bezierN = ctrlptDists && ctrlptWs ? Math.min(ctrlptDists.value.length, ctrlptWs.value.length) : 1;
      var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : void 0;
      var ctrlptWeight = ctrlptWs.value[0];
      var multi = edgeIsUnbundled;
      rs.edgeType = multi ? "multibezier" : "bezier";
      rs.ctrlpts = [];
      for (var b = 0; b < bezierN; b++) {
        var normctrlptDist = (0.5 - pairInfo.eles.length / 2 + i2) * stepSize * (edgeIsSwapped ? -1 : 1);
        var manctrlptDist = void 0;
        var sign = signum(normctrlptDist);
        if (multi) {
          ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[b] : stepSize;
          ctrlptWeight = ctrlptWs.value[b];
        }
        if (edgeIsUnbundled) {
          manctrlptDist = ctrlptDist;
        } else {
          manctrlptDist = ctrlptDist !== void 0 ? sign * ctrlptDist : void 0;
        }
        var distanceFromMidpoint = manctrlptDist !== void 0 ? manctrlptDist : normctrlptDist;
        var w1 = 1 - ctrlptWeight;
        var w2 = ctrlptWeight;
        var midptPts = edgeDistances === "node-position" ? posPts : intersectionPts;
        var adjustedMidpt = {
          x: midptPts.x1 * w1 + midptPts.x2 * w2,
          y: midptPts.y1 * w1 + midptPts.y2 * w2
        };
        rs.ctrlpts.push(adjustedMidpt.x + vectorNormInverse.x * distanceFromMidpoint, adjustedMidpt.y + vectorNormInverse.y * distanceFromMidpoint);
      }
    };
    BRp$3.findTaxiPoints = function(edge, pairInfo) {
      var rs = edge._private.rscratch;
      rs.edgeType = "segments";
      var VERTICAL = "vertical";
      var HORIZONTAL = "horizontal";
      var LEFTWARD = "leftward";
      var RIGHTWARD = "rightward";
      var DOWNWARD = "downward";
      var UPWARD = "upward";
      var AUTO = "auto";
      var posPts = pairInfo.posPts, srcW = pairInfo.srcW, srcH = pairInfo.srcH, tgtW = pairInfo.tgtW, tgtH = pairInfo.tgtH;
      var edgeDistances = edge.pstyle("edge-distances").value;
      var dIncludesNodeBody = edgeDistances !== "node-position";
      var taxiDir = edge.pstyle("taxi-direction").value;
      var rawTaxiDir = taxiDir;
      var taxiTurn = edge.pstyle("taxi-turn");
      var turnIsPercent = taxiTurn.units === "%";
      var taxiTurnPfVal = taxiTurn.pfValue;
      var turnIsNegative = taxiTurnPfVal < 0;
      var minD = edge.pstyle("taxi-turn-min-distance").pfValue;
      var dw = dIncludesNodeBody ? (srcW + tgtW) / 2 : 0;
      var dh = dIncludesNodeBody ? (srcH + tgtH) / 2 : 0;
      var pdx = posPts.x2 - posPts.x1;
      var pdy = posPts.y2 - posPts.y1;
      var subDWH = function subDWH2(dxy, dwh) {
        if (dxy > 0) {
          return Math.max(dxy - dwh, 0);
        } else {
          return Math.min(dxy + dwh, 0);
        }
      };
      var dx = subDWH(pdx, dw);
      var dy = subDWH(pdy, dh);
      var isExplicitDir = false;
      if (rawTaxiDir === AUTO) {
        taxiDir = Math.abs(dx) > Math.abs(dy) ? HORIZONTAL : VERTICAL;
      } else if (rawTaxiDir === UPWARD || rawTaxiDir === DOWNWARD) {
        taxiDir = VERTICAL;
        isExplicitDir = true;
      } else if (rawTaxiDir === LEFTWARD || rawTaxiDir === RIGHTWARD) {
        taxiDir = HORIZONTAL;
        isExplicitDir = true;
      }
      var isVert = taxiDir === VERTICAL;
      var l = isVert ? dy : dx;
      var pl = isVert ? pdy : pdx;
      var sgnL = signum(pl);
      var forcedDir = false;
      if (!(isExplicitDir && (turnIsPercent || turnIsNegative)) && (rawTaxiDir === DOWNWARD && pl < 0 || rawTaxiDir === UPWARD && pl > 0 || rawTaxiDir === LEFTWARD && pl > 0 || rawTaxiDir === RIGHTWARD && pl < 0)) {
        sgnL *= -1;
        l = sgnL * Math.abs(l);
        forcedDir = true;
      }
      var d;
      if (turnIsPercent) {
        var p2 = taxiTurnPfVal < 0 ? 1 + taxiTurnPfVal : taxiTurnPfVal;
        d = p2 * l;
      } else {
        var k = taxiTurnPfVal < 0 ? l : 0;
        d = k + taxiTurnPfVal * sgnL;
      }
      var getIsTooClose = function getIsTooClose2(d2) {
        return Math.abs(d2) < minD || Math.abs(d2) >= Math.abs(l);
      };
      var isTooCloseSrc = getIsTooClose(d);
      var isTooCloseTgt = getIsTooClose(Math.abs(l) - Math.abs(d));
      var isTooClose = isTooCloseSrc || isTooCloseTgt;
      if (isTooClose && !forcedDir) {
        if (isVert) {
          var lShapeInsideSrc = Math.abs(pl) <= srcH / 2;
          var lShapeInsideTgt = Math.abs(pdx) <= tgtW / 2;
          if (lShapeInsideSrc) {
            var x = (posPts.x1 + posPts.x2) / 2;
            var y1 = posPts.y1, y2 = posPts.y2;
            rs.segpts = [x, y1, x, y2];
          } else if (lShapeInsideTgt) {
            var y = (posPts.y1 + posPts.y2) / 2;
            var x1 = posPts.x1, x2 = posPts.x2;
            rs.segpts = [x1, y, x2, y];
          } else {
            rs.segpts = [posPts.x1, posPts.y2];
          }
        } else {
          var _lShapeInsideSrc = Math.abs(pl) <= srcW / 2;
          var _lShapeInsideTgt = Math.abs(pdy) <= tgtH / 2;
          if (_lShapeInsideSrc) {
            var _y = (posPts.y1 + posPts.y2) / 2;
            var _x = posPts.x1, _x2 = posPts.x2;
            rs.segpts = [_x, _y, _x2, _y];
          } else if (_lShapeInsideTgt) {
            var _x3 = (posPts.x1 + posPts.x2) / 2;
            var _y2 = posPts.y1, _y3 = posPts.y2;
            rs.segpts = [_x3, _y2, _x3, _y3];
          } else {
            rs.segpts = [posPts.x2, posPts.y1];
          }
        }
      } else {
        if (isVert) {
          var _y4 = posPts.y1 + d + (dIncludesNodeBody ? srcH / 2 * sgnL : 0);
          var _x4 = posPts.x1, _x5 = posPts.x2;
          rs.segpts = [_x4, _y4, _x5, _y4];
        } else {
          var _x6 = posPts.x1 + d + (dIncludesNodeBody ? srcW / 2 * sgnL : 0);
          var _y5 = posPts.y1, _y6 = posPts.y2;
          rs.segpts = [_x6, _y5, _x6, _y6];
        }
      }
    };
    BRp$3.tryToCorrectInvalidPoints = function(edge, pairInfo) {
      var rs = edge._private.rscratch;
      if (rs.edgeType === "bezier") {
        var srcPos = pairInfo.srcPos, tgtPos = pairInfo.tgtPos, srcW = pairInfo.srcW, srcH = pairInfo.srcH, tgtW = pairInfo.tgtW, tgtH = pairInfo.tgtH, srcShape = pairInfo.srcShape, tgtShape = pairInfo.tgtShape;
        var badStart = !number(rs.startX) || !number(rs.startY);
        var badAStart = !number(rs.arrowStartX) || !number(rs.arrowStartY);
        var badEnd = !number(rs.endX) || !number(rs.endY);
        var badAEnd = !number(rs.arrowEndX) || !number(rs.arrowEndY);
        var minCpADistFactor = 3;
        var arrowW = this.getArrowWidth(edge.pstyle("width").pfValue, edge.pstyle("arrow-scale").value) * this.arrowShapeWidth;
        var minCpADist = minCpADistFactor * arrowW;
        var startACpDist = dist({
          x: rs.ctrlpts[0],
          y: rs.ctrlpts[1]
        }, {
          x: rs.startX,
          y: rs.startY
        });
        var closeStartACp = startACpDist < minCpADist;
        var endACpDist = dist({
          x: rs.ctrlpts[0],
          y: rs.ctrlpts[1]
        }, {
          x: rs.endX,
          y: rs.endY
        });
        var closeEndACp = endACpDist < minCpADist;
        var overlapping = false;
        if (badStart || badAStart || closeStartACp) {
          overlapping = true;
          var cpD = {
            x: rs.ctrlpts[0] - srcPos.x,
            y: rs.ctrlpts[1] - srcPos.y
          };
          var cpL = Math.sqrt(cpD.x * cpD.x + cpD.y * cpD.y);
          var cpM = {
            x: cpD.x / cpL,
            y: cpD.y / cpL
          };
          var radius = Math.max(srcW, srcH);
          var cpProj = {
            x: rs.ctrlpts[0] + cpM.x * 2 * radius,
            y: rs.ctrlpts[1] + cpM.y * 2 * radius
          };
          var srcCtrlPtIntn = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, cpProj.x, cpProj.y, 0);
          if (closeStartACp) {
            rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - startACpDist);
            rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - startACpDist);
          } else {
            rs.ctrlpts[0] = srcCtrlPtIntn[0] + cpM.x * minCpADist;
            rs.ctrlpts[1] = srcCtrlPtIntn[1] + cpM.y * minCpADist;
          }
        }
        if (badEnd || badAEnd || closeEndACp) {
          overlapping = true;
          var _cpD = {
            x: rs.ctrlpts[0] - tgtPos.x,
            y: rs.ctrlpts[1] - tgtPos.y
          };
          var _cpL = Math.sqrt(_cpD.x * _cpD.x + _cpD.y * _cpD.y);
          var _cpM = {
            x: _cpD.x / _cpL,
            y: _cpD.y / _cpL
          };
          var _radius = Math.max(srcW, srcH);
          var _cpProj = {
            x: rs.ctrlpts[0] + _cpM.x * 2 * _radius,
            y: rs.ctrlpts[1] + _cpM.y * 2 * _radius
          };
          var tgtCtrlPtIntn = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, _cpProj.x, _cpProj.y, 0);
          if (closeEndACp) {
            rs.ctrlpts[0] = rs.ctrlpts[0] + _cpM.x * (minCpADist - endACpDist);
            rs.ctrlpts[1] = rs.ctrlpts[1] + _cpM.y * (minCpADist - endACpDist);
          } else {
            rs.ctrlpts[0] = tgtCtrlPtIntn[0] + _cpM.x * minCpADist;
            rs.ctrlpts[1] = tgtCtrlPtIntn[1] + _cpM.y * minCpADist;
          }
        }
        if (overlapping) {
          this.findEndpoints(edge);
        }
      }
    };
    BRp$3.storeAllpts = function(edge) {
      var rs = edge._private.rscratch;
      if (rs.edgeType === "multibezier" || rs.edgeType === "bezier" || rs.edgeType === "self" || rs.edgeType === "compound") {
        rs.allpts = [];
        rs.allpts.push(rs.startX, rs.startY);
        for (var b = 0; b + 1 < rs.ctrlpts.length; b += 2) {
          rs.allpts.push(rs.ctrlpts[b], rs.ctrlpts[b + 1]);
          if (b + 3 < rs.ctrlpts.length) {
            rs.allpts.push((rs.ctrlpts[b] + rs.ctrlpts[b + 2]) / 2, (rs.ctrlpts[b + 1] + rs.ctrlpts[b + 3]) / 2);
          }
        }
        rs.allpts.push(rs.endX, rs.endY);
        var m, mt;
        if (rs.ctrlpts.length / 2 % 2 === 0) {
          m = rs.allpts.length / 2 - 1;
          rs.midX = rs.allpts[m];
          rs.midY = rs.allpts[m + 1];
        } else {
          m = rs.allpts.length / 2 - 3;
          mt = 0.5;
          rs.midX = qbezierAt(rs.allpts[m], rs.allpts[m + 2], rs.allpts[m + 4], mt);
          rs.midY = qbezierAt(rs.allpts[m + 1], rs.allpts[m + 3], rs.allpts[m + 5], mt);
        }
      } else if (rs.edgeType === "straight") {
        rs.allpts = [rs.startX, rs.startY, rs.endX, rs.endY];
        rs.midX = (rs.startX + rs.endX + rs.arrowStartX + rs.arrowEndX) / 4;
        rs.midY = (rs.startY + rs.endY + rs.arrowStartY + rs.arrowEndY) / 4;
      } else if (rs.edgeType === "segments") {
        rs.allpts = [];
        rs.allpts.push(rs.startX, rs.startY);
        rs.allpts.push.apply(rs.allpts, rs.segpts);
        rs.allpts.push(rs.endX, rs.endY);
        if (rs.segpts.length % 4 === 0) {
          var i2 = rs.segpts.length / 2;
          var i1 = i2 - 2;
          rs.midX = (rs.segpts[i1] + rs.segpts[i2]) / 2;
          rs.midY = (rs.segpts[i1 + 1] + rs.segpts[i2 + 1]) / 2;
        } else {
          var _i = rs.segpts.length / 2 - 1;
          rs.midX = rs.segpts[_i];
          rs.midY = rs.segpts[_i + 1];
        }
      }
    };
    BRp$3.checkForInvalidEdgeWarning = function(edge) {
      var rs = edge[0]._private.rscratch;
      if (rs.nodesOverlap || number(rs.startX) && number(rs.startY) && number(rs.endX) && number(rs.endY)) {
        rs.loggedErr = false;
      } else {
        if (!rs.loggedErr) {
          rs.loggedErr = true;
          warn("Edge `" + edge.id() + "` has invalid endpoints and so it is impossible to draw.  Adjust your edge style (e.g. control points) accordingly or use an alternative edge type.  This is expected behaviour when the source node and the target node overlap.");
        }
      }
    };
    BRp$3.findEdgeControlPoints = function(edges) {
      var _this = this;
      if (!edges || edges.length === 0) {
        return;
      }
      var r = this;
      var cy = r.cy;
      var hasCompounds = cy.hasCompoundNodes();
      var hashTable = {
        map: new Map$1(),
        get: function get(pairId2) {
          var map2 = this.map.get(pairId2[0]);
          if (map2 != null) {
            return map2.get(pairId2[1]);
          } else {
            return null;
          }
        },
        set: function set(pairId2, val) {
          var map2 = this.map.get(pairId2[0]);
          if (map2 == null) {
            map2 = new Map$1();
            this.map.set(pairId2[0], map2);
          }
          map2.set(pairId2[1], val);
        }
      };
      var pairIds = [];
      var haystackEdges = [];
      for (var i2 = 0; i2 < edges.length; i2++) {
        var edge = edges[i2];
        var _p = edge._private;
        var curveStyle = edge.pstyle("curve-style").value;
        if (edge.removed() || !edge.takesUpSpace()) {
          continue;
        }
        if (curveStyle === "haystack") {
          haystackEdges.push(edge);
          continue;
        }
        var edgeIsUnbundled = curveStyle === "unbundled-bezier" || curveStyle === "segments" || curveStyle === "straight" || curveStyle === "taxi";
        var edgeIsBezier = curveStyle === "unbundled-bezier" || curveStyle === "bezier";
        var src = _p.source;
        var tgt = _p.target;
        var srcIndex = src.poolIndex();
        var tgtIndex = tgt.poolIndex();
        var pairId = [srcIndex, tgtIndex].sort();
        var tableEntry = hashTable.get(pairId);
        if (tableEntry == null) {
          tableEntry = {
            eles: []
          };
          hashTable.set(pairId, tableEntry);
          pairIds.push(pairId);
        }
        tableEntry.eles.push(edge);
        if (edgeIsUnbundled) {
          tableEntry.hasUnbundled = true;
        }
        if (edgeIsBezier) {
          tableEntry.hasBezier = true;
        }
      }
      var _loop = function _loop2(p3) {
        var pairId2 = pairIds[p3];
        var pairInfo = hashTable.get(pairId2);
        var swappedpairInfo = void 0;
        if (!pairInfo.hasUnbundled) {
          var pllEdges = pairInfo.eles[0].parallelEdges().filter(function(e) {
            return e.isBundledBezier();
          });
          clearArray(pairInfo.eles);
          pllEdges.forEach(function(edge2) {
            return pairInfo.eles.push(edge2);
          });
          pairInfo.eles.sort(function(edge1, edge2) {
            return edge1.poolIndex() - edge2.poolIndex();
          });
        }
        var firstEdge = pairInfo.eles[0];
        var src2 = firstEdge.source();
        var tgt2 = firstEdge.target();
        if (src2.poolIndex() > tgt2.poolIndex()) {
          var temp = src2;
          src2 = tgt2;
          tgt2 = temp;
        }
        var srcPos = pairInfo.srcPos = src2.position();
        var tgtPos = pairInfo.tgtPos = tgt2.position();
        var srcW = pairInfo.srcW = src2.outerWidth();
        var srcH = pairInfo.srcH = src2.outerHeight();
        var tgtW = pairInfo.tgtW = tgt2.outerWidth();
        var tgtH = pairInfo.tgtH = tgt2.outerHeight();
        var srcShape = pairInfo.srcShape = r.nodeShapes[_this.getNodeShape(src2)];
        var tgtShape = pairInfo.tgtShape = r.nodeShapes[_this.getNodeShape(tgt2)];
        pairInfo.dirCounts = {
          north: 0,
          west: 0,
          south: 0,
          east: 0,
          northwest: 0,
          southwest: 0,
          northeast: 0,
          southeast: 0
        };
        for (var _i2 = 0; _i2 < pairInfo.eles.length; _i2++) {
          var _edge = pairInfo.eles[_i2];
          var rs = _edge[0]._private.rscratch;
          var _curveStyle = _edge.pstyle("curve-style").value;
          var _edgeIsUnbundled = _curveStyle === "unbundled-bezier" || _curveStyle === "segments" || _curveStyle === "taxi";
          var edgeIsSwapped = !src2.same(_edge.source());
          if (!pairInfo.calculatedIntersection && src2 !== tgt2 && (pairInfo.hasBezier || pairInfo.hasUnbundled)) {
            pairInfo.calculatedIntersection = true;
            var srcOutside = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, tgtPos.x, tgtPos.y, 0);
            var srcIntn = pairInfo.srcIntn = srcOutside;
            var tgtOutside = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, srcPos.x, srcPos.y, 0);
            var tgtIntn = pairInfo.tgtIntn = tgtOutside;
            var intersectionPts = pairInfo.intersectionPts = {
              x1: srcOutside[0],
              x2: tgtOutside[0],
              y1: srcOutside[1],
              y2: tgtOutside[1]
            };
            var posPts = pairInfo.posPts = {
              x1: srcPos.x,
              x2: tgtPos.x,
              y1: srcPos.y,
              y2: tgtPos.y
            };
            var dy = tgtOutside[1] - srcOutside[1];
            var dx = tgtOutside[0] - srcOutside[0];
            var l = Math.sqrt(dx * dx + dy * dy);
            var vector = pairInfo.vector = {
              x: dx,
              y: dy
            };
            var vectorNorm = pairInfo.vectorNorm = {
              x: vector.x / l,
              y: vector.y / l
            };
            var vectorNormInverse = {
              x: -vectorNorm.y,
              y: vectorNorm.x
            };
            pairInfo.nodesOverlap = !number(l) || tgtShape.checkPoint(srcOutside[0], srcOutside[1], 0, tgtW, tgtH, tgtPos.x, tgtPos.y) || srcShape.checkPoint(tgtOutside[0], tgtOutside[1], 0, srcW, srcH, srcPos.x, srcPos.y);
            pairInfo.vectorNormInverse = vectorNormInverse;
            swappedpairInfo = {
              nodesOverlap: pairInfo.nodesOverlap,
              dirCounts: pairInfo.dirCounts,
              calculatedIntersection: true,
              hasBezier: pairInfo.hasBezier,
              hasUnbundled: pairInfo.hasUnbundled,
              eles: pairInfo.eles,
              srcPos: tgtPos,
              tgtPos: srcPos,
              srcW: tgtW,
              srcH: tgtH,
              tgtW: srcW,
              tgtH: srcH,
              srcIntn: tgtIntn,
              tgtIntn: srcIntn,
              srcShape: tgtShape,
              tgtShape: srcShape,
              posPts: {
                x1: posPts.x2,
                y1: posPts.y2,
                x2: posPts.x1,
                y2: posPts.y1
              },
              intersectionPts: {
                x1: intersectionPts.x2,
                y1: intersectionPts.y2,
                x2: intersectionPts.x1,
                y2: intersectionPts.y1
              },
              vector: {
                x: -vector.x,
                y: -vector.y
              },
              vectorNorm: {
                x: -vectorNorm.x,
                y: -vectorNorm.y
              },
              vectorNormInverse: {
                x: -vectorNormInverse.x,
                y: -vectorNormInverse.y
              }
            };
          }
          var passedPairInfo = edgeIsSwapped ? swappedpairInfo : pairInfo;
          rs.nodesOverlap = passedPairInfo.nodesOverlap;
          rs.srcIntn = passedPairInfo.srcIntn;
          rs.tgtIntn = passedPairInfo.tgtIntn;
          if (hasCompounds && (src2.isParent() || src2.isChild() || tgt2.isParent() || tgt2.isChild()) && (src2.parents().anySame(tgt2) || tgt2.parents().anySame(src2) || src2.same(tgt2) && src2.isParent())) {
            _this.findCompoundLoopPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled);
          } else if (src2 === tgt2) {
            _this.findLoopPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled);
          } else if (_curveStyle === "segments") {
            _this.findSegmentsPoints(_edge, passedPairInfo);
          } else if (_curveStyle === "taxi") {
            _this.findTaxiPoints(_edge, passedPairInfo);
          } else if (_curveStyle === "straight" || !_edgeIsUnbundled && pairInfo.eles.length % 2 === 1 && _i2 === Math.floor(pairInfo.eles.length / 2)) {
            _this.findStraightEdgePoints(_edge);
          } else {
            _this.findBezierPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled, edgeIsSwapped);
          }
          _this.findEndpoints(_edge);
          _this.tryToCorrectInvalidPoints(_edge, passedPairInfo);
          _this.checkForInvalidEdgeWarning(_edge);
          _this.storeAllpts(_edge);
          _this.storeEdgeProjections(_edge);
          _this.calculateArrowAngles(_edge);
          _this.recalculateEdgeLabelProjections(_edge);
          _this.calculateLabelAngles(_edge);
        }
      };
      for (var p2 = 0; p2 < pairIds.length; p2++) {
        _loop(p2);
      }
      this.findHaystackPoints(haystackEdges);
    };
    function getPts(pts2) {
      var retPts = [];
      if (pts2 == null) {
        return;
      }
      for (var i2 = 0; i2 < pts2.length; i2 += 2) {
        var x = pts2[i2];
        var y = pts2[i2 + 1];
        retPts.push({
          x,
          y
        });
      }
      return retPts;
    }
    BRp$3.getSegmentPoints = function(edge) {
      var rs = edge[0]._private.rscratch;
      var type = rs.edgeType;
      if (type === "segments") {
        this.recalculateRenderedStyle(edge);
        return getPts(rs.segpts);
      }
    };
    BRp$3.getControlPoints = function(edge) {
      var rs = edge[0]._private.rscratch;
      var type = rs.edgeType;
      if (type === "bezier" || type === "multibezier" || type === "self" || type === "compound") {
        this.recalculateRenderedStyle(edge);
        return getPts(rs.ctrlpts);
      }
    };
    BRp$3.getEdgeMidpoint = function(edge) {
      var rs = edge[0]._private.rscratch;
      this.recalculateRenderedStyle(edge);
      return {
        x: rs.midX,
        y: rs.midY
      };
    };
    var BRp$4 = {};
    BRp$4.manualEndptToPx = function(node, prop) {
      var r = this;
      var npos = node.position();
      var w = node.outerWidth();
      var h = node.outerHeight();
      if (prop.value.length === 2) {
        var p2 = [prop.pfValue[0], prop.pfValue[1]];
        if (prop.units[0] === "%") {
          p2[0] = p2[0] * w;
        }
        if (prop.units[1] === "%") {
          p2[1] = p2[1] * h;
        }
        p2[0] += npos.x;
        p2[1] += npos.y;
        return p2;
      } else {
        var angle = prop.pfValue[0];
        angle = -Math.PI / 2 + angle;
        var l = 2 * Math.max(w, h);
        var _p = [npos.x + Math.cos(angle) * l, npos.y + Math.sin(angle) * l];
        return r.nodeShapes[this.getNodeShape(node)].intersectLine(npos.x, npos.y, w, h, _p[0], _p[1], 0);
      }
    };
    BRp$4.findEndpoints = function(edge) {
      var r = this;
      var intersect;
      var source = edge.source()[0];
      var target = edge.target()[0];
      var srcPos = source.position();
      var tgtPos = target.position();
      var tgtArShape = edge.pstyle("target-arrow-shape").value;
      var srcArShape = edge.pstyle("source-arrow-shape").value;
      var tgtDist = edge.pstyle("target-distance-from-node").pfValue;
      var srcDist = edge.pstyle("source-distance-from-node").pfValue;
      var curveStyle = edge.pstyle("curve-style").value;
      var rs = edge._private.rscratch;
      var et = rs.edgeType;
      var taxi = curveStyle === "taxi";
      var self2 = et === "self" || et === "compound";
      var bezier = et === "bezier" || et === "multibezier" || self2;
      var multi = et !== "bezier";
      var lines = et === "straight" || et === "segments";
      var segments = et === "segments";
      var hasEndpts = bezier || multi || lines;
      var overrideEndpts = self2 || taxi;
      var srcManEndpt = edge.pstyle("source-endpoint");
      var srcManEndptVal = overrideEndpts ? "outside-to-node" : srcManEndpt.value;
      var tgtManEndpt = edge.pstyle("target-endpoint");
      var tgtManEndptVal = overrideEndpts ? "outside-to-node" : tgtManEndpt.value;
      rs.srcManEndpt = srcManEndpt;
      rs.tgtManEndpt = tgtManEndpt;
      var p1;
      var p2;
      var p1_i;
      var p2_i;
      if (bezier) {
        var cpStart = [rs.ctrlpts[0], rs.ctrlpts[1]];
        var cpEnd = multi ? [rs.ctrlpts[rs.ctrlpts.length - 2], rs.ctrlpts[rs.ctrlpts.length - 1]] : cpStart;
        p1 = cpEnd;
        p2 = cpStart;
      } else if (lines) {
        var srcArrowFromPt = !segments ? [tgtPos.x, tgtPos.y] : rs.segpts.slice(0, 2);
        var tgtArrowFromPt = !segments ? [srcPos.x, srcPos.y] : rs.segpts.slice(rs.segpts.length - 2);
        p1 = tgtArrowFromPt;
        p2 = srcArrowFromPt;
      }
      if (tgtManEndptVal === "inside-to-node") {
        intersect = [tgtPos.x, tgtPos.y];
      } else if (tgtManEndpt.units) {
        intersect = this.manualEndptToPx(target, tgtManEndpt);
      } else if (tgtManEndptVal === "outside-to-line") {
        intersect = rs.tgtIntn;
      } else {
        if (tgtManEndptVal === "outside-to-node" || tgtManEndptVal === "outside-to-node-or-label") {
          p1_i = p1;
        } else if (tgtManEndptVal === "outside-to-line" || tgtManEndptVal === "outside-to-line-or-label") {
          p1_i = [srcPos.x, srcPos.y];
        }
        intersect = r.nodeShapes[this.getNodeShape(target)].intersectLine(tgtPos.x, tgtPos.y, target.outerWidth(), target.outerHeight(), p1_i[0], p1_i[1], 0);
        if (tgtManEndptVal === "outside-to-node-or-label" || tgtManEndptVal === "outside-to-line-or-label") {
          var trs = target._private.rscratch;
          var lw = trs.labelWidth;
          var lh = trs.labelHeight;
          var lx = trs.labelX;
          var ly = trs.labelY;
          var lw2 = lw / 2;
          var lh2 = lh / 2;
          var va = target.pstyle("text-valign").value;
          if (va === "top") {
            ly -= lh2;
          } else if (va === "bottom") {
            ly += lh2;
          }
          var ha = target.pstyle("text-halign").value;
          if (ha === "left") {
            lx -= lw2;
          } else if (ha === "right") {
            lx += lw2;
          }
          var labelIntersect = polygonIntersectLine(p1_i[0], p1_i[1], [lx - lw2, ly - lh2, lx + lw2, ly - lh2, lx + lw2, ly + lh2, lx - lw2, ly + lh2], tgtPos.x, tgtPos.y);
          if (labelIntersect.length > 0) {
            var refPt = srcPos;
            var intSqdist = sqdist(refPt, array2point(intersect));
            var labIntSqdist = sqdist(refPt, array2point(labelIntersect));
            var minSqDist = intSqdist;
            if (labIntSqdist < intSqdist) {
              intersect = labelIntersect;
              minSqDist = labIntSqdist;
            }
            if (labelIntersect.length > 2) {
              var labInt2SqDist = sqdist(refPt, {
                x: labelIntersect[2],
                y: labelIntersect[3]
              });
              if (labInt2SqDist < minSqDist) {
                intersect = [labelIntersect[2], labelIntersect[3]];
              }
            }
          }
        }
      }
      var arrowEnd = shortenIntersection(intersect, p1, r.arrowShapes[tgtArShape].spacing(edge) + tgtDist);
      var edgeEnd = shortenIntersection(intersect, p1, r.arrowShapes[tgtArShape].gap(edge) + tgtDist);
      rs.endX = edgeEnd[0];
      rs.endY = edgeEnd[1];
      rs.arrowEndX = arrowEnd[0];
      rs.arrowEndY = arrowEnd[1];
      if (srcManEndptVal === "inside-to-node") {
        intersect = [srcPos.x, srcPos.y];
      } else if (srcManEndpt.units) {
        intersect = this.manualEndptToPx(source, srcManEndpt);
      } else if (srcManEndptVal === "outside-to-line") {
        intersect = rs.srcIntn;
      } else {
        if (srcManEndptVal === "outside-to-node" || srcManEndptVal === "outside-to-node-or-label") {
          p2_i = p2;
        } else if (srcManEndptVal === "outside-to-line" || srcManEndptVal === "outside-to-line-or-label") {
          p2_i = [tgtPos.x, tgtPos.y];
        }
        intersect = r.nodeShapes[this.getNodeShape(source)].intersectLine(srcPos.x, srcPos.y, source.outerWidth(), source.outerHeight(), p2_i[0], p2_i[1], 0);
        if (srcManEndptVal === "outside-to-node-or-label" || srcManEndptVal === "outside-to-line-or-label") {
          var srs = source._private.rscratch;
          var _lw = srs.labelWidth;
          var _lh = srs.labelHeight;
          var _lx = srs.labelX;
          var _ly = srs.labelY;
          var _lw2 = _lw / 2;
          var _lh2 = _lh / 2;
          var _va = source.pstyle("text-valign").value;
          if (_va === "top") {
            _ly -= _lh2;
          } else if (_va === "bottom") {
            _ly += _lh2;
          }
          var _ha = source.pstyle("text-halign").value;
          if (_ha === "left") {
            _lx -= _lw2;
          } else if (_ha === "right") {
            _lx += _lw2;
          }
          var _labelIntersect = polygonIntersectLine(p2_i[0], p2_i[1], [_lx - _lw2, _ly - _lh2, _lx + _lw2, _ly - _lh2, _lx + _lw2, _ly + _lh2, _lx - _lw2, _ly + _lh2], srcPos.x, srcPos.y);
          if (_labelIntersect.length > 0) {
            var _refPt = tgtPos;
            var _intSqdist = sqdist(_refPt, array2point(intersect));
            var _labIntSqdist = sqdist(_refPt, array2point(_labelIntersect));
            var _minSqDist = _intSqdist;
            if (_labIntSqdist < _intSqdist) {
              intersect = [_labelIntersect[0], _labelIntersect[1]];
              _minSqDist = _labIntSqdist;
            }
            if (_labelIntersect.length > 2) {
              var _labInt2SqDist = sqdist(_refPt, {
                x: _labelIntersect[2],
                y: _labelIntersect[3]
              });
              if (_labInt2SqDist < _minSqDist) {
                intersect = [_labelIntersect[2], _labelIntersect[3]];
              }
            }
          }
        }
      }
      var arrowStart = shortenIntersection(intersect, p2, r.arrowShapes[srcArShape].spacing(edge) + srcDist);
      var edgeStart = shortenIntersection(intersect, p2, r.arrowShapes[srcArShape].gap(edge) + srcDist);
      rs.startX = edgeStart[0];
      rs.startY = edgeStart[1];
      rs.arrowStartX = arrowStart[0];
      rs.arrowStartY = arrowStart[1];
      if (hasEndpts) {
        if (!number(rs.startX) || !number(rs.startY) || !number(rs.endX) || !number(rs.endY)) {
          rs.badLine = true;
        } else {
          rs.badLine = false;
        }
      }
    };
    BRp$4.getSourceEndpoint = function(edge) {
      var rs = edge[0]._private.rscratch;
      this.recalculateRenderedStyle(edge);
      switch (rs.edgeType) {
        case "haystack":
          return {
            x: rs.haystackPts[0],
            y: rs.haystackPts[1]
          };
        default:
          return {
            x: rs.arrowStartX,
            y: rs.arrowStartY
          };
      }
    };
    BRp$4.getTargetEndpoint = function(edge) {
      var rs = edge[0]._private.rscratch;
      this.recalculateRenderedStyle(edge);
      switch (rs.edgeType) {
        case "haystack":
          return {
            x: rs.haystackPts[2],
            y: rs.haystackPts[3]
          };
        default:
          return {
            x: rs.arrowEndX,
            y: rs.arrowEndY
          };
      }
    };
    var BRp$5 = {};
    function pushBezierPts(r, edge, pts2) {
      var qbezierAt$1 = function qbezierAt$12(p1, p22, p3, t) {
        return qbezierAt(p1, p22, p3, t);
      };
      var _p = edge._private;
      var bpts = _p.rstyle.bezierPts;
      for (var i2 = 0; i2 < r.bezierProjPcts.length; i2++) {
        var p2 = r.bezierProjPcts[i2];
        bpts.push({
          x: qbezierAt$1(pts2[0], pts2[2], pts2[4], p2),
          y: qbezierAt$1(pts2[1], pts2[3], pts2[5], p2)
        });
      }
    }
    BRp$5.storeEdgeProjections = function(edge) {
      var _p = edge._private;
      var rs = _p.rscratch;
      var et = rs.edgeType;
      _p.rstyle.bezierPts = null;
      _p.rstyle.linePts = null;
      _p.rstyle.haystackPts = null;
      if (et === "multibezier" || et === "bezier" || et === "self" || et === "compound") {
        _p.rstyle.bezierPts = [];
        for (var i2 = 0; i2 + 5 < rs.allpts.length; i2 += 4) {
          pushBezierPts(this, edge, rs.allpts.slice(i2, i2 + 6));
        }
      } else if (et === "segments") {
        var lpts = _p.rstyle.linePts = [];
        for (var i2 = 0; i2 + 1 < rs.allpts.length; i2 += 2) {
          lpts.push({
            x: rs.allpts[i2],
            y: rs.allpts[i2 + 1]
          });
        }
      } else if (et === "haystack") {
        var hpts = rs.haystackPts;
        _p.rstyle.haystackPts = [{
          x: hpts[0],
          y: hpts[1]
        }, {
          x: hpts[2],
          y: hpts[3]
        }];
      }
      _p.rstyle.arrowWidth = this.getArrowWidth(edge.pstyle("width").pfValue, edge.pstyle("arrow-scale").value) * this.arrowShapeWidth;
    };
    BRp$5.recalculateEdgeProjections = function(edges) {
      this.findEdgeControlPoints(edges);
    };
    var BRp$6 = {};
    BRp$6.recalculateNodeLabelProjection = function(node) {
      var content = node.pstyle("label").strValue;
      if (emptyString(content)) {
        return;
      }
      var textX, textY;
      var _p = node._private;
      var nodeWidth = node.width();
      var nodeHeight = node.height();
      var padding = node.padding();
      var nodePos = node.position();
      var textHalign = node.pstyle("text-halign").strValue;
      var textValign = node.pstyle("text-valign").strValue;
      var rs = _p.rscratch;
      var rstyle = _p.rstyle;
      switch (textHalign) {
        case "left":
          textX = nodePos.x - nodeWidth / 2 - padding;
          break;
        case "right":
          textX = nodePos.x + nodeWidth / 2 + padding;
          break;
        default:
          textX = nodePos.x;
      }
      switch (textValign) {
        case "top":
          textY = nodePos.y - nodeHeight / 2 - padding;
          break;
        case "bottom":
          textY = nodePos.y + nodeHeight / 2 + padding;
          break;
        default:
          textY = nodePos.y;
      }
      rs.labelX = textX;
      rs.labelY = textY;
      rstyle.labelX = textX;
      rstyle.labelY = textY;
      this.applyLabelDimensions(node);
    };
    var lineAngleFromDelta = function lineAngleFromDelta2(dx, dy) {
      var angle = Math.atan(dy / dx);
      if (dx === 0 && angle < 0) {
        angle = angle * -1;
      }
      return angle;
    };
    var lineAngle = function lineAngle2(p0, p1) {
      var dx = p1.x - p0.x;
      var dy = p1.y - p0.y;
      return lineAngleFromDelta(dx, dy);
    };
    var bezierAngle = function bezierAngle2(p0, p1, p2, t) {
      var t0 = bound(0, t - 1e-3, 1);
      var t1 = bound(0, t + 1e-3, 1);
      var lp0 = qbezierPtAt(p0, p1, p2, t0);
      var lp1 = qbezierPtAt(p0, p1, p2, t1);
      return lineAngle(lp0, lp1);
    };
    BRp$6.recalculateEdgeLabelProjections = function(edge) {
      var p2;
      var _p = edge._private;
      var rs = _p.rscratch;
      var r = this;
      var content = {
        mid: edge.pstyle("label").strValue,
        source: edge.pstyle("source-label").strValue,
        target: edge.pstyle("target-label").strValue
      };
      if (content.mid || content.source || content.target)
        ;
      else {
        return;
      }
      p2 = {
        x: rs.midX,
        y: rs.midY
      };
      var setRs = function setRs2(propName, prefix, value) {
        setPrefixedProperty(_p.rscratch, propName, prefix, value);
        setPrefixedProperty(_p.rstyle, propName, prefix, value);
      };
      setRs("labelX", null, p2.x);
      setRs("labelY", null, p2.y);
      var midAngle = lineAngleFromDelta(rs.midDispX, rs.midDispY);
      setRs("labelAutoAngle", null, midAngle);
      var createControlPointInfo = function createControlPointInfo2() {
        if (createControlPointInfo2.cache) {
          return createControlPointInfo2.cache;
        }
        var ctrlpts = [];
        for (var i2 = 0; i2 + 5 < rs.allpts.length; i2 += 4) {
          var p0 = {
            x: rs.allpts[i2],
            y: rs.allpts[i2 + 1]
          };
          var p1 = {
            x: rs.allpts[i2 + 2],
            y: rs.allpts[i2 + 3]
          };
          var p22 = {
            x: rs.allpts[i2 + 4],
            y: rs.allpts[i2 + 5]
          };
          ctrlpts.push({
            p0,
            p1,
            p2: p22,
            startDist: 0,
            length: 0,
            segments: []
          });
        }
        var bpts = _p.rstyle.bezierPts;
        var nProjs = r.bezierProjPcts.length;
        function addSegment(cp2, p02, p12, t0, t1) {
          var length = dist(p02, p12);
          var prevSegment = cp2.segments[cp2.segments.length - 1];
          var segment = {
            p0: p02,
            p1: p12,
            t0,
            t1,
            startDist: prevSegment ? prevSegment.startDist + prevSegment.length : 0,
            length
          };
          cp2.segments.push(segment);
          cp2.length += length;
        }
        for (var _i = 0; _i < ctrlpts.length; _i++) {
          var cp = ctrlpts[_i];
          var prevCp = ctrlpts[_i - 1];
          if (prevCp) {
            cp.startDist = prevCp.startDist + prevCp.length;
          }
          addSegment(cp, cp.p0, bpts[_i * nProjs], 0, r.bezierProjPcts[0]);
          for (var j = 0; j < nProjs - 1; j++) {
            addSegment(cp, bpts[_i * nProjs + j], bpts[_i * nProjs + j + 1], r.bezierProjPcts[j], r.bezierProjPcts[j + 1]);
          }
          addSegment(cp, bpts[_i * nProjs + nProjs - 1], cp.p2, r.bezierProjPcts[nProjs - 1], 1);
        }
        return createControlPointInfo2.cache = ctrlpts;
      };
      var calculateEndProjection = function calculateEndProjection2(prefix) {
        var angle;
        var isSrc = prefix === "source";
        if (!content[prefix]) {
          return;
        }
        var offset = edge.pstyle(prefix + "-text-offset").pfValue;
        switch (rs.edgeType) {
          case "self":
          case "compound":
          case "bezier":
          case "multibezier": {
            var cps = createControlPointInfo();
            var selected;
            var startDist = 0;
            var totalDist = 0;
            for (var i2 = 0; i2 < cps.length; i2++) {
              var _cp = cps[isSrc ? i2 : cps.length - 1 - i2];
              for (var j = 0; j < _cp.segments.length; j++) {
                var _seg = _cp.segments[isSrc ? j : _cp.segments.length - 1 - j];
                var lastSeg = i2 === cps.length - 1 && j === _cp.segments.length - 1;
                startDist = totalDist;
                totalDist += _seg.length;
                if (totalDist >= offset || lastSeg) {
                  selected = {
                    cp: _cp,
                    segment: _seg
                  };
                  break;
                }
              }
              if (selected) {
                break;
              }
            }
            var cp = selected.cp;
            var seg = selected.segment;
            var tSegment = (offset - startDist) / seg.length;
            var segDt = seg.t1 - seg.t0;
            var t = isSrc ? seg.t0 + segDt * tSegment : seg.t1 - segDt * tSegment;
            t = bound(0, t, 1);
            p2 = qbezierPtAt(cp.p0, cp.p1, cp.p2, t);
            angle = bezierAngle(cp.p0, cp.p1, cp.p2, t);
            break;
          }
          case "straight":
          case "segments":
          case "haystack": {
            var d = 0, di, d0;
            var p0, p1;
            var l = rs.allpts.length;
            for (var _i2 = 0; _i2 + 3 < l; _i2 += 2) {
              if (isSrc) {
                p0 = {
                  x: rs.allpts[_i2],
                  y: rs.allpts[_i2 + 1]
                };
                p1 = {
                  x: rs.allpts[_i2 + 2],
                  y: rs.allpts[_i2 + 3]
                };
              } else {
                p0 = {
                  x: rs.allpts[l - 2 - _i2],
                  y: rs.allpts[l - 1 - _i2]
                };
                p1 = {
                  x: rs.allpts[l - 4 - _i2],
                  y: rs.allpts[l - 3 - _i2]
                };
              }
              di = dist(p0, p1);
              d0 = d;
              d += di;
              if (d >= offset) {
                break;
              }
            }
            var pD = offset - d0;
            var _t = pD / di;
            _t = bound(0, _t, 1);
            p2 = lineAt(p0, p1, _t);
            angle = lineAngle(p0, p1);
            break;
          }
        }
        setRs("labelX", prefix, p2.x);
        setRs("labelY", prefix, p2.y);
        setRs("labelAutoAngle", prefix, angle);
      };
      calculateEndProjection("source");
      calculateEndProjection("target");
      this.applyLabelDimensions(edge);
    };
    BRp$6.applyLabelDimensions = function(ele) {
      this.applyPrefixedLabelDimensions(ele);
      if (ele.isEdge()) {
        this.applyPrefixedLabelDimensions(ele, "source");
        this.applyPrefixedLabelDimensions(ele, "target");
      }
    };
    BRp$6.applyPrefixedLabelDimensions = function(ele, prefix) {
      var _p = ele._private;
      var text = this.getLabelText(ele, prefix);
      var labelDims = this.calculateLabelDimensions(ele, text);
      var lineHeight = ele.pstyle("line-height").pfValue;
      var textWrap = ele.pstyle("text-wrap").strValue;
      var lines = getPrefixedProperty(_p.rscratch, "labelWrapCachedLines", prefix) || [];
      var numLines = textWrap !== "wrap" ? 1 : Math.max(lines.length, 1);
      var normPerLineHeight = labelDims.height / numLines;
      var labelLineHeight = normPerLineHeight * lineHeight;
      var width = labelDims.width;
      var height = labelDims.height + (numLines - 1) * (lineHeight - 1) * normPerLineHeight;
      setPrefixedProperty(_p.rstyle, "labelWidth", prefix, width);
      setPrefixedProperty(_p.rscratch, "labelWidth", prefix, width);
      setPrefixedProperty(_p.rstyle, "labelHeight", prefix, height);
      setPrefixedProperty(_p.rscratch, "labelHeight", prefix, height);
      setPrefixedProperty(_p.rscratch, "labelLineHeight", prefix, labelLineHeight);
    };
    BRp$6.getLabelText = function(ele, prefix) {
      var _p = ele._private;
      var pfd = prefix ? prefix + "-" : "";
      var text = ele.pstyle(pfd + "label").strValue;
      var textTransform = ele.pstyle("text-transform").value;
      var rscratch = function rscratch2(propName, value) {
        if (value) {
          setPrefixedProperty(_p.rscratch, propName, prefix, value);
          return value;
        } else {
          return getPrefixedProperty(_p.rscratch, propName, prefix);
        }
      };
      if (!text) {
        return "";
      }
      if (textTransform == "none")
        ;
      else if (textTransform == "uppercase") {
        text = text.toUpperCase();
      } else if (textTransform == "lowercase") {
        text = text.toLowerCase();
      }
      var wrapStyle = ele.pstyle("text-wrap").value;
      if (wrapStyle === "wrap") {
        var labelKey = rscratch("labelKey");
        if (labelKey != null && rscratch("labelWrapKey") === labelKey) {
          return rscratch("labelWrapCachedText");
        }
        var zwsp = "\u200B";
        var lines = text.split("\n");
        var maxW = ele.pstyle("text-max-width").pfValue;
        var overflow = ele.pstyle("text-overflow-wrap").value;
        var overflowAny = overflow === "anywhere";
        var wrappedLines = [];
        var wordsRegex = /[\s\u200b]+/;
        var wordSeparator = overflowAny ? "" : " ";
        for (var l = 0; l < lines.length; l++) {
          var line = lines[l];
          var lineDims = this.calculateLabelDimensions(ele, line);
          var lineW = lineDims.width;
          if (overflowAny) {
            var processedLine = line.split("").join(zwsp);
            line = processedLine;
          }
          if (lineW > maxW) {
            var words = line.split(wordsRegex);
            var subline = "";
            for (var w = 0; w < words.length; w++) {
              var word = words[w];
              var testLine = subline.length === 0 ? word : subline + wordSeparator + word;
              var testDims = this.calculateLabelDimensions(ele, testLine);
              var testW = testDims.width;
              if (testW <= maxW) {
                subline += word + wordSeparator;
              } else {
                if (subline) {
                  wrappedLines.push(subline);
                }
                subline = word + wordSeparator;
              }
            }
            if (!subline.match(/^[\s\u200b]+$/)) {
              wrappedLines.push(subline);
            }
          } else {
            wrappedLines.push(line);
          }
        }
        rscratch("labelWrapCachedLines", wrappedLines);
        text = rscratch("labelWrapCachedText", wrappedLines.join("\n"));
        rscratch("labelWrapKey", labelKey);
      } else if (wrapStyle === "ellipsis") {
        var _maxW = ele.pstyle("text-max-width").pfValue;
        var ellipsized = "";
        var ellipsis = "\u2026";
        var incLastCh = false;
        if (this.calculateLabelDimensions(ele, text).width < _maxW) {
          return text;
        }
        for (var i2 = 0; i2 < text.length; i2++) {
          var widthWithNextCh = this.calculateLabelDimensions(ele, ellipsized + text[i2] + ellipsis).width;
          if (widthWithNextCh > _maxW) {
            break;
          }
          ellipsized += text[i2];
          if (i2 === text.length - 1) {
            incLastCh = true;
          }
        }
        if (!incLastCh) {
          ellipsized += ellipsis;
        }
        return ellipsized;
      }
      return text;
    };
    BRp$6.getLabelJustification = function(ele) {
      var justification = ele.pstyle("text-justification").strValue;
      var textHalign = ele.pstyle("text-halign").strValue;
      if (justification === "auto") {
        if (ele.isNode()) {
          switch (textHalign) {
            case "left":
              return "right";
            case "right":
              return "left";
            default:
              return "center";
          }
        } else {
          return "center";
        }
      } else {
        return justification;
      }
    };
    BRp$6.calculateLabelDimensions = function(ele, text) {
      var r = this;
      var cacheKey = hashString(text, ele._private.labelDimsKey);
      var cache2 = r.labelDimCache || (r.labelDimCache = []);
      var existingVal = cache2[cacheKey];
      if (existingVal != null) {
        return existingVal;
      }
      var padding = 0;
      var fStyle = ele.pstyle("font-style").strValue;
      var size = ele.pstyle("font-size").pfValue;
      var family = ele.pstyle("font-family").strValue;
      var weight = ele.pstyle("font-weight").strValue;
      var canvas = this.labelCalcCanvas;
      var c2d = this.labelCalcCanvasContext;
      if (!canvas) {
        canvas = this.labelCalcCanvas = document.createElement("canvas");
        c2d = this.labelCalcCanvasContext = canvas.getContext("2d");
        var ds = canvas.style;
        ds.position = "absolute";
        ds.left = "-9999px";
        ds.top = "-9999px";
        ds.zIndex = "-1";
        ds.visibility = "hidden";
        ds.pointerEvents = "none";
      }
      c2d.font = "".concat(fStyle, " ").concat(weight, " ").concat(size, "px ").concat(family);
      var width = 0;
      var height = 0;
      var lines = text.split("\n");
      for (var i2 = 0; i2 < lines.length; i2++) {
        var line = lines[i2];
        var metrics = c2d.measureText(line);
        var w = Math.ceil(metrics.width);
        var h = size;
        width = Math.max(w, width);
        height += h;
      }
      width += padding;
      height += padding;
      return cache2[cacheKey] = {
        width,
        height
      };
    };
    BRp$6.calculateLabelAngle = function(ele, prefix) {
      var _p = ele._private;
      var rs = _p.rscratch;
      var isEdge = ele.isEdge();
      var prefixDash = prefix ? prefix + "-" : "";
      var rot = ele.pstyle(prefixDash + "text-rotation");
      var rotStr = rot.strValue;
      if (rotStr === "none") {
        return 0;
      } else if (isEdge && rotStr === "autorotate") {
        return rs.labelAutoAngle;
      } else if (rotStr === "autorotate") {
        return 0;
      } else {
        return rot.pfValue;
      }
    };
    BRp$6.calculateLabelAngles = function(ele) {
      var r = this;
      var isEdge = ele.isEdge();
      var _p = ele._private;
      var rs = _p.rscratch;
      rs.labelAngle = r.calculateLabelAngle(ele);
      if (isEdge) {
        rs.sourceLabelAngle = r.calculateLabelAngle(ele, "source");
        rs.targetLabelAngle = r.calculateLabelAngle(ele, "target");
      }
    };
    var BRp$7 = {};
    var TOO_SMALL_CUT_RECT = 28;
    var warnedCutRect = false;
    BRp$7.getNodeShape = function(node) {
      var r = this;
      var shape = node.pstyle("shape").value;
      if (shape === "cutrectangle" && (node.width() < TOO_SMALL_CUT_RECT || node.height() < TOO_SMALL_CUT_RECT)) {
        if (!warnedCutRect) {
          warn("The `cutrectangle` node shape can not be used at small sizes so `rectangle` is used instead");
          warnedCutRect = true;
        }
        return "rectangle";
      }
      if (node.isParent()) {
        if (shape === "rectangle" || shape === "roundrectangle" || shape === "round-rectangle" || shape === "cutrectangle" || shape === "cut-rectangle" || shape === "barrel") {
          return shape;
        } else {
          return "rectangle";
        }
      }
      if (shape === "polygon") {
        var points = node.pstyle("shape-polygon-points").value;
        return r.nodeShapes.makePolygon(points).name;
      }
      return shape;
    };
    var BRp$8 = {};
    BRp$8.registerCalculationListeners = function() {
      var cy = this.cy;
      var elesToUpdate = cy.collection();
      var r = this;
      var enqueue = function enqueue2(eles) {
        var dirtyStyleCaches = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
        elesToUpdate.merge(eles);
        if (dirtyStyleCaches) {
          for (var i2 = 0; i2 < eles.length; i2++) {
            var ele = eles[i2];
            var _p = ele._private;
            var rstyle = _p.rstyle;
            rstyle.clean = false;
            rstyle.cleanConnected = false;
          }
        }
      };
      r.binder(cy).on("bounds.* dirty.*", function onDirtyBounds(e) {
        var ele = e.target;
        enqueue(ele);
      }).on("style.* background.*", function onDirtyStyle(e) {
        var ele = e.target;
        enqueue(ele, false);
      });
      var updateEleCalcs = function updateEleCalcs2(willDraw) {
        if (willDraw) {
          var fns = r.onUpdateEleCalcsFns;
          elesToUpdate.cleanStyle();
          for (var i2 = 0; i2 < elesToUpdate.length; i2++) {
            var ele = elesToUpdate[i2];
            var rstyle = ele._private.rstyle;
            if (ele.isNode() && !rstyle.cleanConnected) {
              enqueue(ele.connectedEdges());
              rstyle.cleanConnected = true;
            }
          }
          if (fns) {
            for (var _i = 0; _i < fns.length; _i++) {
              var fn2 = fns[_i];
              fn2(willDraw, elesToUpdate);
            }
          }
          r.recalculateRenderedStyle(elesToUpdate);
          elesToUpdate = cy.collection();
        }
      };
      r.flushRenderedStyleQueue = function() {
        updateEleCalcs(true);
      };
      r.beforeRender(updateEleCalcs, r.beforeRenderPriorities.eleCalcs);
    };
    BRp$8.onUpdateEleCalcs = function(fn2) {
      var fns = this.onUpdateEleCalcsFns = this.onUpdateEleCalcsFns || [];
      fns.push(fn2);
    };
    BRp$8.recalculateRenderedStyle = function(eles, useCache) {
      var isCleanConnected = function isCleanConnected2(ele2) {
        return ele2._private.rstyle.cleanConnected;
      };
      var edges = [];
      var nodes = [];
      if (this.destroyed) {
        return;
      }
      if (useCache === void 0) {
        useCache = true;
      }
      for (var i2 = 0; i2 < eles.length; i2++) {
        var ele = eles[i2];
        var _p = ele._private;
        var rstyle = _p.rstyle;
        if (ele.isEdge() && (!isCleanConnected(ele.source()) || !isCleanConnected(ele.target()))) {
          rstyle.clean = false;
        }
        if (useCache && rstyle.clean || ele.removed()) {
          continue;
        }
        if (ele.pstyle("display").value === "none") {
          continue;
        }
        if (_p.group === "nodes") {
          nodes.push(ele);
        } else {
          edges.push(ele);
        }
        rstyle.clean = true;
      }
      for (var _i2 = 0; _i2 < nodes.length; _i2++) {
        var _ele = nodes[_i2];
        var _p2 = _ele._private;
        var _rstyle = _p2.rstyle;
        var pos = _ele.position();
        this.recalculateNodeLabelProjection(_ele);
        _rstyle.nodeX = pos.x;
        _rstyle.nodeY = pos.y;
        _rstyle.nodeW = _ele.pstyle("width").pfValue;
        _rstyle.nodeH = _ele.pstyle("height").pfValue;
      }
      this.recalculateEdgeProjections(edges);
      for (var _i3 = 0; _i3 < edges.length; _i3++) {
        var _ele2 = edges[_i3];
        var _p3 = _ele2._private;
        var _rstyle2 = _p3.rstyle;
        var rs = _p3.rscratch;
        _rstyle2.srcX = rs.arrowStartX;
        _rstyle2.srcY = rs.arrowStartY;
        _rstyle2.tgtX = rs.arrowEndX;
        _rstyle2.tgtY = rs.arrowEndY;
        _rstyle2.midX = rs.midX;
        _rstyle2.midY = rs.midY;
        _rstyle2.labelAngle = rs.labelAngle;
        _rstyle2.sourceLabelAngle = rs.sourceLabelAngle;
        _rstyle2.targetLabelAngle = rs.targetLabelAngle;
      }
    };
    var BRp$9 = {};
    BRp$9.updateCachedGrabbedEles = function() {
      var eles = this.cachedZSortedEles;
      if (!eles) {
        return;
      }
      eles.drag = [];
      eles.nondrag = [];
      var grabTargets = [];
      for (var i2 = 0; i2 < eles.length; i2++) {
        var ele = eles[i2];
        var rs = ele._private.rscratch;
        if (ele.grabbed() && !ele.isParent()) {
          grabTargets.push(ele);
        } else if (rs.inDragLayer) {
          eles.drag.push(ele);
        } else {
          eles.nondrag.push(ele);
        }
      }
      for (var i2 = 0; i2 < grabTargets.length; i2++) {
        var ele = grabTargets[i2];
        eles.drag.push(ele);
      }
    };
    BRp$9.invalidateCachedZSortedEles = function() {
      this.cachedZSortedEles = null;
    };
    BRp$9.getCachedZSortedEles = function(forceRecalc) {
      if (forceRecalc || !this.cachedZSortedEles) {
        var eles = this.cy.mutableElements().toArray();
        eles.sort(zIndexSort);
        eles.interactive = eles.filter(function(ele) {
          return ele.interactive();
        });
        this.cachedZSortedEles = eles;
        this.updateCachedGrabbedEles();
      } else {
        eles = this.cachedZSortedEles;
      }
      return eles;
    };
    var BRp$a = {};
    [BRp$1, BRp$2, BRp$3, BRp$4, BRp$5, BRp$6, BRp$7, BRp$8, BRp$9].forEach(function(props) {
      extend(BRp$a, props);
    });
    var BRp$b = {};
    BRp$b.getCachedImage = function(url, crossOrigin, onLoad) {
      var r = this;
      var imageCache = r.imageCache = r.imageCache || {};
      var cache2 = imageCache[url];
      if (cache2) {
        if (!cache2.image.complete) {
          cache2.image.addEventListener("load", onLoad);
        }
        return cache2.image;
      } else {
        cache2 = imageCache[url] = imageCache[url] || {};
        var image = cache2.image = new Image();
        image.addEventListener("load", onLoad);
        image.addEventListener("error", function() {
          image.error = true;
        });
        var dataUriPrefix = "data:";
        var isDataUri = url.substring(0, dataUriPrefix.length).toLowerCase() === dataUriPrefix;
        if (!isDataUri) {
          image.crossOrigin = crossOrigin;
        }
        image.src = url;
        return image;
      }
    };
    var BRp$c = {};
    BRp$c.registerBinding = function(target, event2, handler, useCapture) {
      var args = Array.prototype.slice.apply(arguments, [1]);
      var b = this.binder(target);
      return b.on.apply(b, args);
    };
    BRp$c.binder = function(tgt) {
      var r = this;
      var tgtIsDom = tgt === window || tgt === document || tgt === document.body || domElement(tgt);
      if (r.supportsPassiveEvents == null) {
        var supportsPassive = false;
        try {
          var opts = Object.defineProperty({}, "passive", {
            get: function get() {
              supportsPassive = true;
              return true;
            }
          });
          window.addEventListener("test", null, opts);
        } catch (err) {
        }
        r.supportsPassiveEvents = supportsPassive;
      }
      var on = function on2(event2, handler, useCapture) {
        var args = Array.prototype.slice.call(arguments);
        if (tgtIsDom && r.supportsPassiveEvents) {
          args[2] = {
            capture: useCapture != null ? useCapture : false,
            passive: false,
            once: false
          };
        }
        r.bindings.push({
          target: tgt,
          args
        });
        (tgt.addEventListener || tgt.on).apply(tgt, args);
        return this;
      };
      return {
        on,
        addEventListener: on,
        addListener: on,
        bind: on
      };
    };
    BRp$c.nodeIsDraggable = function(node) {
      return node && node.isNode() && !node.locked() && node.grabbable();
    };
    BRp$c.nodeIsGrabbable = function(node) {
      return this.nodeIsDraggable(node) && node.interactive();
    };
    BRp$c.load = function() {
      var r = this;
      var isSelected = function isSelected2(ele) {
        return ele.selected();
      };
      var triggerEvents = function triggerEvents2(target, names, e, position2) {
        if (target == null) {
          target = r.cy;
        }
        for (var i2 = 0; i2 < names.length; i2++) {
          var name = names[i2];
          target.emit({
            originalEvent: e,
            type: name,
            position: position2
          });
        }
      };
      var isMultSelKeyDown = function isMultSelKeyDown2(e) {
        return e.shiftKey || e.metaKey || e.ctrlKey;
      };
      var allowPanningPassthrough = function allowPanningPassthrough2(down, downs) {
        var allowPassthrough = true;
        if (r.cy.hasCompoundNodes() && down && down.pannable()) {
          for (var i2 = 0; downs && i2 < downs.length; i2++) {
            var down = downs[i2];
            if (down.isNode() && down.isParent() && !down.pannable()) {
              allowPassthrough = false;
              break;
            }
          }
        } else {
          allowPassthrough = true;
        }
        return allowPassthrough;
      };
      var setGrabbed = function setGrabbed2(ele) {
        ele[0]._private.grabbed = true;
      };
      var setFreed = function setFreed2(ele) {
        ele[0]._private.grabbed = false;
      };
      var setInDragLayer = function setInDragLayer2(ele) {
        ele[0]._private.rscratch.inDragLayer = true;
      };
      var setOutDragLayer = function setOutDragLayer2(ele) {
        ele[0]._private.rscratch.inDragLayer = false;
      };
      var setGrabTarget = function setGrabTarget2(ele) {
        ele[0]._private.rscratch.isGrabTarget = true;
      };
      var removeGrabTarget = function removeGrabTarget2(ele) {
        ele[0]._private.rscratch.isGrabTarget = false;
      };
      var addToDragList = function addToDragList2(ele, opts) {
        var list = opts.addToList;
        var listHasEle = list.has(ele);
        if (!listHasEle) {
          list.merge(ele);
          setGrabbed(ele);
        }
      };
      var addDescendantsToDrag = function addDescendantsToDrag2(node, opts) {
        if (!node.cy().hasCompoundNodes()) {
          return;
        }
        if (opts.inDragLayer == null && opts.addToList == null) {
          return;
        }
        var innerNodes = node.descendants();
        if (opts.inDragLayer) {
          innerNodes.forEach(setInDragLayer);
          innerNodes.connectedEdges().forEach(setInDragLayer);
        }
        if (opts.addToList) {
          opts.addToList.unmerge(innerNodes);
        }
      };
      var addNodesToDrag = function addNodesToDrag2(nodes, opts) {
        opts = opts || {};
        var hasCompoundNodes = nodes.cy().hasCompoundNodes();
        if (opts.inDragLayer) {
          nodes.forEach(setInDragLayer);
          nodes.neighborhood().stdFilter(function(ele) {
            return !hasCompoundNodes || ele.isEdge();
          }).forEach(setInDragLayer);
        }
        if (opts.addToList) {
          nodes.forEach(function(ele) {
            addToDragList(ele, opts);
          });
        }
        addDescendantsToDrag(nodes, opts);
        updateAncestorsInDragLayer(nodes, {
          inDragLayer: opts.inDragLayer
        });
        r.updateCachedGrabbedEles();
      };
      var addNodeToDrag = addNodesToDrag;
      var freeDraggedElements = function freeDraggedElements2(grabbedEles) {
        if (!grabbedEles) {
          return;
        }
        r.getCachedZSortedEles().forEach(function(ele) {
          setFreed(ele);
          setOutDragLayer(ele);
          removeGrabTarget(ele);
        });
        r.updateCachedGrabbedEles();
      };
      var updateAncestorsInDragLayer = function updateAncestorsInDragLayer2(node, opts) {
        if (opts.inDragLayer == null && opts.addToList == null) {
          return;
        }
        if (!node.cy().hasCompoundNodes()) {
          return;
        }
        var parent = node.ancestors().orphans();
        if (parent.same(node)) {
          return;
        }
        var nodes = parent.descendants().spawnSelf().merge(parent).unmerge(node).unmerge(node.descendants());
        var edges = nodes.connectedEdges();
        if (opts.inDragLayer) {
          edges.forEach(setInDragLayer);
          nodes.forEach(setInDragLayer);
        }
        if (opts.addToList) {
          nodes.forEach(function(ele) {
            addToDragList(ele, opts);
          });
        }
      };
      var blurActiveDomElement = function blurActiveDomElement2() {
        if (document.activeElement != null && document.activeElement.blur != null) {
          document.activeElement.blur();
        }
      };
      var haveMutationsApi = typeof MutationObserver !== "undefined";
      var haveResizeObserverApi = typeof ResizeObserver !== "undefined";
      if (haveMutationsApi) {
        r.removeObserver = new MutationObserver(function(mutns) {
          for (var i2 = 0; i2 < mutns.length; i2++) {
            var mutn = mutns[i2];
            var rNodes = mutn.removedNodes;
            if (rNodes) {
              for (var j = 0; j < rNodes.length; j++) {
                var rNode = rNodes[j];
                if (rNode === r.container) {
                  r.destroy();
                  break;
                }
              }
            }
          }
        });
        if (r.container.parentNode) {
          r.removeObserver.observe(r.container.parentNode, {
            childList: true
          });
        }
      } else {
        r.registerBinding(r.container, "DOMNodeRemoved", function(e) {
          r.destroy();
        });
      }
      var onResize = util(function() {
        r.cy.resize();
      }, 100);
      if (haveMutationsApi) {
        r.styleObserver = new MutationObserver(onResize);
        r.styleObserver.observe(r.container, {
          attributes: true
        });
      }
      r.registerBinding(window, "resize", onResize);
      if (haveResizeObserverApi) {
        r.resizeObserver = new ResizeObserver(onResize);
        r.resizeObserver.observe(r.container);
      }
      var forEachUp = function forEachUp2(domEle, fn2) {
        while (domEle != null) {
          fn2(domEle);
          domEle = domEle.parentNode;
        }
      };
      var invalidateCoords = function invalidateCoords2() {
        r.invalidateContainerClientCoordsCache();
      };
      forEachUp(r.container, function(domEle) {
        r.registerBinding(domEle, "transitionend", invalidateCoords);
        r.registerBinding(domEle, "animationend", invalidateCoords);
        r.registerBinding(domEle, "scroll", invalidateCoords);
      });
      r.registerBinding(r.container, "contextmenu", function(e) {
        e.preventDefault();
      });
      var inBoxSelection = function inBoxSelection2() {
        return r.selection[4] !== 0;
      };
      var eventInContainer = function eventInContainer2(e) {
        var containerPageCoords = r.findContainerClientCoords();
        var x = containerPageCoords[0];
        var y = containerPageCoords[1];
        var width = containerPageCoords[2];
        var height = containerPageCoords[3];
        var positions = e.touches ? e.touches : [e];
        var atLeastOnePosInside = false;
        for (var i2 = 0; i2 < positions.length; i2++) {
          var p2 = positions[i2];
          if (x <= p2.clientX && p2.clientX <= x + width && y <= p2.clientY && p2.clientY <= y + height) {
            atLeastOnePosInside = true;
            break;
          }
        }
        if (!atLeastOnePosInside) {
          return false;
        }
        var container = r.container;
        var target = e.target;
        var tParent = target.parentNode;
        var containerIsTarget = false;
        while (tParent) {
          if (tParent === container) {
            containerIsTarget = true;
            break;
          }
          tParent = tParent.parentNode;
        }
        if (!containerIsTarget) {
          return false;
        }
        return true;
      };
      r.registerBinding(r.container, "mousedown", function mousedownHandler(e) {
        if (!eventInContainer(e)) {
          return;
        }
        e.preventDefault();
        blurActiveDomElement();
        r.hoverData.capture = true;
        r.hoverData.which = e.which;
        var cy = r.cy;
        var gpos = [e.clientX, e.clientY];
        var pos = r.projectIntoViewport(gpos[0], gpos[1]);
        var select = r.selection;
        var nears = r.findNearestElements(pos[0], pos[1], true, false);
        var near = nears[0];
        var draggedElements = r.dragData.possibleDragElements;
        r.hoverData.mdownPos = pos;
        r.hoverData.mdownGPos = gpos;
        var checkForTaphold = function checkForTaphold2() {
          r.hoverData.tapholdCancelled = false;
          clearTimeout(r.hoverData.tapholdTimeout);
          r.hoverData.tapholdTimeout = setTimeout(function() {
            if (r.hoverData.tapholdCancelled) {
              return;
            } else {
              var ele = r.hoverData.down;
              if (ele) {
                ele.emit({
                  originalEvent: e,
                  type: "taphold",
                  position: {
                    x: pos[0],
                    y: pos[1]
                  }
                });
              } else {
                cy.emit({
                  originalEvent: e,
                  type: "taphold",
                  position: {
                    x: pos[0],
                    y: pos[1]
                  }
                });
              }
            }
          }, r.tapholdDuration);
        };
        if (e.which == 3) {
          r.hoverData.cxtStarted = true;
          var cxtEvt = {
            originalEvent: e,
            type: "cxttapstart",
            position: {
              x: pos[0],
              y: pos[1]
            }
          };
          if (near) {
            near.activate();
            near.emit(cxtEvt);
            r.hoverData.down = near;
          } else {
            cy.emit(cxtEvt);
          }
          r.hoverData.downTime = new Date().getTime();
          r.hoverData.cxtDragged = false;
        } else if (e.which == 1) {
          if (near) {
            near.activate();
          }
          {
            if (near != null) {
              if (r.nodeIsGrabbable(near)) {
                var makeEvent = function makeEvent2(type) {
                  return {
                    originalEvent: e,
                    type,
                    position: {
                      x: pos[0],
                      y: pos[1]
                    }
                  };
                };
                var triggerGrab = function triggerGrab2(ele) {
                  ele.emit(makeEvent("grab"));
                };
                setGrabTarget(near);
                if (!near.selected()) {
                  draggedElements = r.dragData.possibleDragElements = cy.collection();
                  addNodeToDrag(near, {
                    addToList: draggedElements
                  });
                  near.emit(makeEvent("grabon")).emit(makeEvent("grab"));
                } else {
                  draggedElements = r.dragData.possibleDragElements = cy.collection();
                  var selectedNodes = cy.$(function(ele) {
                    return ele.isNode() && ele.selected() && r.nodeIsGrabbable(ele);
                  });
                  addNodesToDrag(selectedNodes, {
                    addToList: draggedElements
                  });
                  near.emit(makeEvent("grabon"));
                  selectedNodes.forEach(triggerGrab);
                }
                r.redrawHint("eles", true);
                r.redrawHint("drag", true);
              }
            }
            r.hoverData.down = near;
            r.hoverData.downs = nears;
            r.hoverData.downTime = new Date().getTime();
          }
          triggerEvents(near, ["mousedown", "tapstart", "vmousedown"], e, {
            x: pos[0],
            y: pos[1]
          });
          if (near == null) {
            select[4] = 1;
            r.data.bgActivePosistion = {
              x: pos[0],
              y: pos[1]
            };
            r.redrawHint("select", true);
            r.redraw();
          } else if (near.pannable()) {
            select[4] = 1;
          }
          checkForTaphold();
        }
        select[0] = select[2] = pos[0];
        select[1] = select[3] = pos[1];
      }, false);
      r.registerBinding(window, "mousemove", function mousemoveHandler(e) {
        var capture = r.hoverData.capture;
        if (!capture && !eventInContainer(e)) {
          return;
        }
        var preventDefault = false;
        var cy = r.cy;
        var zoom = cy.zoom();
        var gpos = [e.clientX, e.clientY];
        var pos = r.projectIntoViewport(gpos[0], gpos[1]);
        var mdownPos = r.hoverData.mdownPos;
        var mdownGPos = r.hoverData.mdownGPos;
        var select = r.selection;
        var near = null;
        if (!r.hoverData.draggingEles && !r.hoverData.dragging && !r.hoverData.selecting) {
          near = r.findNearestElement(pos[0], pos[1], true, false);
        }
        var last = r.hoverData.last;
        var down = r.hoverData.down;
        var disp = [pos[0] - select[2], pos[1] - select[3]];
        var draggedElements = r.dragData.possibleDragElements;
        var isOverThresholdDrag;
        if (mdownGPos) {
          var dx = gpos[0] - mdownGPos[0];
          var dx2 = dx * dx;
          var dy = gpos[1] - mdownGPos[1];
          var dy2 = dy * dy;
          var dist2 = dx2 + dy2;
          r.hoverData.isOverThresholdDrag = isOverThresholdDrag = dist2 >= r.desktopTapThreshold2;
        }
        var multSelKeyDown = isMultSelKeyDown(e);
        if (isOverThresholdDrag) {
          r.hoverData.tapholdCancelled = true;
        }
        var updateDragDelta = function updateDragDelta2() {
          var dragDelta2 = r.hoverData.dragDelta = r.hoverData.dragDelta || [];
          if (dragDelta2.length === 0) {
            dragDelta2.push(disp[0]);
            dragDelta2.push(disp[1]);
          } else {
            dragDelta2[0] += disp[0];
            dragDelta2[1] += disp[1];
          }
        };
        preventDefault = true;
        triggerEvents(near, ["mousemove", "vmousemove", "tapdrag"], e, {
          x: pos[0],
          y: pos[1]
        });
        var goIntoBoxMode = function goIntoBoxMode2() {
          r.data.bgActivePosistion = void 0;
          if (!r.hoverData.selecting) {
            cy.emit({
              originalEvent: e,
              type: "boxstart",
              position: {
                x: pos[0],
                y: pos[1]
              }
            });
          }
          select[4] = 1;
          r.hoverData.selecting = true;
          r.redrawHint("select", true);
          r.redraw();
        };
        if (r.hoverData.which === 3) {
          if (isOverThresholdDrag) {
            var cxtEvt = {
              originalEvent: e,
              type: "cxtdrag",
              position: {
                x: pos[0],
                y: pos[1]
              }
            };
            if (down) {
              down.emit(cxtEvt);
            } else {
              cy.emit(cxtEvt);
            }
            r.hoverData.cxtDragged = true;
            if (!r.hoverData.cxtOver || near !== r.hoverData.cxtOver) {
              if (r.hoverData.cxtOver) {
                r.hoverData.cxtOver.emit({
                  originalEvent: e,
                  type: "cxtdragout",
                  position: {
                    x: pos[0],
                    y: pos[1]
                  }
                });
              }
              r.hoverData.cxtOver = near;
              if (near) {
                near.emit({
                  originalEvent: e,
                  type: "cxtdragover",
                  position: {
                    x: pos[0],
                    y: pos[1]
                  }
                });
              }
            }
          }
        } else if (r.hoverData.dragging) {
          preventDefault = true;
          if (cy.panningEnabled() && cy.userPanningEnabled()) {
            var deltaP;
            if (r.hoverData.justStartedPan) {
              var mdPos = r.hoverData.mdownPos;
              deltaP = {
                x: (pos[0] - mdPos[0]) * zoom,
                y: (pos[1] - mdPos[1]) * zoom
              };
              r.hoverData.justStartedPan = false;
            } else {
              deltaP = {
                x: disp[0] * zoom,
                y: disp[1] * zoom
              };
            }
            cy.panBy(deltaP);
            r.hoverData.dragged = true;
          }
          pos = r.projectIntoViewport(e.clientX, e.clientY);
        } else if (select[4] == 1 && (down == null || down.pannable())) {
          if (isOverThresholdDrag) {
            if (!r.hoverData.dragging && cy.boxSelectionEnabled() && (multSelKeyDown || !cy.panningEnabled() || !cy.userPanningEnabled())) {
              goIntoBoxMode();
            } else if (!r.hoverData.selecting && cy.panningEnabled() && cy.userPanningEnabled()) {
              var allowPassthrough = allowPanningPassthrough(down, r.hoverData.downs);
              if (allowPassthrough) {
                r.hoverData.dragging = true;
                r.hoverData.justStartedPan = true;
                select[4] = 0;
                r.data.bgActivePosistion = array2point(mdownPos);
                r.redrawHint("select", true);
                r.redraw();
              }
            }
            if (down && down.pannable() && down.active()) {
              down.unactivate();
            }
          }
        } else {
          if (down && down.pannable() && down.active()) {
            down.unactivate();
          }
          if ((!down || !down.grabbed()) && near != last) {
            if (last) {
              triggerEvents(last, ["mouseout", "tapdragout"], e, {
                x: pos[0],
                y: pos[1]
              });
            }
            if (near) {
              triggerEvents(near, ["mouseover", "tapdragover"], e, {
                x: pos[0],
                y: pos[1]
              });
            }
            r.hoverData.last = near;
          }
          if (down) {
            if (isOverThresholdDrag) {
              if (cy.boxSelectionEnabled() && multSelKeyDown) {
                if (down && down.grabbed()) {
                  freeDraggedElements(draggedElements);
                  down.emit("freeon");
                  draggedElements.emit("free");
                  if (r.dragData.didDrag) {
                    down.emit("dragfreeon");
                    draggedElements.emit("dragfree");
                  }
                }
                goIntoBoxMode();
              } else if (down && down.grabbed() && r.nodeIsDraggable(down)) {
                var justStartedDrag = !r.dragData.didDrag;
                if (justStartedDrag) {
                  r.redrawHint("eles", true);
                }
                r.dragData.didDrag = true;
                var toTrigger = cy.collection();
                if (!r.hoverData.draggingEles) {
                  addNodesToDrag(draggedElements, {
                    inDragLayer: true
                  });
                }
                var totalShift = {
                  x: 0,
                  y: 0
                };
                if (number(disp[0]) && number(disp[1])) {
                  totalShift.x += disp[0];
                  totalShift.y += disp[1];
                  if (justStartedDrag) {
                    var dragDelta = r.hoverData.dragDelta;
                    if (dragDelta && number(dragDelta[0]) && number(dragDelta[1])) {
                      totalShift.x += dragDelta[0];
                      totalShift.y += dragDelta[1];
                    }
                  }
                }
                for (var i2 = 0; i2 < draggedElements.length; i2++) {
                  var dEle = draggedElements[i2];
                  if (r.nodeIsDraggable(dEle) && dEle.grabbed()) {
                    toTrigger.push(dEle);
                  }
                }
                r.hoverData.draggingEles = true;
                toTrigger.silentShift(totalShift).emit("position drag");
                r.redrawHint("drag", true);
                r.redraw();
              }
            } else {
              updateDragDelta();
            }
          }
          preventDefault = true;
        }
        select[2] = pos[0];
        select[3] = pos[1];
        if (preventDefault) {
          if (e.stopPropagation)
            e.stopPropagation();
          if (e.preventDefault)
            e.preventDefault();
          return false;
        }
      }, false);
      r.registerBinding(window, "mouseup", function mouseupHandler(e) {
        var capture = r.hoverData.capture;
        if (!capture) {
          return;
        }
        r.hoverData.capture = false;
        var cy = r.cy;
        var pos = r.projectIntoViewport(e.clientX, e.clientY);
        var select = r.selection;
        var near = r.findNearestElement(pos[0], pos[1], true, false);
        var draggedElements = r.dragData.possibleDragElements;
        var down = r.hoverData.down;
        var multSelKeyDown = isMultSelKeyDown(e);
        if (r.data.bgActivePosistion) {
          r.redrawHint("select", true);
          r.redraw();
        }
        r.hoverData.tapholdCancelled = true;
        r.data.bgActivePosistion = void 0;
        if (down) {
          down.unactivate();
        }
        if (r.hoverData.which === 3) {
          var cxtEvt = {
            originalEvent: e,
            type: "cxttapend",
            position: {
              x: pos[0],
              y: pos[1]
            }
          };
          if (down) {
            down.emit(cxtEvt);
          } else {
            cy.emit(cxtEvt);
          }
          if (!r.hoverData.cxtDragged) {
            var cxtTap = {
              originalEvent: e,
              type: "cxttap",
              position: {
                x: pos[0],
                y: pos[1]
              }
            };
            if (down) {
              down.emit(cxtTap);
            } else {
              cy.emit(cxtTap);
            }
          }
          r.hoverData.cxtDragged = false;
          r.hoverData.which = null;
        } else if (r.hoverData.which === 1) {
          triggerEvents(near, ["mouseup", "tapend", "vmouseup"], e, {
            x: pos[0],
            y: pos[1]
          });
          if (!r.dragData.didDrag && !r.hoverData.dragged && !r.hoverData.selecting && !r.hoverData.isOverThresholdDrag) {
            triggerEvents(down, ["click", "tap", "vclick"], e, {
              x: pos[0],
              y: pos[1]
            });
          }
          if (down == null && !r.dragData.didDrag && !r.hoverData.selecting && !r.hoverData.dragged && !isMultSelKeyDown(e)) {
            cy.$(isSelected).unselect(["tapunselect"]);
            if (draggedElements.length > 0) {
              r.redrawHint("eles", true);
            }
            r.dragData.possibleDragElements = draggedElements = cy.collection();
          }
          if (near == down && !r.dragData.didDrag && !r.hoverData.selecting) {
            if (near != null && near._private.selectable) {
              if (r.hoverData.dragging)
                ;
              else if (cy.selectionType() === "additive" || multSelKeyDown) {
                if (near.selected()) {
                  near.unselect(["tapunselect"]);
                } else {
                  near.select(["tapselect"]);
                }
              } else {
                if (!multSelKeyDown) {
                  cy.$(isSelected).unmerge(near).unselect(["tapunselect"]);
                  near.select(["tapselect"]);
                }
              }
              r.redrawHint("eles", true);
            }
          }
          if (r.hoverData.selecting) {
            var box = cy.collection(r.getAllInBox(select[0], select[1], select[2], select[3]));
            r.redrawHint("select", true);
            if (box.length > 0) {
              r.redrawHint("eles", true);
            }
            cy.emit({
              type: "boxend",
              originalEvent: e,
              position: {
                x: pos[0],
                y: pos[1]
              }
            });
            var eleWouldBeSelected = function eleWouldBeSelected2(ele) {
              return ele.selectable() && !ele.selected();
            };
            if (cy.selectionType() === "additive") {
              box.emit("box").stdFilter(eleWouldBeSelected).select().emit("boxselect");
            } else {
              if (!multSelKeyDown) {
                cy.$(isSelected).unmerge(box).unselect();
              }
              box.emit("box").stdFilter(eleWouldBeSelected).select().emit("boxselect");
            }
            r.redraw();
          }
          if (r.hoverData.dragging) {
            r.hoverData.dragging = false;
            r.redrawHint("select", true);
            r.redrawHint("eles", true);
            r.redraw();
          }
          if (!select[4]) {
            r.redrawHint("drag", true);
            r.redrawHint("eles", true);
            var downWasGrabbed = down && down.grabbed();
            freeDraggedElements(draggedElements);
            if (downWasGrabbed) {
              down.emit("freeon");
              draggedElements.emit("free");
              if (r.dragData.didDrag) {
                down.emit("dragfreeon");
                draggedElements.emit("dragfree");
              }
            }
          }
        }
        select[4] = 0;
        r.hoverData.down = null;
        r.hoverData.cxtStarted = false;
        r.hoverData.draggingEles = false;
        r.hoverData.selecting = false;
        r.hoverData.isOverThresholdDrag = false;
        r.dragData.didDrag = false;
        r.hoverData.dragged = false;
        r.hoverData.dragDelta = [];
        r.hoverData.mdownPos = null;
        r.hoverData.mdownGPos = null;
      }, false);
      var wheelHandler = function wheelHandler2(e) {
        if (r.scrollingPage) {
          return;
        }
        var cy = r.cy;
        var zoom = cy.zoom();
        var pan = cy.pan();
        var pos = r.projectIntoViewport(e.clientX, e.clientY);
        var rpos = [pos[0] * zoom + pan.x, pos[1] * zoom + pan.y];
        if (r.hoverData.draggingEles || r.hoverData.dragging || r.hoverData.cxtStarted || inBoxSelection()) {
          e.preventDefault();
          return;
        }
        if (cy.panningEnabled() && cy.userPanningEnabled() && cy.zoomingEnabled() && cy.userZoomingEnabled()) {
          e.preventDefault();
          r.data.wheelZooming = true;
          clearTimeout(r.data.wheelTimeout);
          r.data.wheelTimeout = setTimeout(function() {
            r.data.wheelZooming = false;
            r.redrawHint("eles", true);
            r.redraw();
          }, 150);
          var diff;
          if (e.deltaY != null) {
            diff = e.deltaY / -250;
          } else if (e.wheelDeltaY != null) {
            diff = e.wheelDeltaY / 1e3;
          } else {
            diff = e.wheelDelta / 1e3;
          }
          diff = diff * r.wheelSensitivity;
          var needsWheelFix = e.deltaMode === 1;
          if (needsWheelFix) {
            diff *= 33;
          }
          var newZoom = cy.zoom() * Math.pow(10, diff);
          if (e.type === "gesturechange") {
            newZoom = r.gestureStartZoom * e.scale;
          }
          cy.zoom({
            level: newZoom,
            renderedPosition: {
              x: rpos[0],
              y: rpos[1]
            }
          });
        }
      };
      r.registerBinding(r.container, "wheel", wheelHandler, true);
      r.registerBinding(window, "scroll", function scrollHandler(e) {
        r.scrollingPage = true;
        clearTimeout(r.scrollingPageTimeout);
        r.scrollingPageTimeout = setTimeout(function() {
          r.scrollingPage = false;
        }, 250);
      }, true);
      r.registerBinding(r.container, "gesturestart", function gestureStartHandler(e) {
        r.gestureStartZoom = r.cy.zoom();
        if (!r.hasTouchStarted) {
          e.preventDefault();
        }
      }, true);
      r.registerBinding(r.container, "gesturechange", function(e) {
        if (!r.hasTouchStarted) {
          wheelHandler(e);
        }
      }, true);
      r.registerBinding(r.container, "mouseout", function mouseOutHandler(e) {
        var pos = r.projectIntoViewport(e.clientX, e.clientY);
        r.cy.emit({
          originalEvent: e,
          type: "mouseout",
          position: {
            x: pos[0],
            y: pos[1]
          }
        });
      }, false);
      r.registerBinding(r.container, "mouseover", function mouseOverHandler(e) {
        var pos = r.projectIntoViewport(e.clientX, e.clientY);
        r.cy.emit({
          originalEvent: e,
          type: "mouseover",
          position: {
            x: pos[0],
            y: pos[1]
          }
        });
      }, false);
      var f1x1, f1y1, f2x1, f2y1;
      var distance1, distance1Sq;
      var center1, modelCenter1;
      var offsetLeft, offsetTop;
      var containerWidth, containerHeight;
      var twoFingersStartInside;
      var distance = function distance2(x1, y1, x2, y2) {
        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
      };
      var distanceSq = function distanceSq2(x1, y1, x2, y2) {
        return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
      };
      var touchstartHandler;
      r.registerBinding(r.container, "touchstart", touchstartHandler = function touchstartHandler2(e) {
        r.hasTouchStarted = true;
        if (!eventInContainer(e)) {
          return;
        }
        blurActiveDomElement();
        r.touchData.capture = true;
        r.data.bgActivePosistion = void 0;
        var cy = r.cy;
        var now = r.touchData.now;
        var earlier = r.touchData.earlier;
        if (e.touches[0]) {
          var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
          now[0] = pos[0];
          now[1] = pos[1];
        }
        if (e.touches[1]) {
          var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
          now[2] = pos[0];
          now[3] = pos[1];
        }
        if (e.touches[2]) {
          var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
          now[4] = pos[0];
          now[5] = pos[1];
        }
        if (e.touches[1]) {
          r.touchData.singleTouchMoved = true;
          freeDraggedElements(r.dragData.touchDragEles);
          var offsets = r.findContainerClientCoords();
          offsetLeft = offsets[0];
          offsetTop = offsets[1];
          containerWidth = offsets[2];
          containerHeight = offsets[3];
          f1x1 = e.touches[0].clientX - offsetLeft;
          f1y1 = e.touches[0].clientY - offsetTop;
          f2x1 = e.touches[1].clientX - offsetLeft;
          f2y1 = e.touches[1].clientY - offsetTop;
          twoFingersStartInside = 0 <= f1x1 && f1x1 <= containerWidth && 0 <= f2x1 && f2x1 <= containerWidth && 0 <= f1y1 && f1y1 <= containerHeight && 0 <= f2y1 && f2y1 <= containerHeight;
          var pan = cy.pan();
          var zoom = cy.zoom();
          distance1 = distance(f1x1, f1y1, f2x1, f2y1);
          distance1Sq = distanceSq(f1x1, f1y1, f2x1, f2y1);
          center1 = [(f1x1 + f2x1) / 2, (f1y1 + f2y1) / 2];
          modelCenter1 = [(center1[0] - pan.x) / zoom, (center1[1] - pan.y) / zoom];
          var cxtDistThreshold = 200;
          var cxtDistThresholdSq = cxtDistThreshold * cxtDistThreshold;
          if (distance1Sq < cxtDistThresholdSq && !e.touches[2]) {
            var near1 = r.findNearestElement(now[0], now[1], true, true);
            var near2 = r.findNearestElement(now[2], now[3], true, true);
            if (near1 && near1.isNode()) {
              near1.activate().emit({
                originalEvent: e,
                type: "cxttapstart",
                position: {
                  x: now[0],
                  y: now[1]
                }
              });
              r.touchData.start = near1;
            } else if (near2 && near2.isNode()) {
              near2.activate().emit({
                originalEvent: e,
                type: "cxttapstart",
                position: {
                  x: now[0],
                  y: now[1]
                }
              });
              r.touchData.start = near2;
            } else {
              cy.emit({
                originalEvent: e,
                type: "cxttapstart",
                position: {
                  x: now[0],
                  y: now[1]
                }
              });
            }
            if (r.touchData.start) {
              r.touchData.start._private.grabbed = false;
            }
            r.touchData.cxt = true;
            r.touchData.cxtDragged = false;
            r.data.bgActivePosistion = void 0;
            r.redraw();
            return;
          }
        }
        if (e.touches[2]) {
          if (cy.boxSelectionEnabled()) {
            e.preventDefault();
          }
        } else if (e.touches[1])
          ;
        else if (e.touches[0]) {
          var nears = r.findNearestElements(now[0], now[1], true, true);
          var near = nears[0];
          if (near != null) {
            near.activate();
            r.touchData.start = near;
            r.touchData.starts = nears;
            if (r.nodeIsGrabbable(near)) {
              var draggedEles = r.dragData.touchDragEles = cy.collection();
              var selectedNodes = null;
              r.redrawHint("eles", true);
              r.redrawHint("drag", true);
              if (near.selected()) {
                selectedNodes = cy.$(function(ele) {
                  return ele.selected() && r.nodeIsGrabbable(ele);
                });
                addNodesToDrag(selectedNodes, {
                  addToList: draggedEles
                });
              } else {
                addNodeToDrag(near, {
                  addToList: draggedEles
                });
              }
              setGrabTarget(near);
              var makeEvent = function makeEvent2(type) {
                return {
                  originalEvent: e,
                  type,
                  position: {
                    x: now[0],
                    y: now[1]
                  }
                };
              };
              near.emit(makeEvent("grabon"));
              if (selectedNodes) {
                selectedNodes.forEach(function(n) {
                  n.emit(makeEvent("grab"));
                });
              } else {
                near.emit(makeEvent("grab"));
              }
            }
          }
          triggerEvents(near, ["touchstart", "tapstart", "vmousedown"], e, {
            x: now[0],
            y: now[1]
          });
          if (near == null) {
            r.data.bgActivePosistion = {
              x: pos[0],
              y: pos[1]
            };
            r.redrawHint("select", true);
            r.redraw();
          }
          r.touchData.singleTouchMoved = false;
          r.touchData.singleTouchStartTime = +new Date();
          clearTimeout(r.touchData.tapholdTimeout);
          r.touchData.tapholdTimeout = setTimeout(function() {
            if (r.touchData.singleTouchMoved === false && !r.pinching && !r.touchData.selecting) {
              triggerEvents(r.touchData.start, ["taphold"], e, {
                x: now[0],
                y: now[1]
              });
            }
          }, r.tapholdDuration);
        }
        if (e.touches.length >= 1) {
          var sPos = r.touchData.startPosition = [];
          for (var i2 = 0; i2 < now.length; i2++) {
            sPos[i2] = earlier[i2] = now[i2];
          }
          var touch0 = e.touches[0];
          r.touchData.startGPosition = [touch0.clientX, touch0.clientY];
        }
      }, false);
      var touchmoveHandler;
      r.registerBinding(window, "touchmove", touchmoveHandler = function touchmoveHandler2(e) {
        var capture = r.touchData.capture;
        if (!capture && !eventInContainer(e)) {
          return;
        }
        var select = r.selection;
        var cy = r.cy;
        var now = r.touchData.now;
        var earlier = r.touchData.earlier;
        var zoom = cy.zoom();
        if (e.touches[0]) {
          var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
          now[0] = pos[0];
          now[1] = pos[1];
        }
        if (e.touches[1]) {
          var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
          now[2] = pos[0];
          now[3] = pos[1];
        }
        if (e.touches[2]) {
          var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
          now[4] = pos[0];
          now[5] = pos[1];
        }
        var startGPos = r.touchData.startGPosition;
        var isOverThresholdDrag;
        if (capture && e.touches[0] && startGPos) {
          var disp = [];
          for (var j = 0; j < now.length; j++) {
            disp[j] = now[j] - earlier[j];
          }
          var dx = e.touches[0].clientX - startGPos[0];
          var dx2 = dx * dx;
          var dy = e.touches[0].clientY - startGPos[1];
          var dy2 = dy * dy;
          var dist2 = dx2 + dy2;
          isOverThresholdDrag = dist2 >= r.touchTapThreshold2;
        }
        if (capture && r.touchData.cxt) {
          e.preventDefault();
          var f1x2 = e.touches[0].clientX - offsetLeft, f1y2 = e.touches[0].clientY - offsetTop;
          var f2x2 = e.touches[1].clientX - offsetLeft, f2y2 = e.touches[1].clientY - offsetTop;
          var distance2Sq = distanceSq(f1x2, f1y2, f2x2, f2y2);
          var factorSq = distance2Sq / distance1Sq;
          var distThreshold = 150;
          var distThresholdSq = distThreshold * distThreshold;
          var factorThreshold = 1.5;
          var factorThresholdSq = factorThreshold * factorThreshold;
          if (factorSq >= factorThresholdSq || distance2Sq >= distThresholdSq) {
            r.touchData.cxt = false;
            r.data.bgActivePosistion = void 0;
            r.redrawHint("select", true);
            var cxtEvt = {
              originalEvent: e,
              type: "cxttapend",
              position: {
                x: now[0],
                y: now[1]
              }
            };
            if (r.touchData.start) {
              r.touchData.start.unactivate().emit(cxtEvt);
              r.touchData.start = null;
            } else {
              cy.emit(cxtEvt);
            }
          }
        }
        if (capture && r.touchData.cxt) {
          var cxtEvt = {
            originalEvent: e,
            type: "cxtdrag",
            position: {
              x: now[0],
              y: now[1]
            }
          };
          r.data.bgActivePosistion = void 0;
          r.redrawHint("select", true);
          if (r.touchData.start) {
            r.touchData.start.emit(cxtEvt);
          } else {
            cy.emit(cxtEvt);
          }
          if (r.touchData.start) {
            r.touchData.start._private.grabbed = false;
          }
          r.touchData.cxtDragged = true;
          var near = r.findNearestElement(now[0], now[1], true, true);
          if (!r.touchData.cxtOver || near !== r.touchData.cxtOver) {
            if (r.touchData.cxtOver) {
              r.touchData.cxtOver.emit({
                originalEvent: e,
                type: "cxtdragout",
                position: {
                  x: now[0],
                  y: now[1]
                }
              });
            }
            r.touchData.cxtOver = near;
            if (near) {
              near.emit({
                originalEvent: e,
                type: "cxtdragover",
                position: {
                  x: now[0],
                  y: now[1]
                }
              });
            }
          }
        } else if (capture && e.touches[2] && cy.boxSelectionEnabled()) {
          e.preventDefault();
          r.data.bgActivePosistion = void 0;
          this.lastThreeTouch = +new Date();
          if (!r.touchData.selecting) {
            cy.emit({
              originalEvent: e,
              type: "boxstart",
              position: {
                x: now[0],
                y: now[1]
              }
            });
          }
          r.touchData.selecting = true;
          r.touchData.didSelect = true;
          select[4] = 1;
          if (!select || select.length === 0 || select[0] === void 0) {
            select[0] = (now[0] + now[2] + now[4]) / 3;
            select[1] = (now[1] + now[3] + now[5]) / 3;
            select[2] = (now[0] + now[2] + now[4]) / 3 + 1;
            select[3] = (now[1] + now[3] + now[5]) / 3 + 1;
          } else {
            select[2] = (now[0] + now[2] + now[4]) / 3;
            select[3] = (now[1] + now[3] + now[5]) / 3;
          }
          r.redrawHint("select", true);
          r.redraw();
        } else if (capture && e.touches[1] && !r.touchData.didSelect && cy.zoomingEnabled() && cy.panningEnabled() && cy.userZoomingEnabled() && cy.userPanningEnabled()) {
          e.preventDefault();
          r.data.bgActivePosistion = void 0;
          r.redrawHint("select", true);
          var draggedEles = r.dragData.touchDragEles;
          if (draggedEles) {
            r.redrawHint("drag", true);
            for (var i2 = 0; i2 < draggedEles.length; i2++) {
              var de_p = draggedEles[i2]._private;
              de_p.grabbed = false;
              de_p.rscratch.inDragLayer = false;
            }
          }
          var _start = r.touchData.start;
          var f1x2 = e.touches[0].clientX - offsetLeft, f1y2 = e.touches[0].clientY - offsetTop;
          var f2x2 = e.touches[1].clientX - offsetLeft, f2y2 = e.touches[1].clientY - offsetTop;
          var distance2 = distance(f1x2, f1y2, f2x2, f2y2);
          var factor = distance2 / distance1;
          if (twoFingersStartInside) {
            var df1x = f1x2 - f1x1;
            var df1y = f1y2 - f1y1;
            var df2x = f2x2 - f2x1;
            var df2y = f2y2 - f2y1;
            var tx = (df1x + df2x) / 2;
            var ty = (df1y + df2y) / 2;
            var zoom1 = cy.zoom();
            var zoom2 = zoom1 * factor;
            var pan1 = cy.pan();
            var ctrx = modelCenter1[0] * zoom1 + pan1.x;
            var ctry = modelCenter1[1] * zoom1 + pan1.y;
            var pan2 = {
              x: -zoom2 / zoom1 * (ctrx - pan1.x - tx) + ctrx,
              y: -zoom2 / zoom1 * (ctry - pan1.y - ty) + ctry
            };
            if (_start && _start.active()) {
              var draggedEles = r.dragData.touchDragEles;
              freeDraggedElements(draggedEles);
              r.redrawHint("drag", true);
              r.redrawHint("eles", true);
              _start.unactivate().emit("freeon");
              draggedEles.emit("free");
              if (r.dragData.didDrag) {
                _start.emit("dragfreeon");
                draggedEles.emit("dragfree");
              }
            }
            cy.viewport({
              zoom: zoom2,
              pan: pan2,
              cancelOnFailedZoom: true
            });
            distance1 = distance2;
            f1x1 = f1x2;
            f1y1 = f1y2;
            f2x1 = f2x2;
            f2y1 = f2y2;
            r.pinching = true;
          }
          if (e.touches[0]) {
            var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
            now[0] = pos[0];
            now[1] = pos[1];
          }
          if (e.touches[1]) {
            var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
            now[2] = pos[0];
            now[3] = pos[1];
          }
          if (e.touches[2]) {
            var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
            now[4] = pos[0];
            now[5] = pos[1];
          }
        } else if (e.touches[0] && !r.touchData.didSelect) {
          var start = r.touchData.start;
          var last = r.touchData.last;
          var near;
          if (!r.hoverData.draggingEles && !r.swipePanning) {
            near = r.findNearestElement(now[0], now[1], true, true);
          }
          if (capture && start != null) {
            e.preventDefault();
          }
          if (capture && start != null && r.nodeIsDraggable(start)) {
            if (isOverThresholdDrag) {
              var draggedEles = r.dragData.touchDragEles;
              var justStartedDrag = !r.dragData.didDrag;
              if (justStartedDrag) {
                addNodesToDrag(draggedEles, {
                  inDragLayer: true
                });
              }
              r.dragData.didDrag = true;
              var totalShift = {
                x: 0,
                y: 0
              };
              if (number(disp[0]) && number(disp[1])) {
                totalShift.x += disp[0];
                totalShift.y += disp[1];
                if (justStartedDrag) {
                  r.redrawHint("eles", true);
                  var dragDelta = r.touchData.dragDelta;
                  if (dragDelta && number(dragDelta[0]) && number(dragDelta[1])) {
                    totalShift.x += dragDelta[0];
                    totalShift.y += dragDelta[1];
                  }
                }
              }
              r.hoverData.draggingEles = true;
              draggedEles.silentShift(totalShift).emit("position drag");
              r.redrawHint("drag", true);
              if (r.touchData.startPosition[0] == earlier[0] && r.touchData.startPosition[1] == earlier[1]) {
                r.redrawHint("eles", true);
              }
              r.redraw();
            } else {
              var dragDelta = r.touchData.dragDelta = r.touchData.dragDelta || [];
              if (dragDelta.length === 0) {
                dragDelta.push(disp[0]);
                dragDelta.push(disp[1]);
              } else {
                dragDelta[0] += disp[0];
                dragDelta[1] += disp[1];
              }
            }
          }
          {
            triggerEvents(start || near, ["touchmove", "tapdrag", "vmousemove"], e, {
              x: now[0],
              y: now[1]
            });
            if ((!start || !start.grabbed()) && near != last) {
              if (last) {
                last.emit({
                  originalEvent: e,
                  type: "tapdragout",
                  position: {
                    x: now[0],
                    y: now[1]
                  }
                });
              }
              if (near) {
                near.emit({
                  originalEvent: e,
                  type: "tapdragover",
                  position: {
                    x: now[0],
                    y: now[1]
                  }
                });
              }
            }
            r.touchData.last = near;
          }
          if (capture) {
            for (var i2 = 0; i2 < now.length; i2++) {
              if (now[i2] && r.touchData.startPosition[i2] && isOverThresholdDrag) {
                r.touchData.singleTouchMoved = true;
              }
            }
          }
          if (capture && (start == null || start.pannable()) && cy.panningEnabled() && cy.userPanningEnabled()) {
            var allowPassthrough = allowPanningPassthrough(start, r.touchData.starts);
            if (allowPassthrough) {
              e.preventDefault();
              if (!r.data.bgActivePosistion) {
                r.data.bgActivePosistion = array2point(r.touchData.startPosition);
              }
              if (r.swipePanning) {
                cy.panBy({
                  x: disp[0] * zoom,
                  y: disp[1] * zoom
                });
              } else if (isOverThresholdDrag) {
                r.swipePanning = true;
                cy.panBy({
                  x: dx * zoom,
                  y: dy * zoom
                });
                if (start) {
                  start.unactivate();
                  r.redrawHint("select", true);
                  r.touchData.start = null;
                }
              }
            }
            var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
            now[0] = pos[0];
            now[1] = pos[1];
          }
        }
        for (var j = 0; j < now.length; j++) {
          earlier[j] = now[j];
        }
        if (capture && e.touches.length > 0 && !r.hoverData.draggingEles && !r.swipePanning && r.data.bgActivePosistion != null) {
          r.data.bgActivePosistion = void 0;
          r.redrawHint("select", true);
          r.redraw();
        }
      }, false);
      var touchcancelHandler;
      r.registerBinding(window, "touchcancel", touchcancelHandler = function touchcancelHandler2(e) {
        var start = r.touchData.start;
        r.touchData.capture = false;
        if (start) {
          start.unactivate();
        }
      });
      var touchendHandler;
      r.registerBinding(window, "touchend", touchendHandler = function touchendHandler2(e) {
        var start = r.touchData.start;
        var capture = r.touchData.capture;
        if (capture) {
          if (e.touches.length === 0) {
            r.touchData.capture = false;
          }
          e.preventDefault();
        } else {
          return;
        }
        var select = r.selection;
        r.swipePanning = false;
        r.hoverData.draggingEles = false;
        var cy = r.cy;
        var zoom = cy.zoom();
        var now = r.touchData.now;
        var earlier = r.touchData.earlier;
        if (e.touches[0]) {
          var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
          now[0] = pos[0];
          now[1] = pos[1];
        }
        if (e.touches[1]) {
          var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
          now[2] = pos[0];
          now[3] = pos[1];
        }
        if (e.touches[2]) {
          var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
          now[4] = pos[0];
          now[5] = pos[1];
        }
        if (start) {
          start.unactivate();
        }
        var ctxTapend;
        if (r.touchData.cxt) {
          ctxTapend = {
            originalEvent: e,
            type: "cxttapend",
            position: {
              x: now[0],
              y: now[1]
            }
          };
          if (start) {
            start.emit(ctxTapend);
          } else {
            cy.emit(ctxTapend);
          }
          if (!r.touchData.cxtDragged) {
            var ctxTap = {
              originalEvent: e,
              type: "cxttap",
              position: {
                x: now[0],
                y: now[1]
              }
            };
            if (start) {
              start.emit(ctxTap);
            } else {
              cy.emit(ctxTap);
            }
          }
          if (r.touchData.start) {
            r.touchData.start._private.grabbed = false;
          }
          r.touchData.cxt = false;
          r.touchData.start = null;
          r.redraw();
          return;
        }
        if (!e.touches[2] && cy.boxSelectionEnabled() && r.touchData.selecting) {
          r.touchData.selecting = false;
          var box = cy.collection(r.getAllInBox(select[0], select[1], select[2], select[3]));
          select[0] = void 0;
          select[1] = void 0;
          select[2] = void 0;
          select[3] = void 0;
          select[4] = 0;
          r.redrawHint("select", true);
          cy.emit({
            type: "boxend",
            originalEvent: e,
            position: {
              x: now[0],
              y: now[1]
            }
          });
          var eleWouldBeSelected = function eleWouldBeSelected2(ele) {
            return ele.selectable() && !ele.selected();
          };
          box.emit("box").stdFilter(eleWouldBeSelected).select().emit("boxselect");
          if (box.nonempty()) {
            r.redrawHint("eles", true);
          }
          r.redraw();
        }
        if (start != null) {
          start.unactivate();
        }
        if (e.touches[2]) {
          r.data.bgActivePosistion = void 0;
          r.redrawHint("select", true);
        } else if (e.touches[1])
          ;
        else if (e.touches[0])
          ;
        else if (!e.touches[0]) {
          r.data.bgActivePosistion = void 0;
          r.redrawHint("select", true);
          var draggedEles = r.dragData.touchDragEles;
          if (start != null) {
            var startWasGrabbed = start._private.grabbed;
            freeDraggedElements(draggedEles);
            r.redrawHint("drag", true);
            r.redrawHint("eles", true);
            if (startWasGrabbed) {
              start.emit("freeon");
              draggedEles.emit("free");
              if (r.dragData.didDrag) {
                start.emit("dragfreeon");
                draggedEles.emit("dragfree");
              }
            }
            triggerEvents(start, ["touchend", "tapend", "vmouseup", "tapdragout"], e, {
              x: now[0],
              y: now[1]
            });
            start.unactivate();
            r.touchData.start = null;
          } else {
            var near = r.findNearestElement(now[0], now[1], true, true);
            triggerEvents(near, ["touchend", "tapend", "vmouseup", "tapdragout"], e, {
              x: now[0],
              y: now[1]
            });
          }
          var dx = r.touchData.startPosition[0] - now[0];
          var dx2 = dx * dx;
          var dy = r.touchData.startPosition[1] - now[1];
          var dy2 = dy * dy;
          var dist2 = dx2 + dy2;
          var rdist2 = dist2 * zoom * zoom;
          if (!r.touchData.singleTouchMoved) {
            if (!start) {
              cy.$(":selected").unselect(["tapunselect"]);
            }
            triggerEvents(start, ["tap", "vclick"], e, {
              x: now[0],
              y: now[1]
            });
          }
          if (start != null && !r.dragData.didDrag && start._private.selectable && rdist2 < r.touchTapThreshold2 && !r.pinching) {
            if (cy.selectionType() === "single") {
              cy.$(isSelected).unmerge(start).unselect(["tapunselect"]);
              start.select(["tapselect"]);
            } else {
              if (start.selected()) {
                start.unselect(["tapunselect"]);
              } else {
                start.select(["tapselect"]);
              }
            }
            r.redrawHint("eles", true);
          }
          r.touchData.singleTouchMoved = true;
        }
        for (var j = 0; j < now.length; j++) {
          earlier[j] = now[j];
        }
        r.dragData.didDrag = false;
        if (e.touches.length === 0) {
          r.touchData.dragDelta = [];
          r.touchData.startPosition = null;
          r.touchData.startGPosition = null;
          r.touchData.didSelect = false;
        }
        if (e.touches.length < 2) {
          if (e.touches.length === 1) {
            r.touchData.startGPosition = [e.touches[0].clientX, e.touches[0].clientY];
          }
          r.pinching = false;
          r.redrawHint("eles", true);
          r.redraw();
        }
      }, false);
      if (typeof TouchEvent === "undefined") {
        var pointers = [];
        var makeTouch = function makeTouch2(e) {
          return {
            clientX: e.clientX,
            clientY: e.clientY,
            force: 1,
            identifier: e.pointerId,
            pageX: e.pageX,
            pageY: e.pageY,
            radiusX: e.width / 2,
            radiusY: e.height / 2,
            screenX: e.screenX,
            screenY: e.screenY,
            target: e.target
          };
        };
        var makePointer = function makePointer2(e) {
          return {
            event: e,
            touch: makeTouch(e)
          };
        };
        var addPointer = function addPointer2(e) {
          pointers.push(makePointer(e));
        };
        var removePointer = function removePointer2(e) {
          for (var i2 = 0; i2 < pointers.length; i2++) {
            var p2 = pointers[i2];
            if (p2.event.pointerId === e.pointerId) {
              pointers.splice(i2, 1);
              return;
            }
          }
        };
        var updatePointer = function updatePointer2(e) {
          var p2 = pointers.filter(function(p3) {
            return p3.event.pointerId === e.pointerId;
          })[0];
          p2.event = e;
          p2.touch = makeTouch(e);
        };
        var addTouchesToEvent = function addTouchesToEvent2(e) {
          e.touches = pointers.map(function(p2) {
            return p2.touch;
          });
        };
        var pointerIsMouse = function pointerIsMouse2(e) {
          return e.pointerType === "mouse" || e.pointerType === 4;
        };
        r.registerBinding(r.container, "pointerdown", function(e) {
          if (pointerIsMouse(e)) {
            return;
          }
          e.preventDefault();
          addPointer(e);
          addTouchesToEvent(e);
          touchstartHandler(e);
        });
        r.registerBinding(r.container, "pointerup", function(e) {
          if (pointerIsMouse(e)) {
            return;
          }
          removePointer(e);
          addTouchesToEvent(e);
          touchendHandler(e);
        });
        r.registerBinding(r.container, "pointercancel", function(e) {
          if (pointerIsMouse(e)) {
            return;
          }
          removePointer(e);
          addTouchesToEvent(e);
          touchcancelHandler(e);
        });
        r.registerBinding(r.container, "pointermove", function(e) {
          if (pointerIsMouse(e)) {
            return;
          }
          e.preventDefault();
          updatePointer(e);
          addTouchesToEvent(e);
          touchmoveHandler(e);
        });
      }
    };
    var BRp$d = {};
    BRp$d.generatePolygon = function(name, points) {
      return this.nodeShapes[name] = {
        renderer: this,
        name,
        points,
        draw: function draw(context, centerX, centerY, width, height) {
          this.renderer.nodeShapeImpl("polygon", context, centerX, centerY, width, height, this.points);
        },
        intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
          return polygonIntersectLine(x, y, this.points, nodeX, nodeY, width / 2, height / 2, padding);
        },
        checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
          return pointInsidePolygon(x, y, this.points, centerX, centerY, width, height, [0, -1], padding);
        }
      };
    };
    BRp$d.generateEllipse = function() {
      return this.nodeShapes["ellipse"] = {
        renderer: this,
        name: "ellipse",
        draw: function draw(context, centerX, centerY, width, height) {
          this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
        },
        intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
          return intersectLineEllipse(x, y, nodeX, nodeY, width / 2 + padding, height / 2 + padding);
        },
        checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
          return checkInEllipse(x, y, width, height, centerX, centerY, padding);
        }
      };
    };
    BRp$d.generateRoundPolygon = function(name, points) {
      var allPoints = new Array(points.length * 2);
      for (var i2 = 0; i2 < points.length / 2; i2++) {
        var sourceIndex = i2 * 2;
        var destIndex = void 0;
        if (i2 < points.length / 2 - 1) {
          destIndex = (i2 + 1) * 2;
        } else {
          destIndex = 0;
        }
        allPoints[i2 * 4] = points[sourceIndex];
        allPoints[i2 * 4 + 1] = points[sourceIndex + 1];
        var xDest = points[destIndex] - points[sourceIndex];
        var yDest = points[destIndex + 1] - points[sourceIndex + 1];
        var norm = Math.sqrt(xDest * xDest + yDest * yDest);
        allPoints[i2 * 4 + 2] = xDest / norm;
        allPoints[i2 * 4 + 3] = yDest / norm;
      }
      return this.nodeShapes[name] = {
        renderer: this,
        name,
        points: allPoints,
        draw: function draw(context, centerX, centerY, width, height) {
          this.renderer.nodeShapeImpl("round-polygon", context, centerX, centerY, width, height, this.points);
        },
        intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
          return roundPolygonIntersectLine(x, y, this.points, nodeX, nodeY, width, height);
        },
        checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
          return pointInsideRoundPolygon(x, y, this.points, centerX, centerY, width, height);
        }
      };
    };
    BRp$d.generateRoundRectangle = function() {
      return this.nodeShapes["round-rectangle"] = this.nodeShapes["roundrectangle"] = {
        renderer: this,
        name: "round-rectangle",
        points: generateUnitNgonPointsFitToSquare(4, 0),
        draw: function draw(context, centerX, centerY, width, height) {
          this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
        },
        intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
          return roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding);
        },
        checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
          var cornerRadius = getRoundRectangleRadius(width, height);
          var diam = cornerRadius * 2;
          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - diam, [0, -1], padding)) {
            return true;
          }
          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - diam, height, [0, -1], padding)) {
            return true;
          }
          if (checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY - height / 2 + cornerRadius, padding)) {
            return true;
          }
          if (checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY - height / 2 + cornerRadius, padding)) {
            return true;
          }
          if (checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
            return true;
          }
          if (checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
            return true;
          }
          return false;
        }
      };
    };
    BRp$d.generateCutRectangle = function() {
      return this.nodeShapes["cut-rectangle"] = this.nodeShapes["cutrectangle"] = {
        renderer: this,
        name: "cut-rectangle",
        cornerLength: getCutRectangleCornerLength(),
        points: generateUnitNgonPointsFitToSquare(4, 0),
        draw: function draw(context, centerX, centerY, width, height) {
          this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
        },
        generateCutTrianglePts: function generateCutTrianglePts(width, height, centerX, centerY) {
          var cl = this.cornerLength;
          var hh = height / 2;
          var hw = width / 2;
          var xBegin = centerX - hw;
          var xEnd = centerX + hw;
          var yBegin = centerY - hh;
          var yEnd = centerY + hh;
          return {
            topLeft: [xBegin, yBegin + cl, xBegin + cl, yBegin, xBegin + cl, yBegin + cl],
            topRight: [xEnd - cl, yBegin, xEnd, yBegin + cl, xEnd - cl, yBegin + cl],
            bottomRight: [xEnd, yEnd - cl, xEnd - cl, yEnd, xEnd - cl, yEnd - cl],
            bottomLeft: [xBegin + cl, yEnd, xBegin, yEnd - cl, xBegin + cl, yEnd - cl]
          };
        },
        intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
          var cPts = this.generateCutTrianglePts(width + 2 * padding, height + 2 * padding, nodeX, nodeY);
          var pts2 = [].concat.apply([], [cPts.topLeft.splice(0, 4), cPts.topRight.splice(0, 4), cPts.bottomRight.splice(0, 4), cPts.bottomLeft.splice(0, 4)]);
          return polygonIntersectLine(x, y, pts2, nodeX, nodeY);
        },
        checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - 2 * this.cornerLength, [0, -1], padding)) {
            return true;
          }
          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - 2 * this.cornerLength, height, [0, -1], padding)) {
            return true;
          }
          var cutTrianglePts = this.generateCutTrianglePts(width, height, centerX, centerY);
          return pointInsidePolygonPoints(x, y, cutTrianglePts.topLeft) || pointInsidePolygonPoints(x, y, cutTrianglePts.topRight) || pointInsidePolygonPoints(x, y, cutTrianglePts.bottomRight) || pointInsidePolygonPoints(x, y, cutTrianglePts.bottomLeft);
        }
      };
    };
    BRp$d.generateBarrel = function() {
      return this.nodeShapes["barrel"] = {
        renderer: this,
        name: "barrel",
        points: generateUnitNgonPointsFitToSquare(4, 0),
        draw: function draw(context, centerX, centerY, width, height) {
          this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
        },
        intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
          var t0 = 0.15;
          var t1 = 0.5;
          var t2 = 0.85;
          var bPts = this.generateBarrelBezierPts(width + 2 * padding, height + 2 * padding, nodeX, nodeY);
          var approximateBarrelCurvePts = function approximateBarrelCurvePts2(pts3) {
            var m0 = qbezierPtAt({
              x: pts3[0],
              y: pts3[1]
            }, {
              x: pts3[2],
              y: pts3[3]
            }, {
              x: pts3[4],
              y: pts3[5]
            }, t0);
            var m1 = qbezierPtAt({
              x: pts3[0],
              y: pts3[1]
            }, {
              x: pts3[2],
              y: pts3[3]
            }, {
              x: pts3[4],
              y: pts3[5]
            }, t1);
            var m2 = qbezierPtAt({
              x: pts3[0],
              y: pts3[1]
            }, {
              x: pts3[2],
              y: pts3[3]
            }, {
              x: pts3[4],
              y: pts3[5]
            }, t2);
            return [pts3[0], pts3[1], m0.x, m0.y, m1.x, m1.y, m2.x, m2.y, pts3[4], pts3[5]];
          };
          var pts2 = [].concat(approximateBarrelCurvePts(bPts.topLeft), approximateBarrelCurvePts(bPts.topRight), approximateBarrelCurvePts(bPts.bottomRight), approximateBarrelCurvePts(bPts.bottomLeft));
          return polygonIntersectLine(x, y, pts2, nodeX, nodeY);
        },
        generateBarrelBezierPts: function generateBarrelBezierPts(width, height, centerX, centerY) {
          var hh = height / 2;
          var hw = width / 2;
          var xBegin = centerX - hw;
          var xEnd = centerX + hw;
          var yBegin = centerY - hh;
          var yEnd = centerY + hh;
          var curveConstants = getBarrelCurveConstants(width, height);
          var hOffset = curveConstants.heightOffset;
          var wOffset = curveConstants.widthOffset;
          var ctrlPtXOffset = curveConstants.ctrlPtOffsetPct * width;
          var pts2 = {
            topLeft: [xBegin, yBegin + hOffset, xBegin + ctrlPtXOffset, yBegin, xBegin + wOffset, yBegin],
            topRight: [xEnd - wOffset, yBegin, xEnd - ctrlPtXOffset, yBegin, xEnd, yBegin + hOffset],
            bottomRight: [xEnd, yEnd - hOffset, xEnd - ctrlPtXOffset, yEnd, xEnd - wOffset, yEnd],
            bottomLeft: [xBegin + wOffset, yEnd, xBegin + ctrlPtXOffset, yEnd, xBegin, yEnd - hOffset]
          };
          pts2.topLeft.isTop = true;
          pts2.topRight.isTop = true;
          pts2.bottomLeft.isBottom = true;
          pts2.bottomRight.isBottom = true;
          return pts2;
        },
        checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
          var curveConstants = getBarrelCurveConstants(width, height);
          var hOffset = curveConstants.heightOffset;
          var wOffset = curveConstants.widthOffset;
          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - 2 * hOffset, [0, -1], padding)) {
            return true;
          }
          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - 2 * wOffset, height, [0, -1], padding)) {
            return true;
          }
          var barrelCurvePts = this.generateBarrelBezierPts(width, height, centerX, centerY);
          var getCurveT = function getCurveT2(x2, y3, curvePts) {
            var x0 = curvePts[4];
            var x1 = curvePts[2];
            var x22 = curvePts[0];
            var y02 = curvePts[5];
            var y22 = curvePts[1];
            var xMin = Math.min(x0, x22);
            var xMax = Math.max(x0, x22);
            var yMin = Math.min(y02, y22);
            var yMax = Math.max(y02, y22);
            if (xMin <= x2 && x2 <= xMax && yMin <= y3 && y3 <= yMax) {
              var coeff = bezierPtsToQuadCoeff(x0, x1, x22);
              var roots = solveQuadratic(coeff[0], coeff[1], coeff[2], x2);
              var validRoots = roots.filter(function(r) {
                return 0 <= r && r <= 1;
              });
              if (validRoots.length > 0) {
                return validRoots[0];
              }
            }
            return null;
          };
          var curveRegions = Object.keys(barrelCurvePts);
          for (var i2 = 0; i2 < curveRegions.length; i2++) {
            var corner = curveRegions[i2];
            var cornerPts = barrelCurvePts[corner];
            var t = getCurveT(x, y, cornerPts);
            if (t == null) {
              continue;
            }
            var y0 = cornerPts[5];
            var y1 = cornerPts[3];
            var y2 = cornerPts[1];
            var bezY = qbezierAt(y0, y1, y2, t);
            if (cornerPts.isTop && bezY <= y) {
              return true;
            }
            if (cornerPts.isBottom && y <= bezY) {
              return true;
            }
          }
          return false;
        }
      };
    };
    BRp$d.generateBottomRoundrectangle = function() {
      return this.nodeShapes["bottom-round-rectangle"] = this.nodeShapes["bottomroundrectangle"] = {
        renderer: this,
        name: "bottom-round-rectangle",
        points: generateUnitNgonPointsFitToSquare(4, 0),
        draw: function draw(context, centerX, centerY, width, height) {
          this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
        },
        intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
          var topStartX = nodeX - (width / 2 + padding);
          var topStartY = nodeY - (height / 2 + padding);
          var topEndY = topStartY;
          var topEndX = nodeX + (width / 2 + padding);
          var topIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);
          if (topIntersections.length > 0) {
            return topIntersections;
          }
          return roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding);
        },
        checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
          var cornerRadius = getRoundRectangleRadius(width, height);
          var diam = 2 * cornerRadius;
          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - diam, [0, -1], padding)) {
            return true;
          }
          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - diam, height, [0, -1], padding)) {
            return true;
          }
          var outerWidth = width / 2 + 2 * padding;
          var outerHeight = height / 2 + 2 * padding;
          var points = [centerX - outerWidth, centerY - outerHeight, centerX - outerWidth, centerY, centerX + outerWidth, centerY, centerX + outerWidth, centerY - outerHeight];
          if (pointInsidePolygonPoints(x, y, points)) {
            return true;
          }
          if (checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
            return true;
          }
          if (checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
            return true;
          }
          return false;
        }
      };
    };
    BRp$d.registerNodeShapes = function() {
      var nodeShapes = this.nodeShapes = {};
      var renderer2 = this;
      this.generateEllipse();
      this.generatePolygon("triangle", generateUnitNgonPointsFitToSquare(3, 0));
      this.generateRoundPolygon("round-triangle", generateUnitNgonPointsFitToSquare(3, 0));
      this.generatePolygon("rectangle", generateUnitNgonPointsFitToSquare(4, 0));
      nodeShapes["square"] = nodeShapes["rectangle"];
      this.generateRoundRectangle();
      this.generateCutRectangle();
      this.generateBarrel();
      this.generateBottomRoundrectangle();
      {
        var diamondPoints = [0, 1, 1, 0, 0, -1, -1, 0];
        this.generatePolygon("diamond", diamondPoints);
        this.generateRoundPolygon("round-diamond", diamondPoints);
      }
      this.generatePolygon("pentagon", generateUnitNgonPointsFitToSquare(5, 0));
      this.generateRoundPolygon("round-pentagon", generateUnitNgonPointsFitToSquare(5, 0));
      this.generatePolygon("hexagon", generateUnitNgonPointsFitToSquare(6, 0));
      this.generateRoundPolygon("round-hexagon", generateUnitNgonPointsFitToSquare(6, 0));
      this.generatePolygon("heptagon", generateUnitNgonPointsFitToSquare(7, 0));
      this.generateRoundPolygon("round-heptagon", generateUnitNgonPointsFitToSquare(7, 0));
      this.generatePolygon("octagon", generateUnitNgonPointsFitToSquare(8, 0));
      this.generateRoundPolygon("round-octagon", generateUnitNgonPointsFitToSquare(8, 0));
      var star5Points = new Array(20);
      {
        var outerPoints = generateUnitNgonPoints(5, 0);
        var innerPoints = generateUnitNgonPoints(5, Math.PI / 5);
        var innerRadius = 0.5 * (3 - Math.sqrt(5));
        innerRadius *= 1.57;
        for (var i2 = 0; i2 < innerPoints.length / 2; i2++) {
          innerPoints[i2 * 2] *= innerRadius;
          innerPoints[i2 * 2 + 1] *= innerRadius;
        }
        for (var i2 = 0; i2 < 20 / 4; i2++) {
          star5Points[i2 * 4] = outerPoints[i2 * 2];
          star5Points[i2 * 4 + 1] = outerPoints[i2 * 2 + 1];
          star5Points[i2 * 4 + 2] = innerPoints[i2 * 2];
          star5Points[i2 * 4 + 3] = innerPoints[i2 * 2 + 1];
        }
      }
      star5Points = fitPolygonToSquare(star5Points);
      this.generatePolygon("star", star5Points);
      this.generatePolygon("vee", [-1, -1, 0, -0.333, 1, -1, 0, 1]);
      this.generatePolygon("rhomboid", [-1, -1, 0.333, -1, 1, 1, -0.333, 1]);
      this.nodeShapes["concavehexagon"] = this.generatePolygon("concave-hexagon", [-1, -0.95, -0.75, 0, -1, 0.95, 1, 0.95, 0.75, 0, 1, -0.95]);
      {
        var tagPoints = [-1, -1, 0.25, -1, 1, 0, 0.25, 1, -1, 1];
        this.generatePolygon("tag", tagPoints);
        this.generateRoundPolygon("round-tag", tagPoints);
      }
      nodeShapes.makePolygon = function(points) {
        var key = points.join("$");
        var name = "polygon-" + key;
        var shape;
        if (shape = this[name]) {
          return shape;
        }
        return renderer2.generatePolygon(name, points);
      };
    };
    var BRp$e = {};
    BRp$e.timeToRender = function() {
      return this.redrawTotalTime / this.redrawCount;
    };
    BRp$e.redraw = function(options) {
      options = options || staticEmptyObject();
      var r = this;
      if (r.averageRedrawTime === void 0) {
        r.averageRedrawTime = 0;
      }
      if (r.lastRedrawTime === void 0) {
        r.lastRedrawTime = 0;
      }
      if (r.lastDrawTime === void 0) {
        r.lastDrawTime = 0;
      }
      r.requestedFrame = true;
      r.renderOptions = options;
    };
    BRp$e.beforeRender = function(fn2, priority) {
      if (this.destroyed) {
        return;
      }
      if (priority == null) {
        error("Priority is not optional for beforeRender");
      }
      var cbs = this.beforeRenderCallbacks;
      cbs.push({
        fn: fn2,
        priority
      });
      cbs.sort(function(a, b) {
        return b.priority - a.priority;
      });
    };
    var beforeRenderCallbacks = function beforeRenderCallbacks2(r, willDraw, startTime) {
      var cbs = r.beforeRenderCallbacks;
      for (var i2 = 0; i2 < cbs.length; i2++) {
        cbs[i2].fn(willDraw, startTime);
      }
    };
    BRp$e.startRenderLoop = function() {
      var r = this;
      var cy = r.cy;
      if (r.renderLoopStarted) {
        return;
      } else {
        r.renderLoopStarted = true;
      }
      var renderFn = function renderFn2(requestTime) {
        if (r.destroyed) {
          return;
        }
        if (cy.batching())
          ;
        else if (r.requestedFrame && !r.skipFrame) {
          beforeRenderCallbacks(r, true, requestTime);
          var startTime = performanceNow();
          r.render(r.renderOptions);
          var endTime = r.lastDrawTime = performanceNow();
          if (r.averageRedrawTime === void 0) {
            r.averageRedrawTime = endTime - startTime;
          }
          if (r.redrawCount === void 0) {
            r.redrawCount = 0;
          }
          r.redrawCount++;
          if (r.redrawTotalTime === void 0) {
            r.redrawTotalTime = 0;
          }
          var duration = endTime - startTime;
          r.redrawTotalTime += duration;
          r.lastRedrawTime = duration;
          r.averageRedrawTime = r.averageRedrawTime / 2 + duration / 2;
          r.requestedFrame = false;
        } else {
          beforeRenderCallbacks(r, false, requestTime);
        }
        r.skipFrame = false;
        requestAnimationFrame2(renderFn2);
      };
      requestAnimationFrame2(renderFn);
    };
    var BaseRenderer = function BaseRenderer2(options) {
      this.init(options);
    };
    var BR = BaseRenderer;
    var BRp$f = BR.prototype;
    BRp$f.clientFunctions = ["redrawHint", "render", "renderTo", "matchCanvasSize", "nodeShapeImpl", "arrowShapeImpl"];
    BRp$f.init = function(options) {
      var r = this;
      r.options = options;
      r.cy = options.cy;
      var ctr = r.container = options.cy.container();
      if (window$1) {
        var document2 = window$1.document;
        var head = document2.head;
        var stylesheetId = "__________cytoscape_stylesheet";
        var className = "__________cytoscape_container";
        var stylesheetAlreadyExists = document2.getElementById(stylesheetId) != null;
        if (ctr.className.indexOf(className) < 0) {
          ctr.className = (ctr.className || "") + " " + className;
        }
        if (!stylesheetAlreadyExists) {
          var stylesheet2 = document2.createElement("style");
          stylesheet2.id = stylesheetId;
          stylesheet2.innerHTML = "." + className + " { position: relative; }";
          head.insertBefore(stylesheet2, head.children[0]);
        }
        var computedStyle = window$1.getComputedStyle(ctr);
        var position2 = computedStyle.getPropertyValue("position");
        if (position2 === "static") {
          warn("A Cytoscape container has style position:static and so can not use UI extensions properly");
        }
      }
      r.selection = [void 0, void 0, void 0, void 0, 0];
      r.bezierProjPcts = [0.05, 0.225, 0.4, 0.5, 0.6, 0.775, 0.95];
      r.hoverData = {
        down: null,
        last: null,
        downTime: null,
        triggerMode: null,
        dragging: false,
        initialPan: [null, null],
        capture: false
      };
      r.dragData = {
        possibleDragElements: []
      };
      r.touchData = {
        start: null,
        capture: false,
        startPosition: [null, null, null, null, null, null],
        singleTouchStartTime: null,
        singleTouchMoved: true,
        now: [null, null, null, null, null, null],
        earlier: [null, null, null, null, null, null]
      };
      r.redraws = 0;
      r.showFps = options.showFps;
      r.debug = options.debug;
      r.hideEdgesOnViewport = options.hideEdgesOnViewport;
      r.textureOnViewport = options.textureOnViewport;
      r.wheelSensitivity = options.wheelSensitivity;
      r.motionBlurEnabled = options.motionBlur;
      r.forcedPixelRatio = number(options.pixelRatio) ? options.pixelRatio : null;
      r.motionBlur = options.motionBlur;
      r.motionBlurOpacity = options.motionBlurOpacity;
      r.motionBlurTransparency = 1 - r.motionBlurOpacity;
      r.motionBlurPxRatio = 1;
      r.mbPxRBlurry = 1;
      r.minMbLowQualFrames = 4;
      r.fullQualityMb = false;
      r.clearedForMotionBlur = [];
      r.desktopTapThreshold = options.desktopTapThreshold;
      r.desktopTapThreshold2 = options.desktopTapThreshold * options.desktopTapThreshold;
      r.touchTapThreshold = options.touchTapThreshold;
      r.touchTapThreshold2 = options.touchTapThreshold * options.touchTapThreshold;
      r.tapholdDuration = 500;
      r.bindings = [];
      r.beforeRenderCallbacks = [];
      r.beforeRenderPriorities = {
        animations: 400,
        eleCalcs: 300,
        eleTxrDeq: 200,
        lyrTxrDeq: 150,
        lyrTxrSkip: 100
      };
      r.registerNodeShapes();
      r.registerArrowShapes();
      r.registerCalculationListeners();
    };
    BRp$f.notify = function(eventName, eles) {
      var r = this;
      var cy = r.cy;
      if (this.destroyed) {
        return;
      }
      if (eventName === "init") {
        r.load();
        return;
      }
      if (eventName === "destroy") {
        r.destroy();
        return;
      }
      if (eventName === "add" || eventName === "remove" || eventName === "move" && cy.hasCompoundNodes() || eventName === "load" || eventName === "zorder" || eventName === "mount") {
        r.invalidateCachedZSortedEles();
      }
      if (eventName === "viewport") {
        r.redrawHint("select", true);
      }
      if (eventName === "load" || eventName === "resize" || eventName === "mount") {
        r.invalidateContainerClientCoordsCache();
        r.matchCanvasSize(r.container);
      }
      r.redrawHint("eles", true);
      r.redrawHint("drag", true);
      this.startRenderLoop();
      this.redraw();
    };
    BRp$f.destroy = function() {
      var r = this;
      r.destroyed = true;
      r.cy.stopAnimationLoop();
      for (var i2 = 0; i2 < r.bindings.length; i2++) {
        var binding = r.bindings[i2];
        var b = binding;
        var tgt = b.target;
        (tgt.off || tgt.removeEventListener).apply(tgt, b.args);
      }
      r.bindings = [];
      r.beforeRenderCallbacks = [];
      r.onUpdateEleCalcsFns = [];
      if (r.removeObserver) {
        r.removeObserver.disconnect();
      }
      if (r.styleObserver) {
        r.styleObserver.disconnect();
      }
      if (r.resizeObserver) {
        r.resizeObserver.disconnect();
      }
      if (r.labelCalcDiv) {
        try {
          document.body.removeChild(r.labelCalcDiv);
        } catch (e) {
        }
      }
    };
    BRp$f.isHeadless = function() {
      return false;
    };
    [BRp, BRp$a, BRp$b, BRp$c, BRp$d, BRp$e].forEach(function(props) {
      extend(BRp$f, props);
    });
    var fullFpsTime = 1e3 / 60;
    var defs = {
      setupDequeueing: function setupDequeueing(opts) {
        return function setupDequeueingImpl() {
          var self2 = this;
          var r = this.renderer;
          if (self2.dequeueingSetup) {
            return;
          } else {
            self2.dequeueingSetup = true;
          }
          var queueRedraw = util(function() {
            r.redrawHint("eles", true);
            r.redrawHint("drag", true);
            r.redraw();
          }, opts.deqRedrawThreshold);
          var dequeue = function dequeue2(willDraw, frameStartTime) {
            var startTime = performanceNow();
            var avgRenderTime = r.averageRedrawTime;
            var renderTime = r.lastRedrawTime;
            var deqd = [];
            var extent = r.cy.extent();
            var pixelRatio = r.getPixelRatio();
            if (!willDraw) {
              r.flushRenderedStyleQueue();
            }
            while (true) {
              var now = performanceNow();
              var duration = now - startTime;
              var frameDuration = now - frameStartTime;
              if (renderTime < fullFpsTime) {
                var timeAvailable = fullFpsTime - (willDraw ? avgRenderTime : 0);
                if (frameDuration >= opts.deqFastCost * timeAvailable) {
                  break;
                }
              } else {
                if (willDraw) {
                  if (duration >= opts.deqCost * renderTime || duration >= opts.deqAvgCost * avgRenderTime) {
                    break;
                  }
                } else if (frameDuration >= opts.deqNoDrawCost * fullFpsTime) {
                  break;
                }
              }
              var thisDeqd = opts.deq(self2, pixelRatio, extent);
              if (thisDeqd.length > 0) {
                for (var i2 = 0; i2 < thisDeqd.length; i2++) {
                  deqd.push(thisDeqd[i2]);
                }
              } else {
                break;
              }
            }
            if (deqd.length > 0) {
              opts.onDeqd(self2, deqd);
              if (!willDraw && opts.shouldRedraw(self2, deqd, pixelRatio, extent)) {
                queueRedraw();
              }
            }
          };
          var priority = opts.priority || noop;
          r.beforeRender(dequeue, priority(self2));
        };
      }
    };
    var ElementTextureCacheLookup = /* @__PURE__ */ function() {
      function ElementTextureCacheLookup2(getKey2) {
        var doesEleInvalidateKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : falsify;
        _classCallCheck(this, ElementTextureCacheLookup2);
        this.idsByKey = new Map$1();
        this.keyForId = new Map$1();
        this.cachesByLvl = new Map$1();
        this.lvls = [];
        this.getKey = getKey2;
        this.doesEleInvalidateKey = doesEleInvalidateKey;
      }
      _createClass(ElementTextureCacheLookup2, [{
        key: "getIdsFor",
        value: function getIdsFor(key) {
          if (key == null) {
            error("Can not get id list for null key");
          }
          var idsByKey = this.idsByKey;
          var ids = this.idsByKey.get(key);
          if (!ids) {
            ids = new Set$1();
            idsByKey.set(key, ids);
          }
          return ids;
        }
      }, {
        key: "addIdForKey",
        value: function addIdForKey(key, id) {
          if (key != null) {
            this.getIdsFor(key).add(id);
          }
        }
      }, {
        key: "deleteIdForKey",
        value: function deleteIdForKey(key, id) {
          if (key != null) {
            this.getIdsFor(key)["delete"](id);
          }
        }
      }, {
        key: "getNumberOfIdsForKey",
        value: function getNumberOfIdsForKey(key) {
          if (key == null) {
            return 0;
          } else {
            return this.getIdsFor(key).size;
          }
        }
      }, {
        key: "updateKeyMappingFor",
        value: function updateKeyMappingFor(ele) {
          var id = ele.id();
          var prevKey = this.keyForId.get(id);
          var currKey = this.getKey(ele);
          this.deleteIdForKey(prevKey, id);
          this.addIdForKey(currKey, id);
          this.keyForId.set(id, currKey);
        }
      }, {
        key: "deleteKeyMappingFor",
        value: function deleteKeyMappingFor(ele) {
          var id = ele.id();
          var prevKey = this.keyForId.get(id);
          this.deleteIdForKey(prevKey, id);
          this.keyForId["delete"](id);
        }
      }, {
        key: "keyHasChangedFor",
        value: function keyHasChangedFor(ele) {
          var id = ele.id();
          var prevKey = this.keyForId.get(id);
          var newKey = this.getKey(ele);
          return prevKey !== newKey;
        }
      }, {
        key: "isInvalid",
        value: function isInvalid(ele) {
          return this.keyHasChangedFor(ele) || this.doesEleInvalidateKey(ele);
        }
      }, {
        key: "getCachesAt",
        value: function getCachesAt(lvl) {
          var cachesByLvl = this.cachesByLvl, lvls = this.lvls;
          var caches = cachesByLvl.get(lvl);
          if (!caches) {
            caches = new Map$1();
            cachesByLvl.set(lvl, caches);
            lvls.push(lvl);
          }
          return caches;
        }
      }, {
        key: "getCache",
        value: function getCache(key, lvl) {
          return this.getCachesAt(lvl).get(key);
        }
      }, {
        key: "get",
        value: function get(ele, lvl) {
          var key = this.getKey(ele);
          var cache2 = this.getCache(key, lvl);
          if (cache2 != null) {
            this.updateKeyMappingFor(ele);
          }
          return cache2;
        }
      }, {
        key: "getForCachedKey",
        value: function getForCachedKey(ele, lvl) {
          var key = this.keyForId.get(ele.id());
          var cache2 = this.getCache(key, lvl);
          return cache2;
        }
      }, {
        key: "hasCache",
        value: function hasCache(key, lvl) {
          return this.getCachesAt(lvl).has(key);
        }
      }, {
        key: "has",
        value: function has(ele, lvl) {
          var key = this.getKey(ele);
          return this.hasCache(key, lvl);
        }
      }, {
        key: "setCache",
        value: function setCache(key, lvl, cache2) {
          cache2.key = key;
          this.getCachesAt(lvl).set(key, cache2);
        }
      }, {
        key: "set",
        value: function set(ele, lvl, cache2) {
          var key = this.getKey(ele);
          this.setCache(key, lvl, cache2);
          this.updateKeyMappingFor(ele);
        }
      }, {
        key: "deleteCache",
        value: function deleteCache(key, lvl) {
          this.getCachesAt(lvl)["delete"](key);
        }
      }, {
        key: "delete",
        value: function _delete(ele, lvl) {
          var key = this.getKey(ele);
          this.deleteCache(key, lvl);
        }
      }, {
        key: "invalidateKey",
        value: function invalidateKey(key) {
          var _this = this;
          this.lvls.forEach(function(lvl) {
            return _this.deleteCache(key, lvl);
          });
        }
      }, {
        key: "invalidate",
        value: function invalidate(ele) {
          var id = ele.id();
          var key = this.keyForId.get(id);
          this.deleteKeyMappingFor(ele);
          var entireKeyInvalidated = this.doesEleInvalidateKey(ele);
          if (entireKeyInvalidated) {
            this.invalidateKey(key);
          }
          return entireKeyInvalidated || this.getNumberOfIdsForKey(key) === 0;
        }
      }]);
      return ElementTextureCacheLookup2;
    }();
    var minTxrH = 25;
    var txrStepH = 50;
    var minLvl = -4;
    var maxLvl = 3;
    var maxZoom = 7.99;
    var eleTxrSpacing = 8;
    var defTxrWidth = 1024;
    var maxTxrW = 1024;
    var maxTxrH = 1024;
    var minUtility = 0.2;
    var maxFullness = 0.8;
    var maxFullnessChecks = 10;
    var deqCost = 0.15;
    var deqAvgCost = 0.1;
    var deqNoDrawCost = 0.9;
    var deqFastCost = 0.9;
    var deqRedrawThreshold = 100;
    var maxDeqSize = 1;
    var getTxrReasons = {
      dequeue: "dequeue",
      downscale: "downscale",
      highQuality: "highQuality"
    };
    var initDefaults = defaults({
      getKey: null,
      doesEleInvalidateKey: falsify,
      drawElement: null,
      getBoundingBox: null,
      getRotationPoint: null,
      getRotationOffset: null,
      isVisible: trueify,
      allowEdgeTxrCaching: true,
      allowParentTxrCaching: true
    });
    var ElementTextureCache = function ElementTextureCache2(renderer2, initOptions) {
      var self2 = this;
      self2.renderer = renderer2;
      self2.onDequeues = [];
      var opts = initDefaults(initOptions);
      extend(self2, opts);
      self2.lookup = new ElementTextureCacheLookup(opts.getKey, opts.doesEleInvalidateKey);
      self2.setupDequeueing();
    };
    var ETCp = ElementTextureCache.prototype;
    ETCp.reasons = getTxrReasons;
    ETCp.getTextureQueue = function(txrH) {
      var self2 = this;
      self2.eleImgCaches = self2.eleImgCaches || {};
      return self2.eleImgCaches[txrH] = self2.eleImgCaches[txrH] || [];
    };
    ETCp.getRetiredTextureQueue = function(txrH) {
      var self2 = this;
      var rtxtrQs = self2.eleImgCaches.retired = self2.eleImgCaches.retired || {};
      var rtxtrQ = rtxtrQs[txrH] = rtxtrQs[txrH] || [];
      return rtxtrQ;
    };
    ETCp.getElementQueue = function() {
      var self2 = this;
      var q = self2.eleCacheQueue = self2.eleCacheQueue || new Heap(function(a, b) {
        return b.reqs - a.reqs;
      });
      return q;
    };
    ETCp.getElementKeyToQueue = function() {
      var self2 = this;
      var k2q = self2.eleKeyToCacheQueue = self2.eleKeyToCacheQueue || {};
      return k2q;
    };
    ETCp.getElement = function(ele, bb, pxRatio, lvl, reason) {
      var self2 = this;
      var r = this.renderer;
      var zoom = r.cy.zoom();
      var lookup2 = this.lookup;
      if (!bb || bb.w === 0 || bb.h === 0 || isNaN(bb.w) || isNaN(bb.h) || !ele.visible() || ele.removed()) {
        return null;
      }
      if (!self2.allowEdgeTxrCaching && ele.isEdge() || !self2.allowParentTxrCaching && ele.isParent()) {
        return null;
      }
      if (lvl == null) {
        lvl = Math.ceil(log2(zoom * pxRatio));
      }
      if (lvl < minLvl) {
        lvl = minLvl;
      } else if (zoom >= maxZoom || lvl > maxLvl) {
        return null;
      }
      var scale = Math.pow(2, lvl);
      var eleScaledH = bb.h * scale;
      var eleScaledW = bb.w * scale;
      var scaledLabelShown = r.eleTextBiggerThanMin(ele, scale);
      if (!this.isVisible(ele, scaledLabelShown)) {
        return null;
      }
      var eleCache = lookup2.get(ele, lvl);
      if (eleCache && eleCache.invalidated) {
        eleCache.invalidated = false;
        eleCache.texture.invalidatedWidth -= eleCache.width;
      }
      if (eleCache) {
        return eleCache;
      }
      var txrH;
      if (eleScaledH <= minTxrH) {
        txrH = minTxrH;
      } else if (eleScaledH <= txrStepH) {
        txrH = txrStepH;
      } else {
        txrH = Math.ceil(eleScaledH / txrStepH) * txrStepH;
      }
      if (eleScaledH > maxTxrH || eleScaledW > maxTxrW) {
        return null;
      }
      var txrQ = self2.getTextureQueue(txrH);
      var txr = txrQ[txrQ.length - 2];
      var addNewTxr = function addNewTxr2() {
        return self2.recycleTexture(txrH, eleScaledW) || self2.addTexture(txrH, eleScaledW);
      };
      if (!txr) {
        txr = txrQ[txrQ.length - 1];
      }
      if (!txr) {
        txr = addNewTxr();
      }
      if (txr.width - txr.usedWidth < eleScaledW) {
        txr = addNewTxr();
      }
      var scalableFrom = function scalableFrom2(otherCache) {
        return otherCache && otherCache.scaledLabelShown === scaledLabelShown;
      };
      var deqing = reason && reason === getTxrReasons.dequeue;
      var highQualityReq = reason && reason === getTxrReasons.highQuality;
      var downscaleReq = reason && reason === getTxrReasons.downscale;
      var higherCache;
      for (var l = lvl + 1; l <= maxLvl; l++) {
        var c = lookup2.get(ele, l);
        if (c) {
          higherCache = c;
          break;
        }
      }
      var oneUpCache = higherCache && higherCache.level === lvl + 1 ? higherCache : null;
      var downscale = function downscale2() {
        txr.context.drawImage(oneUpCache.texture.canvas, oneUpCache.x, 0, oneUpCache.width, oneUpCache.height, txr.usedWidth, 0, eleScaledW, eleScaledH);
      };
      txr.context.setTransform(1, 0, 0, 1, 0, 0);
      txr.context.clearRect(txr.usedWidth, 0, eleScaledW, txrH);
      if (scalableFrom(oneUpCache)) {
        downscale();
      } else if (scalableFrom(higherCache)) {
        if (highQualityReq) {
          for (var _l = higherCache.level; _l > lvl; _l--) {
            oneUpCache = self2.getElement(ele, bb, pxRatio, _l, getTxrReasons.downscale);
          }
          downscale();
        } else {
          self2.queueElement(ele, higherCache.level - 1);
          return higherCache;
        }
      } else {
        var lowerCache;
        if (!deqing && !highQualityReq && !downscaleReq) {
          for (var _l2 = lvl - 1; _l2 >= minLvl; _l2--) {
            var _c = lookup2.get(ele, _l2);
            if (_c) {
              lowerCache = _c;
              break;
            }
          }
        }
        if (scalableFrom(lowerCache)) {
          self2.queueElement(ele, lvl);
          return lowerCache;
        }
        txr.context.translate(txr.usedWidth, 0);
        txr.context.scale(scale, scale);
        this.drawElement(txr.context, ele, bb, scaledLabelShown, false);
        txr.context.scale(1 / scale, 1 / scale);
        txr.context.translate(-txr.usedWidth, 0);
      }
      eleCache = {
        x: txr.usedWidth,
        texture: txr,
        level: lvl,
        scale,
        width: eleScaledW,
        height: eleScaledH,
        scaledLabelShown
      };
      txr.usedWidth += Math.ceil(eleScaledW + eleTxrSpacing);
      txr.eleCaches.push(eleCache);
      lookup2.set(ele, lvl, eleCache);
      self2.checkTextureFullness(txr);
      return eleCache;
    };
    ETCp.invalidateElements = function(eles) {
      for (var i2 = 0; i2 < eles.length; i2++) {
        this.invalidateElement(eles[i2]);
      }
    };
    ETCp.invalidateElement = function(ele) {
      var self2 = this;
      var lookup2 = self2.lookup;
      var caches = [];
      var invalid = lookup2.isInvalid(ele);
      if (!invalid) {
        return;
      }
      for (var lvl = minLvl; lvl <= maxLvl; lvl++) {
        var cache2 = lookup2.getForCachedKey(ele, lvl);
        if (cache2) {
          caches.push(cache2);
        }
      }
      var noOtherElesUseCache = lookup2.invalidate(ele);
      if (noOtherElesUseCache) {
        for (var i2 = 0; i2 < caches.length; i2++) {
          var _cache = caches[i2];
          var txr = _cache.texture;
          txr.invalidatedWidth += _cache.width;
          _cache.invalidated = true;
          self2.checkTextureUtility(txr);
        }
      }
      self2.removeFromQueue(ele);
    };
    ETCp.checkTextureUtility = function(txr) {
      if (txr.invalidatedWidth >= minUtility * txr.width) {
        this.retireTexture(txr);
      }
    };
    ETCp.checkTextureFullness = function(txr) {
      var self2 = this;
      var txrQ = self2.getTextureQueue(txr.height);
      if (txr.usedWidth / txr.width > maxFullness && txr.fullnessChecks >= maxFullnessChecks) {
        removeFromArray(txrQ, txr);
      } else {
        txr.fullnessChecks++;
      }
    };
    ETCp.retireTexture = function(txr) {
      var self2 = this;
      var txrH = txr.height;
      var txrQ = self2.getTextureQueue(txrH);
      var lookup2 = this.lookup;
      removeFromArray(txrQ, txr);
      txr.retired = true;
      var eleCaches = txr.eleCaches;
      for (var i2 = 0; i2 < eleCaches.length; i2++) {
        var eleCache = eleCaches[i2];
        lookup2.deleteCache(eleCache.key, eleCache.level);
      }
      clearArray(eleCaches);
      var rtxtrQ = self2.getRetiredTextureQueue(txrH);
      rtxtrQ.push(txr);
    };
    ETCp.addTexture = function(txrH, minW) {
      var self2 = this;
      var txrQ = self2.getTextureQueue(txrH);
      var txr = {};
      txrQ.push(txr);
      txr.eleCaches = [];
      txr.height = txrH;
      txr.width = Math.max(defTxrWidth, minW);
      txr.usedWidth = 0;
      txr.invalidatedWidth = 0;
      txr.fullnessChecks = 0;
      txr.canvas = self2.renderer.makeOffscreenCanvas(txr.width, txr.height);
      txr.context = txr.canvas.getContext("2d");
      return txr;
    };
    ETCp.recycleTexture = function(txrH, minW) {
      var self2 = this;
      var txrQ = self2.getTextureQueue(txrH);
      var rtxtrQ = self2.getRetiredTextureQueue(txrH);
      for (var i2 = 0; i2 < rtxtrQ.length; i2++) {
        var txr = rtxtrQ[i2];
        if (txr.width >= minW) {
          txr.retired = false;
          txr.usedWidth = 0;
          txr.invalidatedWidth = 0;
          txr.fullnessChecks = 0;
          clearArray(txr.eleCaches);
          txr.context.setTransform(1, 0, 0, 1, 0, 0);
          txr.context.clearRect(0, 0, txr.width, txr.height);
          removeFromArray(rtxtrQ, txr);
          txrQ.push(txr);
          return txr;
        }
      }
    };
    ETCp.queueElement = function(ele, lvl) {
      var self2 = this;
      var q = self2.getElementQueue();
      var k2q = self2.getElementKeyToQueue();
      var key = this.getKey(ele);
      var existingReq = k2q[key];
      if (existingReq) {
        existingReq.level = Math.max(existingReq.level, lvl);
        existingReq.eles.merge(ele);
        existingReq.reqs++;
        q.updateItem(existingReq);
      } else {
        var req = {
          eles: ele.spawn().merge(ele),
          level: lvl,
          reqs: 1,
          key
        };
        q.push(req);
        k2q[key] = req;
      }
    };
    ETCp.dequeue = function(pxRatio) {
      var self2 = this;
      var q = self2.getElementQueue();
      var k2q = self2.getElementKeyToQueue();
      var dequeued = [];
      var lookup2 = self2.lookup;
      for (var i2 = 0; i2 < maxDeqSize; i2++) {
        if (q.size() > 0) {
          var req = q.pop();
          var key = req.key;
          var ele = req.eles[0];
          var cacheExists = lookup2.hasCache(ele, req.level);
          k2q[key] = null;
          if (cacheExists) {
            continue;
          }
          dequeued.push(req);
          var bb = self2.getBoundingBox(ele);
          self2.getElement(ele, bb, pxRatio, req.level, getTxrReasons.dequeue);
        } else {
          break;
        }
      }
      return dequeued;
    };
    ETCp.removeFromQueue = function(ele) {
      var self2 = this;
      var q = self2.getElementQueue();
      var k2q = self2.getElementKeyToQueue();
      var key = this.getKey(ele);
      var req = k2q[key];
      if (req != null) {
        if (req.eles.length === 1) {
          req.reqs = MAX_INT;
          q.updateItem(req);
          q.pop();
          k2q[key] = null;
        } else {
          req.eles.unmerge(ele);
        }
      }
    };
    ETCp.onDequeue = function(fn2) {
      this.onDequeues.push(fn2);
    };
    ETCp.offDequeue = function(fn2) {
      removeFromArray(this.onDequeues, fn2);
    };
    ETCp.setupDequeueing = defs.setupDequeueing({
      deqRedrawThreshold,
      deqCost,
      deqAvgCost,
      deqNoDrawCost,
      deqFastCost,
      deq: function deq(self2, pxRatio, extent) {
        return self2.dequeue(pxRatio, extent);
      },
      onDeqd: function onDeqd(self2, deqd) {
        for (var i2 = 0; i2 < self2.onDequeues.length; i2++) {
          var fn2 = self2.onDequeues[i2];
          fn2(deqd);
        }
      },
      shouldRedraw: function shouldRedraw(self2, deqd, pxRatio, extent) {
        for (var i2 = 0; i2 < deqd.length; i2++) {
          var eles = deqd[i2].eles;
          for (var j = 0; j < eles.length; j++) {
            var bb = eles[j].boundingBox();
            if (boundingBoxesIntersect(bb, extent)) {
              return true;
            }
          }
        }
        return false;
      },
      priority: function priority(self2) {
        return self2.renderer.beforeRenderPriorities.eleTxrDeq;
      }
    });
    var defNumLayers = 1;
    var minLvl$1 = -4;
    var maxLvl$1 = 2;
    var maxZoom$1 = 3.99;
    var deqRedrawThreshold$1 = 50;
    var refineEleDebounceTime = 50;
    var deqCost$1 = 0.15;
    var deqAvgCost$1 = 0.1;
    var deqNoDrawCost$1 = 0.9;
    var deqFastCost$1 = 0.9;
    var maxDeqSize$1 = 1;
    var invalidThreshold = 250;
    var maxLayerArea = 4e3 * 4e3;
    var useHighQualityEleTxrReqs = true;
    var LayeredTextureCache = function LayeredTextureCache2(renderer2) {
      var self2 = this;
      var r = self2.renderer = renderer2;
      var cy = r.cy;
      self2.layersByLevel = {};
      self2.firstGet = true;
      self2.lastInvalidationTime = performanceNow() - 2 * invalidThreshold;
      self2.skipping = false;
      self2.eleTxrDeqs = cy.collection();
      self2.scheduleElementRefinement = util(function() {
        self2.refineElementTextures(self2.eleTxrDeqs);
        self2.eleTxrDeqs.unmerge(self2.eleTxrDeqs);
      }, refineEleDebounceTime);
      r.beforeRender(function(willDraw, now) {
        if (now - self2.lastInvalidationTime <= invalidThreshold) {
          self2.skipping = true;
        } else {
          self2.skipping = false;
        }
      }, r.beforeRenderPriorities.lyrTxrSkip);
      var qSort = function qSort2(a, b) {
        return b.reqs - a.reqs;
      };
      self2.layersQueue = new Heap(qSort);
      self2.setupDequeueing();
    };
    var LTCp = LayeredTextureCache.prototype;
    var layerIdPool = 0;
    var MAX_INT$1 = Math.pow(2, 53) - 1;
    LTCp.makeLayer = function(bb, lvl) {
      var scale = Math.pow(2, lvl);
      var w = Math.ceil(bb.w * scale);
      var h = Math.ceil(bb.h * scale);
      var canvas = this.renderer.makeOffscreenCanvas(w, h);
      var layer = {
        id: layerIdPool = ++layerIdPool % MAX_INT$1,
        bb,
        level: lvl,
        width: w,
        height: h,
        canvas,
        context: canvas.getContext("2d"),
        eles: [],
        elesQueue: [],
        reqs: 0
      };
      var cxt = layer.context;
      var dx = -layer.bb.x1;
      var dy = -layer.bb.y1;
      cxt.scale(scale, scale);
      cxt.translate(dx, dy);
      return layer;
    };
    LTCp.getLayers = function(eles, pxRatio, lvl) {
      var self2 = this;
      var r = self2.renderer;
      var cy = r.cy;
      var zoom = cy.zoom();
      var firstGet = self2.firstGet;
      self2.firstGet = false;
      if (lvl == null) {
        lvl = Math.ceil(log2(zoom * pxRatio));
        if (lvl < minLvl$1) {
          lvl = minLvl$1;
        } else if (zoom >= maxZoom$1 || lvl > maxLvl$1) {
          return null;
        }
      }
      self2.validateLayersElesOrdering(lvl, eles);
      var layersByLvl = self2.layersByLevel;
      var scale = Math.pow(2, lvl);
      var layers = layersByLvl[lvl] = layersByLvl[lvl] || [];
      var bb;
      var lvlComplete = self2.levelIsComplete(lvl, eles);
      var tmpLayers;
      var checkTempLevels = function checkTempLevels2() {
        var canUseAsTmpLvl = function canUseAsTmpLvl2(l) {
          self2.validateLayersElesOrdering(l, eles);
          if (self2.levelIsComplete(l, eles)) {
            tmpLayers = layersByLvl[l];
            return true;
          }
        };
        var checkLvls = function checkLvls2(dir) {
          if (tmpLayers) {
            return;
          }
          for (var l = lvl + dir; minLvl$1 <= l && l <= maxLvl$1; l += dir) {
            if (canUseAsTmpLvl(l)) {
              break;
            }
          }
        };
        checkLvls(1);
        checkLvls(-1);
        for (var i3 = layers.length - 1; i3 >= 0; i3--) {
          var layer2 = layers[i3];
          if (layer2.invalid) {
            removeFromArray(layers, layer2);
          }
        }
      };
      if (!lvlComplete) {
        checkTempLevels();
      } else {
        return layers;
      }
      var getBb = function getBb2() {
        if (!bb) {
          bb = makeBoundingBox();
          for (var i3 = 0; i3 < eles.length; i3++) {
            updateBoundingBox(bb, eles[i3].boundingBox());
          }
        }
        return bb;
      };
      var makeLayer = function makeLayer2(opts) {
        opts = opts || {};
        var after = opts.after;
        getBb();
        var area = bb.w * scale * (bb.h * scale);
        if (area > maxLayerArea) {
          return null;
        }
        var layer2 = self2.makeLayer(bb, lvl);
        if (after != null) {
          var index = layers.indexOf(after) + 1;
          layers.splice(index, 0, layer2);
        } else if (opts.insert === void 0 || opts.insert) {
          layers.unshift(layer2);
        }
        return layer2;
      };
      if (self2.skipping && !firstGet) {
        return null;
      }
      var layer = null;
      var maxElesPerLayer = eles.length / defNumLayers;
      var allowLazyQueueing = !firstGet;
      for (var i2 = 0; i2 < eles.length; i2++) {
        var ele = eles[i2];
        var rs = ele._private.rscratch;
        var caches = rs.imgLayerCaches = rs.imgLayerCaches || {};
        var existingLayer = caches[lvl];
        if (existingLayer) {
          layer = existingLayer;
          continue;
        }
        if (!layer || layer.eles.length >= maxElesPerLayer || !boundingBoxInBoundingBox(layer.bb, ele.boundingBox())) {
          layer = makeLayer({
            insert: true,
            after: layer
          });
          if (!layer) {
            return null;
          }
        }
        if (tmpLayers || allowLazyQueueing) {
          self2.queueLayer(layer, ele);
        } else {
          self2.drawEleInLayer(layer, ele, lvl, pxRatio);
        }
        layer.eles.push(ele);
        caches[lvl] = layer;
      }
      if (tmpLayers) {
        return tmpLayers;
      }
      if (allowLazyQueueing) {
        return null;
      }
      return layers;
    };
    LTCp.getEleLevelForLayerLevel = function(lvl, pxRatio) {
      return lvl;
    };
    LTCp.drawEleInLayer = function(layer, ele, lvl, pxRatio) {
      var self2 = this;
      var r = this.renderer;
      var context = layer.context;
      var bb = ele.boundingBox();
      if (bb.w === 0 || bb.h === 0 || !ele.visible()) {
        return;
      }
      lvl = self2.getEleLevelForLayerLevel(lvl, pxRatio);
      {
        r.setImgSmoothing(context, false);
      }
      {
        r.drawCachedElement(context, ele, null, null, lvl, useHighQualityEleTxrReqs);
      }
      {
        r.setImgSmoothing(context, true);
      }
    };
    LTCp.levelIsComplete = function(lvl, eles) {
      var self2 = this;
      var layers = self2.layersByLevel[lvl];
      if (!layers || layers.length === 0) {
        return false;
      }
      var numElesInLayers = 0;
      for (var i2 = 0; i2 < layers.length; i2++) {
        var layer = layers[i2];
        if (layer.reqs > 0) {
          return false;
        }
        if (layer.invalid) {
          return false;
        }
        numElesInLayers += layer.eles.length;
      }
      if (numElesInLayers !== eles.length) {
        return false;
      }
      return true;
    };
    LTCp.validateLayersElesOrdering = function(lvl, eles) {
      var layers = this.layersByLevel[lvl];
      if (!layers) {
        return;
      }
      for (var i2 = 0; i2 < layers.length; i2++) {
        var layer = layers[i2];
        var offset = -1;
        for (var j = 0; j < eles.length; j++) {
          if (layer.eles[0] === eles[j]) {
            offset = j;
            break;
          }
        }
        if (offset < 0) {
          this.invalidateLayer(layer);
          continue;
        }
        var o2 = offset;
        for (var j = 0; j < layer.eles.length; j++) {
          if (layer.eles[j] !== eles[o2 + j]) {
            this.invalidateLayer(layer);
            break;
          }
        }
      }
    };
    LTCp.updateElementsInLayers = function(eles, update2) {
      var self2 = this;
      var isEles = element(eles[0]);
      for (var i2 = 0; i2 < eles.length; i2++) {
        var req = isEles ? null : eles[i2];
        var ele = isEles ? eles[i2] : eles[i2].ele;
        var rs = ele._private.rscratch;
        var caches = rs.imgLayerCaches = rs.imgLayerCaches || {};
        for (var l = minLvl$1; l <= maxLvl$1; l++) {
          var layer = caches[l];
          if (!layer) {
            continue;
          }
          if (req && self2.getEleLevelForLayerLevel(layer.level) !== req.level) {
            continue;
          }
          update2(layer, ele, req);
        }
      }
    };
    LTCp.haveLayers = function() {
      var self2 = this;
      var haveLayers = false;
      for (var l = minLvl$1; l <= maxLvl$1; l++) {
        var layers = self2.layersByLevel[l];
        if (layers && layers.length > 0) {
          haveLayers = true;
          break;
        }
      }
      return haveLayers;
    };
    LTCp.invalidateElements = function(eles) {
      var self2 = this;
      if (eles.length === 0) {
        return;
      }
      self2.lastInvalidationTime = performanceNow();
      if (eles.length === 0 || !self2.haveLayers()) {
        return;
      }
      self2.updateElementsInLayers(eles, function invalAssocLayers(layer, ele, req) {
        self2.invalidateLayer(layer);
      });
    };
    LTCp.invalidateLayer = function(layer) {
      this.lastInvalidationTime = performanceNow();
      if (layer.invalid) {
        return;
      }
      var lvl = layer.level;
      var eles = layer.eles;
      var layers = this.layersByLevel[lvl];
      removeFromArray(layers, layer);
      layer.elesQueue = [];
      layer.invalid = true;
      if (layer.replacement) {
        layer.replacement.invalid = true;
      }
      for (var i2 = 0; i2 < eles.length; i2++) {
        var caches = eles[i2]._private.rscratch.imgLayerCaches;
        if (caches) {
          caches[lvl] = null;
        }
      }
    };
    LTCp.refineElementTextures = function(eles) {
      var self2 = this;
      self2.updateElementsInLayers(eles, function refineEachEle(layer, ele, req) {
        var rLyr = layer.replacement;
        if (!rLyr) {
          rLyr = layer.replacement = self2.makeLayer(layer.bb, layer.level);
          rLyr.replaces = layer;
          rLyr.eles = layer.eles;
        }
        if (!rLyr.reqs) {
          for (var i2 = 0; i2 < rLyr.eles.length; i2++) {
            self2.queueLayer(rLyr, rLyr.eles[i2]);
          }
        }
      });
    };
    LTCp.enqueueElementRefinement = function(ele) {
      this.eleTxrDeqs.merge(ele);
      this.scheduleElementRefinement();
    };
    LTCp.queueLayer = function(layer, ele) {
      var self2 = this;
      var q = self2.layersQueue;
      var elesQ = layer.elesQueue;
      var hasId = elesQ.hasId = elesQ.hasId || {};
      if (layer.replacement) {
        return;
      }
      if (ele) {
        if (hasId[ele.id()]) {
          return;
        }
        elesQ.push(ele);
        hasId[ele.id()] = true;
      }
      if (layer.reqs) {
        layer.reqs++;
        q.updateItem(layer);
      } else {
        layer.reqs = 1;
        q.push(layer);
      }
    };
    LTCp.dequeue = function(pxRatio) {
      var self2 = this;
      var q = self2.layersQueue;
      var deqd = [];
      var eleDeqs = 0;
      while (eleDeqs < maxDeqSize$1) {
        if (q.size() === 0) {
          break;
        }
        var layer = q.peek();
        if (layer.replacement) {
          q.pop();
          continue;
        }
        if (layer.replaces && layer !== layer.replaces.replacement) {
          q.pop();
          continue;
        }
        if (layer.invalid) {
          q.pop();
          continue;
        }
        var ele = layer.elesQueue.shift();
        if (ele) {
          self2.drawEleInLayer(layer, ele, layer.level, pxRatio);
          eleDeqs++;
        }
        if (deqd.length === 0) {
          deqd.push(true);
        }
        if (layer.elesQueue.length === 0) {
          q.pop();
          layer.reqs = 0;
          if (layer.replaces) {
            self2.applyLayerReplacement(layer);
          }
          self2.requestRedraw();
        }
      }
      return deqd;
    };
    LTCp.applyLayerReplacement = function(layer) {
      var self2 = this;
      var layersInLevel = self2.layersByLevel[layer.level];
      var replaced = layer.replaces;
      var index = layersInLevel.indexOf(replaced);
      if (index < 0 || replaced.invalid) {
        return;
      }
      layersInLevel[index] = layer;
      for (var i2 = 0; i2 < layer.eles.length; i2++) {
        var _p = layer.eles[i2]._private;
        var cache2 = _p.imgLayerCaches = _p.imgLayerCaches || {};
        if (cache2) {
          cache2[layer.level] = layer;
        }
      }
      self2.requestRedraw();
    };
    LTCp.requestRedraw = util(function() {
      var r = this.renderer;
      r.redrawHint("eles", true);
      r.redrawHint("drag", true);
      r.redraw();
    }, 100);
    LTCp.setupDequeueing = defs.setupDequeueing({
      deqRedrawThreshold: deqRedrawThreshold$1,
      deqCost: deqCost$1,
      deqAvgCost: deqAvgCost$1,
      deqNoDrawCost: deqNoDrawCost$1,
      deqFastCost: deqFastCost$1,
      deq: function deq(self2, pxRatio) {
        return self2.dequeue(pxRatio);
      },
      onDeqd: noop,
      shouldRedraw: trueify,
      priority: function priority(self2) {
        return self2.renderer.beforeRenderPriorities.lyrTxrDeq;
      }
    });
    var CRp = {};
    var impl;
    function polygon(context, points) {
      for (var i2 = 0; i2 < points.length; i2++) {
        var pt = points[i2];
        context.lineTo(pt.x, pt.y);
      }
    }
    function triangleBackcurve(context, points, controlPoint) {
      var firstPt;
      for (var i2 = 0; i2 < points.length; i2++) {
        var pt = points[i2];
        if (i2 === 0) {
          firstPt = pt;
        }
        context.lineTo(pt.x, pt.y);
      }
      context.quadraticCurveTo(controlPoint.x, controlPoint.y, firstPt.x, firstPt.y);
    }
    function triangleTee(context, trianglePoints, teePoints) {
      if (context.beginPath) {
        context.beginPath();
      }
      var triPts = trianglePoints;
      for (var i2 = 0; i2 < triPts.length; i2++) {
        var pt = triPts[i2];
        context.lineTo(pt.x, pt.y);
      }
      var teePts = teePoints;
      var firstTeePt = teePoints[0];
      context.moveTo(firstTeePt.x, firstTeePt.y);
      for (var i2 = 1; i2 < teePts.length; i2++) {
        var pt = teePts[i2];
        context.lineTo(pt.x, pt.y);
      }
      if (context.closePath) {
        context.closePath();
      }
    }
    function circleTriangle(context, trianglePoints, rx, ry, r) {
      if (context.beginPath) {
        context.beginPath();
      }
      context.arc(rx, ry, r, 0, Math.PI * 2, false);
      var triPts = trianglePoints;
      var firstTrPt = triPts[0];
      context.moveTo(firstTrPt.x, firstTrPt.y);
      for (var i2 = 0; i2 < triPts.length; i2++) {
        var pt = triPts[i2];
        context.lineTo(pt.x, pt.y);
      }
      if (context.closePath) {
        context.closePath();
      }
    }
    function circle(context, rx, ry, r) {
      context.arc(rx, ry, r, 0, Math.PI * 2, false);
    }
    CRp.arrowShapeImpl = function(name) {
      return (impl || (impl = {
        polygon,
        "triangle-backcurve": triangleBackcurve,
        "triangle-tee": triangleTee,
        "circle-triangle": circleTriangle,
        "triangle-cross": triangleTee,
        circle
      }))[name];
    };
    var CRp$1 = {};
    CRp$1.drawElement = function(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity) {
      var r = this;
      if (ele.isNode()) {
        r.drawNode(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity);
      } else {
        r.drawEdge(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity);
      }
    };
    CRp$1.drawElementOverlay = function(context, ele) {
      var r = this;
      if (ele.isNode()) {
        r.drawNodeOverlay(context, ele);
      } else {
        r.drawEdgeOverlay(context, ele);
      }
    };
    CRp$1.drawCachedElementPortion = function(context, ele, eleTxrCache, pxRatio, lvl, reason, getRotation, getOpacity2) {
      var r = this;
      var bb = eleTxrCache.getBoundingBox(ele);
      if (bb.w === 0 || bb.h === 0) {
        return;
      }
      var eleCache = eleTxrCache.getElement(ele, bb, pxRatio, lvl, reason);
      if (eleCache != null) {
        var opacity = getOpacity2(r, ele);
        if (opacity === 0) {
          return;
        }
        var theta = getRotation(r, ele);
        var x1 = bb.x1, y1 = bb.y1, w = bb.w, h = bb.h;
        var x, y, sx, sy, smooth;
        if (theta !== 0) {
          var rotPt = eleTxrCache.getRotationPoint(ele);
          sx = rotPt.x;
          sy = rotPt.y;
          context.translate(sx, sy);
          context.rotate(theta);
          smooth = r.getImgSmoothing(context);
          if (!smooth) {
            r.setImgSmoothing(context, true);
          }
          var off = eleTxrCache.getRotationOffset(ele);
          x = off.x;
          y = off.y;
        } else {
          x = x1;
          y = y1;
        }
        var oldGlobalAlpha;
        if (opacity !== 1) {
          oldGlobalAlpha = context.globalAlpha;
          context.globalAlpha = oldGlobalAlpha * opacity;
        }
        context.drawImage(eleCache.texture.canvas, eleCache.x, 0, eleCache.width, eleCache.height, x, y, w, h);
        if (opacity !== 1) {
          context.globalAlpha = oldGlobalAlpha;
        }
        if (theta !== 0) {
          context.rotate(-theta);
          context.translate(-sx, -sy);
          if (!smooth) {
            r.setImgSmoothing(context, false);
          }
        }
      } else {
        eleTxrCache.drawElement(context, ele);
      }
    };
    var getZeroRotation = function getZeroRotation2() {
      return 0;
    };
    var getLabelRotation = function getLabelRotation2(r, ele) {
      return r.getTextAngle(ele, null);
    };
    var getSourceLabelRotation = function getSourceLabelRotation2(r, ele) {
      return r.getTextAngle(ele, "source");
    };
    var getTargetLabelRotation = function getTargetLabelRotation2(r, ele) {
      return r.getTextAngle(ele, "target");
    };
    var getOpacity = function getOpacity2(r, ele) {
      return ele.effectiveOpacity();
    };
    var getTextOpacity = function getTextOpacity2(e, ele) {
      return ele.pstyle("text-opacity").pfValue * ele.effectiveOpacity();
    };
    CRp$1.drawCachedElement = function(context, ele, pxRatio, extent, lvl, requestHighQuality) {
      var r = this;
      var _r$data = r.data, eleTxrCache = _r$data.eleTxrCache, lblTxrCache = _r$data.lblTxrCache, slbTxrCache = _r$data.slbTxrCache, tlbTxrCache = _r$data.tlbTxrCache;
      var bb = ele.boundingBox();
      var reason = requestHighQuality === true ? eleTxrCache.reasons.highQuality : null;
      if (bb.w === 0 || bb.h === 0 || !ele.visible()) {
        return;
      }
      if (!extent || boundingBoxesIntersect(bb, extent)) {
        var isEdge = ele.isEdge();
        var badLine = ele.element()._private.rscratch.badLine;
        r.drawCachedElementPortion(context, ele, eleTxrCache, pxRatio, lvl, reason, getZeroRotation, getOpacity);
        if (!isEdge || !badLine) {
          r.drawCachedElementPortion(context, ele, lblTxrCache, pxRatio, lvl, reason, getLabelRotation, getTextOpacity);
        }
        if (isEdge && !badLine) {
          r.drawCachedElementPortion(context, ele, slbTxrCache, pxRatio, lvl, reason, getSourceLabelRotation, getTextOpacity);
          r.drawCachedElementPortion(context, ele, tlbTxrCache, pxRatio, lvl, reason, getTargetLabelRotation, getTextOpacity);
        }
        r.drawElementOverlay(context, ele);
      }
    };
    CRp$1.drawElements = function(context, eles) {
      var r = this;
      for (var i2 = 0; i2 < eles.length; i2++) {
        var ele = eles[i2];
        r.drawElement(context, ele);
      }
    };
    CRp$1.drawCachedElements = function(context, eles, pxRatio, extent) {
      var r = this;
      for (var i2 = 0; i2 < eles.length; i2++) {
        var ele = eles[i2];
        r.drawCachedElement(context, ele, pxRatio, extent);
      }
    };
    CRp$1.drawCachedNodes = function(context, eles, pxRatio, extent) {
      var r = this;
      for (var i2 = 0; i2 < eles.length; i2++) {
        var ele = eles[i2];
        if (!ele.isNode()) {
          continue;
        }
        r.drawCachedElement(context, ele, pxRatio, extent);
      }
    };
    CRp$1.drawLayeredElements = function(context, eles, pxRatio, extent) {
      var r = this;
      var layers = r.data.lyrTxrCache.getLayers(eles, pxRatio);
      if (layers) {
        for (var i2 = 0; i2 < layers.length; i2++) {
          var layer = layers[i2];
          var bb = layer.bb;
          if (bb.w === 0 || bb.h === 0) {
            continue;
          }
          context.drawImage(layer.canvas, bb.x1, bb.y1, bb.w, bb.h);
        }
      } else {
        r.drawCachedElements(context, eles, pxRatio, extent);
      }
    };
    var CRp$2 = {};
    CRp$2.drawEdge = function(context, edge, shiftToOriginWithBb) {
      var drawLabel = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
      var shouldDrawOverlay = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
      var shouldDrawOpacity = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
      var r = this;
      var rs = edge._private.rscratch;
      if (shouldDrawOpacity && !edge.visible()) {
        return;
      }
      if (rs.badLine || rs.allpts == null || isNaN(rs.allpts[0])) {
        return;
      }
      var bb;
      if (shiftToOriginWithBb) {
        bb = shiftToOriginWithBb;
        context.translate(-bb.x1, -bb.y1);
      }
      var opacity = shouldDrawOpacity ? edge.pstyle("opacity").value : 1;
      var lineOpacity = shouldDrawOpacity ? edge.pstyle("line-opacity").value : 1;
      var lineStyle = edge.pstyle("line-style").value;
      var edgeWidth = edge.pstyle("width").pfValue;
      var lineCap = edge.pstyle("line-cap").value;
      var effectiveLineOpacity = opacity * lineOpacity;
      var effectiveArrowOpacity = opacity * lineOpacity;
      var drawLine = function drawLine2() {
        var strokeOpacity = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : effectiveLineOpacity;
        context.lineWidth = edgeWidth;
        context.lineCap = lineCap;
        r.eleStrokeStyle(context, edge, strokeOpacity);
        r.drawEdgePath(edge, context, rs.allpts, lineStyle);
        context.lineCap = "butt";
      };
      var drawOverlay = function drawOverlay2() {
        if (!shouldDrawOverlay) {
          return;
        }
        r.drawEdgeOverlay(context, edge);
      };
      var drawArrows = function drawArrows2() {
        var arrowOpacity = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : effectiveArrowOpacity;
        r.drawArrowheads(context, edge, arrowOpacity);
      };
      var drawText = function drawText2() {
        r.drawElementText(context, edge, null, drawLabel);
      };
      context.lineJoin = "round";
      var ghost = edge.pstyle("ghost").value === "yes";
      if (ghost) {
        var gx = edge.pstyle("ghost-offset-x").pfValue;
        var gy = edge.pstyle("ghost-offset-y").pfValue;
        var ghostOpacity = edge.pstyle("ghost-opacity").value;
        var effectiveGhostOpacity = effectiveLineOpacity * ghostOpacity;
        context.translate(gx, gy);
        drawLine(effectiveGhostOpacity);
        drawArrows(effectiveGhostOpacity);
        context.translate(-gx, -gy);
      }
      drawLine();
      drawArrows();
      drawOverlay();
      drawText();
      if (shiftToOriginWithBb) {
        context.translate(bb.x1, bb.y1);
      }
    };
    CRp$2.drawEdgeOverlay = function(context, edge) {
      if (!edge.visible()) {
        return;
      }
      var overlayOpacity = edge.pstyle("overlay-opacity").value;
      if (overlayOpacity === 0) {
        return;
      }
      var r = this;
      var usePaths = r.usePaths();
      var rs = edge._private.rscratch;
      var overlayPadding = edge.pstyle("overlay-padding").pfValue;
      var overlayWidth = 2 * overlayPadding;
      var overlayColor = edge.pstyle("overlay-color").value;
      context.lineWidth = overlayWidth;
      if (rs.edgeType === "self" && !usePaths) {
        context.lineCap = "butt";
      } else {
        context.lineCap = "round";
      }
      r.colorStrokeStyle(context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity);
      r.drawEdgePath(edge, context, rs.allpts, "solid");
    };
    CRp$2.drawEdgePath = function(edge, context, pts2, type) {
      var rs = edge._private.rscratch;
      var canvasCxt = context;
      var path;
      var pathCacheHit = false;
      var usePaths = this.usePaths();
      var lineDashPattern = edge.pstyle("line-dash-pattern").pfValue;
      var lineDashOffset = edge.pstyle("line-dash-offset").pfValue;
      if (usePaths) {
        var pathCacheKey = pts2.join("$");
        var keyMatches = rs.pathCacheKey && rs.pathCacheKey === pathCacheKey;
        if (keyMatches) {
          path = context = rs.pathCache;
          pathCacheHit = true;
        } else {
          path = context = new Path2D();
          rs.pathCacheKey = pathCacheKey;
          rs.pathCache = path;
        }
      }
      if (canvasCxt.setLineDash) {
        switch (type) {
          case "dotted":
            canvasCxt.setLineDash([1, 1]);
            break;
          case "dashed":
            canvasCxt.setLineDash(lineDashPattern);
            canvasCxt.lineDashOffset = lineDashOffset;
            break;
          case "solid":
            canvasCxt.setLineDash([]);
            break;
        }
      }
      if (!pathCacheHit && !rs.badLine) {
        if (context.beginPath) {
          context.beginPath();
        }
        context.moveTo(pts2[0], pts2[1]);
        switch (rs.edgeType) {
          case "bezier":
          case "self":
          case "compound":
          case "multibezier":
            for (var i2 = 2; i2 + 3 < pts2.length; i2 += 4) {
              context.quadraticCurveTo(pts2[i2], pts2[i2 + 1], pts2[i2 + 2], pts2[i2 + 3]);
            }
            break;
          case "straight":
          case "segments":
          case "haystack":
            for (var _i = 2; _i + 1 < pts2.length; _i += 2) {
              context.lineTo(pts2[_i], pts2[_i + 1]);
            }
            break;
        }
      }
      context = canvasCxt;
      if (usePaths) {
        context.stroke(path);
      } else {
        context.stroke();
      }
      if (context.setLineDash) {
        context.setLineDash([]);
      }
    };
    CRp$2.drawArrowheads = function(context, edge, opacity) {
      var rs = edge._private.rscratch;
      var isHaystack = rs.edgeType === "haystack";
      if (!isHaystack) {
        this.drawArrowhead(context, edge, "source", rs.arrowStartX, rs.arrowStartY, rs.srcArrowAngle, opacity);
      }
      this.drawArrowhead(context, edge, "mid-target", rs.midX, rs.midY, rs.midtgtArrowAngle, opacity);
      this.drawArrowhead(context, edge, "mid-source", rs.midX, rs.midY, rs.midsrcArrowAngle, opacity);
      if (!isHaystack) {
        this.drawArrowhead(context, edge, "target", rs.arrowEndX, rs.arrowEndY, rs.tgtArrowAngle, opacity);
      }
    };
    CRp$2.drawArrowhead = function(context, edge, prefix, x, y, angle, opacity) {
      if (isNaN(x) || x == null || isNaN(y) || y == null || isNaN(angle) || angle == null) {
        return;
      }
      var self2 = this;
      var arrowShape = edge.pstyle(prefix + "-arrow-shape").value;
      if (arrowShape === "none") {
        return;
      }
      var arrowClearFill = edge.pstyle(prefix + "-arrow-fill").value === "hollow" ? "both" : "filled";
      var arrowFill = edge.pstyle(prefix + "-arrow-fill").value;
      var edgeWidth = edge.pstyle("width").pfValue;
      var edgeOpacity = edge.pstyle("opacity").value;
      if (opacity === void 0) {
        opacity = edgeOpacity;
      }
      var gco = context.globalCompositeOperation;
      if (opacity !== 1 || arrowFill === "hollow") {
        context.globalCompositeOperation = "destination-out";
        self2.colorFillStyle(context, 255, 255, 255, 1);
        self2.colorStrokeStyle(context, 255, 255, 255, 1);
        self2.drawArrowShape(edge, context, arrowClearFill, edgeWidth, arrowShape, x, y, angle);
        context.globalCompositeOperation = gco;
      }
      var color = edge.pstyle(prefix + "-arrow-color").value;
      self2.colorFillStyle(context, color[0], color[1], color[2], opacity);
      self2.colorStrokeStyle(context, color[0], color[1], color[2], opacity);
      self2.drawArrowShape(edge, context, arrowFill, edgeWidth, arrowShape, x, y, angle);
    };
    CRp$2.drawArrowShape = function(edge, context, fill, edgeWidth, shape, x, y, angle) {
      var r = this;
      var usePaths = this.usePaths() && shape !== "triangle-cross";
      var pathCacheHit = false;
      var path;
      var canvasContext = context;
      var translation = {
        x,
        y
      };
      var scale = edge.pstyle("arrow-scale").value;
      var size = this.getArrowWidth(edgeWidth, scale);
      var shapeImpl = r.arrowShapes[shape];
      if (usePaths) {
        var cache2 = r.arrowPathCache = r.arrowPathCache || [];
        var key = hashString(shape);
        var cachedPath = cache2[key];
        if (cachedPath != null) {
          path = context = cachedPath;
          pathCacheHit = true;
        } else {
          path = context = new Path2D();
          cache2[key] = path;
        }
      }
      if (!pathCacheHit) {
        if (context.beginPath) {
          context.beginPath();
        }
        if (usePaths) {
          shapeImpl.draw(context, 1, 0, {
            x: 0,
            y: 0
          }, 1);
        } else {
          shapeImpl.draw(context, size, angle, translation, edgeWidth);
        }
        if (context.closePath) {
          context.closePath();
        }
      }
      context = canvasContext;
      if (usePaths) {
        context.translate(x, y);
        context.rotate(angle);
        context.scale(size, size);
      }
      if (fill === "filled" || fill === "both") {
        if (usePaths) {
          context.fill(path);
        } else {
          context.fill();
        }
      }
      if (fill === "hollow" || fill === "both") {
        context.lineWidth = (shapeImpl.matchEdgeWidth ? edgeWidth : 1) / (usePaths ? size : 1);
        context.lineJoin = "miter";
        if (usePaths) {
          context.stroke(path);
        } else {
          context.stroke();
        }
      }
      if (usePaths) {
        context.scale(1 / size, 1 / size);
        context.rotate(-angle);
        context.translate(-x, -y);
      }
    };
    var CRp$3 = {};
    CRp$3.safeDrawImage = function(context, img, ix, iy, iw, ih, x, y, w, h) {
      if (iw <= 0 || ih <= 0 || w <= 0 || h <= 0) {
        return;
      }
      context.drawImage(img, ix, iy, iw, ih, x, y, w, h);
    };
    CRp$3.drawInscribedImage = function(context, img, node, index, nodeOpacity) {
      var r = this;
      var pos = node.position();
      var nodeX = pos.x;
      var nodeY = pos.y;
      var styleObj = node.cy().style();
      var getIndexedStyle = styleObj.getIndexedStyle.bind(styleObj);
      var fit = getIndexedStyle(node, "background-fit", "value", index);
      var repeat = getIndexedStyle(node, "background-repeat", "value", index);
      var nodeW = node.width();
      var nodeH = node.height();
      var paddingX2 = node.padding() * 2;
      var nodeTW = nodeW + (getIndexedStyle(node, "background-width-relative-to", "value", index) === "inner" ? 0 : paddingX2);
      var nodeTH = nodeH + (getIndexedStyle(node, "background-height-relative-to", "value", index) === "inner" ? 0 : paddingX2);
      var rs = node._private.rscratch;
      var clip = getIndexedStyle(node, "background-clip", "value", index);
      var shouldClip = clip === "node";
      var imgOpacity = getIndexedStyle(node, "background-image-opacity", "value", index) * nodeOpacity;
      var imgW = img.width || img.cachedW;
      var imgH = img.height || img.cachedH;
      if (imgW == null || imgH == null) {
        document.body.appendChild(img);
        imgW = img.cachedW = img.width || img.offsetWidth;
        imgH = img.cachedH = img.height || img.offsetHeight;
        document.body.removeChild(img);
      }
      var w = imgW;
      var h = imgH;
      if (getIndexedStyle(node, "background-width", "value", index) !== "auto") {
        if (getIndexedStyle(node, "background-width", "units", index) === "%") {
          w = getIndexedStyle(node, "background-width", "pfValue", index) * nodeTW;
        } else {
          w = getIndexedStyle(node, "background-width", "pfValue", index);
        }
      }
      if (getIndexedStyle(node, "background-height", "value", index) !== "auto") {
        if (getIndexedStyle(node, "background-height", "units", index) === "%") {
          h = getIndexedStyle(node, "background-height", "pfValue", index) * nodeTH;
        } else {
          h = getIndexedStyle(node, "background-height", "pfValue", index);
        }
      }
      if (w === 0 || h === 0) {
        return;
      }
      if (fit === "contain") {
        var scale = Math.min(nodeTW / w, nodeTH / h);
        w *= scale;
        h *= scale;
      } else if (fit === "cover") {
        var scale = Math.max(nodeTW / w, nodeTH / h);
        w *= scale;
        h *= scale;
      }
      var x = nodeX - nodeTW / 2;
      var posXUnits = getIndexedStyle(node, "background-position-x", "units", index);
      var posXPfVal = getIndexedStyle(node, "background-position-x", "pfValue", index);
      if (posXUnits === "%") {
        x += (nodeTW - w) * posXPfVal;
      } else {
        x += posXPfVal;
      }
      var offXUnits = getIndexedStyle(node, "background-offset-x", "units", index);
      var offXPfVal = getIndexedStyle(node, "background-offset-x", "pfValue", index);
      if (offXUnits === "%") {
        x += (nodeTW - w) * offXPfVal;
      } else {
        x += offXPfVal;
      }
      var y = nodeY - nodeTH / 2;
      var posYUnits = getIndexedStyle(node, "background-position-y", "units", index);
      var posYPfVal = getIndexedStyle(node, "background-position-y", "pfValue", index);
      if (posYUnits === "%") {
        y += (nodeTH - h) * posYPfVal;
      } else {
        y += posYPfVal;
      }
      var offYUnits = getIndexedStyle(node, "background-offset-y", "units", index);
      var offYPfVal = getIndexedStyle(node, "background-offset-y", "pfValue", index);
      if (offYUnits === "%") {
        y += (nodeTH - h) * offYPfVal;
      } else {
        y += offYPfVal;
      }
      if (rs.pathCache) {
        x -= nodeX;
        y -= nodeY;
        nodeX = 0;
        nodeY = 0;
      }
      var gAlpha = context.globalAlpha;
      context.globalAlpha = imgOpacity;
      if (repeat === "no-repeat") {
        if (shouldClip) {
          context.save();
          if (rs.pathCache) {
            context.clip(rs.pathCache);
          } else {
            r.nodeShapes[r.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH);
            context.clip();
          }
        }
        r.safeDrawImage(context, img, 0, 0, imgW, imgH, x, y, w, h);
        if (shouldClip) {
          context.restore();
        }
      } else {
        var pattern = context.createPattern(img, repeat);
        context.fillStyle = pattern;
        r.nodeShapes[r.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH);
        context.translate(x, y);
        context.fill();
        context.translate(-x, -y);
      }
      context.globalAlpha = gAlpha;
    };
    var CRp$4 = {};
    CRp$4.eleTextBiggerThanMin = function(ele, scale) {
      if (!scale) {
        var zoom = ele.cy().zoom();
        var pxRatio = this.getPixelRatio();
        var lvl = Math.ceil(log2(zoom * pxRatio));
        scale = Math.pow(2, lvl);
      }
      var computedSize = ele.pstyle("font-size").pfValue * scale;
      var minSize = ele.pstyle("min-zoomed-font-size").pfValue;
      if (computedSize < minSize) {
        return false;
      }
      return true;
    };
    CRp$4.drawElementText = function(context, ele, shiftToOriginWithBb, force, prefix) {
      var useEleOpacity = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
      var r = this;
      if (force == null) {
        if (useEleOpacity && !r.eleTextBiggerThanMin(ele)) {
          return;
        }
      } else if (force === false) {
        return;
      }
      if (ele.isNode()) {
        var label = ele.pstyle("label");
        if (!label || !label.value) {
          return;
        }
        var justification = r.getLabelJustification(ele);
        context.textAlign = justification;
        context.textBaseline = "bottom";
      } else {
        var badLine = ele.element()._private.rscratch.badLine;
        var _label = ele.pstyle("label");
        var srcLabel = ele.pstyle("source-label");
        var tgtLabel = ele.pstyle("target-label");
        if (badLine || (!_label || !_label.value) && (!srcLabel || !srcLabel.value) && (!tgtLabel || !tgtLabel.value)) {
          return;
        }
        context.textAlign = "center";
        context.textBaseline = "bottom";
      }
      var applyRotation = !shiftToOriginWithBb;
      var bb;
      if (shiftToOriginWithBb) {
        bb = shiftToOriginWithBb;
        context.translate(-bb.x1, -bb.y1);
      }
      if (prefix == null) {
        r.drawText(context, ele, null, applyRotation, useEleOpacity);
        if (ele.isEdge()) {
          r.drawText(context, ele, "source", applyRotation, useEleOpacity);
          r.drawText(context, ele, "target", applyRotation, useEleOpacity);
        }
      } else {
        r.drawText(context, ele, prefix, applyRotation, useEleOpacity);
      }
      if (shiftToOriginWithBb) {
        context.translate(bb.x1, bb.y1);
      }
    };
    CRp$4.getFontCache = function(context) {
      var cache2;
      this.fontCaches = this.fontCaches || [];
      for (var i2 = 0; i2 < this.fontCaches.length; i2++) {
        cache2 = this.fontCaches[i2];
        if (cache2.context === context) {
          return cache2;
        }
      }
      cache2 = {
        context
      };
      this.fontCaches.push(cache2);
      return cache2;
    };
    CRp$4.setupTextStyle = function(context, ele) {
      var useEleOpacity = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var labelStyle = ele.pstyle("font-style").strValue;
      var labelSize = ele.pstyle("font-size").pfValue + "px";
      var labelFamily = ele.pstyle("font-family").strValue;
      var labelWeight = ele.pstyle("font-weight").strValue;
      var opacity = useEleOpacity ? ele.effectiveOpacity() * ele.pstyle("text-opacity").value : 1;
      var outlineOpacity = ele.pstyle("text-outline-opacity").value * opacity;
      var color = ele.pstyle("color").value;
      var outlineColor = ele.pstyle("text-outline-color").value;
      context.font = labelStyle + " " + labelWeight + " " + labelSize + " " + labelFamily;
      context.lineJoin = "round";
      this.colorFillStyle(context, color[0], color[1], color[2], opacity);
      this.colorStrokeStyle(context, outlineColor[0], outlineColor[1], outlineColor[2], outlineOpacity);
    };
    function roundRect(ctx, x, y, width, height) {
      var radius = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 5;
      ctx.beginPath();
      ctx.moveTo(x + radius, y);
      ctx.lineTo(x + width - radius, y);
      ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
      ctx.lineTo(x + width, y + height - radius);
      ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
      ctx.lineTo(x + radius, y + height);
      ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
      ctx.lineTo(x, y + radius);
      ctx.quadraticCurveTo(x, y, x + radius, y);
      ctx.closePath();
      ctx.fill();
    }
    CRp$4.getTextAngle = function(ele, prefix) {
      var theta;
      var _p = ele._private;
      var rscratch = _p.rscratch;
      var pdash = prefix ? prefix + "-" : "";
      var rotation = ele.pstyle(pdash + "text-rotation");
      var textAngle = getPrefixedProperty(rscratch, "labelAngle", prefix);
      if (rotation.strValue === "autorotate") {
        theta = ele.isEdge() ? textAngle : 0;
      } else if (rotation.strValue === "none") {
        theta = 0;
      } else {
        theta = rotation.pfValue;
      }
      return theta;
    };
    CRp$4.drawText = function(context, ele, prefix) {
      var applyRotation = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
      var useEleOpacity = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
      var _p = ele._private;
      var rscratch = _p.rscratch;
      var parentOpacity = useEleOpacity ? ele.effectiveOpacity() : 1;
      if (useEleOpacity && (parentOpacity === 0 || ele.pstyle("text-opacity").value === 0)) {
        return;
      }
      if (prefix === "main") {
        prefix = null;
      }
      var textX = getPrefixedProperty(rscratch, "labelX", prefix);
      var textY = getPrefixedProperty(rscratch, "labelY", prefix);
      var orgTextX, orgTextY;
      var text = this.getLabelText(ele, prefix);
      if (text != null && text !== "" && !isNaN(textX) && !isNaN(textY)) {
        this.setupTextStyle(context, ele, useEleOpacity);
        var pdash = prefix ? prefix + "-" : "";
        var textW = getPrefixedProperty(rscratch, "labelWidth", prefix);
        var textH = getPrefixedProperty(rscratch, "labelHeight", prefix);
        var marginX = ele.pstyle(pdash + "text-margin-x").pfValue;
        var marginY = ele.pstyle(pdash + "text-margin-y").pfValue;
        var isEdge = ele.isEdge();
        var halign = ele.pstyle("text-halign").value;
        var valign = ele.pstyle("text-valign").value;
        if (isEdge) {
          halign = "center";
          valign = "center";
        }
        textX += marginX;
        textY += marginY;
        var theta;
        if (!applyRotation) {
          theta = 0;
        } else {
          theta = this.getTextAngle(ele, prefix);
        }
        if (theta !== 0) {
          orgTextX = textX;
          orgTextY = textY;
          context.translate(orgTextX, orgTextY);
          context.rotate(theta);
          textX = 0;
          textY = 0;
        }
        switch (valign) {
          case "top":
            break;
          case "center":
            textY += textH / 2;
            break;
          case "bottom":
            textY += textH;
            break;
        }
        var backgroundOpacity = ele.pstyle("text-background-opacity").value;
        var borderOpacity = ele.pstyle("text-border-opacity").value;
        var textBorderWidth = ele.pstyle("text-border-width").pfValue;
        var backgroundPadding = ele.pstyle("text-background-padding").pfValue;
        if (backgroundOpacity > 0 || textBorderWidth > 0 && borderOpacity > 0) {
          var bgX = textX - backgroundPadding;
          switch (halign) {
            case "left":
              bgX -= textW;
              break;
            case "center":
              bgX -= textW / 2;
              break;
          }
          var bgY = textY - textH - backgroundPadding;
          var bgW = textW + 2 * backgroundPadding;
          var bgH = textH + 2 * backgroundPadding;
          if (backgroundOpacity > 0) {
            var textFill = context.fillStyle;
            var textBackgroundColor = ele.pstyle("text-background-color").value;
            context.fillStyle = "rgba(" + textBackgroundColor[0] + "," + textBackgroundColor[1] + "," + textBackgroundColor[2] + "," + backgroundOpacity * parentOpacity + ")";
            var styleShape = ele.pstyle("text-background-shape").strValue;
            if (styleShape.indexOf("round") === 0) {
              roundRect(context, bgX, bgY, bgW, bgH, 2);
            } else {
              context.fillRect(bgX, bgY, bgW, bgH);
            }
            context.fillStyle = textFill;
          }
          if (textBorderWidth > 0 && borderOpacity > 0) {
            var textStroke = context.strokeStyle;
            var textLineWidth = context.lineWidth;
            var textBorderColor = ele.pstyle("text-border-color").value;
            var textBorderStyle = ele.pstyle("text-border-style").value;
            context.strokeStyle = "rgba(" + textBorderColor[0] + "," + textBorderColor[1] + "," + textBorderColor[2] + "," + borderOpacity * parentOpacity + ")";
            context.lineWidth = textBorderWidth;
            if (context.setLineDash) {
              switch (textBorderStyle) {
                case "dotted":
                  context.setLineDash([1, 1]);
                  break;
                case "dashed":
                  context.setLineDash([4, 2]);
                  break;
                case "double":
                  context.lineWidth = textBorderWidth / 4;
                  context.setLineDash([]);
                  break;
                case "solid":
                  context.setLineDash([]);
                  break;
              }
            }
            context.strokeRect(bgX, bgY, bgW, bgH);
            if (textBorderStyle === "double") {
              var whiteWidth = textBorderWidth / 2;
              context.strokeRect(bgX + whiteWidth, bgY + whiteWidth, bgW - whiteWidth * 2, bgH - whiteWidth * 2);
            }
            if (context.setLineDash) {
              context.setLineDash([]);
            }
            context.lineWidth = textLineWidth;
            context.strokeStyle = textStroke;
          }
        }
        var lineWidth = 2 * ele.pstyle("text-outline-width").pfValue;
        if (lineWidth > 0) {
          context.lineWidth = lineWidth;
        }
        if (ele.pstyle("text-wrap").value === "wrap") {
          var lines = getPrefixedProperty(rscratch, "labelWrapCachedLines", prefix);
          var lineHeight = getPrefixedProperty(rscratch, "labelLineHeight", prefix);
          var halfTextW = textW / 2;
          var justification = this.getLabelJustification(ele);
          if (justification === "auto")
            ;
          else if (halign === "left") {
            if (justification === "left") {
              textX += -textW;
            } else if (justification === "center") {
              textX += -halfTextW;
            }
          } else if (halign === "center") {
            if (justification === "left") {
              textX += -halfTextW;
            } else if (justification === "right") {
              textX += halfTextW;
            }
          } else if (halign === "right") {
            if (justification === "center") {
              textX += halfTextW;
            } else if (justification === "right") {
              textX += textW;
            }
          }
          switch (valign) {
            case "top":
              textY -= (lines.length - 1) * lineHeight;
              break;
            case "center":
            case "bottom":
              textY -= (lines.length - 1) * lineHeight;
              break;
          }
          for (var l = 0; l < lines.length; l++) {
            if (lineWidth > 0) {
              context.strokeText(lines[l], textX, textY);
            }
            context.fillText(lines[l], textX, textY);
            textY += lineHeight;
          }
        } else {
          if (lineWidth > 0) {
            context.strokeText(text, textX, textY);
          }
          context.fillText(text, textX, textY);
        }
        if (theta !== 0) {
          context.rotate(-theta);
          context.translate(-orgTextX, -orgTextY);
        }
      }
    };
    var CRp$5 = {};
    CRp$5.drawNode = function(context, node, shiftToOriginWithBb) {
      var drawLabel = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
      var shouldDrawOverlay = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
      var shouldDrawOpacity = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
      var r = this;
      var nodeWidth, nodeHeight;
      var _p = node._private;
      var rs = _p.rscratch;
      var pos = node.position();
      if (!number(pos.x) || !number(pos.y)) {
        return;
      }
      if (shouldDrawOpacity && !node.visible()) {
        return;
      }
      var eleOpacity = shouldDrawOpacity ? node.effectiveOpacity() : 1;
      var usePaths = r.usePaths();
      var path;
      var pathCacheHit = false;
      var padding = node.padding();
      nodeWidth = node.width() + 2 * padding;
      nodeHeight = node.height() + 2 * padding;
      var bb;
      if (shiftToOriginWithBb) {
        bb = shiftToOriginWithBb;
        context.translate(-bb.x1, -bb.y1);
      }
      var bgImgProp = node.pstyle("background-image");
      var urls = bgImgProp.value;
      var urlDefined = new Array(urls.length);
      var image = new Array(urls.length);
      var numImages = 0;
      for (var i2 = 0; i2 < urls.length; i2++) {
        var url = urls[i2];
        var defd = urlDefined[i2] = url != null && url !== "none";
        if (defd) {
          var bgImgCrossOrigin = node.cy().style().getIndexedStyle(node, "background-image-crossorigin", "value", i2);
          numImages++;
          image[i2] = r.getCachedImage(url, bgImgCrossOrigin, function() {
            _p.backgroundTimestamp = Date.now();
            node.emitAndNotify("background");
          });
        }
      }
      var darkness = node.pstyle("background-blacken").value;
      var borderWidth = node.pstyle("border-width").pfValue;
      var bgOpacity = node.pstyle("background-opacity").value * eleOpacity;
      var borderColor = node.pstyle("border-color").value;
      var borderStyle = node.pstyle("border-style").value;
      var borderOpacity = node.pstyle("border-opacity").value * eleOpacity;
      context.lineJoin = "miter";
      var setupShapeColor = function setupShapeColor2() {
        var bgOpy = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : bgOpacity;
        r.eleFillStyle(context, node, bgOpy);
      };
      var setupBorderColor = function setupBorderColor2() {
        var bdrOpy = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : borderOpacity;
        r.colorStrokeStyle(context, borderColor[0], borderColor[1], borderColor[2], bdrOpy);
      };
      var styleShape = node.pstyle("shape").strValue;
      var shapePts = node.pstyle("shape-polygon-points").pfValue;
      if (usePaths) {
        context.translate(pos.x, pos.y);
        var pathCache = r.nodePathCache = r.nodePathCache || [];
        var key = hashStrings(styleShape === "polygon" ? styleShape + "," + shapePts.join(",") : styleShape, "" + nodeHeight, "" + nodeWidth);
        var cachedPath = pathCache[key];
        if (cachedPath != null) {
          path = cachedPath;
          pathCacheHit = true;
          rs.pathCache = path;
        } else {
          path = new Path2D();
          pathCache[key] = rs.pathCache = path;
        }
      }
      var drawShape = function drawShape2() {
        if (!pathCacheHit) {
          var npos = pos;
          if (usePaths) {
            npos = {
              x: 0,
              y: 0
            };
          }
          r.nodeShapes[r.getNodeShape(node)].draw(path || context, npos.x, npos.y, nodeWidth, nodeHeight);
        }
        if (usePaths) {
          context.fill(path);
        } else {
          context.fill();
        }
      };
      var drawImages = function drawImages2() {
        var nodeOpacity = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : eleOpacity;
        var prevBging = _p.backgrounding;
        var totalCompleted = 0;
        for (var _i = 0; _i < image.length; _i++) {
          if (urlDefined[_i] && image[_i].complete && !image[_i].error) {
            totalCompleted++;
            r.drawInscribedImage(context, image[_i], node, _i, nodeOpacity);
          }
        }
        _p.backgrounding = !(totalCompleted === numImages);
        if (prevBging !== _p.backgrounding) {
          node.updateStyle(false);
        }
      };
      var drawPie = function drawPie2() {
        var redrawShape = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
        var pieOpacity = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : eleOpacity;
        if (r.hasPie(node)) {
          r.drawPie(context, node, pieOpacity);
          if (redrawShape) {
            if (!usePaths) {
              r.nodeShapes[r.getNodeShape(node)].draw(context, pos.x, pos.y, nodeWidth, nodeHeight);
            }
          }
        }
      };
      var darken = function darken2() {
        var darkenOpacity = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : eleOpacity;
        var opacity = (darkness > 0 ? darkness : -darkness) * darkenOpacity;
        var c = darkness > 0 ? 0 : 255;
        if (darkness !== 0) {
          r.colorFillStyle(context, c, c, c, opacity);
          if (usePaths) {
            context.fill(path);
          } else {
            context.fill();
          }
        }
      };
      var drawBorder = function drawBorder2() {
        if (borderWidth > 0) {
          context.lineWidth = borderWidth;
          context.lineCap = "butt";
          if (context.setLineDash) {
            switch (borderStyle) {
              case "dotted":
                context.setLineDash([1, 1]);
                break;
              case "dashed":
                context.setLineDash([4, 2]);
                break;
              case "solid":
              case "double":
                context.setLineDash([]);
                break;
            }
          }
          if (usePaths) {
            context.stroke(path);
          } else {
            context.stroke();
          }
          if (borderStyle === "double") {
            context.lineWidth = borderWidth / 3;
            var gco = context.globalCompositeOperation;
            context.globalCompositeOperation = "destination-out";
            if (usePaths) {
              context.stroke(path);
            } else {
              context.stroke();
            }
            context.globalCompositeOperation = gco;
          }
          if (context.setLineDash) {
            context.setLineDash([]);
          }
        }
      };
      var drawOverlay = function drawOverlay2() {
        if (shouldDrawOverlay) {
          r.drawNodeOverlay(context, node, pos, nodeWidth, nodeHeight);
        }
      };
      var drawText = function drawText2() {
        r.drawElementText(context, node, null, drawLabel);
      };
      var ghost = node.pstyle("ghost").value === "yes";
      if (ghost) {
        var gx = node.pstyle("ghost-offset-x").pfValue;
        var gy = node.pstyle("ghost-offset-y").pfValue;
        var ghostOpacity = node.pstyle("ghost-opacity").value;
        var effGhostOpacity = ghostOpacity * eleOpacity;
        context.translate(gx, gy);
        setupShapeColor(ghostOpacity * bgOpacity);
        drawShape();
        drawImages(effGhostOpacity);
        drawPie(darkness !== 0 || borderWidth !== 0);
        darken(effGhostOpacity);
        setupBorderColor(ghostOpacity * borderOpacity);
        drawBorder();
        context.translate(-gx, -gy);
      }
      setupShapeColor();
      drawShape();
      drawImages();
      drawPie(darkness !== 0 || borderWidth !== 0);
      darken();
      setupBorderColor();
      drawBorder();
      if (usePaths) {
        context.translate(-pos.x, -pos.y);
      }
      drawText();
      drawOverlay();
      if (shiftToOriginWithBb) {
        context.translate(bb.x1, bb.y1);
      }
    };
    CRp$5.drawNodeOverlay = function(context, node, pos, nodeWidth, nodeHeight) {
      var r = this;
      if (!node.visible()) {
        return;
      }
      var overlayPadding = node.pstyle("overlay-padding").pfValue;
      var overlayOpacity = node.pstyle("overlay-opacity").value;
      var overlayColor = node.pstyle("overlay-color").value;
      if (overlayOpacity > 0) {
        pos = pos || node.position();
        if (nodeWidth == null || nodeHeight == null) {
          var padding = node.padding();
          nodeWidth = node.width() + 2 * padding;
          nodeHeight = node.height() + 2 * padding;
        }
        r.colorFillStyle(context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity);
        r.nodeShapes["roundrectangle"].draw(context, pos.x, pos.y, nodeWidth + overlayPadding * 2, nodeHeight + overlayPadding * 2);
        context.fill();
      }
    };
    CRp$5.hasPie = function(node) {
      node = node[0];
      return node._private.hasPie;
    };
    CRp$5.drawPie = function(context, node, nodeOpacity, pos) {
      node = node[0];
      pos = pos || node.position();
      var cyStyle = node.cy().style();
      var pieSize = node.pstyle("pie-size");
      var x = pos.x;
      var y = pos.y;
      var nodeW = node.width();
      var nodeH = node.height();
      var radius = Math.min(nodeW, nodeH) / 2;
      var lastPercent = 0;
      var usePaths = this.usePaths();
      if (usePaths) {
        x = 0;
        y = 0;
      }
      if (pieSize.units === "%") {
        radius = radius * pieSize.pfValue;
      } else if (pieSize.pfValue !== void 0) {
        radius = pieSize.pfValue / 2;
      }
      for (var i2 = 1; i2 <= cyStyle.pieBackgroundN; i2++) {
        var size = node.pstyle("pie-" + i2 + "-background-size").value;
        var color = node.pstyle("pie-" + i2 + "-background-color").value;
        var opacity = node.pstyle("pie-" + i2 + "-background-opacity").value * nodeOpacity;
        var percent = size / 100;
        if (percent + lastPercent > 1) {
          percent = 1 - lastPercent;
        }
        var angleStart = 1.5 * Math.PI + 2 * Math.PI * lastPercent;
        var angleDelta = 2 * Math.PI * percent;
        var angleEnd = angleStart + angleDelta;
        if (size === 0 || lastPercent >= 1 || lastPercent + percent > 1) {
          continue;
        }
        context.beginPath();
        context.moveTo(x, y);
        context.arc(x, y, radius, angleStart, angleEnd);
        context.closePath();
        this.colorFillStyle(context, color[0], color[1], color[2], opacity);
        context.fill();
        lastPercent += percent;
      }
    };
    var CRp$6 = {};
    var motionBlurDelay = 100;
    CRp$6.getPixelRatio = function() {
      var context = this.data.contexts[0];
      if (this.forcedPixelRatio != null) {
        return this.forcedPixelRatio;
      }
      var backingStore = context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;
      return (window.devicePixelRatio || 1) / backingStore;
    };
    CRp$6.paintCache = function(context) {
      var caches = this.paintCaches = this.paintCaches || [];
      var needToCreateCache = true;
      var cache2;
      for (var i2 = 0; i2 < caches.length; i2++) {
        cache2 = caches[i2];
        if (cache2.context === context) {
          needToCreateCache = false;
          break;
        }
      }
      if (needToCreateCache) {
        cache2 = {
          context
        };
        caches.push(cache2);
      }
      return cache2;
    };
    CRp$6.createGradientStyleFor = function(context, shapeStyleName, ele, fill, opacity) {
      var gradientStyle;
      var usePaths = this.usePaths();
      var colors2 = ele.pstyle(shapeStyleName + "-gradient-stop-colors").value, positions = ele.pstyle(shapeStyleName + "-gradient-stop-positions").pfValue;
      if (fill === "radial-gradient") {
        if (ele.isEdge()) {
          var start = ele.sourceEndpoint(), end = ele.targetEndpoint(), mid = ele.midpoint();
          var d1 = dist(start, mid);
          var d2 = dist(end, mid);
          gradientStyle = context.createRadialGradient(mid.x, mid.y, 0, mid.x, mid.y, Math.max(d1, d2));
        } else {
          var pos = usePaths ? {
            x: 0,
            y: 0
          } : ele.position(), width = ele.paddedWidth(), height = ele.paddedHeight();
          gradientStyle = context.createRadialGradient(pos.x, pos.y, 0, pos.x, pos.y, Math.max(width, height));
        }
      } else {
        if (ele.isEdge()) {
          var _start = ele.sourceEndpoint(), _end = ele.targetEndpoint();
          gradientStyle = context.createLinearGradient(_start.x, _start.y, _end.x, _end.y);
        } else {
          var _pos = usePaths ? {
            x: 0,
            y: 0
          } : ele.position(), _width = ele.paddedWidth(), _height = ele.paddedHeight(), halfWidth = _width / 2, halfHeight = _height / 2;
          var direction = ele.pstyle("background-gradient-direction").value;
          switch (direction) {
            case "to-bottom":
              gradientStyle = context.createLinearGradient(_pos.x, _pos.y - halfHeight, _pos.x, _pos.y + halfHeight);
              break;
            case "to-top":
              gradientStyle = context.createLinearGradient(_pos.x, _pos.y + halfHeight, _pos.x, _pos.y - halfHeight);
              break;
            case "to-left":
              gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y, _pos.x - halfWidth, _pos.y);
              break;
            case "to-right":
              gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y, _pos.x + halfWidth, _pos.y);
              break;
            case "to-bottom-right":
            case "to-right-bottom":
              gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y - halfHeight, _pos.x + halfWidth, _pos.y + halfHeight);
              break;
            case "to-top-right":
            case "to-right-top":
              gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y + halfHeight, _pos.x + halfWidth, _pos.y - halfHeight);
              break;
            case "to-bottom-left":
            case "to-left-bottom":
              gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y - halfHeight, _pos.x - halfWidth, _pos.y + halfHeight);
              break;
            case "to-top-left":
            case "to-left-top":
              gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y + halfHeight, _pos.x - halfWidth, _pos.y - halfHeight);
              break;
          }
        }
      }
      if (!gradientStyle)
        return null;
      var hasPositions = positions.length === colors2.length;
      var length = colors2.length;
      for (var i2 = 0; i2 < length; i2++) {
        gradientStyle.addColorStop(hasPositions ? positions[i2] : i2 / (length - 1), "rgba(" + colors2[i2][0] + "," + colors2[i2][1] + "," + colors2[i2][2] + "," + opacity + ")");
      }
      return gradientStyle;
    };
    CRp$6.gradientFillStyle = function(context, ele, fill, opacity) {
      var gradientStyle = this.createGradientStyleFor(context, "background", ele, fill, opacity);
      if (!gradientStyle)
        return null;
      context.fillStyle = gradientStyle;
    };
    CRp$6.colorFillStyle = function(context, r, g, b, a) {
      context.fillStyle = "rgba(" + r + "," + g + "," + b + "," + a + ")";
    };
    CRp$6.eleFillStyle = function(context, ele, opacity) {
      var backgroundFill = ele.pstyle("background-fill").value;
      if (backgroundFill === "linear-gradient" || backgroundFill === "radial-gradient") {
        this.gradientFillStyle(context, ele, backgroundFill, opacity);
      } else {
        var backgroundColor = ele.pstyle("background-color").value;
        this.colorFillStyle(context, backgroundColor[0], backgroundColor[1], backgroundColor[2], opacity);
      }
    };
    CRp$6.gradientStrokeStyle = function(context, ele, fill, opacity) {
      var gradientStyle = this.createGradientStyleFor(context, "line", ele, fill, opacity);
      if (!gradientStyle)
        return null;
      context.strokeStyle = gradientStyle;
    };
    CRp$6.colorStrokeStyle = function(context, r, g, b, a) {
      context.strokeStyle = "rgba(" + r + "," + g + "," + b + "," + a + ")";
    };
    CRp$6.eleStrokeStyle = function(context, ele, opacity) {
      var lineFill = ele.pstyle("line-fill").value;
      if (lineFill === "linear-gradient" || lineFill === "radial-gradient") {
        this.gradientStrokeStyle(context, ele, lineFill, opacity);
      } else {
        var lineColor = ele.pstyle("line-color").value;
        this.colorStrokeStyle(context, lineColor[0], lineColor[1], lineColor[2], opacity);
      }
    };
    CRp$6.matchCanvasSize = function(container) {
      var r = this;
      var data2 = r.data;
      var bb = r.findContainerClientCoords();
      var width = bb[2];
      var height = bb[3];
      var pixelRatio = r.getPixelRatio();
      var mbPxRatio = r.motionBlurPxRatio;
      if (container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE] || container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG]) {
        pixelRatio = mbPxRatio;
      }
      var canvasWidth = width * pixelRatio;
      var canvasHeight = height * pixelRatio;
      var canvas;
      if (canvasWidth === r.canvasWidth && canvasHeight === r.canvasHeight) {
        return;
      }
      r.fontCaches = null;
      var canvasContainer = data2.canvasContainer;
      canvasContainer.style.width = width + "px";
      canvasContainer.style.height = height + "px";
      for (var i2 = 0; i2 < r.CANVAS_LAYERS; i2++) {
        canvas = data2.canvases[i2];
        canvas.width = canvasWidth;
        canvas.height = canvasHeight;
        canvas.style.width = width + "px";
        canvas.style.height = height + "px";
      }
      for (var i2 = 0; i2 < r.BUFFER_COUNT; i2++) {
        canvas = data2.bufferCanvases[i2];
        canvas.width = canvasWidth;
        canvas.height = canvasHeight;
        canvas.style.width = width + "px";
        canvas.style.height = height + "px";
      }
      r.textureMult = 1;
      if (pixelRatio <= 1) {
        canvas = data2.bufferCanvases[r.TEXTURE_BUFFER];
        r.textureMult = 2;
        canvas.width = canvasWidth * r.textureMult;
        canvas.height = canvasHeight * r.textureMult;
      }
      r.canvasWidth = canvasWidth;
      r.canvasHeight = canvasHeight;
    };
    CRp$6.renderTo = function(cxt, zoom, pan, pxRatio) {
      this.render({
        forcedContext: cxt,
        forcedZoom: zoom,
        forcedPan: pan,
        drawAllLayers: true,
        forcedPxRatio: pxRatio
      });
    };
    CRp$6.render = function(options) {
      options = options || staticEmptyObject();
      var forcedContext = options.forcedContext;
      var drawAllLayers = options.drawAllLayers;
      var drawOnlyNodeLayer = options.drawOnlyNodeLayer;
      var forcedZoom = options.forcedZoom;
      var forcedPan = options.forcedPan;
      var r = this;
      var pixelRatio = options.forcedPxRatio === void 0 ? this.getPixelRatio() : options.forcedPxRatio;
      var cy = r.cy;
      var data2 = r.data;
      var needDraw = data2.canvasNeedsRedraw;
      var textureDraw = r.textureOnViewport && !forcedContext && (r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming);
      var motionBlur = options.motionBlur !== void 0 ? options.motionBlur : r.motionBlur;
      var mbPxRatio = r.motionBlurPxRatio;
      var hasCompoundNodes = cy.hasCompoundNodes();
      var inNodeDragGesture = r.hoverData.draggingEles;
      var inBoxSelection = r.hoverData.selecting || r.touchData.selecting ? true : false;
      motionBlur = motionBlur && !forcedContext && r.motionBlurEnabled && !inBoxSelection;
      var motionBlurFadeEffect = motionBlur;
      if (!forcedContext) {
        if (r.prevPxRatio !== pixelRatio) {
          r.invalidateContainerClientCoordsCache();
          r.matchCanvasSize(r.container);
          r.redrawHint("eles", true);
          r.redrawHint("drag", true);
        }
        r.prevPxRatio = pixelRatio;
      }
      if (!forcedContext && r.motionBlurTimeout) {
        clearTimeout(r.motionBlurTimeout);
      }
      if (motionBlur) {
        if (r.mbFrames == null) {
          r.mbFrames = 0;
        }
        r.mbFrames++;
        if (r.mbFrames < 3) {
          motionBlurFadeEffect = false;
        }
        if (r.mbFrames > r.minMbLowQualFrames) {
          r.motionBlurPxRatio = r.mbPxRBlurry;
        }
      }
      if (r.clearingMotionBlur) {
        r.motionBlurPxRatio = 1;
      }
      if (r.textureDrawLastFrame && !textureDraw) {
        needDraw[r.NODE] = true;
        needDraw[r.SELECT_BOX] = true;
      }
      var style = cy.style();
      var zoom = cy.zoom();
      var effectiveZoom = forcedZoom !== void 0 ? forcedZoom : zoom;
      var pan = cy.pan();
      var effectivePan = {
        x: pan.x,
        y: pan.y
      };
      var vp = {
        zoom,
        pan: {
          x: pan.x,
          y: pan.y
        }
      };
      var prevVp = r.prevViewport;
      var viewportIsDiff = prevVp === void 0 || vp.zoom !== prevVp.zoom || vp.pan.x !== prevVp.pan.x || vp.pan.y !== prevVp.pan.y;
      if (!viewportIsDiff && !(inNodeDragGesture && !hasCompoundNodes)) {
        r.motionBlurPxRatio = 1;
      }
      if (forcedPan) {
        effectivePan = forcedPan;
      }
      effectiveZoom *= pixelRatio;
      effectivePan.x *= pixelRatio;
      effectivePan.y *= pixelRatio;
      var eles = r.getCachedZSortedEles();
      function mbclear(context2, x, y, w, h) {
        var gco = context2.globalCompositeOperation;
        context2.globalCompositeOperation = "destination-out";
        r.colorFillStyle(context2, 255, 255, 255, r.motionBlurTransparency);
        context2.fillRect(x, y, w, h);
        context2.globalCompositeOperation = gco;
      }
      function setContextTransform(context2, clear2) {
        var ePan, eZoom, w, h;
        if (!r.clearingMotionBlur && (context2 === data2.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] || context2 === data2.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG])) {
          ePan = {
            x: pan.x * mbPxRatio,
            y: pan.y * mbPxRatio
          };
          eZoom = zoom * mbPxRatio;
          w = r.canvasWidth * mbPxRatio;
          h = r.canvasHeight * mbPxRatio;
        } else {
          ePan = effectivePan;
          eZoom = effectiveZoom;
          w = r.canvasWidth;
          h = r.canvasHeight;
        }
        context2.setTransform(1, 0, 0, 1, 0, 0);
        if (clear2 === "motionBlur") {
          mbclear(context2, 0, 0, w, h);
        } else if (!forcedContext && (clear2 === void 0 || clear2)) {
          context2.clearRect(0, 0, w, h);
        }
        if (!drawAllLayers) {
          context2.translate(ePan.x, ePan.y);
          context2.scale(eZoom, eZoom);
        }
        if (forcedPan) {
          context2.translate(forcedPan.x, forcedPan.y);
        }
        if (forcedZoom) {
          context2.scale(forcedZoom, forcedZoom);
        }
      }
      if (!textureDraw) {
        r.textureDrawLastFrame = false;
      }
      if (textureDraw) {
        r.textureDrawLastFrame = true;
        if (!r.textureCache) {
          r.textureCache = {};
          r.textureCache.bb = cy.mutableElements().boundingBox();
          r.textureCache.texture = r.data.bufferCanvases[r.TEXTURE_BUFFER];
          var cxt = r.data.bufferContexts[r.TEXTURE_BUFFER];
          cxt.setTransform(1, 0, 0, 1, 0, 0);
          cxt.clearRect(0, 0, r.canvasWidth * r.textureMult, r.canvasHeight * r.textureMult);
          r.render({
            forcedContext: cxt,
            drawOnlyNodeLayer: true,
            forcedPxRatio: pixelRatio * r.textureMult
          });
          var vp = r.textureCache.viewport = {
            zoom: cy.zoom(),
            pan: cy.pan(),
            width: r.canvasWidth,
            height: r.canvasHeight
          };
          vp.mpan = {
            x: (0 - vp.pan.x) / vp.zoom,
            y: (0 - vp.pan.y) / vp.zoom
          };
        }
        needDraw[r.DRAG] = false;
        needDraw[r.NODE] = false;
        var context = data2.contexts[r.NODE];
        var texture = r.textureCache.texture;
        var vp = r.textureCache.viewport;
        context.setTransform(1, 0, 0, 1, 0, 0);
        if (motionBlur) {
          mbclear(context, 0, 0, vp.width, vp.height);
        } else {
          context.clearRect(0, 0, vp.width, vp.height);
        }
        var outsideBgColor = style.core("outside-texture-bg-color").value;
        var outsideBgOpacity = style.core("outside-texture-bg-opacity").value;
        r.colorFillStyle(context, outsideBgColor[0], outsideBgColor[1], outsideBgColor[2], outsideBgOpacity);
        context.fillRect(0, 0, vp.width, vp.height);
        var zoom = cy.zoom();
        setContextTransform(context, false);
        context.clearRect(vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);
        context.drawImage(texture, vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);
      } else if (r.textureOnViewport && !forcedContext) {
        r.textureCache = null;
      }
      var extent = cy.extent();
      var vpManip = r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming || r.hoverData.draggingEles || r.cy.animated();
      var hideEdges = r.hideEdgesOnViewport && vpManip;
      var needMbClear = [];
      needMbClear[r.NODE] = !needDraw[r.NODE] && motionBlur && !r.clearedForMotionBlur[r.NODE] || r.clearingMotionBlur;
      if (needMbClear[r.NODE]) {
        r.clearedForMotionBlur[r.NODE] = true;
      }
      needMbClear[r.DRAG] = !needDraw[r.DRAG] && motionBlur && !r.clearedForMotionBlur[r.DRAG] || r.clearingMotionBlur;
      if (needMbClear[r.DRAG]) {
        r.clearedForMotionBlur[r.DRAG] = true;
      }
      if (needDraw[r.NODE] || drawAllLayers || drawOnlyNodeLayer || needMbClear[r.NODE]) {
        var useBuffer = motionBlur && !needMbClear[r.NODE] && mbPxRatio !== 1;
        var context = forcedContext || (useBuffer ? r.data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] : data2.contexts[r.NODE]);
        var clear = motionBlur && !useBuffer ? "motionBlur" : void 0;
        setContextTransform(context, clear);
        if (hideEdges) {
          r.drawCachedNodes(context, eles.nondrag, pixelRatio, extent);
        } else {
          r.drawLayeredElements(context, eles.nondrag, pixelRatio, extent);
        }
        if (r.debug) {
          r.drawDebugPoints(context, eles.nondrag);
        }
        if (!drawAllLayers && !motionBlur) {
          needDraw[r.NODE] = false;
        }
      }
      if (!drawOnlyNodeLayer && (needDraw[r.DRAG] || drawAllLayers || needMbClear[r.DRAG])) {
        var useBuffer = motionBlur && !needMbClear[r.DRAG] && mbPxRatio !== 1;
        var context = forcedContext || (useBuffer ? r.data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG] : data2.contexts[r.DRAG]);
        setContextTransform(context, motionBlur && !useBuffer ? "motionBlur" : void 0);
        if (hideEdges) {
          r.drawCachedNodes(context, eles.drag, pixelRatio, extent);
        } else {
          r.drawCachedElements(context, eles.drag, pixelRatio, extent);
        }
        if (r.debug) {
          r.drawDebugPoints(context, eles.drag);
        }
        if (!drawAllLayers && !motionBlur) {
          needDraw[r.DRAG] = false;
        }
      }
      if (r.showFps || !drawOnlyNodeLayer && needDraw[r.SELECT_BOX] && !drawAllLayers) {
        var context = forcedContext || data2.contexts[r.SELECT_BOX];
        setContextTransform(context);
        if (r.selection[4] == 1 && (r.hoverData.selecting || r.touchData.selecting)) {
          var zoom = r.cy.zoom();
          var borderWidth = style.core("selection-box-border-width").value / zoom;
          context.lineWidth = borderWidth;
          context.fillStyle = "rgba(" + style.core("selection-box-color").value[0] + "," + style.core("selection-box-color").value[1] + "," + style.core("selection-box-color").value[2] + "," + style.core("selection-box-opacity").value + ")";
          context.fillRect(r.selection[0], r.selection[1], r.selection[2] - r.selection[0], r.selection[3] - r.selection[1]);
          if (borderWidth > 0) {
            context.strokeStyle = "rgba(" + style.core("selection-box-border-color").value[0] + "," + style.core("selection-box-border-color").value[1] + "," + style.core("selection-box-border-color").value[2] + "," + style.core("selection-box-opacity").value + ")";
            context.strokeRect(r.selection[0], r.selection[1], r.selection[2] - r.selection[0], r.selection[3] - r.selection[1]);
          }
        }
        if (data2.bgActivePosistion && !r.hoverData.selecting) {
          var zoom = r.cy.zoom();
          var pos = data2.bgActivePosistion;
          context.fillStyle = "rgba(" + style.core("active-bg-color").value[0] + "," + style.core("active-bg-color").value[1] + "," + style.core("active-bg-color").value[2] + "," + style.core("active-bg-opacity").value + ")";
          context.beginPath();
          context.arc(pos.x, pos.y, style.core("active-bg-size").pfValue / zoom, 0, 2 * Math.PI);
          context.fill();
        }
        var timeToRender = r.lastRedrawTime;
        if (r.showFps && timeToRender) {
          timeToRender = Math.round(timeToRender);
          var fps = Math.round(1e3 / timeToRender);
          context.setTransform(1, 0, 0, 1, 0, 0);
          context.fillStyle = "rgba(255, 0, 0, 0.75)";
          context.strokeStyle = "rgba(255, 0, 0, 0.75)";
          context.lineWidth = 1;
          context.fillText("1 frame = " + timeToRender + " ms = " + fps + " fps", 0, 20);
          var maxFps = 60;
          context.strokeRect(0, 30, 250, 20);
          context.fillRect(0, 30, 250 * Math.min(fps / maxFps, 1), 20);
        }
        if (!drawAllLayers) {
          needDraw[r.SELECT_BOX] = false;
        }
      }
      if (motionBlur && mbPxRatio !== 1) {
        var cxtNode = data2.contexts[r.NODE];
        var txtNode = r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE];
        var cxtDrag = data2.contexts[r.DRAG];
        var txtDrag = r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG];
        var drawMotionBlur = function drawMotionBlur2(cxt2, txt, needClear) {
          cxt2.setTransform(1, 0, 0, 1, 0, 0);
          if (needClear || !motionBlurFadeEffect) {
            cxt2.clearRect(0, 0, r.canvasWidth, r.canvasHeight);
          } else {
            mbclear(cxt2, 0, 0, r.canvasWidth, r.canvasHeight);
          }
          var pxr = mbPxRatio;
          cxt2.drawImage(txt, 0, 0, r.canvasWidth * pxr, r.canvasHeight * pxr, 0, 0, r.canvasWidth, r.canvasHeight);
        };
        if (needDraw[r.NODE] || needMbClear[r.NODE]) {
          drawMotionBlur(cxtNode, txtNode, needMbClear[r.NODE]);
          needDraw[r.NODE] = false;
        }
        if (needDraw[r.DRAG] || needMbClear[r.DRAG]) {
          drawMotionBlur(cxtDrag, txtDrag, needMbClear[r.DRAG]);
          needDraw[r.DRAG] = false;
        }
      }
      r.prevViewport = vp;
      if (r.clearingMotionBlur) {
        r.clearingMotionBlur = false;
        r.motionBlurCleared = true;
        r.motionBlur = true;
      }
      if (motionBlur) {
        r.motionBlurTimeout = setTimeout(function() {
          r.motionBlurTimeout = null;
          r.clearedForMotionBlur[r.NODE] = false;
          r.clearedForMotionBlur[r.DRAG] = false;
          r.motionBlur = false;
          r.clearingMotionBlur = !textureDraw;
          r.mbFrames = 0;
          needDraw[r.NODE] = true;
          needDraw[r.DRAG] = true;
          r.redraw();
        }, motionBlurDelay);
      }
      if (!forcedContext) {
        cy.emit("render");
      }
    };
    var CRp$7 = {};
    CRp$7.drawPolygonPath = function(context, x, y, width, height, points) {
      var halfW = width / 2;
      var halfH = height / 2;
      if (context.beginPath) {
        context.beginPath();
      }
      context.moveTo(x + halfW * points[0], y + halfH * points[1]);
      for (var i2 = 1; i2 < points.length / 2; i2++) {
        context.lineTo(x + halfW * points[i2 * 2], y + halfH * points[i2 * 2 + 1]);
      }
      context.closePath();
    };
    CRp$7.drawRoundPolygonPath = function(context, x, y, width, height, points) {
      var halfW = width / 2;
      var halfH = height / 2;
      var cornerRadius = getRoundPolygonRadius(width, height);
      if (context.beginPath) {
        context.beginPath();
      }
      for (var _i = 0; _i < points.length / 4; _i++) {
        var sourceUv = void 0, destUv = void 0;
        if (_i === 0) {
          sourceUv = points.length - 2;
        } else {
          sourceUv = _i * 4 - 2;
        }
        destUv = _i * 4 + 2;
        var px = x + halfW * points[_i * 4];
        var py = y + halfH * points[_i * 4 + 1];
        var cosTheta = -points[sourceUv] * points[destUv] - points[sourceUv + 1] * points[destUv + 1];
        var offset = cornerRadius / Math.tan(Math.acos(cosTheta) / 2);
        var cp0x = px - offset * points[sourceUv];
        var cp0y = py - offset * points[sourceUv + 1];
        var cp1x = px + offset * points[destUv];
        var cp1y = py + offset * points[destUv + 1];
        if (_i === 0) {
          context.moveTo(cp0x, cp0y);
        } else {
          context.lineTo(cp0x, cp0y);
        }
        context.arcTo(px, py, cp1x, cp1y, cornerRadius);
      }
      context.closePath();
    };
    CRp$7.drawRoundRectanglePath = function(context, x, y, width, height) {
      var halfWidth = width / 2;
      var halfHeight = height / 2;
      var cornerRadius = getRoundRectangleRadius(width, height);
      if (context.beginPath) {
        context.beginPath();
      }
      context.moveTo(x, y - halfHeight);
      context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);
      context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);
      context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);
      context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius);
      context.lineTo(x, y - halfHeight);
      context.closePath();
    };
    CRp$7.drawBottomRoundRectanglePath = function(context, x, y, width, height) {
      var halfWidth = width / 2;
      var halfHeight = height / 2;
      var cornerRadius = getRoundRectangleRadius(width, height);
      if (context.beginPath) {
        context.beginPath();
      }
      context.moveTo(x, y - halfHeight);
      context.lineTo(x + halfWidth, y - halfHeight);
      context.lineTo(x + halfWidth, y);
      context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);
      context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);
      context.lineTo(x - halfWidth, y - halfHeight);
      context.lineTo(x, y - halfHeight);
      context.closePath();
    };
    CRp$7.drawCutRectanglePath = function(context, x, y, width, height) {
      var halfWidth = width / 2;
      var halfHeight = height / 2;
      var cornerLength = getCutRectangleCornerLength();
      if (context.beginPath) {
        context.beginPath();
      }
      context.moveTo(x - halfWidth + cornerLength, y - halfHeight);
      context.lineTo(x + halfWidth - cornerLength, y - halfHeight);
      context.lineTo(x + halfWidth, y - halfHeight + cornerLength);
      context.lineTo(x + halfWidth, y + halfHeight - cornerLength);
      context.lineTo(x + halfWidth - cornerLength, y + halfHeight);
      context.lineTo(x - halfWidth + cornerLength, y + halfHeight);
      context.lineTo(x - halfWidth, y + halfHeight - cornerLength);
      context.lineTo(x - halfWidth, y - halfHeight + cornerLength);
      context.closePath();
    };
    CRp$7.drawBarrelPath = function(context, x, y, width, height) {
      var halfWidth = width / 2;
      var halfHeight = height / 2;
      var xBegin = x - halfWidth;
      var xEnd = x + halfWidth;
      var yBegin = y - halfHeight;
      var yEnd = y + halfHeight;
      var barrelCurveConstants = getBarrelCurveConstants(width, height);
      var wOffset = barrelCurveConstants.widthOffset;
      var hOffset = barrelCurveConstants.heightOffset;
      var ctrlPtXOffset = barrelCurveConstants.ctrlPtOffsetPct * wOffset;
      if (context.beginPath) {
        context.beginPath();
      }
      context.moveTo(xBegin, yBegin + hOffset);
      context.lineTo(xBegin, yEnd - hOffset);
      context.quadraticCurveTo(xBegin + ctrlPtXOffset, yEnd, xBegin + wOffset, yEnd);
      context.lineTo(xEnd - wOffset, yEnd);
      context.quadraticCurveTo(xEnd - ctrlPtXOffset, yEnd, xEnd, yEnd - hOffset);
      context.lineTo(xEnd, yBegin + hOffset);
      context.quadraticCurveTo(xEnd - ctrlPtXOffset, yBegin, xEnd - wOffset, yBegin);
      context.lineTo(xBegin + wOffset, yBegin);
      context.quadraticCurveTo(xBegin + ctrlPtXOffset, yBegin, xBegin, yBegin + hOffset);
      context.closePath();
    };
    var sin0 = Math.sin(0);
    var cos0 = Math.cos(0);
    var sin = {};
    var cos = {};
    var ellipseStepSize = Math.PI / 40;
    for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize) {
      sin[i] = Math.sin(i);
      cos[i] = Math.cos(i);
    }
    CRp$7.drawEllipsePath = function(context, centerX, centerY, width, height) {
      if (context.beginPath) {
        context.beginPath();
      }
      if (context.ellipse) {
        context.ellipse(centerX, centerY, width / 2, height / 2, 0, 0, 2 * Math.PI);
      } else {
        var xPos, yPos;
        var rw = width / 2;
        var rh = height / 2;
        for (var i2 = 0 * Math.PI; i2 < 2 * Math.PI; i2 += ellipseStepSize) {
          xPos = centerX - rw * sin[i2] * sin0 + rw * cos[i2] * cos0;
          yPos = centerY + rh * cos[i2] * sin0 + rh * sin[i2] * cos0;
          if (i2 === 0) {
            context.moveTo(xPos, yPos);
          } else {
            context.lineTo(xPos, yPos);
          }
        }
      }
      context.closePath();
    };
    var CRp$8 = {};
    CRp$8.createBuffer = function(w, h) {
      var buffer = document.createElement("canvas");
      buffer.width = w;
      buffer.height = h;
      return [buffer, buffer.getContext("2d")];
    };
    CRp$8.bufferCanvasImage = function(options) {
      var cy = this.cy;
      var eles = cy.mutableElements();
      var bb = eles.boundingBox();
      var ctrRect = this.findContainerClientCoords();
      var width = options.full ? Math.ceil(bb.w) : ctrRect[2];
      var height = options.full ? Math.ceil(bb.h) : ctrRect[3];
      var specdMaxDims = number(options.maxWidth) || number(options.maxHeight);
      var pxRatio = this.getPixelRatio();
      var scale = 1;
      if (options.scale !== void 0) {
        width *= options.scale;
        height *= options.scale;
        scale = options.scale;
      } else if (specdMaxDims) {
        var maxScaleW = Infinity;
        var maxScaleH = Infinity;
        if (number(options.maxWidth)) {
          maxScaleW = scale * options.maxWidth / width;
        }
        if (number(options.maxHeight)) {
          maxScaleH = scale * options.maxHeight / height;
        }
        scale = Math.min(maxScaleW, maxScaleH);
        width *= scale;
        height *= scale;
      }
      if (!specdMaxDims) {
        width *= pxRatio;
        height *= pxRatio;
        scale *= pxRatio;
      }
      var buffCanvas = document.createElement("canvas");
      buffCanvas.width = width;
      buffCanvas.height = height;
      buffCanvas.style.width = width + "px";
      buffCanvas.style.height = height + "px";
      var buffCxt = buffCanvas.getContext("2d");
      if (width > 0 && height > 0) {
        buffCxt.clearRect(0, 0, width, height);
        buffCxt.globalCompositeOperation = "source-over";
        var zsortedEles = this.getCachedZSortedEles();
        if (options.full) {
          buffCxt.translate(-bb.x1 * scale, -bb.y1 * scale);
          buffCxt.scale(scale, scale);
          this.drawElements(buffCxt, zsortedEles);
          buffCxt.scale(1 / scale, 1 / scale);
          buffCxt.translate(bb.x1 * scale, bb.y1 * scale);
        } else {
          var pan = cy.pan();
          var translation = {
            x: pan.x * scale,
            y: pan.y * scale
          };
          scale *= cy.zoom();
          buffCxt.translate(translation.x, translation.y);
          buffCxt.scale(scale, scale);
          this.drawElements(buffCxt, zsortedEles);
          buffCxt.scale(1 / scale, 1 / scale);
          buffCxt.translate(-translation.x, -translation.y);
        }
        if (options.bg) {
          buffCxt.globalCompositeOperation = "destination-over";
          buffCxt.fillStyle = options.bg;
          buffCxt.rect(0, 0, width, height);
          buffCxt.fill();
        }
      }
      return buffCanvas;
    };
    function b64ToBlob(b64, mimeType) {
      var bytes = atob(b64);
      var buff = new ArrayBuffer(bytes.length);
      var buffUint8 = new Uint8Array(buff);
      for (var i2 = 0; i2 < bytes.length; i2++) {
        buffUint8[i2] = bytes.charCodeAt(i2);
      }
      return new Blob([buff], {
        type: mimeType
      });
    }
    function b64UriToB64(b64uri) {
      var i2 = b64uri.indexOf(",");
      return b64uri.substr(i2 + 1);
    }
    function output(options, canvas, mimeType) {
      var getB64Uri = function getB64Uri2() {
        return canvas.toDataURL(mimeType, options.quality);
      };
      switch (options.output) {
        case "blob-promise":
          return new Promise$1(function(resolve2, reject) {
            try {
              canvas.toBlob(function(blob) {
                if (blob != null) {
                  resolve2(blob);
                } else {
                  reject(new Error("`canvas.toBlob()` sent a null value in its callback"));
                }
              }, mimeType, options.quality);
            } catch (err) {
              reject(err);
            }
          });
        case "blob":
          return b64ToBlob(b64UriToB64(getB64Uri()), mimeType);
        case "base64":
          return b64UriToB64(getB64Uri());
        case "base64uri":
        default:
          return getB64Uri();
      }
    }
    CRp$8.png = function(options) {
      return output(options, this.bufferCanvasImage(options), "image/png");
    };
    CRp$8.jpg = function(options) {
      return output(options, this.bufferCanvasImage(options), "image/jpeg");
    };
    var CRp$9 = {};
    CRp$9.nodeShapeImpl = function(name, context, centerX, centerY, width, height, points) {
      switch (name) {
        case "ellipse":
          return this.drawEllipsePath(context, centerX, centerY, width, height);
        case "polygon":
          return this.drawPolygonPath(context, centerX, centerY, width, height, points);
        case "round-polygon":
          return this.drawRoundPolygonPath(context, centerX, centerY, width, height, points);
        case "roundrectangle":
        case "round-rectangle":
          return this.drawRoundRectanglePath(context, centerX, centerY, width, height);
        case "cutrectangle":
        case "cut-rectangle":
          return this.drawCutRectanglePath(context, centerX, centerY, width, height);
        case "bottomroundrectangle":
        case "bottom-round-rectangle":
          return this.drawBottomRoundRectanglePath(context, centerX, centerY, width, height);
        case "barrel":
          return this.drawBarrelPath(context, centerX, centerY, width, height);
      }
    };
    var CR = CanvasRenderer;
    var CRp$a = CanvasRenderer.prototype;
    CRp$a.CANVAS_LAYERS = 3;
    CRp$a.SELECT_BOX = 0;
    CRp$a.DRAG = 1;
    CRp$a.NODE = 2;
    CRp$a.BUFFER_COUNT = 3;
    CRp$a.TEXTURE_BUFFER = 0;
    CRp$a.MOTIONBLUR_BUFFER_NODE = 1;
    CRp$a.MOTIONBLUR_BUFFER_DRAG = 2;
    function CanvasRenderer(options) {
      var r = this;
      r.data = {
        canvases: new Array(CRp$a.CANVAS_LAYERS),
        contexts: new Array(CRp$a.CANVAS_LAYERS),
        canvasNeedsRedraw: new Array(CRp$a.CANVAS_LAYERS),
        bufferCanvases: new Array(CRp$a.BUFFER_COUNT),
        bufferContexts: new Array(CRp$a.CANVAS_LAYERS)
      };
      var tapHlOffAttr = "-webkit-tap-highlight-color";
      var tapHlOffStyle = "rgba(0,0,0,0)";
      r.data.canvasContainer = document.createElement("div");
      var containerStyle = r.data.canvasContainer.style;
      r.data.canvasContainer.style[tapHlOffAttr] = tapHlOffStyle;
      containerStyle.position = "relative";
      containerStyle.zIndex = "0";
      containerStyle.overflow = "hidden";
      var container = options.cy.container();
      container.appendChild(r.data.canvasContainer);
      container.style[tapHlOffAttr] = tapHlOffStyle;
      var styleMap = {
        "-webkit-user-select": "none",
        "-moz-user-select": "-moz-none",
        "user-select": "none",
        "-webkit-tap-highlight-color": "rgba(0,0,0,0)",
        "outline-style": "none"
      };
      if (ms()) {
        styleMap["-ms-touch-action"] = "none";
        styleMap["touch-action"] = "none";
      }
      for (var i2 = 0; i2 < CRp$a.CANVAS_LAYERS; i2++) {
        var canvas = r.data.canvases[i2] = document.createElement("canvas");
        r.data.contexts[i2] = canvas.getContext("2d");
        Object.keys(styleMap).forEach(function(k) {
          canvas.style[k] = styleMap[k];
        });
        canvas.style.position = "absolute";
        canvas.setAttribute("data-id", "layer" + i2);
        canvas.style.zIndex = String(CRp$a.CANVAS_LAYERS - i2);
        r.data.canvasContainer.appendChild(canvas);
        r.data.canvasNeedsRedraw[i2] = false;
      }
      r.data.topCanvas = r.data.canvases[0];
      r.data.canvases[CRp$a.NODE].setAttribute("data-id", "layer" + CRp$a.NODE + "-node");
      r.data.canvases[CRp$a.SELECT_BOX].setAttribute("data-id", "layer" + CRp$a.SELECT_BOX + "-selectbox");
      r.data.canvases[CRp$a.DRAG].setAttribute("data-id", "layer" + CRp$a.DRAG + "-drag");
      for (var i2 = 0; i2 < CRp$a.BUFFER_COUNT; i2++) {
        r.data.bufferCanvases[i2] = document.createElement("canvas");
        r.data.bufferContexts[i2] = r.data.bufferCanvases[i2].getContext("2d");
        r.data.bufferCanvases[i2].style.position = "absolute";
        r.data.bufferCanvases[i2].setAttribute("data-id", "buffer" + i2);
        r.data.bufferCanvases[i2].style.zIndex = String(-i2 - 1);
        r.data.bufferCanvases[i2].style.visibility = "hidden";
      }
      r.pathsEnabled = true;
      var emptyBb = makeBoundingBox();
      var getBoxCenter = function getBoxCenter2(bb) {
        return {
          x: (bb.x1 + bb.x2) / 2,
          y: (bb.y1 + bb.y2) / 2
        };
      };
      var getCenterOffset = function getCenterOffset2(bb) {
        return {
          x: -bb.w / 2,
          y: -bb.h / 2
        };
      };
      var backgroundTimestampHasChanged = function backgroundTimestampHasChanged2(ele) {
        var _p = ele[0]._private;
        var same = _p.oldBackgroundTimestamp === _p.backgroundTimestamp;
        return !same;
      };
      var getStyleKey = function getStyleKey2(ele) {
        return ele[0]._private.nodeKey;
      };
      var getLabelKey = function getLabelKey2(ele) {
        return ele[0]._private.labelStyleKey;
      };
      var getSourceLabelKey = function getSourceLabelKey2(ele) {
        return ele[0]._private.sourceLabelStyleKey;
      };
      var getTargetLabelKey = function getTargetLabelKey2(ele) {
        return ele[0]._private.targetLabelStyleKey;
      };
      var drawElement = function drawElement2(context, ele, bb, scaledLabelShown, useEleOpacity) {
        return r.drawElement(context, ele, bb, false, false, useEleOpacity);
      };
      var drawLabel = function drawLabel2(context, ele, bb, scaledLabelShown, useEleOpacity) {
        return r.drawElementText(context, ele, bb, scaledLabelShown, "main", useEleOpacity);
      };
      var drawSourceLabel = function drawSourceLabel2(context, ele, bb, scaledLabelShown, useEleOpacity) {
        return r.drawElementText(context, ele, bb, scaledLabelShown, "source", useEleOpacity);
      };
      var drawTargetLabel = function drawTargetLabel2(context, ele, bb, scaledLabelShown, useEleOpacity) {
        return r.drawElementText(context, ele, bb, scaledLabelShown, "target", useEleOpacity);
      };
      var getElementBox = function getElementBox2(ele) {
        ele.boundingBox();
        return ele[0]._private.bodyBounds;
      };
      var getLabelBox = function getLabelBox2(ele) {
        ele.boundingBox();
        return ele[0]._private.labelBounds.main || emptyBb;
      };
      var getSourceLabelBox = function getSourceLabelBox2(ele) {
        ele.boundingBox();
        return ele[0]._private.labelBounds.source || emptyBb;
      };
      var getTargetLabelBox = function getTargetLabelBox2(ele) {
        ele.boundingBox();
        return ele[0]._private.labelBounds.target || emptyBb;
      };
      var isLabelVisibleAtScale = function isLabelVisibleAtScale2(ele, scaledLabelShown) {
        return scaledLabelShown;
      };
      var getElementRotationPoint = function getElementRotationPoint2(ele) {
        return getBoxCenter(getElementBox(ele));
      };
      var addTextMargin = function addTextMargin2(prefix, pt, ele) {
        var pre = prefix ? prefix + "-" : "";
        return {
          x: pt.x + ele.pstyle(pre + "text-margin-x").pfValue,
          y: pt.y + ele.pstyle(pre + "text-margin-y").pfValue
        };
      };
      var getRsPt = function getRsPt2(ele, x, y) {
        var rs = ele[0]._private.rscratch;
        return {
          x: rs[x],
          y: rs[y]
        };
      };
      var getLabelRotationPoint = function getLabelRotationPoint2(ele) {
        return addTextMargin("", getRsPt(ele, "labelX", "labelY"), ele);
      };
      var getSourceLabelRotationPoint = function getSourceLabelRotationPoint2(ele) {
        return addTextMargin("source", getRsPt(ele, "sourceLabelX", "sourceLabelY"), ele);
      };
      var getTargetLabelRotationPoint = function getTargetLabelRotationPoint2(ele) {
        return addTextMargin("target", getRsPt(ele, "targetLabelX", "targetLabelY"), ele);
      };
      var getElementRotationOffset = function getElementRotationOffset2(ele) {
        return getCenterOffset(getElementBox(ele));
      };
      var getSourceLabelRotationOffset = function getSourceLabelRotationOffset2(ele) {
        return getCenterOffset(getSourceLabelBox(ele));
      };
      var getTargetLabelRotationOffset = function getTargetLabelRotationOffset2(ele) {
        return getCenterOffset(getTargetLabelBox(ele));
      };
      var getLabelRotationOffset = function getLabelRotationOffset2(ele) {
        var bb = getLabelBox(ele);
        var p2 = getCenterOffset(getLabelBox(ele));
        if (ele.isNode()) {
          switch (ele.pstyle("text-halign").value) {
            case "left":
              p2.x = -bb.w;
              break;
            case "right":
              p2.x = 0;
              break;
          }
          switch (ele.pstyle("text-valign").value) {
            case "top":
              p2.y = -bb.h;
              break;
            case "bottom":
              p2.y = 0;
              break;
          }
        }
        return p2;
      };
      var eleTxrCache = r.data.eleTxrCache = new ElementTextureCache(r, {
        getKey: getStyleKey,
        doesEleInvalidateKey: backgroundTimestampHasChanged,
        drawElement,
        getBoundingBox: getElementBox,
        getRotationPoint: getElementRotationPoint,
        getRotationOffset: getElementRotationOffset,
        allowEdgeTxrCaching: false,
        allowParentTxrCaching: false
      });
      var lblTxrCache = r.data.lblTxrCache = new ElementTextureCache(r, {
        getKey: getLabelKey,
        drawElement: drawLabel,
        getBoundingBox: getLabelBox,
        getRotationPoint: getLabelRotationPoint,
        getRotationOffset: getLabelRotationOffset,
        isVisible: isLabelVisibleAtScale
      });
      var slbTxrCache = r.data.slbTxrCache = new ElementTextureCache(r, {
        getKey: getSourceLabelKey,
        drawElement: drawSourceLabel,
        getBoundingBox: getSourceLabelBox,
        getRotationPoint: getSourceLabelRotationPoint,
        getRotationOffset: getSourceLabelRotationOffset,
        isVisible: isLabelVisibleAtScale
      });
      var tlbTxrCache = r.data.tlbTxrCache = new ElementTextureCache(r, {
        getKey: getTargetLabelKey,
        drawElement: drawTargetLabel,
        getBoundingBox: getTargetLabelBox,
        getRotationPoint: getTargetLabelRotationPoint,
        getRotationOffset: getTargetLabelRotationOffset,
        isVisible: isLabelVisibleAtScale
      });
      var lyrTxrCache = r.data.lyrTxrCache = new LayeredTextureCache(r);
      r.onUpdateEleCalcs(function invalidateTextureCaches(willDraw, eles) {
        eleTxrCache.invalidateElements(eles);
        lblTxrCache.invalidateElements(eles);
        slbTxrCache.invalidateElements(eles);
        tlbTxrCache.invalidateElements(eles);
        lyrTxrCache.invalidateElements(eles);
        for (var _i = 0; _i < eles.length; _i++) {
          var _p = eles[_i]._private;
          _p.oldBackgroundTimestamp = _p.backgroundTimestamp;
        }
      });
      var refineInLayers = function refineInLayers2(reqs) {
        for (var i3 = 0; i3 < reqs.length; i3++) {
          lyrTxrCache.enqueueElementRefinement(reqs[i3].ele);
        }
      };
      eleTxrCache.onDequeue(refineInLayers);
      lblTxrCache.onDequeue(refineInLayers);
      slbTxrCache.onDequeue(refineInLayers);
      tlbTxrCache.onDequeue(refineInLayers);
    }
    CRp$a.redrawHint = function(group, bool) {
      var r = this;
      switch (group) {
        case "eles":
          r.data.canvasNeedsRedraw[CRp$a.NODE] = bool;
          break;
        case "drag":
          r.data.canvasNeedsRedraw[CRp$a.DRAG] = bool;
          break;
        case "select":
          r.data.canvasNeedsRedraw[CRp$a.SELECT_BOX] = bool;
          break;
      }
    };
    var pathsImpld = typeof Path2D !== "undefined";
    CRp$a.path2dEnabled = function(on) {
      if (on === void 0) {
        return this.pathsEnabled;
      }
      this.pathsEnabled = on ? true : false;
    };
    CRp$a.usePaths = function() {
      return pathsImpld && this.pathsEnabled;
    };
    CRp$a.setImgSmoothing = function(context, bool) {
      if (context.imageSmoothingEnabled != null) {
        context.imageSmoothingEnabled = bool;
      } else {
        context.webkitImageSmoothingEnabled = bool;
        context.mozImageSmoothingEnabled = bool;
        context.msImageSmoothingEnabled = bool;
      }
    };
    CRp$a.getImgSmoothing = function(context) {
      if (context.imageSmoothingEnabled != null) {
        return context.imageSmoothingEnabled;
      } else {
        return context.webkitImageSmoothingEnabled || context.mozImageSmoothingEnabled || context.msImageSmoothingEnabled;
      }
    };
    CRp$a.makeOffscreenCanvas = function(width, height) {
      var canvas;
      if ((typeof OffscreenCanvas === "undefined" ? "undefined" : _typeof(OffscreenCanvas)) !== "undefined") {
        canvas = new OffscreenCanvas(width, height);
      } else {
        canvas = document.createElement("canvas");
        canvas.width = width;
        canvas.height = height;
      }
      return canvas;
    };
    [CRp, CRp$1, CRp$2, CRp$3, CRp$4, CRp$5, CRp$6, CRp$7, CRp$8, CRp$9].forEach(function(props) {
      extend(CRp$a, props);
    });
    var renderer = [{
      name: "null",
      impl: NullRenderer
    }, {
      name: "base",
      impl: BR
    }, {
      name: "canvas",
      impl: CR
    }];
    var incExts = [{
      type: "layout",
      extensions: layout
    }, {
      type: "renderer",
      extensions: renderer
    }];
    var extensions = {};
    var modules = {};
    function setExtension(type, name, registrant) {
      var ext = registrant;
      var overrideErr = function overrideErr2(field) {
        error("Can not register `" + name + "` for `" + type + "` since `" + field + "` already exists in the prototype and can not be overridden");
      };
      if (type === "core") {
        if (Core.prototype[name]) {
          return overrideErr(name);
        } else {
          Core.prototype[name] = registrant;
        }
      } else if (type === "collection") {
        if (Collection.prototype[name]) {
          return overrideErr(name);
        } else {
          Collection.prototype[name] = registrant;
        }
      } else if (type === "layout") {
        var Layout2 = function Layout3(options) {
          this.options = options;
          registrant.call(this, options);
          if (!plainObject(this._private)) {
            this._private = {};
          }
          this._private.cy = options.cy;
          this._private.listeners = [];
          this.createEmitter();
        };
        var layoutProto = Layout2.prototype = Object.create(registrant.prototype);
        var optLayoutFns = [];
        for (var i2 = 0; i2 < optLayoutFns.length; i2++) {
          var fnName = optLayoutFns[i2];
          layoutProto[fnName] = layoutProto[fnName] || function() {
            return this;
          };
        }
        if (layoutProto.start && !layoutProto.run) {
          layoutProto.run = function() {
            this.start();
            return this;
          };
        } else if (!layoutProto.start && layoutProto.run) {
          layoutProto.start = function() {
            this.run();
            return this;
          };
        }
        var regStop = registrant.prototype.stop;
        layoutProto.stop = function() {
          var opts = this.options;
          if (opts && opts.animate) {
            var anis = this.animations;
            if (anis) {
              for (var _i = 0; _i < anis.length; _i++) {
                anis[_i].stop();
              }
            }
          }
          if (regStop) {
            regStop.call(this);
          } else {
            this.emit("layoutstop");
          }
          return this;
        };
        if (!layoutProto.destroy) {
          layoutProto.destroy = function() {
            return this;
          };
        }
        layoutProto.cy = function() {
          return this._private.cy;
        };
        var getCy = function getCy2(layout2) {
          return layout2._private.cy;
        };
        var emitterOpts = {
          addEventFields: function addEventFields(layout2, evt) {
            evt.layout = layout2;
            evt.cy = getCy(layout2);
            evt.target = layout2;
          },
          bubble: function bubble() {
            return true;
          },
          parent: function parent(layout2) {
            return getCy(layout2);
          }
        };
        extend(layoutProto, {
          createEmitter: function createEmitter() {
            this._private.emitter = new Emitter(emitterOpts, this);
            return this;
          },
          emitter: function emitter() {
            return this._private.emitter;
          },
          on: function on(evt, cb) {
            this.emitter().on(evt, cb);
            return this;
          },
          one: function one(evt, cb) {
            this.emitter().one(evt, cb);
            return this;
          },
          once: function once(evt, cb) {
            this.emitter().one(evt, cb);
            return this;
          },
          removeListener: function removeListener(evt, cb) {
            this.emitter().removeListener(evt, cb);
            return this;
          },
          removeAllListeners: function removeAllListeners() {
            this.emitter().removeAllListeners();
            return this;
          },
          emit: function emit(evt, params) {
            this.emitter().emit(evt, params);
            return this;
          }
        });
        define$3.eventAliasesOn(layoutProto);
        ext = Layout2;
      } else if (type === "renderer" && name !== "null" && name !== "base") {
        var BaseRenderer2 = getExtension("renderer", "base");
        var bProto = BaseRenderer2.prototype;
        var RegistrantRenderer = registrant;
        var rProto = registrant.prototype;
        var Renderer = function Renderer2() {
          BaseRenderer2.apply(this, arguments);
          RegistrantRenderer.apply(this, arguments);
        };
        var proto = Renderer.prototype;
        for (var pName in bProto) {
          var pVal = bProto[pName];
          var existsInR = rProto[pName] != null;
          if (existsInR) {
            return overrideErr(pName);
          }
          proto[pName] = pVal;
        }
        for (var _pName in rProto) {
          proto[_pName] = rProto[_pName];
        }
        bProto.clientFunctions.forEach(function(name2) {
          proto[name2] = proto[name2] || function() {
            error("Renderer does not implement `renderer." + name2 + "()` on its prototype");
          };
        });
        ext = Renderer;
      }
      return setMap({
        map: extensions,
        keys: [type, name],
        value: ext
      });
    }
    function getExtension(type, name) {
      return getMap({
        map: extensions,
        keys: [type, name]
      });
    }
    function setModule(type, name, moduleType, moduleName, registrant) {
      return setMap({
        map: modules,
        keys: [type, name, moduleType, moduleName],
        value: registrant
      });
    }
    function getModule(type, name, moduleType, moduleName) {
      return getMap({
        map: modules,
        keys: [type, name, moduleType, moduleName]
      });
    }
    var extension = function extension2() {
      if (arguments.length === 2) {
        return getExtension.apply(null, arguments);
      } else if (arguments.length === 3) {
        return setExtension.apply(null, arguments);
      } else if (arguments.length === 4) {
        return getModule.apply(null, arguments);
      } else if (arguments.length === 5) {
        return setModule.apply(null, arguments);
      } else {
        error("Invalid extension access syntax");
      }
    };
    Core.prototype.extension = extension;
    incExts.forEach(function(group) {
      group.extensions.forEach(function(ext) {
        setExtension(group.type, ext.name, ext.impl);
      });
    });
    var Stylesheet = function Stylesheet2() {
      if (!(this instanceof Stylesheet2)) {
        return new Stylesheet2();
      }
      this.length = 0;
    };
    var sheetfn = Stylesheet.prototype;
    sheetfn.instanceString = function() {
      return "stylesheet";
    };
    sheetfn.selector = function(selector) {
      var i2 = this.length++;
      this[i2] = {
        selector,
        properties: []
      };
      return this;
    };
    sheetfn.css = function(name, value) {
      var i2 = this.length - 1;
      if (string(name)) {
        this[i2].properties.push({
          name,
          value
        });
      } else if (plainObject(name)) {
        var map = name;
        var propNames = Object.keys(map);
        for (var j = 0; j < propNames.length; j++) {
          var key = propNames[j];
          var mapVal = map[key];
          if (mapVal == null) {
            continue;
          }
          var prop = Style.properties[key] || Style.properties[dash2camel(key)];
          if (prop == null) {
            continue;
          }
          var _name = prop.name;
          var _value = mapVal;
          this[i2].properties.push({
            name: _name,
            value: _value
          });
        }
      }
      return this;
    };
    sheetfn.style = sheetfn.css;
    sheetfn.generateStyle = function(cy) {
      var style = new Style(cy);
      return this.appendToStyle(style);
    };
    sheetfn.appendToStyle = function(style) {
      for (var i2 = 0; i2 < this.length; i2++) {
        var context = this[i2];
        var selector = context.selector;
        var props = context.properties;
        style.selector(selector);
        for (var j = 0; j < props.length; j++) {
          var prop = props[j];
          style.css(prop.name, prop.value);
        }
      }
      return style;
    };
    var version = "3.17.1";
    var cytoscape3 = function cytoscape4(options) {
      if (options === void 0) {
        options = {};
      }
      if (plainObject(options)) {
        return new Core(options);
      } else if (string(options)) {
        return extension.apply(extension, arguments);
      }
    };
    cytoscape3.use = function(ext) {
      var args = Array.prototype.slice.call(arguments, 1);
      args.unshift(cytoscape3);
      ext.apply(null, args);
      return this;
    };
    cytoscape3.warnings = function(bool) {
      return warnings(bool);
    };
    cytoscape3.version = version;
    cytoscape3.stylesheet = cytoscape3.Stylesheet = Stylesheet;
    module.exports = cytoscape3;
  });

  // node_modules/layout-base/layout-base.js
  var require_layout_base = __commonJS((exports, module) => {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory();
      else if (typeof define === "function" && define.amd)
        define([], factory);
      else if (typeof exports === "object")
        exports["layoutBase"] = factory();
      else
        root["layoutBase"] = factory();
    })(exports, function() {
      return function(modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
          if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
          }
          var module2 = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
          };
          modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
          module2.l = true;
          return module2.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.i = function(value) {
          return value;
        };
        __webpack_require__.d = function(exports2, name, getter) {
          if (!__webpack_require__.o(exports2, name)) {
            Object.defineProperty(exports2, name, {
              configurable: false,
              enumerable: true,
              get: getter
            });
          }
        };
        __webpack_require__.n = function(module2) {
          var getter = module2 && module2.__esModule ? function getDefault() {
            return module2["default"];
          } : function getModuleExports() {
            return module2;
          };
          __webpack_require__.d(getter, "a", getter);
          return getter;
        };
        __webpack_require__.o = function(object, property) {
          return Object.prototype.hasOwnProperty.call(object, property);
        };
        __webpack_require__.p = "";
        return __webpack_require__(__webpack_require__.s = 26);
      }([
        function(module2, exports2, __webpack_require__) {
          "use strict";
          function LayoutConstants() {
          }
          LayoutConstants.QUALITY = 1;
          LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED = false;
          LayoutConstants.DEFAULT_INCREMENTAL = false;
          LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT = true;
          LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT = false;
          LayoutConstants.DEFAULT_ANIMATION_PERIOD = 50;
          LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES = false;
          LayoutConstants.DEFAULT_GRAPH_MARGIN = 15;
          LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = false;
          LayoutConstants.SIMPLE_NODE_SIZE = 40;
          LayoutConstants.SIMPLE_NODE_HALF_SIZE = LayoutConstants.SIMPLE_NODE_SIZE / 2;
          LayoutConstants.EMPTY_COMPOUND_NODE_SIZE = 40;
          LayoutConstants.MIN_EDGE_LENGTH = 1;
          LayoutConstants.WORLD_BOUNDARY = 1e6;
          LayoutConstants.INITIAL_WORLD_BOUNDARY = LayoutConstants.WORLD_BOUNDARY / 1e3;
          LayoutConstants.WORLD_CENTER_X = 1200;
          LayoutConstants.WORLD_CENTER_Y = 900;
          module2.exports = LayoutConstants;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var LGraphObject = __webpack_require__(2);
          var IGeometry = __webpack_require__(8);
          var IMath = __webpack_require__(9);
          function LEdge(source, target, vEdge) {
            LGraphObject.call(this, vEdge);
            this.isOverlapingSourceAndTarget = false;
            this.vGraphObject = vEdge;
            this.bendpoints = [];
            this.source = source;
            this.target = target;
          }
          LEdge.prototype = Object.create(LGraphObject.prototype);
          for (var prop in LGraphObject) {
            LEdge[prop] = LGraphObject[prop];
          }
          LEdge.prototype.getSource = function() {
            return this.source;
          };
          LEdge.prototype.getTarget = function() {
            return this.target;
          };
          LEdge.prototype.isInterGraph = function() {
            return this.isInterGraph;
          };
          LEdge.prototype.getLength = function() {
            return this.length;
          };
          LEdge.prototype.isOverlapingSourceAndTarget = function() {
            return this.isOverlapingSourceAndTarget;
          };
          LEdge.prototype.getBendpoints = function() {
            return this.bendpoints;
          };
          LEdge.prototype.getLca = function() {
            return this.lca;
          };
          LEdge.prototype.getSourceInLca = function() {
            return this.sourceInLca;
          };
          LEdge.prototype.getTargetInLca = function() {
            return this.targetInLca;
          };
          LEdge.prototype.getOtherEnd = function(node) {
            if (this.source === node) {
              return this.target;
            } else if (this.target === node) {
              return this.source;
            } else {
              throw "Node is not incident with this edge";
            }
          };
          LEdge.prototype.getOtherEndInGraph = function(node, graph) {
            var otherEnd = this.getOtherEnd(node);
            var root = graph.getGraphManager().getRoot();
            while (true) {
              if (otherEnd.getOwner() == graph) {
                return otherEnd;
              }
              if (otherEnd.getOwner() == root) {
                break;
              }
              otherEnd = otherEnd.getOwner().getParent();
            }
            return null;
          };
          LEdge.prototype.updateLength = function() {
            var clipPointCoordinates = new Array(4);
            this.isOverlapingSourceAndTarget = IGeometry.getIntersection(this.target.getRect(), this.source.getRect(), clipPointCoordinates);
            if (!this.isOverlapingSourceAndTarget) {
              this.lengthX = clipPointCoordinates[0] - clipPointCoordinates[2];
              this.lengthY = clipPointCoordinates[1] - clipPointCoordinates[3];
              if (Math.abs(this.lengthX) < 1) {
                this.lengthX = IMath.sign(this.lengthX);
              }
              if (Math.abs(this.lengthY) < 1) {
                this.lengthY = IMath.sign(this.lengthY);
              }
              this.length = Math.sqrt(this.lengthX * this.lengthX + this.lengthY * this.lengthY);
            }
          };
          LEdge.prototype.updateLengthSimple = function() {
            this.lengthX = this.target.getCenterX() - this.source.getCenterX();
            this.lengthY = this.target.getCenterY() - this.source.getCenterY();
            if (Math.abs(this.lengthX) < 1) {
              this.lengthX = IMath.sign(this.lengthX);
            }
            if (Math.abs(this.lengthY) < 1) {
              this.lengthY = IMath.sign(this.lengthY);
            }
            this.length = Math.sqrt(this.lengthX * this.lengthX + this.lengthY * this.lengthY);
          };
          module2.exports = LEdge;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          function LGraphObject(vGraphObject) {
            this.vGraphObject = vGraphObject;
          }
          module2.exports = LGraphObject;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var LGraphObject = __webpack_require__(2);
          var Integer = __webpack_require__(10);
          var RectangleD = __webpack_require__(13);
          var LayoutConstants = __webpack_require__(0);
          var RandomSeed = __webpack_require__(16);
          var PointD = __webpack_require__(4);
          function LNode(gm, loc, size, vNode) {
            if (size == null && vNode == null) {
              vNode = loc;
            }
            LGraphObject.call(this, vNode);
            if (gm.graphManager != null)
              gm = gm.graphManager;
            this.estimatedSize = Integer.MIN_VALUE;
            this.inclusionTreeDepth = Integer.MAX_VALUE;
            this.vGraphObject = vNode;
            this.edges = [];
            this.graphManager = gm;
            if (size != null && loc != null)
              this.rect = new RectangleD(loc.x, loc.y, size.width, size.height);
            else
              this.rect = new RectangleD();
          }
          LNode.prototype = Object.create(LGraphObject.prototype);
          for (var prop in LGraphObject) {
            LNode[prop] = LGraphObject[prop];
          }
          LNode.prototype.getEdges = function() {
            return this.edges;
          };
          LNode.prototype.getChild = function() {
            return this.child;
          };
          LNode.prototype.getOwner = function() {
            return this.owner;
          };
          LNode.prototype.getWidth = function() {
            return this.rect.width;
          };
          LNode.prototype.setWidth = function(width) {
            this.rect.width = width;
          };
          LNode.prototype.getHeight = function() {
            return this.rect.height;
          };
          LNode.prototype.setHeight = function(height) {
            this.rect.height = height;
          };
          LNode.prototype.getCenterX = function() {
            return this.rect.x + this.rect.width / 2;
          };
          LNode.prototype.getCenterY = function() {
            return this.rect.y + this.rect.height / 2;
          };
          LNode.prototype.getCenter = function() {
            return new PointD(this.rect.x + this.rect.width / 2, this.rect.y + this.rect.height / 2);
          };
          LNode.prototype.getLocation = function() {
            return new PointD(this.rect.x, this.rect.y);
          };
          LNode.prototype.getRect = function() {
            return this.rect;
          };
          LNode.prototype.getDiagonal = function() {
            return Math.sqrt(this.rect.width * this.rect.width + this.rect.height * this.rect.height);
          };
          LNode.prototype.getHalfTheDiagonal = function() {
            return Math.sqrt(this.rect.height * this.rect.height + this.rect.width * this.rect.width) / 2;
          };
          LNode.prototype.setRect = function(upperLeft, dimension) {
            this.rect.x = upperLeft.x;
            this.rect.y = upperLeft.y;
            this.rect.width = dimension.width;
            this.rect.height = dimension.height;
          };
          LNode.prototype.setCenter = function(cx, cy) {
            this.rect.x = cx - this.rect.width / 2;
            this.rect.y = cy - this.rect.height / 2;
          };
          LNode.prototype.setLocation = function(x, y) {
            this.rect.x = x;
            this.rect.y = y;
          };
          LNode.prototype.moveBy = function(dx, dy) {
            this.rect.x += dx;
            this.rect.y += dy;
          };
          LNode.prototype.getEdgeListToNode = function(to) {
            var edgeList = [];
            var edge;
            var self2 = this;
            self2.edges.forEach(function(edge2) {
              if (edge2.target == to) {
                if (edge2.source != self2)
                  throw "Incorrect edge source!";
                edgeList.push(edge2);
              }
            });
            return edgeList;
          };
          LNode.prototype.getEdgesBetween = function(other) {
            var edgeList = [];
            var edge;
            var self2 = this;
            self2.edges.forEach(function(edge2) {
              if (!(edge2.source == self2 || edge2.target == self2))
                throw "Incorrect edge source and/or target";
              if (edge2.target == other || edge2.source == other) {
                edgeList.push(edge2);
              }
            });
            return edgeList;
          };
          LNode.prototype.getNeighborsList = function() {
            var neighbors = new Set();
            var self2 = this;
            self2.edges.forEach(function(edge) {
              if (edge.source == self2) {
                neighbors.add(edge.target);
              } else {
                if (edge.target != self2) {
                  throw "Incorrect incidency!";
                }
                neighbors.add(edge.source);
              }
            });
            return neighbors;
          };
          LNode.prototype.withChildren = function() {
            var withNeighborsList = new Set();
            var childNode;
            var children;
            withNeighborsList.add(this);
            if (this.child != null) {
              var nodes = this.child.getNodes();
              for (var i = 0; i < nodes.length; i++) {
                childNode = nodes[i];
                children = childNode.withChildren();
                children.forEach(function(node) {
                  withNeighborsList.add(node);
                });
              }
            }
            return withNeighborsList;
          };
          LNode.prototype.getNoOfChildren = function() {
            var noOfChildren = 0;
            var childNode;
            if (this.child == null) {
              noOfChildren = 1;
            } else {
              var nodes = this.child.getNodes();
              for (var i = 0; i < nodes.length; i++) {
                childNode = nodes[i];
                noOfChildren += childNode.getNoOfChildren();
              }
            }
            if (noOfChildren == 0) {
              noOfChildren = 1;
            }
            return noOfChildren;
          };
          LNode.prototype.getEstimatedSize = function() {
            if (this.estimatedSize == Integer.MIN_VALUE) {
              throw "assert failed";
            }
            return this.estimatedSize;
          };
          LNode.prototype.calcEstimatedSize = function() {
            if (this.child == null) {
              return this.estimatedSize = (this.rect.width + this.rect.height) / 2;
            } else {
              this.estimatedSize = this.child.calcEstimatedSize();
              this.rect.width = this.estimatedSize;
              this.rect.height = this.estimatedSize;
              return this.estimatedSize;
            }
          };
          LNode.prototype.scatter = function() {
            var randomCenterX;
            var randomCenterY;
            var minX = -LayoutConstants.INITIAL_WORLD_BOUNDARY;
            var maxX = LayoutConstants.INITIAL_WORLD_BOUNDARY;
            randomCenterX = LayoutConstants.WORLD_CENTER_X + RandomSeed.nextDouble() * (maxX - minX) + minX;
            var minY = -LayoutConstants.INITIAL_WORLD_BOUNDARY;
            var maxY = LayoutConstants.INITIAL_WORLD_BOUNDARY;
            randomCenterY = LayoutConstants.WORLD_CENTER_Y + RandomSeed.nextDouble() * (maxY - minY) + minY;
            this.rect.x = randomCenterX;
            this.rect.y = randomCenterY;
          };
          LNode.prototype.updateBounds = function() {
            if (this.getChild() == null) {
              throw "assert failed";
            }
            if (this.getChild().getNodes().length != 0) {
              var childGraph = this.getChild();
              childGraph.updateBounds(true);
              this.rect.x = childGraph.getLeft();
              this.rect.y = childGraph.getTop();
              this.setWidth(childGraph.getRight() - childGraph.getLeft());
              this.setHeight(childGraph.getBottom() - childGraph.getTop());
              if (LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS) {
                var width = childGraph.getRight() - childGraph.getLeft();
                var height = childGraph.getBottom() - childGraph.getTop();
                if (this.labelWidth > width) {
                  this.rect.x -= (this.labelWidth - width) / 2;
                  this.setWidth(this.labelWidth);
                }
                if (this.labelHeight > height) {
                  if (this.labelPos == "center") {
                    this.rect.y -= (this.labelHeight - height) / 2;
                  } else if (this.labelPos == "top") {
                    this.rect.y -= this.labelHeight - height;
                  }
                  this.setHeight(this.labelHeight);
                }
              }
            }
          };
          LNode.prototype.getInclusionTreeDepth = function() {
            if (this.inclusionTreeDepth == Integer.MAX_VALUE) {
              throw "assert failed";
            }
            return this.inclusionTreeDepth;
          };
          LNode.prototype.transform = function(trans) {
            var left = this.rect.x;
            if (left > LayoutConstants.WORLD_BOUNDARY) {
              left = LayoutConstants.WORLD_BOUNDARY;
            } else if (left < -LayoutConstants.WORLD_BOUNDARY) {
              left = -LayoutConstants.WORLD_BOUNDARY;
            }
            var top = this.rect.y;
            if (top > LayoutConstants.WORLD_BOUNDARY) {
              top = LayoutConstants.WORLD_BOUNDARY;
            } else if (top < -LayoutConstants.WORLD_BOUNDARY) {
              top = -LayoutConstants.WORLD_BOUNDARY;
            }
            var leftTop = new PointD(left, top);
            var vLeftTop = trans.inverseTransformPoint(leftTop);
            this.setLocation(vLeftTop.x, vLeftTop.y);
          };
          LNode.prototype.getLeft = function() {
            return this.rect.x;
          };
          LNode.prototype.getRight = function() {
            return this.rect.x + this.rect.width;
          };
          LNode.prototype.getTop = function() {
            return this.rect.y;
          };
          LNode.prototype.getBottom = function() {
            return this.rect.y + this.rect.height;
          };
          LNode.prototype.getParent = function() {
            if (this.owner == null) {
              return null;
            }
            return this.owner.getParent();
          };
          module2.exports = LNode;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          function PointD(x, y) {
            if (x == null && y == null) {
              this.x = 0;
              this.y = 0;
            } else {
              this.x = x;
              this.y = y;
            }
          }
          PointD.prototype.getX = function() {
            return this.x;
          };
          PointD.prototype.getY = function() {
            return this.y;
          };
          PointD.prototype.setX = function(x) {
            this.x = x;
          };
          PointD.prototype.setY = function(y) {
            this.y = y;
          };
          PointD.prototype.getDifference = function(pt) {
            return new DimensionD(this.x - pt.x, this.y - pt.y);
          };
          PointD.prototype.getCopy = function() {
            return new PointD(this.x, this.y);
          };
          PointD.prototype.translate = function(dim) {
            this.x += dim.width;
            this.y += dim.height;
            return this;
          };
          module2.exports = PointD;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var LGraphObject = __webpack_require__(2);
          var Integer = __webpack_require__(10);
          var LayoutConstants = __webpack_require__(0);
          var LGraphManager = __webpack_require__(6);
          var LNode = __webpack_require__(3);
          var LEdge = __webpack_require__(1);
          var RectangleD = __webpack_require__(13);
          var Point2 = __webpack_require__(12);
          var LinkedList = __webpack_require__(11);
          function LGraph(parent, obj2, vGraph) {
            LGraphObject.call(this, vGraph);
            this.estimatedSize = Integer.MIN_VALUE;
            this.margin = LayoutConstants.DEFAULT_GRAPH_MARGIN;
            this.edges = [];
            this.nodes = [];
            this.isConnected = false;
            this.parent = parent;
            if (obj2 != null && obj2 instanceof LGraphManager) {
              this.graphManager = obj2;
            } else if (obj2 != null && obj2 instanceof Layout) {
              this.graphManager = obj2.graphManager;
            }
          }
          LGraph.prototype = Object.create(LGraphObject.prototype);
          for (var prop in LGraphObject) {
            LGraph[prop] = LGraphObject[prop];
          }
          LGraph.prototype.getNodes = function() {
            return this.nodes;
          };
          LGraph.prototype.getEdges = function() {
            return this.edges;
          };
          LGraph.prototype.getGraphManager = function() {
            return this.graphManager;
          };
          LGraph.prototype.getParent = function() {
            return this.parent;
          };
          LGraph.prototype.getLeft = function() {
            return this.left;
          };
          LGraph.prototype.getRight = function() {
            return this.right;
          };
          LGraph.prototype.getTop = function() {
            return this.top;
          };
          LGraph.prototype.getBottom = function() {
            return this.bottom;
          };
          LGraph.prototype.isConnected = function() {
            return this.isConnected;
          };
          LGraph.prototype.add = function(obj1, sourceNode, targetNode) {
            if (sourceNode == null && targetNode == null) {
              var newNode = obj1;
              if (this.graphManager == null) {
                throw "Graph has no graph mgr!";
              }
              if (this.getNodes().indexOf(newNode) > -1) {
                throw "Node already in graph!";
              }
              newNode.owner = this;
              this.getNodes().push(newNode);
              return newNode;
            } else {
              var newEdge = obj1;
              if (!(this.getNodes().indexOf(sourceNode) > -1 && this.getNodes().indexOf(targetNode) > -1)) {
                throw "Source or target not in graph!";
              }
              if (!(sourceNode.owner == targetNode.owner && sourceNode.owner == this)) {
                throw "Both owners must be this graph!";
              }
              if (sourceNode.owner != targetNode.owner) {
                return null;
              }
              newEdge.source = sourceNode;
              newEdge.target = targetNode;
              newEdge.isInterGraph = false;
              this.getEdges().push(newEdge);
              sourceNode.edges.push(newEdge);
              if (targetNode != sourceNode) {
                targetNode.edges.push(newEdge);
              }
              return newEdge;
            }
          };
          LGraph.prototype.remove = function(obj) {
            var node = obj;
            if (obj instanceof LNode) {
              if (node == null) {
                throw "Node is null!";
              }
              if (!(node.owner != null && node.owner == this)) {
                throw "Owner graph is invalid!";
              }
              if (this.graphManager == null) {
                throw "Owner graph manager is invalid!";
              }
              var edgesToBeRemoved = node.edges.slice();
              var edge;
              var s = edgesToBeRemoved.length;
              for (var i = 0; i < s; i++) {
                edge = edgesToBeRemoved[i];
                if (edge.isInterGraph) {
                  this.graphManager.remove(edge);
                } else {
                  edge.source.owner.remove(edge);
                }
              }
              var index = this.nodes.indexOf(node);
              if (index == -1) {
                throw "Node not in owner node list!";
              }
              this.nodes.splice(index, 1);
            } else if (obj instanceof LEdge) {
              var edge = obj;
              if (edge == null) {
                throw "Edge is null!";
              }
              if (!(edge.source != null && edge.target != null)) {
                throw "Source and/or target is null!";
              }
              if (!(edge.source.owner != null && edge.target.owner != null && edge.source.owner == this && edge.target.owner == this)) {
                throw "Source and/or target owner is invalid!";
              }
              var sourceIndex = edge.source.edges.indexOf(edge);
              var targetIndex = edge.target.edges.indexOf(edge);
              if (!(sourceIndex > -1 && targetIndex > -1)) {
                throw "Source and/or target doesn't know this edge!";
              }
              edge.source.edges.splice(sourceIndex, 1);
              if (edge.target != edge.source) {
                edge.target.edges.splice(targetIndex, 1);
              }
              var index = edge.source.owner.getEdges().indexOf(edge);
              if (index == -1) {
                throw "Not in owner's edge list!";
              }
              edge.source.owner.getEdges().splice(index, 1);
            }
          };
          LGraph.prototype.updateLeftTop = function() {
            var top = Integer.MAX_VALUE;
            var left = Integer.MAX_VALUE;
            var nodeTop;
            var nodeLeft;
            var margin;
            var nodes = this.getNodes();
            var s = nodes.length;
            for (var i = 0; i < s; i++) {
              var lNode = nodes[i];
              nodeTop = lNode.getTop();
              nodeLeft = lNode.getLeft();
              if (top > nodeTop) {
                top = nodeTop;
              }
              if (left > nodeLeft) {
                left = nodeLeft;
              }
            }
            if (top == Integer.MAX_VALUE) {
              return null;
            }
            if (nodes[0].getParent().paddingLeft != void 0) {
              margin = nodes[0].getParent().paddingLeft;
            } else {
              margin = this.margin;
            }
            this.left = left - margin;
            this.top = top - margin;
            return new Point2(this.left, this.top);
          };
          LGraph.prototype.updateBounds = function(recursive) {
            var left = Integer.MAX_VALUE;
            var right = -Integer.MAX_VALUE;
            var top = Integer.MAX_VALUE;
            var bottom = -Integer.MAX_VALUE;
            var nodeLeft;
            var nodeRight;
            var nodeTop;
            var nodeBottom;
            var margin;
            var nodes = this.nodes;
            var s = nodes.length;
            for (var i = 0; i < s; i++) {
              var lNode = nodes[i];
              if (recursive && lNode.child != null) {
                lNode.updateBounds();
              }
              nodeLeft = lNode.getLeft();
              nodeRight = lNode.getRight();
              nodeTop = lNode.getTop();
              nodeBottom = lNode.getBottom();
              if (left > nodeLeft) {
                left = nodeLeft;
              }
              if (right < nodeRight) {
                right = nodeRight;
              }
              if (top > nodeTop) {
                top = nodeTop;
              }
              if (bottom < nodeBottom) {
                bottom = nodeBottom;
              }
            }
            var boundingRect = new RectangleD(left, top, right - left, bottom - top);
            if (left == Integer.MAX_VALUE) {
              this.left = this.parent.getLeft();
              this.right = this.parent.getRight();
              this.top = this.parent.getTop();
              this.bottom = this.parent.getBottom();
            }
            if (nodes[0].getParent().paddingLeft != void 0) {
              margin = nodes[0].getParent().paddingLeft;
            } else {
              margin = this.margin;
            }
            this.left = boundingRect.x - margin;
            this.right = boundingRect.x + boundingRect.width + margin;
            this.top = boundingRect.y - margin;
            this.bottom = boundingRect.y + boundingRect.height + margin;
          };
          LGraph.calculateBounds = function(nodes) {
            var left = Integer.MAX_VALUE;
            var right = -Integer.MAX_VALUE;
            var top = Integer.MAX_VALUE;
            var bottom = -Integer.MAX_VALUE;
            var nodeLeft;
            var nodeRight;
            var nodeTop;
            var nodeBottom;
            var s = nodes.length;
            for (var i = 0; i < s; i++) {
              var lNode = nodes[i];
              nodeLeft = lNode.getLeft();
              nodeRight = lNode.getRight();
              nodeTop = lNode.getTop();
              nodeBottom = lNode.getBottom();
              if (left > nodeLeft) {
                left = nodeLeft;
              }
              if (right < nodeRight) {
                right = nodeRight;
              }
              if (top > nodeTop) {
                top = nodeTop;
              }
              if (bottom < nodeBottom) {
                bottom = nodeBottom;
              }
            }
            var boundingRect = new RectangleD(left, top, right - left, bottom - top);
            return boundingRect;
          };
          LGraph.prototype.getInclusionTreeDepth = function() {
            if (this == this.graphManager.getRoot()) {
              return 1;
            } else {
              return this.parent.getInclusionTreeDepth();
            }
          };
          LGraph.prototype.getEstimatedSize = function() {
            if (this.estimatedSize == Integer.MIN_VALUE) {
              throw "assert failed";
            }
            return this.estimatedSize;
          };
          LGraph.prototype.calcEstimatedSize = function() {
            var size = 0;
            var nodes = this.nodes;
            var s = nodes.length;
            for (var i = 0; i < s; i++) {
              var lNode = nodes[i];
              size += lNode.calcEstimatedSize();
            }
            if (size == 0) {
              this.estimatedSize = LayoutConstants.EMPTY_COMPOUND_NODE_SIZE;
            } else {
              this.estimatedSize = size / Math.sqrt(this.nodes.length);
            }
            return this.estimatedSize;
          };
          LGraph.prototype.updateConnected = function() {
            var self2 = this;
            if (this.nodes.length == 0) {
              this.isConnected = true;
              return;
            }
            var queue = new LinkedList();
            var visited = new Set();
            var currentNode = this.nodes[0];
            var neighborEdges;
            var currentNeighbor;
            var childrenOfNode = currentNode.withChildren();
            childrenOfNode.forEach(function(node) {
              queue.push(node);
              visited.add(node);
            });
            while (queue.length !== 0) {
              currentNode = queue.shift();
              neighborEdges = currentNode.getEdges();
              var size = neighborEdges.length;
              for (var i = 0; i < size; i++) {
                var neighborEdge = neighborEdges[i];
                currentNeighbor = neighborEdge.getOtherEndInGraph(currentNode, this);
                if (currentNeighbor != null && !visited.has(currentNeighbor)) {
                  var childrenOfNeighbor = currentNeighbor.withChildren();
                  childrenOfNeighbor.forEach(function(node) {
                    queue.push(node);
                    visited.add(node);
                  });
                }
              }
            }
            this.isConnected = false;
            if (visited.size >= this.nodes.length) {
              var noOfVisitedInThisGraph = 0;
              visited.forEach(function(visitedNode) {
                if (visitedNode.owner == self2) {
                  noOfVisitedInThisGraph++;
                }
              });
              if (noOfVisitedInThisGraph == this.nodes.length) {
                this.isConnected = true;
              }
            }
          };
          module2.exports = LGraph;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var LGraph;
          var LEdge = __webpack_require__(1);
          function LGraphManager(layout) {
            LGraph = __webpack_require__(5);
            this.layout = layout;
            this.graphs = [];
            this.edges = [];
          }
          LGraphManager.prototype.addRoot = function() {
            var ngraph = this.layout.newGraph();
            var nnode = this.layout.newNode(null);
            var root = this.add(ngraph, nnode);
            this.setRootGraph(root);
            return this.rootGraph;
          };
          LGraphManager.prototype.add = function(newGraph, parentNode, newEdge, sourceNode, targetNode) {
            if (newEdge == null && sourceNode == null && targetNode == null) {
              if (newGraph == null) {
                throw "Graph is null!";
              }
              if (parentNode == null) {
                throw "Parent node is null!";
              }
              if (this.graphs.indexOf(newGraph) > -1) {
                throw "Graph already in this graph mgr!";
              }
              this.graphs.push(newGraph);
              if (newGraph.parent != null) {
                throw "Already has a parent!";
              }
              if (parentNode.child != null) {
                throw "Already has a child!";
              }
              newGraph.parent = parentNode;
              parentNode.child = newGraph;
              return newGraph;
            } else {
              targetNode = newEdge;
              sourceNode = parentNode;
              newEdge = newGraph;
              var sourceGraph = sourceNode.getOwner();
              var targetGraph = targetNode.getOwner();
              if (!(sourceGraph != null && sourceGraph.getGraphManager() == this)) {
                throw "Source not in this graph mgr!";
              }
              if (!(targetGraph != null && targetGraph.getGraphManager() == this)) {
                throw "Target not in this graph mgr!";
              }
              if (sourceGraph == targetGraph) {
                newEdge.isInterGraph = false;
                return sourceGraph.add(newEdge, sourceNode, targetNode);
              } else {
                newEdge.isInterGraph = true;
                newEdge.source = sourceNode;
                newEdge.target = targetNode;
                if (this.edges.indexOf(newEdge) > -1) {
                  throw "Edge already in inter-graph edge list!";
                }
                this.edges.push(newEdge);
                if (!(newEdge.source != null && newEdge.target != null)) {
                  throw "Edge source and/or target is null!";
                }
                if (!(newEdge.source.edges.indexOf(newEdge) == -1 && newEdge.target.edges.indexOf(newEdge) == -1)) {
                  throw "Edge already in source and/or target incidency list!";
                }
                newEdge.source.edges.push(newEdge);
                newEdge.target.edges.push(newEdge);
                return newEdge;
              }
            }
          };
          LGraphManager.prototype.remove = function(lObj) {
            if (lObj instanceof LGraph) {
              var graph = lObj;
              if (graph.getGraphManager() != this) {
                throw "Graph not in this graph mgr";
              }
              if (!(graph == this.rootGraph || graph.parent != null && graph.parent.graphManager == this)) {
                throw "Invalid parent node!";
              }
              var edgesToBeRemoved = [];
              edgesToBeRemoved = edgesToBeRemoved.concat(graph.getEdges());
              var edge;
              var s = edgesToBeRemoved.length;
              for (var i = 0; i < s; i++) {
                edge = edgesToBeRemoved[i];
                graph.remove(edge);
              }
              var nodesToBeRemoved = [];
              nodesToBeRemoved = nodesToBeRemoved.concat(graph.getNodes());
              var node;
              s = nodesToBeRemoved.length;
              for (var i = 0; i < s; i++) {
                node = nodesToBeRemoved[i];
                graph.remove(node);
              }
              if (graph == this.rootGraph) {
                this.setRootGraph(null);
              }
              var index = this.graphs.indexOf(graph);
              this.graphs.splice(index, 1);
              graph.parent = null;
            } else if (lObj instanceof LEdge) {
              edge = lObj;
              if (edge == null) {
                throw "Edge is null!";
              }
              if (!edge.isInterGraph) {
                throw "Not an inter-graph edge!";
              }
              if (!(edge.source != null && edge.target != null)) {
                throw "Source and/or target is null!";
              }
              if (!(edge.source.edges.indexOf(edge) != -1 && edge.target.edges.indexOf(edge) != -1)) {
                throw "Source and/or target doesn't know this edge!";
              }
              var index = edge.source.edges.indexOf(edge);
              edge.source.edges.splice(index, 1);
              index = edge.target.edges.indexOf(edge);
              edge.target.edges.splice(index, 1);
              if (!(edge.source.owner != null && edge.source.owner.getGraphManager() != null)) {
                throw "Edge owner graph or owner graph manager is null!";
              }
              if (edge.source.owner.getGraphManager().edges.indexOf(edge) == -1) {
                throw "Not in owner graph manager's edge list!";
              }
              var index = edge.source.owner.getGraphManager().edges.indexOf(edge);
              edge.source.owner.getGraphManager().edges.splice(index, 1);
            }
          };
          LGraphManager.prototype.updateBounds = function() {
            this.rootGraph.updateBounds(true);
          };
          LGraphManager.prototype.getGraphs = function() {
            return this.graphs;
          };
          LGraphManager.prototype.getAllNodes = function() {
            if (this.allNodes == null) {
              var nodeList = [];
              var graphs = this.getGraphs();
              var s = graphs.length;
              for (var i = 0; i < s; i++) {
                nodeList = nodeList.concat(graphs[i].getNodes());
              }
              this.allNodes = nodeList;
            }
            return this.allNodes;
          };
          LGraphManager.prototype.resetAllNodes = function() {
            this.allNodes = null;
          };
          LGraphManager.prototype.resetAllEdges = function() {
            this.allEdges = null;
          };
          LGraphManager.prototype.resetAllNodesToApplyGravitation = function() {
            this.allNodesToApplyGravitation = null;
          };
          LGraphManager.prototype.getAllEdges = function() {
            if (this.allEdges == null) {
              var edgeList = [];
              var graphs = this.getGraphs();
              var s = graphs.length;
              for (var i = 0; i < graphs.length; i++) {
                edgeList = edgeList.concat(graphs[i].getEdges());
              }
              edgeList = edgeList.concat(this.edges);
              this.allEdges = edgeList;
            }
            return this.allEdges;
          };
          LGraphManager.prototype.getAllNodesToApplyGravitation = function() {
            return this.allNodesToApplyGravitation;
          };
          LGraphManager.prototype.setAllNodesToApplyGravitation = function(nodeList) {
            if (this.allNodesToApplyGravitation != null) {
              throw "assert failed";
            }
            this.allNodesToApplyGravitation = nodeList;
          };
          LGraphManager.prototype.getRoot = function() {
            return this.rootGraph;
          };
          LGraphManager.prototype.setRootGraph = function(graph) {
            if (graph.getGraphManager() != this) {
              throw "Root not in this graph mgr!";
            }
            this.rootGraph = graph;
            if (graph.parent == null) {
              graph.parent = this.layout.newNode("Root node");
            }
          };
          LGraphManager.prototype.getLayout = function() {
            return this.layout;
          };
          LGraphManager.prototype.isOneAncestorOfOther = function(firstNode, secondNode) {
            if (!(firstNode != null && secondNode != null)) {
              throw "assert failed";
            }
            if (firstNode == secondNode) {
              return true;
            }
            var ownerGraph = firstNode.getOwner();
            var parentNode;
            do {
              parentNode = ownerGraph.getParent();
              if (parentNode == null) {
                break;
              }
              if (parentNode == secondNode) {
                return true;
              }
              ownerGraph = parentNode.getOwner();
              if (ownerGraph == null) {
                break;
              }
            } while (true);
            ownerGraph = secondNode.getOwner();
            do {
              parentNode = ownerGraph.getParent();
              if (parentNode == null) {
                break;
              }
              if (parentNode == firstNode) {
                return true;
              }
              ownerGraph = parentNode.getOwner();
              if (ownerGraph == null) {
                break;
              }
            } while (true);
            return false;
          };
          LGraphManager.prototype.calcLowestCommonAncestors = function() {
            var edge;
            var sourceNode;
            var targetNode;
            var sourceAncestorGraph;
            var targetAncestorGraph;
            var edges = this.getAllEdges();
            var s = edges.length;
            for (var i = 0; i < s; i++) {
              edge = edges[i];
              sourceNode = edge.source;
              targetNode = edge.target;
              edge.lca = null;
              edge.sourceInLca = sourceNode;
              edge.targetInLca = targetNode;
              if (sourceNode == targetNode) {
                edge.lca = sourceNode.getOwner();
                continue;
              }
              sourceAncestorGraph = sourceNode.getOwner();
              while (edge.lca == null) {
                edge.targetInLca = targetNode;
                targetAncestorGraph = targetNode.getOwner();
                while (edge.lca == null) {
                  if (targetAncestorGraph == sourceAncestorGraph) {
                    edge.lca = targetAncestorGraph;
                    break;
                  }
                  if (targetAncestorGraph == this.rootGraph) {
                    break;
                  }
                  if (edge.lca != null) {
                    throw "assert failed";
                  }
                  edge.targetInLca = targetAncestorGraph.getParent();
                  targetAncestorGraph = edge.targetInLca.getOwner();
                }
                if (sourceAncestorGraph == this.rootGraph) {
                  break;
                }
                if (edge.lca == null) {
                  edge.sourceInLca = sourceAncestorGraph.getParent();
                  sourceAncestorGraph = edge.sourceInLca.getOwner();
                }
              }
              if (edge.lca == null) {
                throw "assert failed";
              }
            }
          };
          LGraphManager.prototype.calcLowestCommonAncestor = function(firstNode, secondNode) {
            if (firstNode == secondNode) {
              return firstNode.getOwner();
            }
            var firstOwnerGraph = firstNode.getOwner();
            do {
              if (firstOwnerGraph == null) {
                break;
              }
              var secondOwnerGraph = secondNode.getOwner();
              do {
                if (secondOwnerGraph == null) {
                  break;
                }
                if (secondOwnerGraph == firstOwnerGraph) {
                  return secondOwnerGraph;
                }
                secondOwnerGraph = secondOwnerGraph.getParent().getOwner();
              } while (true);
              firstOwnerGraph = firstOwnerGraph.getParent().getOwner();
            } while (true);
            return firstOwnerGraph;
          };
          LGraphManager.prototype.calcInclusionTreeDepths = function(graph, depth) {
            if (graph == null && depth == null) {
              graph = this.rootGraph;
              depth = 1;
            }
            var node;
            var nodes = graph.getNodes();
            var s = nodes.length;
            for (var i = 0; i < s; i++) {
              node = nodes[i];
              node.inclusionTreeDepth = depth;
              if (node.child != null) {
                this.calcInclusionTreeDepths(node.child, depth + 1);
              }
            }
          };
          LGraphManager.prototype.includesInvalidEdge = function() {
            var edge;
            var s = this.edges.length;
            for (var i = 0; i < s; i++) {
              edge = this.edges[i];
              if (this.isOneAncestorOfOther(edge.source, edge.target)) {
                return true;
              }
            }
            return false;
          };
          module2.exports = LGraphManager;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var LayoutConstants = __webpack_require__(0);
          function FDLayoutConstants() {
          }
          for (var prop in LayoutConstants) {
            FDLayoutConstants[prop] = LayoutConstants[prop];
          }
          FDLayoutConstants.MAX_ITERATIONS = 2500;
          FDLayoutConstants.DEFAULT_EDGE_LENGTH = 50;
          FDLayoutConstants.DEFAULT_SPRING_STRENGTH = 0.45;
          FDLayoutConstants.DEFAULT_REPULSION_STRENGTH = 4500;
          FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH = 0.4;
          FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = 1;
          FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR = 3.8;
          FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = 1.5;
          FDLayoutConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION = true;
          FDLayoutConstants.DEFAULT_USE_SMART_REPULSION_RANGE_CALCULATION = true;
          FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = 0.3;
          FDLayoutConstants.COOLING_ADAPTATION_FACTOR = 0.33;
          FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT = 1e3;
          FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT = 5e3;
          FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL = 100;
          FDLayoutConstants.MAX_NODE_DISPLACEMENT = FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL * 3;
          FDLayoutConstants.MIN_REPULSION_DIST = FDLayoutConstants.DEFAULT_EDGE_LENGTH / 10;
          FDLayoutConstants.CONVERGENCE_CHECK_PERIOD = 100;
          FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = 0.1;
          FDLayoutConstants.MIN_EDGE_LENGTH = 1;
          FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD = 10;
          module2.exports = FDLayoutConstants;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var Point2 = __webpack_require__(12);
          function IGeometry() {
          }
          IGeometry.calcSeparationAmount = function(rectA, rectB, overlapAmount, separationBuffer) {
            if (!rectA.intersects(rectB)) {
              throw "assert failed";
            }
            var directions = new Array(2);
            this.decideDirectionsForOverlappingNodes(rectA, rectB, directions);
            overlapAmount[0] = Math.min(rectA.getRight(), rectB.getRight()) - Math.max(rectA.x, rectB.x);
            overlapAmount[1] = Math.min(rectA.getBottom(), rectB.getBottom()) - Math.max(rectA.y, rectB.y);
            if (rectA.getX() <= rectB.getX() && rectA.getRight() >= rectB.getRight()) {
              overlapAmount[0] += Math.min(rectB.getX() - rectA.getX(), rectA.getRight() - rectB.getRight());
            } else if (rectB.getX() <= rectA.getX() && rectB.getRight() >= rectA.getRight()) {
              overlapAmount[0] += Math.min(rectA.getX() - rectB.getX(), rectB.getRight() - rectA.getRight());
            }
            if (rectA.getY() <= rectB.getY() && rectA.getBottom() >= rectB.getBottom()) {
              overlapAmount[1] += Math.min(rectB.getY() - rectA.getY(), rectA.getBottom() - rectB.getBottom());
            } else if (rectB.getY() <= rectA.getY() && rectB.getBottom() >= rectA.getBottom()) {
              overlapAmount[1] += Math.min(rectA.getY() - rectB.getY(), rectB.getBottom() - rectA.getBottom());
            }
            var slope = Math.abs((rectB.getCenterY() - rectA.getCenterY()) / (rectB.getCenterX() - rectA.getCenterX()));
            if (rectB.getCenterY() === rectA.getCenterY() && rectB.getCenterX() === rectA.getCenterX()) {
              slope = 1;
            }
            var moveByY = slope * overlapAmount[0];
            var moveByX = overlapAmount[1] / slope;
            if (overlapAmount[0] < moveByX) {
              moveByX = overlapAmount[0];
            } else {
              moveByY = overlapAmount[1];
            }
            overlapAmount[0] = -1 * directions[0] * (moveByX / 2 + separationBuffer);
            overlapAmount[1] = -1 * directions[1] * (moveByY / 2 + separationBuffer);
          };
          IGeometry.decideDirectionsForOverlappingNodes = function(rectA, rectB, directions) {
            if (rectA.getCenterX() < rectB.getCenterX()) {
              directions[0] = -1;
            } else {
              directions[0] = 1;
            }
            if (rectA.getCenterY() < rectB.getCenterY()) {
              directions[1] = -1;
            } else {
              directions[1] = 1;
            }
          };
          IGeometry.getIntersection2 = function(rectA, rectB, result) {
            var p1x = rectA.getCenterX();
            var p1y = rectA.getCenterY();
            var p2x = rectB.getCenterX();
            var p2y = rectB.getCenterY();
            if (rectA.intersects(rectB)) {
              result[0] = p1x;
              result[1] = p1y;
              result[2] = p2x;
              result[3] = p2y;
              return true;
            }
            var topLeftAx = rectA.getX();
            var topLeftAy = rectA.getY();
            var topRightAx = rectA.getRight();
            var bottomLeftAx = rectA.getX();
            var bottomLeftAy = rectA.getBottom();
            var bottomRightAx = rectA.getRight();
            var halfWidthA = rectA.getWidthHalf();
            var halfHeightA = rectA.getHeightHalf();
            var topLeftBx = rectB.getX();
            var topLeftBy = rectB.getY();
            var topRightBx = rectB.getRight();
            var bottomLeftBx = rectB.getX();
            var bottomLeftBy = rectB.getBottom();
            var bottomRightBx = rectB.getRight();
            var halfWidthB = rectB.getWidthHalf();
            var halfHeightB = rectB.getHeightHalf();
            var clipPointAFound = false;
            var clipPointBFound = false;
            if (p1x === p2x) {
              if (p1y > p2y) {
                result[0] = p1x;
                result[1] = topLeftAy;
                result[2] = p2x;
                result[3] = bottomLeftBy;
                return false;
              } else if (p1y < p2y) {
                result[0] = p1x;
                result[1] = bottomLeftAy;
                result[2] = p2x;
                result[3] = topLeftBy;
                return false;
              } else {
              }
            } else if (p1y === p2y) {
              if (p1x > p2x) {
                result[0] = topLeftAx;
                result[1] = p1y;
                result[2] = topRightBx;
                result[3] = p2y;
                return false;
              } else if (p1x < p2x) {
                result[0] = topRightAx;
                result[1] = p1y;
                result[2] = topLeftBx;
                result[3] = p2y;
                return false;
              } else {
              }
            } else {
              var slopeA = rectA.height / rectA.width;
              var slopeB = rectB.height / rectB.width;
              var slopePrime = (p2y - p1y) / (p2x - p1x);
              var cardinalDirectionA = void 0;
              var cardinalDirectionB = void 0;
              var tempPointAx = void 0;
              var tempPointAy = void 0;
              var tempPointBx = void 0;
              var tempPointBy = void 0;
              if (-slopeA === slopePrime) {
                if (p1x > p2x) {
                  result[0] = bottomLeftAx;
                  result[1] = bottomLeftAy;
                  clipPointAFound = true;
                } else {
                  result[0] = topRightAx;
                  result[1] = topLeftAy;
                  clipPointAFound = true;
                }
              } else if (slopeA === slopePrime) {
                if (p1x > p2x) {
                  result[0] = topLeftAx;
                  result[1] = topLeftAy;
                  clipPointAFound = true;
                } else {
                  result[0] = bottomRightAx;
                  result[1] = bottomLeftAy;
                  clipPointAFound = true;
                }
              }
              if (-slopeB === slopePrime) {
                if (p2x > p1x) {
                  result[2] = bottomLeftBx;
                  result[3] = bottomLeftBy;
                  clipPointBFound = true;
                } else {
                  result[2] = topRightBx;
                  result[3] = topLeftBy;
                  clipPointBFound = true;
                }
              } else if (slopeB === slopePrime) {
                if (p2x > p1x) {
                  result[2] = topLeftBx;
                  result[3] = topLeftBy;
                  clipPointBFound = true;
                } else {
                  result[2] = bottomRightBx;
                  result[3] = bottomLeftBy;
                  clipPointBFound = true;
                }
              }
              if (clipPointAFound && clipPointBFound) {
                return false;
              }
              if (p1x > p2x) {
                if (p1y > p2y) {
                  cardinalDirectionA = this.getCardinalDirection(slopeA, slopePrime, 4);
                  cardinalDirectionB = this.getCardinalDirection(slopeB, slopePrime, 2);
                } else {
                  cardinalDirectionA = this.getCardinalDirection(-slopeA, slopePrime, 3);
                  cardinalDirectionB = this.getCardinalDirection(-slopeB, slopePrime, 1);
                }
              } else {
                if (p1y > p2y) {
                  cardinalDirectionA = this.getCardinalDirection(-slopeA, slopePrime, 1);
                  cardinalDirectionB = this.getCardinalDirection(-slopeB, slopePrime, 3);
                } else {
                  cardinalDirectionA = this.getCardinalDirection(slopeA, slopePrime, 2);
                  cardinalDirectionB = this.getCardinalDirection(slopeB, slopePrime, 4);
                }
              }
              if (!clipPointAFound) {
                switch (cardinalDirectionA) {
                  case 1:
                    tempPointAy = topLeftAy;
                    tempPointAx = p1x + -halfHeightA / slopePrime;
                    result[0] = tempPointAx;
                    result[1] = tempPointAy;
                    break;
                  case 2:
                    tempPointAx = bottomRightAx;
                    tempPointAy = p1y + halfWidthA * slopePrime;
                    result[0] = tempPointAx;
                    result[1] = tempPointAy;
                    break;
                  case 3:
                    tempPointAy = bottomLeftAy;
                    tempPointAx = p1x + halfHeightA / slopePrime;
                    result[0] = tempPointAx;
                    result[1] = tempPointAy;
                    break;
                  case 4:
                    tempPointAx = bottomLeftAx;
                    tempPointAy = p1y + -halfWidthA * slopePrime;
                    result[0] = tempPointAx;
                    result[1] = tempPointAy;
                    break;
                }
              }
              if (!clipPointBFound) {
                switch (cardinalDirectionB) {
                  case 1:
                    tempPointBy = topLeftBy;
                    tempPointBx = p2x + -halfHeightB / slopePrime;
                    result[2] = tempPointBx;
                    result[3] = tempPointBy;
                    break;
                  case 2:
                    tempPointBx = bottomRightBx;
                    tempPointBy = p2y + halfWidthB * slopePrime;
                    result[2] = tempPointBx;
                    result[3] = tempPointBy;
                    break;
                  case 3:
                    tempPointBy = bottomLeftBy;
                    tempPointBx = p2x + halfHeightB / slopePrime;
                    result[2] = tempPointBx;
                    result[3] = tempPointBy;
                    break;
                  case 4:
                    tempPointBx = bottomLeftBx;
                    tempPointBy = p2y + -halfWidthB * slopePrime;
                    result[2] = tempPointBx;
                    result[3] = tempPointBy;
                    break;
                }
              }
            }
            return false;
          };
          IGeometry.getCardinalDirection = function(slope, slopePrime, line) {
            if (slope > slopePrime) {
              return line;
            } else {
              return 1 + line % 4;
            }
          };
          IGeometry.getIntersection = function(s1, s2, f1, f2) {
            if (f2 == null) {
              return this.getIntersection2(s1, s2, f1);
            }
            var x1 = s1.x;
            var y1 = s1.y;
            var x2 = s2.x;
            var y2 = s2.y;
            var x3 = f1.x;
            var y3 = f1.y;
            var x4 = f2.x;
            var y4 = f2.y;
            var x = void 0, y = void 0;
            var a1 = void 0, a2 = void 0, b1 = void 0, b2 = void 0, c1 = void 0, c2 = void 0;
            var denom = void 0;
            a1 = y2 - y1;
            b1 = x1 - x2;
            c1 = x2 * y1 - x1 * y2;
            a2 = y4 - y3;
            b2 = x3 - x4;
            c2 = x4 * y3 - x3 * y4;
            denom = a1 * b2 - a2 * b1;
            if (denom === 0) {
              return null;
            }
            x = (b1 * c2 - b2 * c1) / denom;
            y = (a2 * c1 - a1 * c2) / denom;
            return new Point2(x, y);
          };
          IGeometry.angleOfVector = function(Cx, Cy, Nx, Ny) {
            var C_angle = void 0;
            if (Cx !== Nx) {
              C_angle = Math.atan((Ny - Cy) / (Nx - Cx));
              if (Nx < Cx) {
                C_angle += Math.PI;
              } else if (Ny < Cy) {
                C_angle += this.TWO_PI;
              }
            } else if (Ny < Cy) {
              C_angle = this.ONE_AND_HALF_PI;
            } else {
              C_angle = this.HALF_PI;
            }
            return C_angle;
          };
          IGeometry.doIntersect = function(p1, p2, p3, p4) {
            var a = p1.x;
            var b = p1.y;
            var c = p2.x;
            var d = p2.y;
            var p = p3.x;
            var q = p3.y;
            var r = p4.x;
            var s = p4.y;
            var det = (c - a) * (s - q) - (r - p) * (d - b);
            if (det === 0) {
              return false;
            } else {
              var lambda = ((s - q) * (r - a) + (p - r) * (s - b)) / det;
              var gamma = ((b - d) * (r - a) + (c - a) * (s - b)) / det;
              return 0 < lambda && lambda < 1 && 0 < gamma && gamma < 1;
            }
          };
          IGeometry.HALF_PI = 0.5 * Math.PI;
          IGeometry.ONE_AND_HALF_PI = 1.5 * Math.PI;
          IGeometry.TWO_PI = 2 * Math.PI;
          IGeometry.THREE_PI = 3 * Math.PI;
          module2.exports = IGeometry;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          function IMath() {
          }
          IMath.sign = function(value) {
            if (value > 0) {
              return 1;
            } else if (value < 0) {
              return -1;
            } else {
              return 0;
            }
          };
          IMath.floor = function(value) {
            return value < 0 ? Math.ceil(value) : Math.floor(value);
          };
          IMath.ceil = function(value) {
            return value < 0 ? Math.floor(value) : Math.ceil(value);
          };
          module2.exports = IMath;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          function Integer() {
          }
          Integer.MAX_VALUE = 2147483647;
          Integer.MIN_VALUE = -2147483648;
          module2.exports = Integer;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var _createClass = function() {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            return function(Constructor, protoProps, staticProps) {
              if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();
          function _classCallCheck(instance2, Constructor) {
            if (!(instance2 instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var nodeFrom = function nodeFrom2(value) {
            return {value, next: null, prev: null};
          };
          var add = function add2(prev, node, next2, list) {
            if (prev !== null) {
              prev.next = node;
            } else {
              list.head = node;
            }
            if (next2 !== null) {
              next2.prev = node;
            } else {
              list.tail = node;
            }
            node.prev = prev;
            node.next = next2;
            list.length++;
            return node;
          };
          var _remove = function _remove2(node, list) {
            var prev = node.prev, next2 = node.next;
            if (prev !== null) {
              prev.next = next2;
            } else {
              list.head = next2;
            }
            if (next2 !== null) {
              next2.prev = prev;
            } else {
              list.tail = prev;
            }
            node.prev = node.next = null;
            list.length--;
            return node;
          };
          var LinkedList = function() {
            function LinkedList2(vals) {
              var _this = this;
              _classCallCheck(this, LinkedList2);
              this.length = 0;
              this.head = null;
              this.tail = null;
              if (vals != null) {
                vals.forEach(function(v) {
                  return _this.push(v);
                });
              }
            }
            _createClass(LinkedList2, [{
              key: "size",
              value: function size() {
                return this.length;
              }
            }, {
              key: "insertBefore",
              value: function insertBefore(val, otherNode) {
                return add(otherNode.prev, nodeFrom(val), otherNode, this);
              }
            }, {
              key: "insertAfter",
              value: function insertAfter(val, otherNode) {
                return add(otherNode, nodeFrom(val), otherNode.next, this);
              }
            }, {
              key: "insertNodeBefore",
              value: function insertNodeBefore(newNode, otherNode) {
                return add(otherNode.prev, newNode, otherNode, this);
              }
            }, {
              key: "insertNodeAfter",
              value: function insertNodeAfter(newNode, otherNode) {
                return add(otherNode, newNode, otherNode.next, this);
              }
            }, {
              key: "push",
              value: function push(val) {
                return add(this.tail, nodeFrom(val), null, this);
              }
            }, {
              key: "unshift",
              value: function unshift(val) {
                return add(null, nodeFrom(val), this.head, this);
              }
            }, {
              key: "remove",
              value: function remove(node) {
                return _remove(node, this);
              }
            }, {
              key: "pop",
              value: function pop() {
                return _remove(this.tail, this).value;
              }
            }, {
              key: "popNode",
              value: function popNode() {
                return _remove(this.tail, this);
              }
            }, {
              key: "shift",
              value: function shift() {
                return _remove(this.head, this).value;
              }
            }, {
              key: "shiftNode",
              value: function shiftNode() {
                return _remove(this.head, this);
              }
            }, {
              key: "get_object_at",
              value: function get_object_at(index) {
                if (index <= this.length()) {
                  var i = 1;
                  var current = this.head;
                  while (i < index) {
                    current = current.next;
                    i++;
                  }
                  return current.value;
                }
              }
            }, {
              key: "set_object_at",
              value: function set_object_at(index, value) {
                if (index <= this.length()) {
                  var i = 1;
                  var current = this.head;
                  while (i < index) {
                    current = current.next;
                    i++;
                  }
                  current.value = value;
                }
              }
            }]);
            return LinkedList2;
          }();
          module2.exports = LinkedList;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          function Point2(x, y, p) {
            this.x = null;
            this.y = null;
            if (x == null && y == null && p == null) {
              this.x = 0;
              this.y = 0;
            } else if (typeof x == "number" && typeof y == "number" && p == null) {
              this.x = x;
              this.y = y;
            } else if (x.constructor.name == "Point" && y == null && p == null) {
              p = x;
              this.x = p.x;
              this.y = p.y;
            }
          }
          Point2.prototype.getX = function() {
            return this.x;
          };
          Point2.prototype.getY = function() {
            return this.y;
          };
          Point2.prototype.getLocation = function() {
            return new Point2(this.x, this.y);
          };
          Point2.prototype.setLocation = function(x, y, p) {
            if (x.constructor.name == "Point" && y == null && p == null) {
              p = x;
              this.setLocation(p.x, p.y);
            } else if (typeof x == "number" && typeof y == "number" && p == null) {
              if (parseInt(x) == x && parseInt(y) == y) {
                this.move(x, y);
              } else {
                this.x = Math.floor(x + 0.5);
                this.y = Math.floor(y + 0.5);
              }
            }
          };
          Point2.prototype.move = function(x, y) {
            this.x = x;
            this.y = y;
          };
          Point2.prototype.translate = function(dx, dy) {
            this.x += dx;
            this.y += dy;
          };
          Point2.prototype.equals = function(obj) {
            if (obj.constructor.name == "Point") {
              var pt = obj;
              return this.x == pt.x && this.y == pt.y;
            }
            return this == obj;
          };
          Point2.prototype.toString = function() {
            return new Point2().constructor.name + "[x=" + this.x + ",y=" + this.y + "]";
          };
          module2.exports = Point2;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          function RectangleD(x, y, width, height) {
            this.x = 0;
            this.y = 0;
            this.width = 0;
            this.height = 0;
            if (x != null && y != null && width != null && height != null) {
              this.x = x;
              this.y = y;
              this.width = width;
              this.height = height;
            }
          }
          RectangleD.prototype.getX = function() {
            return this.x;
          };
          RectangleD.prototype.setX = function(x) {
            this.x = x;
          };
          RectangleD.prototype.getY = function() {
            return this.y;
          };
          RectangleD.prototype.setY = function(y) {
            this.y = y;
          };
          RectangleD.prototype.getWidth = function() {
            return this.width;
          };
          RectangleD.prototype.setWidth = function(width) {
            this.width = width;
          };
          RectangleD.prototype.getHeight = function() {
            return this.height;
          };
          RectangleD.prototype.setHeight = function(height) {
            this.height = height;
          };
          RectangleD.prototype.getRight = function() {
            return this.x + this.width;
          };
          RectangleD.prototype.getBottom = function() {
            return this.y + this.height;
          };
          RectangleD.prototype.intersects = function(a) {
            if (this.getRight() < a.x) {
              return false;
            }
            if (this.getBottom() < a.y) {
              return false;
            }
            if (a.getRight() < this.x) {
              return false;
            }
            if (a.getBottom() < this.y) {
              return false;
            }
            return true;
          };
          RectangleD.prototype.getCenterX = function() {
            return this.x + this.width / 2;
          };
          RectangleD.prototype.getMinX = function() {
            return this.getX();
          };
          RectangleD.prototype.getMaxX = function() {
            return this.getX() + this.width;
          };
          RectangleD.prototype.getCenterY = function() {
            return this.y + this.height / 2;
          };
          RectangleD.prototype.getMinY = function() {
            return this.getY();
          };
          RectangleD.prototype.getMaxY = function() {
            return this.getY() + this.height;
          };
          RectangleD.prototype.getWidthHalf = function() {
            return this.width / 2;
          };
          RectangleD.prototype.getHeightHalf = function() {
            return this.height / 2;
          };
          module2.exports = RectangleD;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
            return typeof obj;
          } : function(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
          function UniqueIDGeneretor() {
          }
          UniqueIDGeneretor.lastID = 0;
          UniqueIDGeneretor.createID = function(obj) {
            if (UniqueIDGeneretor.isPrimitive(obj)) {
              return obj;
            }
            if (obj.uniqueID != null) {
              return obj.uniqueID;
            }
            obj.uniqueID = UniqueIDGeneretor.getString();
            UniqueIDGeneretor.lastID++;
            return obj.uniqueID;
          };
          UniqueIDGeneretor.getString = function(id) {
            if (id == null)
              id = UniqueIDGeneretor.lastID;
            return "Object#" + id + "";
          };
          UniqueIDGeneretor.isPrimitive = function(arg) {
            var type = typeof arg === "undefined" ? "undefined" : _typeof(arg);
            return arg == null || type != "object" && type != "function";
          };
          module2.exports = UniqueIDGeneretor;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
              for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                arr2[i] = arr[i];
              }
              return arr2;
            } else {
              return Array.from(arr);
            }
          }
          var LayoutConstants = __webpack_require__(0);
          var LGraphManager = __webpack_require__(6);
          var LNode = __webpack_require__(3);
          var LEdge = __webpack_require__(1);
          var LGraph = __webpack_require__(5);
          var PointD = __webpack_require__(4);
          var Transform = __webpack_require__(17);
          var Emitter = __webpack_require__(27);
          function Layout2(isRemoteUse) {
            Emitter.call(this);
            this.layoutQuality = LayoutConstants.QUALITY;
            this.createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;
            this.incremental = LayoutConstants.DEFAULT_INCREMENTAL;
            this.animationOnLayout = LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT;
            this.animationDuringLayout = LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT;
            this.animationPeriod = LayoutConstants.DEFAULT_ANIMATION_PERIOD;
            this.uniformLeafNodeSizes = LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES;
            this.edgeToDummyNodes = new Map();
            this.graphManager = new LGraphManager(this);
            this.isLayoutFinished = false;
            this.isSubLayout = false;
            this.isRemoteUse = false;
            if (isRemoteUse != null) {
              this.isRemoteUse = isRemoteUse;
            }
          }
          Layout2.RANDOM_SEED = 1;
          Layout2.prototype = Object.create(Emitter.prototype);
          Layout2.prototype.getGraphManager = function() {
            return this.graphManager;
          };
          Layout2.prototype.getAllNodes = function() {
            return this.graphManager.getAllNodes();
          };
          Layout2.prototype.getAllEdges = function() {
            return this.graphManager.getAllEdges();
          };
          Layout2.prototype.getAllNodesToApplyGravitation = function() {
            return this.graphManager.getAllNodesToApplyGravitation();
          };
          Layout2.prototype.newGraphManager = function() {
            var gm = new LGraphManager(this);
            this.graphManager = gm;
            return gm;
          };
          Layout2.prototype.newGraph = function(vGraph) {
            return new LGraph(null, this.graphManager, vGraph);
          };
          Layout2.prototype.newNode = function(vNode) {
            return new LNode(this.graphManager, vNode);
          };
          Layout2.prototype.newEdge = function(vEdge) {
            return new LEdge(null, null, vEdge);
          };
          Layout2.prototype.checkLayoutSuccess = function() {
            return this.graphManager.getRoot() == null || this.graphManager.getRoot().getNodes().length == 0 || this.graphManager.includesInvalidEdge();
          };
          Layout2.prototype.runLayout = function() {
            this.isLayoutFinished = false;
            if (this.tilingPreLayout) {
              this.tilingPreLayout();
            }
            this.initParameters();
            var isLayoutSuccessfull;
            if (this.checkLayoutSuccess()) {
              isLayoutSuccessfull = false;
            } else {
              isLayoutSuccessfull = this.layout();
            }
            if (LayoutConstants.ANIMATE === "during") {
              return false;
            }
            if (isLayoutSuccessfull) {
              if (!this.isSubLayout) {
                this.doPostLayout();
              }
            }
            if (this.tilingPostLayout) {
              this.tilingPostLayout();
            }
            this.isLayoutFinished = true;
            return isLayoutSuccessfull;
          };
          Layout2.prototype.doPostLayout = function() {
            if (!this.incremental) {
              this.transform();
            }
            this.update();
          };
          Layout2.prototype.update2 = function() {
            if (this.createBendsAsNeeded) {
              this.createBendpointsFromDummyNodes();
              this.graphManager.resetAllEdges();
            }
            if (!this.isRemoteUse) {
              var edge;
              var allEdges = this.graphManager.getAllEdges();
              for (var i = 0; i < allEdges.length; i++) {
                edge = allEdges[i];
              }
              var node;
              var nodes = this.graphManager.getRoot().getNodes();
              for (var i = 0; i < nodes.length; i++) {
                node = nodes[i];
              }
              this.update(this.graphManager.getRoot());
            }
          };
          Layout2.prototype.update = function(obj) {
            if (obj == null) {
              this.update2();
            } else if (obj instanceof LNode) {
              var node = obj;
              if (node.getChild() != null) {
                var nodes = node.getChild().getNodes();
                for (var i = 0; i < nodes.length; i++) {
                  update(nodes[i]);
                }
              }
              if (node.vGraphObject != null) {
                var vNode = node.vGraphObject;
                vNode.update(node);
              }
            } else if (obj instanceof LEdge) {
              var edge = obj;
              if (edge.vGraphObject != null) {
                var vEdge = edge.vGraphObject;
                vEdge.update(edge);
              }
            } else if (obj instanceof LGraph) {
              var graph = obj;
              if (graph.vGraphObject != null) {
                var vGraph = graph.vGraphObject;
                vGraph.update(graph);
              }
            }
          };
          Layout2.prototype.initParameters = function() {
            if (!this.isSubLayout) {
              this.layoutQuality = LayoutConstants.QUALITY;
              this.animationDuringLayout = LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT;
              this.animationPeriod = LayoutConstants.DEFAULT_ANIMATION_PERIOD;
              this.animationOnLayout = LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT;
              this.incremental = LayoutConstants.DEFAULT_INCREMENTAL;
              this.createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;
              this.uniformLeafNodeSizes = LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES;
            }
            if (this.animationDuringLayout) {
              this.animationOnLayout = false;
            }
          };
          Layout2.prototype.transform = function(newLeftTop) {
            if (newLeftTop == void 0) {
              this.transform(new PointD(0, 0));
            } else {
              var trans = new Transform();
              var leftTop = this.graphManager.getRoot().updateLeftTop();
              if (leftTop != null) {
                trans.setWorldOrgX(newLeftTop.x);
                trans.setWorldOrgY(newLeftTop.y);
                trans.setDeviceOrgX(leftTop.x);
                trans.setDeviceOrgY(leftTop.y);
                var nodes = this.getAllNodes();
                var node;
                for (var i = 0; i < nodes.length; i++) {
                  node = nodes[i];
                  node.transform(trans);
                }
              }
            }
          };
          Layout2.prototype.positionNodesRandomly = function(graph) {
            if (graph == void 0) {
              this.positionNodesRandomly(this.getGraphManager().getRoot());
              this.getGraphManager().getRoot().updateBounds(true);
            } else {
              var lNode;
              var childGraph;
              var nodes = graph.getNodes();
              for (var i = 0; i < nodes.length; i++) {
                lNode = nodes[i];
                childGraph = lNode.getChild();
                if (childGraph == null) {
                  lNode.scatter();
                } else if (childGraph.getNodes().length == 0) {
                  lNode.scatter();
                } else {
                  this.positionNodesRandomly(childGraph);
                  lNode.updateBounds();
                }
              }
            }
          };
          Layout2.prototype.getFlatForest = function() {
            var flatForest = [];
            var isForest = true;
            var allNodes = this.graphManager.getRoot().getNodes();
            var isFlat = true;
            for (var i = 0; i < allNodes.length; i++) {
              if (allNodes[i].getChild() != null) {
                isFlat = false;
              }
            }
            if (!isFlat) {
              return flatForest;
            }
            var visited = new Set();
            var toBeVisited = [];
            var parents = new Map();
            var unProcessedNodes = [];
            unProcessedNodes = unProcessedNodes.concat(allNodes);
            while (unProcessedNodes.length > 0 && isForest) {
              toBeVisited.push(unProcessedNodes[0]);
              while (toBeVisited.length > 0 && isForest) {
                var currentNode = toBeVisited[0];
                toBeVisited.splice(0, 1);
                visited.add(currentNode);
                var neighborEdges = currentNode.getEdges();
                for (var i = 0; i < neighborEdges.length; i++) {
                  var currentNeighbor = neighborEdges[i].getOtherEnd(currentNode);
                  if (parents.get(currentNode) != currentNeighbor) {
                    if (!visited.has(currentNeighbor)) {
                      toBeVisited.push(currentNeighbor);
                      parents.set(currentNeighbor, currentNode);
                    } else {
                      isForest = false;
                      break;
                    }
                  }
                }
              }
              if (!isForest) {
                flatForest = [];
              } else {
                var temp = [].concat(_toConsumableArray(visited));
                flatForest.push(temp);
                for (var i = 0; i < temp.length; i++) {
                  var value = temp[i];
                  var index = unProcessedNodes.indexOf(value);
                  if (index > -1) {
                    unProcessedNodes.splice(index, 1);
                  }
                }
                visited = new Set();
                parents = new Map();
              }
            }
            return flatForest;
          };
          Layout2.prototype.createDummyNodesForBendpoints = function(edge) {
            var dummyNodes = [];
            var prev = edge.source;
            var graph = this.graphManager.calcLowestCommonAncestor(edge.source, edge.target);
            for (var i = 0; i < edge.bendpoints.length; i++) {
              var dummyNode = this.newNode(null);
              dummyNode.setRect(new Point(0, 0), new Dimension(1, 1));
              graph.add(dummyNode);
              var dummyEdge = this.newEdge(null);
              this.graphManager.add(dummyEdge, prev, dummyNode);
              dummyNodes.add(dummyNode);
              prev = dummyNode;
            }
            var dummyEdge = this.newEdge(null);
            this.graphManager.add(dummyEdge, prev, edge.target);
            this.edgeToDummyNodes.set(edge, dummyNodes);
            if (edge.isInterGraph()) {
              this.graphManager.remove(edge);
            } else {
              graph.remove(edge);
            }
            return dummyNodes;
          };
          Layout2.prototype.createBendpointsFromDummyNodes = function() {
            var edges = [];
            edges = edges.concat(this.graphManager.getAllEdges());
            edges = [].concat(_toConsumableArray(this.edgeToDummyNodes.keys())).concat(edges);
            for (var k = 0; k < edges.length; k++) {
              var lEdge = edges[k];
              if (lEdge.bendpoints.length > 0) {
                var path = this.edgeToDummyNodes.get(lEdge);
                for (var i = 0; i < path.length; i++) {
                  var dummyNode = path[i];
                  var p = new PointD(dummyNode.getCenterX(), dummyNode.getCenterY());
                  var ebp = lEdge.bendpoints.get(i);
                  ebp.x = p.x;
                  ebp.y = p.y;
                  dummyNode.getOwner().remove(dummyNode);
                }
                this.graphManager.add(lEdge, lEdge.source, lEdge.target);
              }
            }
          };
          Layout2.transform = function(sliderValue, defaultValue, minDiv, maxMul) {
            if (minDiv != void 0 && maxMul != void 0) {
              var value = defaultValue;
              if (sliderValue <= 50) {
                var minValue = defaultValue / minDiv;
                value -= (defaultValue - minValue) / 50 * (50 - sliderValue);
              } else {
                var maxValue = defaultValue * maxMul;
                value += (maxValue - defaultValue) / 50 * (sliderValue - 50);
              }
              return value;
            } else {
              var a, b;
              if (sliderValue <= 50) {
                a = 9 * defaultValue / 500;
                b = defaultValue / 10;
              } else {
                a = 9 * defaultValue / 50;
                b = -8 * defaultValue;
              }
              return a * sliderValue + b;
            }
          };
          Layout2.findCenterOfTree = function(nodes) {
            var list = [];
            list = list.concat(nodes);
            var removedNodes = [];
            var remainingDegrees = new Map();
            var foundCenter = false;
            var centerNode = null;
            if (list.length == 1 || list.length == 2) {
              foundCenter = true;
              centerNode = list[0];
            }
            for (var i = 0; i < list.length; i++) {
              var node = list[i];
              var degree = node.getNeighborsList().size;
              remainingDegrees.set(node, node.getNeighborsList().size);
              if (degree == 1) {
                removedNodes.push(node);
              }
            }
            var tempList = [];
            tempList = tempList.concat(removedNodes);
            while (!foundCenter) {
              var tempList2 = [];
              tempList2 = tempList2.concat(tempList);
              tempList = [];
              for (var i = 0; i < list.length; i++) {
                var node = list[i];
                var index = list.indexOf(node);
                if (index >= 0) {
                  list.splice(index, 1);
                }
                var neighbours = node.getNeighborsList();
                neighbours.forEach(function(neighbour) {
                  if (removedNodes.indexOf(neighbour) < 0) {
                    var otherDegree = remainingDegrees.get(neighbour);
                    var newDegree = otherDegree - 1;
                    if (newDegree == 1) {
                      tempList.push(neighbour);
                    }
                    remainingDegrees.set(neighbour, newDegree);
                  }
                });
              }
              removedNodes = removedNodes.concat(tempList);
              if (list.length == 1 || list.length == 2) {
                foundCenter = true;
                centerNode = list[0];
              }
            }
            return centerNode;
          };
          Layout2.prototype.setGraphManager = function(gm) {
            this.graphManager = gm;
          };
          module2.exports = Layout2;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          function RandomSeed() {
          }
          RandomSeed.seed = 1;
          RandomSeed.x = 0;
          RandomSeed.nextDouble = function() {
            RandomSeed.x = Math.sin(RandomSeed.seed++) * 1e4;
            return RandomSeed.x - Math.floor(RandomSeed.x);
          };
          module2.exports = RandomSeed;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var PointD = __webpack_require__(4);
          function Transform(x, y) {
            this.lworldOrgX = 0;
            this.lworldOrgY = 0;
            this.ldeviceOrgX = 0;
            this.ldeviceOrgY = 0;
            this.lworldExtX = 1;
            this.lworldExtY = 1;
            this.ldeviceExtX = 1;
            this.ldeviceExtY = 1;
          }
          Transform.prototype.getWorldOrgX = function() {
            return this.lworldOrgX;
          };
          Transform.prototype.setWorldOrgX = function(wox) {
            this.lworldOrgX = wox;
          };
          Transform.prototype.getWorldOrgY = function() {
            return this.lworldOrgY;
          };
          Transform.prototype.setWorldOrgY = function(woy) {
            this.lworldOrgY = woy;
          };
          Transform.prototype.getWorldExtX = function() {
            return this.lworldExtX;
          };
          Transform.prototype.setWorldExtX = function(wex) {
            this.lworldExtX = wex;
          };
          Transform.prototype.getWorldExtY = function() {
            return this.lworldExtY;
          };
          Transform.prototype.setWorldExtY = function(wey) {
            this.lworldExtY = wey;
          };
          Transform.prototype.getDeviceOrgX = function() {
            return this.ldeviceOrgX;
          };
          Transform.prototype.setDeviceOrgX = function(dox) {
            this.ldeviceOrgX = dox;
          };
          Transform.prototype.getDeviceOrgY = function() {
            return this.ldeviceOrgY;
          };
          Transform.prototype.setDeviceOrgY = function(doy) {
            this.ldeviceOrgY = doy;
          };
          Transform.prototype.getDeviceExtX = function() {
            return this.ldeviceExtX;
          };
          Transform.prototype.setDeviceExtX = function(dex) {
            this.ldeviceExtX = dex;
          };
          Transform.prototype.getDeviceExtY = function() {
            return this.ldeviceExtY;
          };
          Transform.prototype.setDeviceExtY = function(dey) {
            this.ldeviceExtY = dey;
          };
          Transform.prototype.transformX = function(x) {
            var xDevice = 0;
            var worldExtX = this.lworldExtX;
            if (worldExtX != 0) {
              xDevice = this.ldeviceOrgX + (x - this.lworldOrgX) * this.ldeviceExtX / worldExtX;
            }
            return xDevice;
          };
          Transform.prototype.transformY = function(y) {
            var yDevice = 0;
            var worldExtY = this.lworldExtY;
            if (worldExtY != 0) {
              yDevice = this.ldeviceOrgY + (y - this.lworldOrgY) * this.ldeviceExtY / worldExtY;
            }
            return yDevice;
          };
          Transform.prototype.inverseTransformX = function(x) {
            var xWorld = 0;
            var deviceExtX = this.ldeviceExtX;
            if (deviceExtX != 0) {
              xWorld = this.lworldOrgX + (x - this.ldeviceOrgX) * this.lworldExtX / deviceExtX;
            }
            return xWorld;
          };
          Transform.prototype.inverseTransformY = function(y) {
            var yWorld = 0;
            var deviceExtY = this.ldeviceExtY;
            if (deviceExtY != 0) {
              yWorld = this.lworldOrgY + (y - this.ldeviceOrgY) * this.lworldExtY / deviceExtY;
            }
            return yWorld;
          };
          Transform.prototype.inverseTransformPoint = function(inPoint) {
            var outPoint = new PointD(this.inverseTransformX(inPoint.x), this.inverseTransformY(inPoint.y));
            return outPoint;
          };
          module2.exports = Transform;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
              for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                arr2[i] = arr[i];
              }
              return arr2;
            } else {
              return Array.from(arr);
            }
          }
          var Layout2 = __webpack_require__(15);
          var FDLayoutConstants = __webpack_require__(7);
          var LayoutConstants = __webpack_require__(0);
          var IGeometry = __webpack_require__(8);
          var IMath = __webpack_require__(9);
          function FDLayout() {
            Layout2.call(this);
            this.useSmartIdealEdgeLengthCalculation = FDLayoutConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;
            this.idealEdgeLength = FDLayoutConstants.DEFAULT_EDGE_LENGTH;
            this.springConstant = FDLayoutConstants.DEFAULT_SPRING_STRENGTH;
            this.repulsionConstant = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH;
            this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;
            this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;
            this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;
            this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;
            this.displacementThresholdPerNode = 3 * FDLayoutConstants.DEFAULT_EDGE_LENGTH / 100;
            this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;
            this.initialCoolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;
            this.totalDisplacement = 0;
            this.oldTotalDisplacement = 0;
            this.maxIterations = FDLayoutConstants.MAX_ITERATIONS;
          }
          FDLayout.prototype = Object.create(Layout2.prototype);
          for (var prop in Layout2) {
            FDLayout[prop] = Layout2[prop];
          }
          FDLayout.prototype.initParameters = function() {
            Layout2.prototype.initParameters.call(this, arguments);
            this.totalIterations = 0;
            this.notAnimatedIterations = 0;
            this.useFRGridVariant = FDLayoutConstants.DEFAULT_USE_SMART_REPULSION_RANGE_CALCULATION;
            this.grid = [];
          };
          FDLayout.prototype.calcIdealEdgeLengths = function() {
            var edge;
            var lcaDepth;
            var source;
            var target;
            var sizeOfSourceInLca;
            var sizeOfTargetInLca;
            var allEdges = this.getGraphManager().getAllEdges();
            for (var i = 0; i < allEdges.length; i++) {
              edge = allEdges[i];
              edge.idealLength = this.idealEdgeLength;
              if (edge.isInterGraph) {
                source = edge.getSource();
                target = edge.getTarget();
                sizeOfSourceInLca = edge.getSourceInLca().getEstimatedSize();
                sizeOfTargetInLca = edge.getTargetInLca().getEstimatedSize();
                if (this.useSmartIdealEdgeLengthCalculation) {
                  edge.idealLength += sizeOfSourceInLca + sizeOfTargetInLca - 2 * LayoutConstants.SIMPLE_NODE_SIZE;
                }
                lcaDepth = edge.getLca().getInclusionTreeDepth();
                edge.idealLength += FDLayoutConstants.DEFAULT_EDGE_LENGTH * FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR * (source.getInclusionTreeDepth() + target.getInclusionTreeDepth() - 2 * lcaDepth);
              }
            }
          };
          FDLayout.prototype.initSpringEmbedder = function() {
            var s = this.getAllNodes().length;
            if (this.incremental) {
              if (s > FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) {
                this.coolingFactor = Math.max(this.coolingFactor * FDLayoutConstants.COOLING_ADAPTATION_FACTOR, this.coolingFactor - (s - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) / (FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) * this.coolingFactor * (1 - FDLayoutConstants.COOLING_ADAPTATION_FACTOR));
              }
              this.maxNodeDisplacement = FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL;
            } else {
              if (s > FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) {
                this.coolingFactor = Math.max(FDLayoutConstants.COOLING_ADAPTATION_FACTOR, 1 - (s - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) / (FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) * (1 - FDLayoutConstants.COOLING_ADAPTATION_FACTOR));
              } else {
                this.coolingFactor = 1;
              }
              this.initialCoolingFactor = this.coolingFactor;
              this.maxNodeDisplacement = FDLayoutConstants.MAX_NODE_DISPLACEMENT;
            }
            this.maxIterations = Math.max(this.getAllNodes().length * 5, this.maxIterations);
            this.totalDisplacementThreshold = this.displacementThresholdPerNode * this.getAllNodes().length;
            this.repulsionRange = this.calcRepulsionRange();
          };
          FDLayout.prototype.calcSpringForces = function() {
            var lEdges = this.getAllEdges();
            var edge;
            for (var i = 0; i < lEdges.length; i++) {
              edge = lEdges[i];
              this.calcSpringForce(edge, edge.idealLength);
            }
          };
          FDLayout.prototype.calcRepulsionForces = function() {
            var gridUpdateAllowed = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
            var forceToNodeSurroundingUpdate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
            var i, j;
            var nodeA, nodeB;
            var lNodes = this.getAllNodes();
            var processedNodeSet;
            if (this.useFRGridVariant) {
              if (this.totalIterations % FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1 && gridUpdateAllowed) {
                this.updateGrid();
              }
              processedNodeSet = new Set();
              for (i = 0; i < lNodes.length; i++) {
                nodeA = lNodes[i];
                this.calculateRepulsionForceOfANode(nodeA, processedNodeSet, gridUpdateAllowed, forceToNodeSurroundingUpdate);
                processedNodeSet.add(nodeA);
              }
            } else {
              for (i = 0; i < lNodes.length; i++) {
                nodeA = lNodes[i];
                for (j = i + 1; j < lNodes.length; j++) {
                  nodeB = lNodes[j];
                  if (nodeA.getOwner() != nodeB.getOwner()) {
                    continue;
                  }
                  this.calcRepulsionForce(nodeA, nodeB);
                }
              }
            }
          };
          FDLayout.prototype.calcGravitationalForces = function() {
            var node;
            var lNodes = this.getAllNodesToApplyGravitation();
            for (var i = 0; i < lNodes.length; i++) {
              node = lNodes[i];
              this.calcGravitationalForce(node);
            }
          };
          FDLayout.prototype.moveNodes = function() {
            var lNodes = this.getAllNodes();
            var node;
            for (var i = 0; i < lNodes.length; i++) {
              node = lNodes[i];
              node.move();
            }
          };
          FDLayout.prototype.calcSpringForce = function(edge, idealLength) {
            var sourceNode = edge.getSource();
            var targetNode = edge.getTarget();
            var length;
            var springForce;
            var springForceX;
            var springForceY;
            if (this.uniformLeafNodeSizes && sourceNode.getChild() == null && targetNode.getChild() == null) {
              edge.updateLengthSimple();
            } else {
              edge.updateLength();
              if (edge.isOverlapingSourceAndTarget) {
                return;
              }
            }
            length = edge.getLength();
            if (length == 0)
              return;
            springForce = this.springConstant * (length - idealLength);
            springForceX = springForce * (edge.lengthX / length);
            springForceY = springForce * (edge.lengthY / length);
            sourceNode.springForceX += springForceX;
            sourceNode.springForceY += springForceY;
            targetNode.springForceX -= springForceX;
            targetNode.springForceY -= springForceY;
          };
          FDLayout.prototype.calcRepulsionForce = function(nodeA, nodeB) {
            var rectA = nodeA.getRect();
            var rectB = nodeB.getRect();
            var overlapAmount = new Array(2);
            var clipPoints = new Array(4);
            var distanceX;
            var distanceY;
            var distanceSquared;
            var distance;
            var repulsionForce;
            var repulsionForceX;
            var repulsionForceY;
            if (rectA.intersects(rectB)) {
              IGeometry.calcSeparationAmount(rectA, rectB, overlapAmount, FDLayoutConstants.DEFAULT_EDGE_LENGTH / 2);
              repulsionForceX = 2 * overlapAmount[0];
              repulsionForceY = 2 * overlapAmount[1];
              var childrenConstant = nodeA.noOfChildren * nodeB.noOfChildren / (nodeA.noOfChildren + nodeB.noOfChildren);
              nodeA.repulsionForceX -= childrenConstant * repulsionForceX;
              nodeA.repulsionForceY -= childrenConstant * repulsionForceY;
              nodeB.repulsionForceX += childrenConstant * repulsionForceX;
              nodeB.repulsionForceY += childrenConstant * repulsionForceY;
            } else {
              if (this.uniformLeafNodeSizes && nodeA.getChild() == null && nodeB.getChild() == null) {
                distanceX = rectB.getCenterX() - rectA.getCenterX();
                distanceY = rectB.getCenterY() - rectA.getCenterY();
              } else {
                IGeometry.getIntersection(rectA, rectB, clipPoints);
                distanceX = clipPoints[2] - clipPoints[0];
                distanceY = clipPoints[3] - clipPoints[1];
              }
              if (Math.abs(distanceX) < FDLayoutConstants.MIN_REPULSION_DIST) {
                distanceX = IMath.sign(distanceX) * FDLayoutConstants.MIN_REPULSION_DIST;
              }
              if (Math.abs(distanceY) < FDLayoutConstants.MIN_REPULSION_DIST) {
                distanceY = IMath.sign(distanceY) * FDLayoutConstants.MIN_REPULSION_DIST;
              }
              distanceSquared = distanceX * distanceX + distanceY * distanceY;
              distance = Math.sqrt(distanceSquared);
              repulsionForce = this.repulsionConstant * nodeA.noOfChildren * nodeB.noOfChildren / distanceSquared;
              repulsionForceX = repulsionForce * distanceX / distance;
              repulsionForceY = repulsionForce * distanceY / distance;
              nodeA.repulsionForceX -= repulsionForceX;
              nodeA.repulsionForceY -= repulsionForceY;
              nodeB.repulsionForceX += repulsionForceX;
              nodeB.repulsionForceY += repulsionForceY;
            }
          };
          FDLayout.prototype.calcGravitationalForce = function(node) {
            var ownerGraph;
            var ownerCenterX;
            var ownerCenterY;
            var distanceX;
            var distanceY;
            var absDistanceX;
            var absDistanceY;
            var estimatedSize;
            ownerGraph = node.getOwner();
            ownerCenterX = (ownerGraph.getRight() + ownerGraph.getLeft()) / 2;
            ownerCenterY = (ownerGraph.getTop() + ownerGraph.getBottom()) / 2;
            distanceX = node.getCenterX() - ownerCenterX;
            distanceY = node.getCenterY() - ownerCenterY;
            absDistanceX = Math.abs(distanceX) + node.getWidth() / 2;
            absDistanceY = Math.abs(distanceY) + node.getHeight() / 2;
            if (node.getOwner() == this.graphManager.getRoot()) {
              estimatedSize = ownerGraph.getEstimatedSize() * this.gravityRangeFactor;
              if (absDistanceX > estimatedSize || absDistanceY > estimatedSize) {
                node.gravitationForceX = -this.gravityConstant * distanceX;
                node.gravitationForceY = -this.gravityConstant * distanceY;
              }
            } else {
              estimatedSize = ownerGraph.getEstimatedSize() * this.compoundGravityRangeFactor;
              if (absDistanceX > estimatedSize || absDistanceY > estimatedSize) {
                node.gravitationForceX = -this.gravityConstant * distanceX * this.compoundGravityConstant;
                node.gravitationForceY = -this.gravityConstant * distanceY * this.compoundGravityConstant;
              }
            }
          };
          FDLayout.prototype.isConverged = function() {
            var converged;
            var oscilating = false;
            if (this.totalIterations > this.maxIterations / 3) {
              oscilating = Math.abs(this.totalDisplacement - this.oldTotalDisplacement) < 2;
            }
            converged = this.totalDisplacement < this.totalDisplacementThreshold;
            this.oldTotalDisplacement = this.totalDisplacement;
            return converged || oscilating;
          };
          FDLayout.prototype.animate = function() {
            if (this.animationDuringLayout && !this.isSubLayout) {
              if (this.notAnimatedIterations == this.animationPeriod) {
                this.update();
                this.notAnimatedIterations = 0;
              } else {
                this.notAnimatedIterations++;
              }
            }
          };
          FDLayout.prototype.calcNoOfChildrenForAllNodes = function() {
            var node;
            var allNodes = this.graphManager.getAllNodes();
            for (var i = 0; i < allNodes.length; i++) {
              node = allNodes[i];
              node.noOfChildren = node.getNoOfChildren();
            }
          };
          FDLayout.prototype.calcGrid = function(graph) {
            var sizeX = 0;
            var sizeY = 0;
            sizeX = parseInt(Math.ceil((graph.getRight() - graph.getLeft()) / this.repulsionRange));
            sizeY = parseInt(Math.ceil((graph.getBottom() - graph.getTop()) / this.repulsionRange));
            var grid = new Array(sizeX);
            for (var i = 0; i < sizeX; i++) {
              grid[i] = new Array(sizeY);
            }
            for (var i = 0; i < sizeX; i++) {
              for (var j = 0; j < sizeY; j++) {
                grid[i][j] = new Array();
              }
            }
            return grid;
          };
          FDLayout.prototype.addNodeToGrid = function(v, left, top) {
            var startX = 0;
            var finishX = 0;
            var startY = 0;
            var finishY = 0;
            startX = parseInt(Math.floor((v.getRect().x - left) / this.repulsionRange));
            finishX = parseInt(Math.floor((v.getRect().width + v.getRect().x - left) / this.repulsionRange));
            startY = parseInt(Math.floor((v.getRect().y - top) / this.repulsionRange));
            finishY = parseInt(Math.floor((v.getRect().height + v.getRect().y - top) / this.repulsionRange));
            for (var i = startX; i <= finishX; i++) {
              for (var j = startY; j <= finishY; j++) {
                this.grid[i][j].push(v);
                v.setGridCoordinates(startX, finishX, startY, finishY);
              }
            }
          };
          FDLayout.prototype.updateGrid = function() {
            var i;
            var nodeA;
            var lNodes = this.getAllNodes();
            this.grid = this.calcGrid(this.graphManager.getRoot());
            for (i = 0; i < lNodes.length; i++) {
              nodeA = lNodes[i];
              this.addNodeToGrid(nodeA, this.graphManager.getRoot().getLeft(), this.graphManager.getRoot().getTop());
            }
          };
          FDLayout.prototype.calculateRepulsionForceOfANode = function(nodeA, processedNodeSet, gridUpdateAllowed, forceToNodeSurroundingUpdate) {
            if (this.totalIterations % FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1 && gridUpdateAllowed || forceToNodeSurroundingUpdate) {
              var surrounding = new Set();
              nodeA.surrounding = new Array();
              var nodeB;
              var grid = this.grid;
              for (var i = nodeA.startX - 1; i < nodeA.finishX + 2; i++) {
                for (var j = nodeA.startY - 1; j < nodeA.finishY + 2; j++) {
                  if (!(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length)) {
                    for (var k = 0; k < grid[i][j].length; k++) {
                      nodeB = grid[i][j][k];
                      if (nodeA.getOwner() != nodeB.getOwner() || nodeA == nodeB) {
                        continue;
                      }
                      if (!processedNodeSet.has(nodeB) && !surrounding.has(nodeB)) {
                        var distanceX = Math.abs(nodeA.getCenterX() - nodeB.getCenterX()) - (nodeA.getWidth() / 2 + nodeB.getWidth() / 2);
                        var distanceY = Math.abs(nodeA.getCenterY() - nodeB.getCenterY()) - (nodeA.getHeight() / 2 + nodeB.getHeight() / 2);
                        if (distanceX <= this.repulsionRange && distanceY <= this.repulsionRange) {
                          surrounding.add(nodeB);
                        }
                      }
                    }
                  }
                }
              }
              nodeA.surrounding = [].concat(_toConsumableArray(surrounding));
            }
            for (i = 0; i < nodeA.surrounding.length; i++) {
              this.calcRepulsionForce(nodeA, nodeA.surrounding[i]);
            }
          };
          FDLayout.prototype.calcRepulsionRange = function() {
            return 0;
          };
          module2.exports = FDLayout;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var LEdge = __webpack_require__(1);
          var FDLayoutConstants = __webpack_require__(7);
          function FDLayoutEdge(source, target, vEdge) {
            LEdge.call(this, source, target, vEdge);
            this.idealLength = FDLayoutConstants.DEFAULT_EDGE_LENGTH;
          }
          FDLayoutEdge.prototype = Object.create(LEdge.prototype);
          for (var prop in LEdge) {
            FDLayoutEdge[prop] = LEdge[prop];
          }
          module2.exports = FDLayoutEdge;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var LNode = __webpack_require__(3);
          function FDLayoutNode(gm, loc, size, vNode) {
            LNode.call(this, gm, loc, size, vNode);
            this.springForceX = 0;
            this.springForceY = 0;
            this.repulsionForceX = 0;
            this.repulsionForceY = 0;
            this.gravitationForceX = 0;
            this.gravitationForceY = 0;
            this.displacementX = 0;
            this.displacementY = 0;
            this.startX = 0;
            this.finishX = 0;
            this.startY = 0;
            this.finishY = 0;
            this.surrounding = [];
          }
          FDLayoutNode.prototype = Object.create(LNode.prototype);
          for (var prop in LNode) {
            FDLayoutNode[prop] = LNode[prop];
          }
          FDLayoutNode.prototype.setGridCoordinates = function(_startX, _finishX, _startY, _finishY) {
            this.startX = _startX;
            this.finishX = _finishX;
            this.startY = _startY;
            this.finishY = _finishY;
          };
          module2.exports = FDLayoutNode;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          function DimensionD2(width, height) {
            this.width = 0;
            this.height = 0;
            if (width !== null && height !== null) {
              this.height = height;
              this.width = width;
            }
          }
          DimensionD2.prototype.getWidth = function() {
            return this.width;
          };
          DimensionD2.prototype.setWidth = function(width) {
            this.width = width;
          };
          DimensionD2.prototype.getHeight = function() {
            return this.height;
          };
          DimensionD2.prototype.setHeight = function(height) {
            this.height = height;
          };
          module2.exports = DimensionD2;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var UniqueIDGeneretor = __webpack_require__(14);
          function HashMap() {
            this.map = {};
            this.keys = [];
          }
          HashMap.prototype.put = function(key, value) {
            var theId = UniqueIDGeneretor.createID(key);
            if (!this.contains(theId)) {
              this.map[theId] = value;
              this.keys.push(key);
            }
          };
          HashMap.prototype.contains = function(key) {
            var theId = UniqueIDGeneretor.createID(key);
            return this.map[key] != null;
          };
          HashMap.prototype.get = function(key) {
            var theId = UniqueIDGeneretor.createID(key);
            return this.map[theId];
          };
          HashMap.prototype.keySet = function() {
            return this.keys;
          };
          module2.exports = HashMap;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var UniqueIDGeneretor = __webpack_require__(14);
          function HashSet() {
            this.set = {};
          }
          ;
          HashSet.prototype.add = function(obj) {
            var theId = UniqueIDGeneretor.createID(obj);
            if (!this.contains(theId))
              this.set[theId] = obj;
          };
          HashSet.prototype.remove = function(obj) {
            delete this.set[UniqueIDGeneretor.createID(obj)];
          };
          HashSet.prototype.clear = function() {
            this.set = {};
          };
          HashSet.prototype.contains = function(obj) {
            return this.set[UniqueIDGeneretor.createID(obj)] == obj;
          };
          HashSet.prototype.isEmpty = function() {
            return this.size() === 0;
          };
          HashSet.prototype.size = function() {
            return Object.keys(this.set).length;
          };
          HashSet.prototype.addAllTo = function(list) {
            var keys = Object.keys(this.set);
            var length = keys.length;
            for (var i = 0; i < length; i++) {
              list.push(this.set[keys[i]]);
            }
          };
          HashSet.prototype.size = function() {
            return Object.keys(this.set).length;
          };
          HashSet.prototype.addAll = function(list) {
            var s = list.length;
            for (var i = 0; i < s; i++) {
              var v = list[i];
              this.add(v);
            }
          };
          module2.exports = HashSet;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var _createClass = function() {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            return function(Constructor, protoProps, staticProps) {
              if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();
          function _classCallCheck(instance2, Constructor) {
            if (!(instance2 instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var LinkedList = __webpack_require__(11);
          var Quicksort = function() {
            function Quicksort2(A, compareFunction) {
              _classCallCheck(this, Quicksort2);
              if (compareFunction !== null || compareFunction !== void 0)
                this.compareFunction = this._defaultCompareFunction;
              var length = void 0;
              if (A instanceof LinkedList)
                length = A.size();
              else
                length = A.length;
              this._quicksort(A, 0, length - 1);
            }
            _createClass(Quicksort2, [{
              key: "_quicksort",
              value: function _quicksort(A, p, r) {
                if (p < r) {
                  var q = this._partition(A, p, r);
                  this._quicksort(A, p, q);
                  this._quicksort(A, q + 1, r);
                }
              }
            }, {
              key: "_partition",
              value: function _partition(A, p, r) {
                var x = this._get(A, p);
                var i = p;
                var j = r;
                while (true) {
                  while (this.compareFunction(x, this._get(A, j))) {
                    j--;
                  }
                  while (this.compareFunction(this._get(A, i), x)) {
                    i++;
                  }
                  if (i < j) {
                    this._swap(A, i, j);
                    i++;
                    j--;
                  } else
                    return j;
                }
              }
            }, {
              key: "_get",
              value: function _get(object, index) {
                if (object instanceof LinkedList)
                  return object.get_object_at(index);
                else
                  return object[index];
              }
            }, {
              key: "_set",
              value: function _set(object, index, value) {
                if (object instanceof LinkedList)
                  object.set_object_at(index, value);
                else
                  object[index] = value;
              }
            }, {
              key: "_swap",
              value: function _swap(A, i, j) {
                var temp = this._get(A, i);
                this._set(A, i, this._get(A, j));
                this._set(A, j, temp);
              }
            }, {
              key: "_defaultCompareFunction",
              value: function _defaultCompareFunction(a, b) {
                return b > a;
              }
            }]);
            return Quicksort2;
          }();
          module2.exports = Quicksort;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var _createClass = function() {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            return function(Constructor, protoProps, staticProps) {
              if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();
          function _classCallCheck(instance2, Constructor) {
            if (!(instance2 instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var NeedlemanWunsch = function() {
            function NeedlemanWunsch2(sequence1, sequence2) {
              var match_score = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
              var mismatch_penalty = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : -1;
              var gap_penalty = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : -1;
              _classCallCheck(this, NeedlemanWunsch2);
              this.sequence1 = sequence1;
              this.sequence2 = sequence2;
              this.match_score = match_score;
              this.mismatch_penalty = mismatch_penalty;
              this.gap_penalty = gap_penalty;
              this.iMax = sequence1.length + 1;
              this.jMax = sequence2.length + 1;
              this.grid = new Array(this.iMax);
              for (var i = 0; i < this.iMax; i++) {
                this.grid[i] = new Array(this.jMax);
                for (var j = 0; j < this.jMax; j++) {
                  this.grid[i][j] = 0;
                }
              }
              this.tracebackGrid = new Array(this.iMax);
              for (var _i = 0; _i < this.iMax; _i++) {
                this.tracebackGrid[_i] = new Array(this.jMax);
                for (var _j = 0; _j < this.jMax; _j++) {
                  this.tracebackGrid[_i][_j] = [null, null, null];
                }
              }
              this.alignments = [];
              this.score = -1;
              this.computeGrids();
            }
            _createClass(NeedlemanWunsch2, [{
              key: "getScore",
              value: function getScore() {
                return this.score;
              }
            }, {
              key: "getAlignments",
              value: function getAlignments() {
                return this.alignments;
              }
            }, {
              key: "computeGrids",
              value: function computeGrids() {
                for (var j = 1; j < this.jMax; j++) {
                  this.grid[0][j] = this.grid[0][j - 1] + this.gap_penalty;
                  this.tracebackGrid[0][j] = [false, false, true];
                }
                for (var i = 1; i < this.iMax; i++) {
                  this.grid[i][0] = this.grid[i - 1][0] + this.gap_penalty;
                  this.tracebackGrid[i][0] = [false, true, false];
                }
                for (var _i2 = 1; _i2 < this.iMax; _i2++) {
                  for (var _j2 = 1; _j2 < this.jMax; _j2++) {
                    var diag = void 0;
                    if (this.sequence1[_i2 - 1] === this.sequence2[_j2 - 1])
                      diag = this.grid[_i2 - 1][_j2 - 1] + this.match_score;
                    else
                      diag = this.grid[_i2 - 1][_j2 - 1] + this.mismatch_penalty;
                    var up = this.grid[_i2 - 1][_j2] + this.gap_penalty;
                    var left = this.grid[_i2][_j2 - 1] + this.gap_penalty;
                    var maxOf = [diag, up, left];
                    var indices = this.arrayAllMaxIndexes(maxOf);
                    this.grid[_i2][_j2] = maxOf[indices[0]];
                    this.tracebackGrid[_i2][_j2] = [indices.includes(0), indices.includes(1), indices.includes(2)];
                  }
                }
                this.score = this.grid[this.iMax - 1][this.jMax - 1];
              }
            }, {
              key: "alignmentTraceback",
              value: function alignmentTraceback() {
                var inProcessAlignments = [];
                inProcessAlignments.push({
                  pos: [this.sequence1.length, this.sequence2.length],
                  seq1: "",
                  seq2: ""
                });
                while (inProcessAlignments[0]) {
                  var current = inProcessAlignments[0];
                  var directions = this.tracebackGrid[current.pos[0]][current.pos[1]];
                  if (directions[0]) {
                    inProcessAlignments.push({
                      pos: [current.pos[0] - 1, current.pos[1] - 1],
                      seq1: this.sequence1[current.pos[0] - 1] + current.seq1,
                      seq2: this.sequence2[current.pos[1] - 1] + current.seq2
                    });
                  }
                  if (directions[1]) {
                    inProcessAlignments.push({
                      pos: [current.pos[0] - 1, current.pos[1]],
                      seq1: this.sequence1[current.pos[0] - 1] + current.seq1,
                      seq2: "-" + current.seq2
                    });
                  }
                  if (directions[2]) {
                    inProcessAlignments.push({
                      pos: [current.pos[0], current.pos[1] - 1],
                      seq1: "-" + current.seq1,
                      seq2: this.sequence2[current.pos[1] - 1] + current.seq2
                    });
                  }
                  if (current.pos[0] === 0 && current.pos[1] === 0)
                    this.alignments.push({
                      sequence1: current.seq1,
                      sequence2: current.seq2
                    });
                  inProcessAlignments.shift();
                }
                return this.alignments;
              }
            }, {
              key: "getAllIndexes",
              value: function getAllIndexes(arr, val) {
                var indexes = [], i = -1;
                while ((i = arr.indexOf(val, i + 1)) !== -1) {
                  indexes.push(i);
                }
                return indexes;
              }
            }, {
              key: "arrayAllMaxIndexes",
              value: function arrayAllMaxIndexes(array) {
                return this.getAllIndexes(array, Math.max.apply(null, array));
              }
            }]);
            return NeedlemanWunsch2;
          }();
          module2.exports = NeedlemanWunsch;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var layoutBase = function layoutBase2() {
            return;
          };
          layoutBase.FDLayout = __webpack_require__(18);
          layoutBase.FDLayoutConstants = __webpack_require__(7);
          layoutBase.FDLayoutEdge = __webpack_require__(19);
          layoutBase.FDLayoutNode = __webpack_require__(20);
          layoutBase.DimensionD = __webpack_require__(21);
          layoutBase.HashMap = __webpack_require__(22);
          layoutBase.HashSet = __webpack_require__(23);
          layoutBase.IGeometry = __webpack_require__(8);
          layoutBase.IMath = __webpack_require__(9);
          layoutBase.Integer = __webpack_require__(10);
          layoutBase.Point = __webpack_require__(12);
          layoutBase.PointD = __webpack_require__(4);
          layoutBase.RandomSeed = __webpack_require__(16);
          layoutBase.RectangleD = __webpack_require__(13);
          layoutBase.Transform = __webpack_require__(17);
          layoutBase.UniqueIDGeneretor = __webpack_require__(14);
          layoutBase.Quicksort = __webpack_require__(24);
          layoutBase.LinkedList = __webpack_require__(11);
          layoutBase.LGraphObject = __webpack_require__(2);
          layoutBase.LGraph = __webpack_require__(5);
          layoutBase.LEdge = __webpack_require__(1);
          layoutBase.LGraphManager = __webpack_require__(6);
          layoutBase.LNode = __webpack_require__(3);
          layoutBase.Layout = __webpack_require__(15);
          layoutBase.LayoutConstants = __webpack_require__(0);
          layoutBase.NeedlemanWunsch = __webpack_require__(25);
          module2.exports = layoutBase;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          function Emitter() {
            this.listeners = [];
          }
          var p = Emitter.prototype;
          p.addListener = function(event, callback) {
            this.listeners.push({
              event,
              callback
            });
          };
          p.removeListener = function(event, callback) {
            for (var i = this.listeners.length; i >= 0; i--) {
              var l = this.listeners[i];
              if (l.event === event && l.callback === callback) {
                this.listeners.splice(i, 1);
              }
            }
          };
          p.emit = function(event, data) {
            for (var i = 0; i < this.listeners.length; i++) {
              var l = this.listeners[i];
              if (event === l.event) {
                l.callback(data);
              }
            }
          };
          module2.exports = Emitter;
        }
      ]);
    });
  });

  // node_modules/avsdf-base/avsdf-base.js
  var require_avsdf_base = __commonJS((exports, module) => {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory(require_layout_base());
      else if (typeof define === "function" && define.amd)
        define(["layout-base"], factory);
      else if (typeof exports === "object")
        exports["avsdfBase"] = factory(require_layout_base());
      else
        root["avsdfBase"] = factory(root["layoutBase"]);
    })(exports, function(__WEBPACK_EXTERNAL_MODULE_0__) {
      return function(modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
          if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
          }
          var module2 = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
          };
          modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
          module2.l = true;
          return module2.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.i = function(value) {
          return value;
        };
        __webpack_require__.d = function(exports2, name, getter) {
          if (!__webpack_require__.o(exports2, name)) {
            Object.defineProperty(exports2, name, {
              configurable: false,
              enumerable: true,
              get: getter
            });
          }
        };
        __webpack_require__.n = function(module2) {
          var getter = module2 && module2.__esModule ? function getDefault() {
            return module2["default"];
          } : function getModuleExports() {
            return module2;
          };
          __webpack_require__.d(getter, "a", getter);
          return getter;
        };
        __webpack_require__.o = function(object, property) {
          return Object.prototype.hasOwnProperty.call(object, property);
        };
        __webpack_require__.p = "";
        return __webpack_require__(__webpack_require__.s = 6);
      }([
        function(module2, exports2) {
          module2.exports = __WEBPACK_EXTERNAL_MODULE_0__;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var LGraph = __webpack_require__(0).LGraph;
          function AVSDFCircle(parent, graphMgr, vObject) {
            LGraph.call(this, parent, graphMgr, vObject);
            this.inOrder = void 0;
            this.currentIndex = 0;
            this.nodeSeparation = void 0;
            this.stack = [];
            this.perimeter = 0;
            this.centerX = 0;
            this.centerY = 0;
            this.radius = 0;
          }
          AVSDFCircle.prototype = Object.create(LGraph.prototype);
          for (var property in LGraph) {
            AVSDFCircle[property] = LGraph[property];
          }
          AVSDFCircle.prototype.initOrdering = function() {
            this.inOrder = [];
          };
          AVSDFCircle.prototype.getOrder = function() {
            return this.inOrder;
          };
          AVSDFCircle.prototype.getCenterX = function() {
            return this.centerX;
          };
          AVSDFCircle.prototype.getCenterY = function() {
            return this.centerY;
          };
          AVSDFCircle.prototype.getRadius = function() {
            return this.radius;
          };
          AVSDFCircle.prototype.getSize = function() {
            return this.getNodes().length;
          };
          AVSDFCircle.prototype.getTotalCrossingOfCircle = function() {
            var self2 = this;
            var crossingNumber = 0;
            for (var node in self2.inOrder) {
              var nodeCrossing = node.getTotalCrossingOfEdges();
              if (nodeCrossing === -1) {
                return -1;
              }
              crossingNumber += nodeCrossing;
            }
            return crossingNumber / 4;
          };
          AVSDFCircle.prototype.hasFinishedOrdering = function() {
            return this.currentIndex === this.getNodes().length;
          };
          AVSDFCircle.prototype.getNodeSeparation = function() {
            return this.nodeSeparation;
          };
          AVSDFCircle.prototype.setNodeSeparation = function(nodeSeparation) {
            this.nodeSeparation = nodeSeparation;
          };
          AVSDFCircle.prototype.correctAngles = function() {
            var self2 = this;
            self2.currentIndex = 0;
            self2.inOrder.forEach(function(node) {
              return self2.putInOrder(node);
            });
          };
          AVSDFCircle.prototype.putInOrder = function(node) {
            var self2 = this;
            var nodes = self2.getNodes();
            var found = false;
            for (var i = 0; i < nodes.length; i++) {
              if (nodes[i].id == node.id) {
                found = true;
                break;
              }
            }
            if (!found) {
              throw "The node must be a member of LGraph";
            }
            self2.inOrder[self2.currentIndex] = node;
            node.setIndex(self2.currentIndex);
            if (self2.currentIndex === 0) {
              node.setAngle(0);
            } else {
              node.setAngle(self2.inOrder[self2.currentIndex - 1].getAngle() + 2 * Math.PI * (node.getDiagonal() / 2 + self2.nodeSeparation + self2.inOrder[self2.currentIndex - 1].getDiagonal() / 2) / self2.perimeter);
            }
            self2.currentIndex++;
          };
          AVSDFCircle.prototype.findNodeToPlace = function() {
            var self2 = this;
            var sDegreeNode = void 0;
            if (self2.stack.length === 0) {
              sDegreeNode = self2.findUnorderedSmallestDegreeNode();
            } else {
              var foundUnorderNode = false;
              while (!foundUnorderNode && !(self2.stack.length === 0)) {
                sDegreeNode = self2.stack.pop();
                foundUnorderNode = !sDegreeNode.isOrdered();
              }
              if (!foundUnorderNode) {
                sDegreeNode = void 0;
              }
            }
            if (sDegreeNode === void 0) {
              sDegreeNode = self2.findUnorderedSmallestDegreeNode();
            }
            if (sDegreeNode !== void 0) {
              var neighbors = sDegreeNode.getNeighborsSortedByDegree();
              for (var i = neighbors.length - 1; i >= 0; i--) {
                var neighbor = neighbors[i];
                if (!neighbor.isOrdered()) {
                  self2.stack.push(neighbor);
                }
              }
            }
            return sDegreeNode;
          };
          AVSDFCircle.prototype.calculateRadius = function() {
            var self2 = this;
            var totalDiagonal = 0;
            self2.getNodes().forEach(function(node) {
              return totalDiagonal += Math.sqrt(node.getWidth() * node.getWidth() + node.getHeight() * node.getHeight());
            });
            self2.perimeter = totalDiagonal + self2.getNodes().length * self2.nodeSeparation;
            var radius = self2.perimeter / (2 * Math.PI);
            self2.getParent().setWidth(2 * radius);
            self2.getParent().setHeight(2 * radius);
            self2.getParent().setCenter(self2.getParent().getWidth(), self2.getParent().getHeight());
            self2.centerX = self2.getParent().getCenterX();
            self2.centerY = self2.getParent().getCenterY();
            self2.radius = self2.getParent().getHeight() / 2;
          };
          AVSDFCircle.prototype.calculateEdgeCrossingsOfNodes = function() {
            this.getNodes().forEach(function(node) {
              return node.calculateTotalCrossing();
            });
          };
          AVSDFCircle.prototype.loadOldIndicesOfNodes = function() {
            var self2 = this;
            for (var i = 0; i < this.inOrder.length; i++) {
              self2.inOrder[i].setIndex(i);
            }
          };
          AVSDFCircle.prototype.reOrderVertices = function() {
            var self2 = this;
            this.getNodes().forEach(function(node) {
              return self2.inOrder[node.getIndex()] = node;
            });
          };
          AVSDFCircle.prototype.findUnorderedSmallestDegreeNode = function() {
            var minDegree = Number.MAX_SAFE_INTEGER;
            var sDegreeNode = void 0;
            this.getNodes().forEach(function(node) {
              if (node.getDegree() < minDegree && !node.isOrdered()) {
                minDegree = node.getDegree();
                sDegreeNode = node;
              }
            });
            return sDegreeNode;
          };
          module2.exports = AVSDFCircle;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var LayoutConstants = __webpack_require__(0).LayoutConstants;
          function AVSDFConstants() {
          }
          for (var prop in LayoutConstants) {
            AVSDFConstants[prop] = LayoutConstants[prop];
          }
          AVSDFConstants.DEFAULT_NODE_SEPARATION = 60;
          module2.exports = AVSDFConstants;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var LEdge = __webpack_require__(0).LEdge;
          function AVSDFEdge(source, target, vEdge) {
            LEdge.call(this, source, target, vEdge);
          }
          AVSDFEdge.prototype = Object.create(LEdge.prototype);
          for (var properties in LEdge) {
            AVSDFEdge[properties] = LEdge[properties];
          }
          AVSDFEdge.prototype.getOtherEnd = function(node) {
            return LEdge.prototype.getOtherEnd(node);
          };
          AVSDFEdge.prototype.crossesWithEdge = function(otherEdge) {
            var self2 = this;
            var sourcePos = self2.getSource().getIndex();
            var targetPos = self2.getTarget().getIndex();
            var otherSourcePos = otherEdge.getSource().getIndex();
            var otherTargetPos = otherEdge.getTarget().getIndex();
            if (sourcePos === -1 || targetPos === -1 || otherSourcePos === -1 || otherTargetPos === -1) {
              return false;
            }
            var otherSourceDist = otherEdge.getSource().getCircDistWithTheNode(self2.getSource());
            var otherTargetDist = otherEdge.getTarget().getCircDistWithTheNode(self2.getSource());
            var thisTargetDist = self2.getTarget().getCircDistWithTheNode(self2.getSource());
            if (thisTargetDist < Math.max(otherSourceDist, otherTargetDist) && thisTargetDist > Math.min(otherSourceDist, otherTargetDist) && otherTargetDist !== 0 && otherSourceDist !== 0) {
              return true;
            }
            return false;
          };
          AVSDFEdge.prototype.crossingWithEdge = function(otherEdge) {
            var self2 = this;
            var result = self2.crossesWithEdge(otherEdge);
            return result ? 1 : 0;
          };
          AVSDFEdge.prototype.calculateTotalCrossingWithList = function(edgeList) {
            var self2 = this;
            var totalCrossing = 0;
            edgeList.forEach(function(edge) {
              return totalCrossing += self2.crossingWithEdge(edge);
            });
            return totalCrossing;
          };
          module2.exports = AVSDFEdge;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var LNode = __webpack_require__(0).LNode;
          var Quicksort = __webpack_require__(0).Quicksort;
          function AVSDFNode(gm, vNode, loc, size) {
            if (loc !== void 0 && size !== void 0) {
              LNode.call(this, gm, vNode, loc, size);
            } else {
              LNode.call(this, gm, vNode);
            }
            this.angle = 0;
            this.circleIndex = -1;
            this.totalCrossingOfEdges = -1;
            this.isCrossingNumberValid = false;
          }
          AVSDFNode.prototype = Object.create(LNode.prototype);
          for (var properties in LNode) {
            AVSDFNode[properties] = LNode[properties];
          }
          AVSDFNode.prototype.getCircle = function() {
            return this.getOwner();
          };
          AVSDFNode.prototype.setIndex = function(index) {
            this.circleIndex = index;
            this.isCrossingNumberValid = false;
          };
          AVSDFNode.prototype.getIndex = function() {
            return this.circleIndex;
          };
          AVSDFNode.prototype.getNeighborsSortedByDegree = function() {
            var self2 = this;
            var result = Array.from(self2.getNeighborsList());
            result = result.filter(function(node) {
              return node.getIndex() === -1;
            });
            result.sort(function(a, b) {
              return a.getDegree() - b.getDegree();
            });
            return result;
          };
          AVSDFNode.prototype.getDegree = function() {
            return this.getEdges().length;
          };
          AVSDFNode.prototype.isOrdered = function() {
            return this.getIndex() > -1;
          };
          AVSDFNode.prototype.setAngle = function(angle) {
            this.angle = angle;
          };
          AVSDFNode.prototype.getAngle = function() {
            return this.angle;
          };
          AVSDFNode.prototype.getCircDistWithTheNode = function(refNode) {
            var self2 = this;
            var otherIndex = refNode.getIndex();
            if (otherIndex === -1 || self2.getIndex() === -1) {
              return -1;
            }
            var diff = self2.getIndex() - otherIndex;
            if (diff < 0) {
              diff += self2.getCircle().getSize();
            }
            return diff;
          };
          AVSDFNode.prototype.getCrossingNumberWithNode = function(otherNode) {
            var self2 = this;
            var totalCrossing = 0;
            self2.getEdges().forEach(function(edge) {
              otherNode.getEdges().forEach(function(otherEdge) {
                totalCrossing += edge.crossingWithEdge(otherEdge);
              });
            });
            return totalCrossing;
          };
          AVSDFNode.prototype.getTotalCrossingOfEdges = function() {
            var self2 = this;
            if (!self2.isCrossingNumberValid) {
              self2.calculateTotalCrossing();
              self2.isCrossingNumberValid = true;
            }
            return self2.totalCrossingOfEdges;
          };
          AVSDFNode.prototype.calculateTotalCrossing = function() {
            var self2 = this;
            var temp_crossing_count = 0;
            var temp_edge_list = [];
            temp_edge_list.push.apply(temp_edge_list, self2.getCircle().getEdges());
            temp_edge_list = temp_edge_list.filter(function(ele) {
              return self2.getEdges().indexOf(ele) < 0;
            });
            self2.getEdges().forEach(function(edge) {
              return temp_crossing_count += edge.calculateTotalCrossingWithList(temp_edge_list);
            });
            self2.totalCrossingOfEdges = temp_crossing_count;
          };
          module2.exports = AVSDFNode;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var Layout2 = __webpack_require__(0).Layout;
          var AVSDFConstants = __webpack_require__(2);
          var AVSDFCircle = __webpack_require__(1);
          var AVSDFNode = __webpack_require__(4);
          var AVSDFEdge = __webpack_require__(3);
          function AVSDFLayout() {
            Layout2.call(this);
            this.nodeSeparation = AVSDFConstants.DEFAULT_NODE_SEPARATION;
          }
          AVSDFLayout.prototype = Object.create(Layout2.prototype);
          for (var property in Layout2) {
            AVSDFLayout[property] = Layout2[property];
          }
          AVSDFLayout.prototype.newGraph = function(vObject) {
            this.avsdfCircle = new AVSDFCircle(null, this.graphManager, vObject);
            return this.avsdfCircle;
          };
          AVSDFLayout.prototype.newNode = function(vNode) {
            return new AVSDFNode(this.graphManager, vNode);
          };
          AVSDFLayout.prototype.newEdge = function(vEdge) {
            return new AVSDFEdge(null, null, vEdge);
          };
          AVSDFLayout.prototype.getPositionsData = function() {
            var allNodes = this.graphManager.getAllNodes();
            var pData = {};
            for (var i = 0; i < allNodes.length; i++) {
              var rect = allNodes[i].rect;
              var id = allNodes[i].id;
              pData[id] = {
                id,
                x: rect.getCenterX(),
                y: rect.getCenterY(),
                w: rect.width,
                h: rect.height
              };
            }
            return pData;
          };
          AVSDFLayout.prototype.layout = function() {
            var self2 = this;
            if (self2.graphManager.getGraphs().length > 1) {
              return false;
            }
            var clusterGraph = this.avsdfCircle;
            clusterGraph.setNodeSeparation(this.nodeSeparation);
            clusterGraph.calculateRadius();
            clusterGraph.initOrdering();
            while (!clusterGraph.hasFinishedOrdering()) {
              var node = clusterGraph.findNodeToPlace();
              clusterGraph.putInOrder(node);
            }
            return true;
          };
          AVSDFLayout.prototype.updateNodeAngles = function() {
            this.graphManager.getRoot().correctAngles();
          };
          AVSDFLayout.prototype.updateNodeCoordinates = function() {
            var clusterGraph = this.graphManager.getRoot();
            clusterGraph.getNodes().forEach(function(node) {
              node.setCenter(clusterGraph.getCenterX() + clusterGraph.getRadius() * Math.cos(node.getAngle()), clusterGraph.getCenterY() + clusterGraph.getRadius() * Math.sin(node.getAngle()));
            });
          };
          AVSDFLayout.prototype.initPostProcess = function() {
            this.avsdfCircle.calculateEdgeCrossingsOfNodes();
            var list = this.avsdfCircle.getNodes();
            list.sort(function(a, b) {
              return b.getTotalCrossingOfEdges() - a.getTotalCrossingOfEdges();
            });
            return list;
          };
          AVSDFLayout.prototype.oneStepPostProcess = function(node) {
            var self2 = this;
            var currentCrossingNumber = node.getTotalCrossingOfEdges();
            var newCrossingNumber = void 0;
            var neighbours = Array.from(node.getNeighborsList());
            for (var j = 0; j < neighbours.length; j++) {
              var neighbour = neighbours[j];
              var oldIndex = node.getIndex();
              var newIndex = (neighbour.getIndex() + 1) % self2.avsdfCircle.getSize();
              if (oldIndex !== newIndex) {
                node.setIndex(newIndex);
                if (oldIndex < node.getIndex()) {
                  oldIndex += self2.avsdfCircle.getSize();
                }
                var index = node.getIndex();
                while (index < oldIndex) {
                  var temp = self2.avsdfCircle.getOrder()[index % self2.avsdfCircle.getSize()];
                  temp.setIndex((temp.getIndex() + 1) % self2.avsdfCircle.getSize());
                  index += 1;
                }
                node.calculateTotalCrossing();
                newCrossingNumber = node.getTotalCrossingOfEdges();
                if (newCrossingNumber >= currentCrossingNumber) {
                  self2.avsdfCircle.loadOldIndicesOfNodes();
                } else {
                  self2.avsdfCircle.reOrderVertices();
                  currentCrossingNumber = newCrossingNumber;
                }
              }
            }
          };
          module2.exports = AVSDFLayout;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var avsdfBase = {};
          avsdfBase.layoutBase = __webpack_require__(0);
          avsdfBase.AVSDFConstants = __webpack_require__(2);
          avsdfBase.AVSDFEdge = __webpack_require__(3);
          avsdfBase.AVSDFCircle = __webpack_require__(1);
          avsdfBase.AVSDFLayout = __webpack_require__(5);
          avsdfBase.AVSDFNode = __webpack_require__(4);
          module2.exports = avsdfBase;
        }
      ]);
    });
  });

  // node_modules/cose-base/cose-base.js
  var require_cose_base = __commonJS((exports, module) => {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory(require_layout_base());
      else if (typeof define === "function" && define.amd)
        define(["layout-base"], factory);
      else if (typeof exports === "object")
        exports["coseBase"] = factory(require_layout_base());
      else
        root["coseBase"] = factory(root["layoutBase"]);
    })(exports, function(__WEBPACK_EXTERNAL_MODULE_0__) {
      return function(modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
          if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
          }
          var module2 = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
          };
          modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
          module2.l = true;
          return module2.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.i = function(value) {
          return value;
        };
        __webpack_require__.d = function(exports2, name, getter) {
          if (!__webpack_require__.o(exports2, name)) {
            Object.defineProperty(exports2, name, {
              configurable: false,
              enumerable: true,
              get: getter
            });
          }
        };
        __webpack_require__.n = function(module2) {
          var getter = module2 && module2.__esModule ? function getDefault() {
            return module2["default"];
          } : function getModuleExports() {
            return module2;
          };
          __webpack_require__.d(getter, "a", getter);
          return getter;
        };
        __webpack_require__.o = function(object, property) {
          return Object.prototype.hasOwnProperty.call(object, property);
        };
        __webpack_require__.p = "";
        return __webpack_require__(__webpack_require__.s = 7);
      }([
        function(module2, exports2) {
          module2.exports = __WEBPACK_EXTERNAL_MODULE_0__;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var FDLayoutConstants = __webpack_require__(0).FDLayoutConstants;
          function CoSEConstants() {
          }
          for (var prop in FDLayoutConstants) {
            CoSEConstants[prop] = FDLayoutConstants[prop];
          }
          CoSEConstants.DEFAULT_USE_MULTI_LEVEL_SCALING = false;
          CoSEConstants.DEFAULT_RADIAL_SEPARATION = FDLayoutConstants.DEFAULT_EDGE_LENGTH;
          CoSEConstants.DEFAULT_COMPONENT_SEPERATION = 60;
          CoSEConstants.TILE = true;
          CoSEConstants.TILING_PADDING_VERTICAL = 10;
          CoSEConstants.TILING_PADDING_HORIZONTAL = 10;
          CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL = false;
          module2.exports = CoSEConstants;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var FDLayoutEdge = __webpack_require__(0).FDLayoutEdge;
          function CoSEEdge(source, target, vEdge) {
            FDLayoutEdge.call(this, source, target, vEdge);
          }
          CoSEEdge.prototype = Object.create(FDLayoutEdge.prototype);
          for (var prop in FDLayoutEdge) {
            CoSEEdge[prop] = FDLayoutEdge[prop];
          }
          module2.exports = CoSEEdge;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var LGraph = __webpack_require__(0).LGraph;
          function CoSEGraph(parent, graphMgr, vGraph) {
            LGraph.call(this, parent, graphMgr, vGraph);
          }
          CoSEGraph.prototype = Object.create(LGraph.prototype);
          for (var prop in LGraph) {
            CoSEGraph[prop] = LGraph[prop];
          }
          module2.exports = CoSEGraph;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var LGraphManager = __webpack_require__(0).LGraphManager;
          function CoSEGraphManager(layout) {
            LGraphManager.call(this, layout);
          }
          CoSEGraphManager.prototype = Object.create(LGraphManager.prototype);
          for (var prop in LGraphManager) {
            CoSEGraphManager[prop] = LGraphManager[prop];
          }
          module2.exports = CoSEGraphManager;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var FDLayoutNode = __webpack_require__(0).FDLayoutNode;
          var IMath = __webpack_require__(0).IMath;
          function CoSENode(gm, loc, size, vNode) {
            FDLayoutNode.call(this, gm, loc, size, vNode);
          }
          CoSENode.prototype = Object.create(FDLayoutNode.prototype);
          for (var prop in FDLayoutNode) {
            CoSENode[prop] = FDLayoutNode[prop];
          }
          CoSENode.prototype.move = function() {
            var layout = this.graphManager.getLayout();
            this.displacementX = layout.coolingFactor * (this.springForceX + this.repulsionForceX + this.gravitationForceX) / this.noOfChildren;
            this.displacementY = layout.coolingFactor * (this.springForceY + this.repulsionForceY + this.gravitationForceY) / this.noOfChildren;
            if (Math.abs(this.displacementX) > layout.coolingFactor * layout.maxNodeDisplacement) {
              this.displacementX = layout.coolingFactor * layout.maxNodeDisplacement * IMath.sign(this.displacementX);
            }
            if (Math.abs(this.displacementY) > layout.coolingFactor * layout.maxNodeDisplacement) {
              this.displacementY = layout.coolingFactor * layout.maxNodeDisplacement * IMath.sign(this.displacementY);
            }
            if (this.child == null) {
              this.moveBy(this.displacementX, this.displacementY);
            } else if (this.child.getNodes().length == 0) {
              this.moveBy(this.displacementX, this.displacementY);
            } else {
              this.propogateDisplacementToChildren(this.displacementX, this.displacementY);
            }
            layout.totalDisplacement += Math.abs(this.displacementX) + Math.abs(this.displacementY);
            this.springForceX = 0;
            this.springForceY = 0;
            this.repulsionForceX = 0;
            this.repulsionForceY = 0;
            this.gravitationForceX = 0;
            this.gravitationForceY = 0;
            this.displacementX = 0;
            this.displacementY = 0;
          };
          CoSENode.prototype.propogateDisplacementToChildren = function(dX, dY) {
            var nodes = this.getChild().getNodes();
            var node;
            for (var i = 0; i < nodes.length; i++) {
              node = nodes[i];
              if (node.getChild() == null) {
                node.moveBy(dX, dY);
                node.displacementX += dX;
                node.displacementY += dY;
              } else {
                node.propogateDisplacementToChildren(dX, dY);
              }
            }
          };
          CoSENode.prototype.setPred1 = function(pred12) {
            this.pred1 = pred12;
          };
          CoSENode.prototype.getPred1 = function() {
            return pred1;
          };
          CoSENode.prototype.getPred2 = function() {
            return pred2;
          };
          CoSENode.prototype.setNext = function(next2) {
            this.next = next2;
          };
          CoSENode.prototype.getNext = function() {
            return next;
          };
          CoSENode.prototype.setProcessed = function(processed2) {
            this.processed = processed2;
          };
          CoSENode.prototype.isProcessed = function() {
            return processed;
          };
          module2.exports = CoSENode;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var FDLayout = __webpack_require__(0).FDLayout;
          var CoSEGraphManager = __webpack_require__(4);
          var CoSEGraph = __webpack_require__(3);
          var CoSENode = __webpack_require__(5);
          var CoSEEdge = __webpack_require__(2);
          var CoSEConstants = __webpack_require__(1);
          var FDLayoutConstants = __webpack_require__(0).FDLayoutConstants;
          var LayoutConstants = __webpack_require__(0).LayoutConstants;
          var Point2 = __webpack_require__(0).Point;
          var PointD = __webpack_require__(0).PointD;
          var Layout2 = __webpack_require__(0).Layout;
          var Integer = __webpack_require__(0).Integer;
          var IGeometry = __webpack_require__(0).IGeometry;
          var LGraph = __webpack_require__(0).LGraph;
          var Transform = __webpack_require__(0).Transform;
          function CoSELayout() {
            FDLayout.call(this);
            this.toBeTiled = {};
          }
          CoSELayout.prototype = Object.create(FDLayout.prototype);
          for (var prop in FDLayout) {
            CoSELayout[prop] = FDLayout[prop];
          }
          CoSELayout.prototype.newGraphManager = function() {
            var gm = new CoSEGraphManager(this);
            this.graphManager = gm;
            return gm;
          };
          CoSELayout.prototype.newGraph = function(vGraph) {
            return new CoSEGraph(null, this.graphManager, vGraph);
          };
          CoSELayout.prototype.newNode = function(vNode) {
            return new CoSENode(this.graphManager, vNode);
          };
          CoSELayout.prototype.newEdge = function(vEdge) {
            return new CoSEEdge(null, null, vEdge);
          };
          CoSELayout.prototype.initParameters = function() {
            FDLayout.prototype.initParameters.call(this, arguments);
            if (!this.isSubLayout) {
              if (CoSEConstants.DEFAULT_EDGE_LENGTH < 10) {
                this.idealEdgeLength = 10;
              } else {
                this.idealEdgeLength = CoSEConstants.DEFAULT_EDGE_LENGTH;
              }
              this.useSmartIdealEdgeLengthCalculation = CoSEConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;
              this.springConstant = FDLayoutConstants.DEFAULT_SPRING_STRENGTH;
              this.repulsionConstant = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH;
              this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;
              this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;
              this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;
              this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;
              this.prunedNodesAll = [];
              this.growTreeIterations = 0;
              this.afterGrowthIterations = 0;
              this.isTreeGrowing = false;
              this.isGrowthFinished = false;
              this.coolingCycle = 0;
              this.maxCoolingCycle = this.maxIterations / FDLayoutConstants.CONVERGENCE_CHECK_PERIOD;
              this.finalTemperature = FDLayoutConstants.CONVERGENCE_CHECK_PERIOD / this.maxIterations;
              this.coolingAdjuster = 1;
            }
          };
          CoSELayout.prototype.layout = function() {
            var createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;
            if (createBendsAsNeeded) {
              this.createBendpoints();
              this.graphManager.resetAllEdges();
            }
            this.level = 0;
            return this.classicLayout();
          };
          CoSELayout.prototype.classicLayout = function() {
            this.nodesWithGravity = this.calculateNodesToApplyGravitationTo();
            this.graphManager.setAllNodesToApplyGravitation(this.nodesWithGravity);
            this.calcNoOfChildrenForAllNodes();
            this.graphManager.calcLowestCommonAncestors();
            this.graphManager.calcInclusionTreeDepths();
            this.graphManager.getRoot().calcEstimatedSize();
            this.calcIdealEdgeLengths();
            if (!this.incremental) {
              var forest = this.getFlatForest();
              if (forest.length > 0) {
                this.positionNodesRadially(forest);
              } else {
                this.reduceTrees();
                this.graphManager.resetAllNodesToApplyGravitation();
                var allNodes = new Set(this.getAllNodes());
                var intersection = this.nodesWithGravity.filter(function(x) {
                  return allNodes.has(x);
                });
                this.graphManager.setAllNodesToApplyGravitation(intersection);
                this.positionNodesRandomly();
              }
            } else {
              if (CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL) {
                this.reduceTrees();
                this.graphManager.resetAllNodesToApplyGravitation();
                var allNodes = new Set(this.getAllNodes());
                var intersection = this.nodesWithGravity.filter(function(x) {
                  return allNodes.has(x);
                });
                this.graphManager.setAllNodesToApplyGravitation(intersection);
              }
            }
            this.initSpringEmbedder();
            this.runSpringEmbedder();
            return true;
          };
          CoSELayout.prototype.tick = function() {
            this.totalIterations++;
            if (this.totalIterations === this.maxIterations && !this.isTreeGrowing && !this.isGrowthFinished) {
              if (this.prunedNodesAll.length > 0) {
                this.isTreeGrowing = true;
              } else {
                return true;
              }
            }
            if (this.totalIterations % FDLayoutConstants.CONVERGENCE_CHECK_PERIOD == 0 && !this.isTreeGrowing && !this.isGrowthFinished) {
              if (this.isConverged()) {
                if (this.prunedNodesAll.length > 0) {
                  this.isTreeGrowing = true;
                } else {
                  return true;
                }
              }
              this.coolingCycle++;
              if (this.layoutQuality == 0) {
                this.coolingAdjuster = this.coolingCycle;
              } else if (this.layoutQuality == 1) {
                this.coolingAdjuster = this.coolingCycle / 3;
              }
              this.coolingFactor = Math.max(this.initialCoolingFactor - Math.pow(this.coolingCycle, Math.log(100 * (this.initialCoolingFactor - this.finalTemperature)) / Math.log(this.maxCoolingCycle)) / 100 * this.coolingAdjuster, this.finalTemperature);
              this.animationPeriod = Math.ceil(this.initialAnimationPeriod * Math.sqrt(this.coolingFactor));
            }
            if (this.isTreeGrowing) {
              if (this.growTreeIterations % 10 == 0) {
                if (this.prunedNodesAll.length > 0) {
                  this.graphManager.updateBounds();
                  this.updateGrid();
                  this.growTree(this.prunedNodesAll);
                  this.graphManager.resetAllNodesToApplyGravitation();
                  var allNodes = new Set(this.getAllNodes());
                  var intersection = this.nodesWithGravity.filter(function(x) {
                    return allNodes.has(x);
                  });
                  this.graphManager.setAllNodesToApplyGravitation(intersection);
                  this.graphManager.updateBounds();
                  this.updateGrid();
                  this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;
                } else {
                  this.isTreeGrowing = false;
                  this.isGrowthFinished = true;
                }
              }
              this.growTreeIterations++;
            }
            if (this.isGrowthFinished) {
              if (this.isConverged()) {
                return true;
              }
              if (this.afterGrowthIterations % 10 == 0) {
                this.graphManager.updateBounds();
                this.updateGrid();
              }
              this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL * ((100 - this.afterGrowthIterations) / 100);
              this.afterGrowthIterations++;
            }
            var gridUpdateAllowed = !this.isTreeGrowing && !this.isGrowthFinished;
            var forceToNodeSurroundingUpdate = this.growTreeIterations % 10 == 1 && this.isTreeGrowing || this.afterGrowthIterations % 10 == 1 && this.isGrowthFinished;
            this.totalDisplacement = 0;
            this.graphManager.updateBounds();
            this.calcSpringForces();
            this.calcRepulsionForces(gridUpdateAllowed, forceToNodeSurroundingUpdate);
            this.calcGravitationalForces();
            this.moveNodes();
            this.animate();
            return false;
          };
          CoSELayout.prototype.getPositionsData = function() {
            var allNodes = this.graphManager.getAllNodes();
            var pData = {};
            for (var i = 0; i < allNodes.length; i++) {
              var rect = allNodes[i].rect;
              var id = allNodes[i].id;
              pData[id] = {
                id,
                x: rect.getCenterX(),
                y: rect.getCenterY(),
                w: rect.width,
                h: rect.height
              };
            }
            return pData;
          };
          CoSELayout.prototype.runSpringEmbedder = function() {
            this.initialAnimationPeriod = 25;
            this.animationPeriod = this.initialAnimationPeriod;
            var layoutEnded = false;
            if (FDLayoutConstants.ANIMATE === "during") {
              this.emit("layoutstarted");
            } else {
              while (!layoutEnded) {
                layoutEnded = this.tick();
              }
              this.graphManager.updateBounds();
            }
          };
          CoSELayout.prototype.calculateNodesToApplyGravitationTo = function() {
            var nodeList = [];
            var graph;
            var graphs = this.graphManager.getGraphs();
            var size = graphs.length;
            var i;
            for (i = 0; i < size; i++) {
              graph = graphs[i];
              graph.updateConnected();
              if (!graph.isConnected) {
                nodeList = nodeList.concat(graph.getNodes());
              }
            }
            return nodeList;
          };
          CoSELayout.prototype.createBendpoints = function() {
            var edges = [];
            edges = edges.concat(this.graphManager.getAllEdges());
            var visited = new Set();
            var i;
            for (i = 0; i < edges.length; i++) {
              var edge = edges[i];
              if (!visited.has(edge)) {
                var source = edge.getSource();
                var target = edge.getTarget();
                if (source == target) {
                  edge.getBendpoints().push(new PointD());
                  edge.getBendpoints().push(new PointD());
                  this.createDummyNodesForBendpoints(edge);
                  visited.add(edge);
                } else {
                  var edgeList = [];
                  edgeList = edgeList.concat(source.getEdgeListToNode(target));
                  edgeList = edgeList.concat(target.getEdgeListToNode(source));
                  if (!visited.has(edgeList[0])) {
                    if (edgeList.length > 1) {
                      var k;
                      for (k = 0; k < edgeList.length; k++) {
                        var multiEdge = edgeList[k];
                        multiEdge.getBendpoints().push(new PointD());
                        this.createDummyNodesForBendpoints(multiEdge);
                      }
                    }
                    edgeList.forEach(function(edge2) {
                      visited.add(edge2);
                    });
                  }
                }
              }
              if (visited.size == edges.length) {
                break;
              }
            }
          };
          CoSELayout.prototype.positionNodesRadially = function(forest) {
            var currentStartingPoint = new Point2(0, 0);
            var numberOfColumns = Math.ceil(Math.sqrt(forest.length));
            var height = 0;
            var currentY = 0;
            var currentX = 0;
            var point = new PointD(0, 0);
            for (var i = 0; i < forest.length; i++) {
              if (i % numberOfColumns == 0) {
                currentX = 0;
                currentY = height;
                if (i != 0) {
                  currentY += CoSEConstants.DEFAULT_COMPONENT_SEPERATION;
                }
                height = 0;
              }
              var tree = forest[i];
              var centerNode = Layout2.findCenterOfTree(tree);
              currentStartingPoint.x = currentX;
              currentStartingPoint.y = currentY;
              point = CoSELayout.radialLayout(tree, centerNode, currentStartingPoint);
              if (point.y > height) {
                height = Math.floor(point.y);
              }
              currentX = Math.floor(point.x + CoSEConstants.DEFAULT_COMPONENT_SEPERATION);
            }
            this.transform(new PointD(LayoutConstants.WORLD_CENTER_X - point.x / 2, LayoutConstants.WORLD_CENTER_Y - point.y / 2));
          };
          CoSELayout.radialLayout = function(tree, centerNode, startingPoint) {
            var radialSep = Math.max(this.maxDiagonalInTree(tree), CoSEConstants.DEFAULT_RADIAL_SEPARATION);
            CoSELayout.branchRadialLayout(centerNode, null, 0, 359, 0, radialSep);
            var bounds = LGraph.calculateBounds(tree);
            var transform = new Transform();
            transform.setDeviceOrgX(bounds.getMinX());
            transform.setDeviceOrgY(bounds.getMinY());
            transform.setWorldOrgX(startingPoint.x);
            transform.setWorldOrgY(startingPoint.y);
            for (var i = 0; i < tree.length; i++) {
              var node = tree[i];
              node.transform(transform);
            }
            var bottomRight = new PointD(bounds.getMaxX(), bounds.getMaxY());
            return transform.inverseTransformPoint(bottomRight);
          };
          CoSELayout.branchRadialLayout = function(node, parentOfNode, startAngle, endAngle, distance, radialSeparation) {
            var halfInterval = (endAngle - startAngle + 1) / 2;
            if (halfInterval < 0) {
              halfInterval += 180;
            }
            var nodeAngle = (halfInterval + startAngle) % 360;
            var teta = nodeAngle * IGeometry.TWO_PI / 360;
            var cos_teta = Math.cos(teta);
            var x_ = distance * Math.cos(teta);
            var y_ = distance * Math.sin(teta);
            node.setCenter(x_, y_);
            var neighborEdges = [];
            neighborEdges = neighborEdges.concat(node.getEdges());
            var childCount = neighborEdges.length;
            if (parentOfNode != null) {
              childCount--;
            }
            var branchCount = 0;
            var incEdgesCount = neighborEdges.length;
            var startIndex;
            var edges = node.getEdgesBetween(parentOfNode);
            while (edges.length > 1) {
              var temp = edges[0];
              edges.splice(0, 1);
              var index = neighborEdges.indexOf(temp);
              if (index >= 0) {
                neighborEdges.splice(index, 1);
              }
              incEdgesCount--;
              childCount--;
            }
            if (parentOfNode != null) {
              startIndex = (neighborEdges.indexOf(edges[0]) + 1) % incEdgesCount;
            } else {
              startIndex = 0;
            }
            var stepAngle = Math.abs(endAngle - startAngle) / childCount;
            for (var i = startIndex; branchCount != childCount; i = ++i % incEdgesCount) {
              var currentNeighbor = neighborEdges[i].getOtherEnd(node);
              if (currentNeighbor == parentOfNode) {
                continue;
              }
              var childStartAngle = (startAngle + branchCount * stepAngle) % 360;
              var childEndAngle = (childStartAngle + stepAngle) % 360;
              CoSELayout.branchRadialLayout(currentNeighbor, node, childStartAngle, childEndAngle, distance + radialSeparation, radialSeparation);
              branchCount++;
            }
          };
          CoSELayout.maxDiagonalInTree = function(tree) {
            var maxDiagonal = Integer.MIN_VALUE;
            for (var i = 0; i < tree.length; i++) {
              var node = tree[i];
              var diagonal = node.getDiagonal();
              if (diagonal > maxDiagonal) {
                maxDiagonal = diagonal;
              }
            }
            return maxDiagonal;
          };
          CoSELayout.prototype.calcRepulsionRange = function() {
            return 2 * (this.level + 1) * this.idealEdgeLength;
          };
          CoSELayout.prototype.groupZeroDegreeMembers = function() {
            var self2 = this;
            var tempMemberGroups = {};
            this.memberGroups = {};
            this.idToDummyNode = {};
            var zeroDegree = [];
            var allNodes = this.graphManager.getAllNodes();
            for (var i = 0; i < allNodes.length; i++) {
              var node = allNodes[i];
              var parent = node.getParent();
              if (this.getNodeDegreeWithChildren(node) === 0 && (parent.id == void 0 || !this.getToBeTiled(parent))) {
                zeroDegree.push(node);
              }
            }
            for (var i = 0; i < zeroDegree.length; i++) {
              var node = zeroDegree[i];
              var p_id = node.getParent().id;
              if (typeof tempMemberGroups[p_id] === "undefined")
                tempMemberGroups[p_id] = [];
              tempMemberGroups[p_id] = tempMemberGroups[p_id].concat(node);
            }
            Object.keys(tempMemberGroups).forEach(function(p_id2) {
              if (tempMemberGroups[p_id2].length > 1) {
                var dummyCompoundId = "DummyCompound_" + p_id2;
                self2.memberGroups[dummyCompoundId] = tempMemberGroups[p_id2];
                var parent2 = tempMemberGroups[p_id2][0].getParent();
                var dummyCompound = new CoSENode(self2.graphManager);
                dummyCompound.id = dummyCompoundId;
                dummyCompound.paddingLeft = parent2.paddingLeft || 0;
                dummyCompound.paddingRight = parent2.paddingRight || 0;
                dummyCompound.paddingBottom = parent2.paddingBottom || 0;
                dummyCompound.paddingTop = parent2.paddingTop || 0;
                self2.idToDummyNode[dummyCompoundId] = dummyCompound;
                var dummyParentGraph = self2.getGraphManager().add(self2.newGraph(), dummyCompound);
                var parentGraph = parent2.getChild();
                parentGraph.add(dummyCompound);
                for (var i2 = 0; i2 < tempMemberGroups[p_id2].length; i2++) {
                  var node2 = tempMemberGroups[p_id2][i2];
                  parentGraph.remove(node2);
                  dummyParentGraph.add(node2);
                }
              }
            });
          };
          CoSELayout.prototype.clearCompounds = function() {
            var childGraphMap = {};
            var idToNode = {};
            this.performDFSOnCompounds();
            for (var i = 0; i < this.compoundOrder.length; i++) {
              idToNode[this.compoundOrder[i].id] = this.compoundOrder[i];
              childGraphMap[this.compoundOrder[i].id] = [].concat(this.compoundOrder[i].getChild().getNodes());
              this.graphManager.remove(this.compoundOrder[i].getChild());
              this.compoundOrder[i].child = null;
            }
            this.graphManager.resetAllNodes();
            this.tileCompoundMembers(childGraphMap, idToNode);
          };
          CoSELayout.prototype.clearZeroDegreeMembers = function() {
            var self2 = this;
            var tiledZeroDegreePack = this.tiledZeroDegreePack = [];
            Object.keys(this.memberGroups).forEach(function(id) {
              var compoundNode = self2.idToDummyNode[id];
              tiledZeroDegreePack[id] = self2.tileNodes(self2.memberGroups[id], compoundNode.paddingLeft + compoundNode.paddingRight);
              compoundNode.rect.width = tiledZeroDegreePack[id].width;
              compoundNode.rect.height = tiledZeroDegreePack[id].height;
            });
          };
          CoSELayout.prototype.repopulateCompounds = function() {
            for (var i = this.compoundOrder.length - 1; i >= 0; i--) {
              var lCompoundNode = this.compoundOrder[i];
              var id = lCompoundNode.id;
              var horizontalMargin = lCompoundNode.paddingLeft;
              var verticalMargin = lCompoundNode.paddingTop;
              this.adjustLocations(this.tiledMemberPack[id], lCompoundNode.rect.x, lCompoundNode.rect.y, horizontalMargin, verticalMargin);
            }
          };
          CoSELayout.prototype.repopulateZeroDegreeMembers = function() {
            var self2 = this;
            var tiledPack = this.tiledZeroDegreePack;
            Object.keys(tiledPack).forEach(function(id) {
              var compoundNode = self2.idToDummyNode[id];
              var horizontalMargin = compoundNode.paddingLeft;
              var verticalMargin = compoundNode.paddingTop;
              self2.adjustLocations(tiledPack[id], compoundNode.rect.x, compoundNode.rect.y, horizontalMargin, verticalMargin);
            });
          };
          CoSELayout.prototype.getToBeTiled = function(node) {
            var id = node.id;
            if (this.toBeTiled[id] != null) {
              return this.toBeTiled[id];
            }
            var childGraph = node.getChild();
            if (childGraph == null) {
              this.toBeTiled[id] = false;
              return false;
            }
            var children = childGraph.getNodes();
            for (var i = 0; i < children.length; i++) {
              var theChild = children[i];
              if (this.getNodeDegree(theChild) > 0) {
                this.toBeTiled[id] = false;
                return false;
              }
              if (theChild.getChild() == null) {
                this.toBeTiled[theChild.id] = false;
                continue;
              }
              if (!this.getToBeTiled(theChild)) {
                this.toBeTiled[id] = false;
                return false;
              }
            }
            this.toBeTiled[id] = true;
            return true;
          };
          CoSELayout.prototype.getNodeDegree = function(node) {
            var id = node.id;
            var edges = node.getEdges();
            var degree = 0;
            for (var i = 0; i < edges.length; i++) {
              var edge = edges[i];
              if (edge.getSource().id !== edge.getTarget().id) {
                degree = degree + 1;
              }
            }
            return degree;
          };
          CoSELayout.prototype.getNodeDegreeWithChildren = function(node) {
            var degree = this.getNodeDegree(node);
            if (node.getChild() == null) {
              return degree;
            }
            var children = node.getChild().getNodes();
            for (var i = 0; i < children.length; i++) {
              var child = children[i];
              degree += this.getNodeDegreeWithChildren(child);
            }
            return degree;
          };
          CoSELayout.prototype.performDFSOnCompounds = function() {
            this.compoundOrder = [];
            this.fillCompexOrderByDFS(this.graphManager.getRoot().getNodes());
          };
          CoSELayout.prototype.fillCompexOrderByDFS = function(children) {
            for (var i = 0; i < children.length; i++) {
              var child = children[i];
              if (child.getChild() != null) {
                this.fillCompexOrderByDFS(child.getChild().getNodes());
              }
              if (this.getToBeTiled(child)) {
                this.compoundOrder.push(child);
              }
            }
          };
          CoSELayout.prototype.adjustLocations = function(organization, x, y, compoundHorizontalMargin, compoundVerticalMargin) {
            x += compoundHorizontalMargin;
            y += compoundVerticalMargin;
            var left = x;
            for (var i = 0; i < organization.rows.length; i++) {
              var row = organization.rows[i];
              x = left;
              var maxHeight = 0;
              for (var j = 0; j < row.length; j++) {
                var lnode = row[j];
                lnode.rect.x = x;
                lnode.rect.y = y;
                x += lnode.rect.width + organization.horizontalPadding;
                if (lnode.rect.height > maxHeight)
                  maxHeight = lnode.rect.height;
              }
              y += maxHeight + organization.verticalPadding;
            }
          };
          CoSELayout.prototype.tileCompoundMembers = function(childGraphMap, idToNode) {
            var self2 = this;
            this.tiledMemberPack = [];
            Object.keys(childGraphMap).forEach(function(id) {
              var compoundNode = idToNode[id];
              self2.tiledMemberPack[id] = self2.tileNodes(childGraphMap[id], compoundNode.paddingLeft + compoundNode.paddingRight);
              compoundNode.rect.width = self2.tiledMemberPack[id].width;
              compoundNode.rect.height = self2.tiledMemberPack[id].height;
            });
          };
          CoSELayout.prototype.tileNodes = function(nodes, minWidth) {
            var verticalPadding = CoSEConstants.TILING_PADDING_VERTICAL;
            var horizontalPadding = CoSEConstants.TILING_PADDING_HORIZONTAL;
            var organization = {
              rows: [],
              rowWidth: [],
              rowHeight: [],
              width: 0,
              height: minWidth,
              verticalPadding,
              horizontalPadding
            };
            nodes.sort(function(n1, n2) {
              if (n1.rect.width * n1.rect.height > n2.rect.width * n2.rect.height)
                return -1;
              if (n1.rect.width * n1.rect.height < n2.rect.width * n2.rect.height)
                return 1;
              return 0;
            });
            for (var i = 0; i < nodes.length; i++) {
              var lNode = nodes[i];
              if (organization.rows.length == 0) {
                this.insertNodeToRow(organization, lNode, 0, minWidth);
              } else if (this.canAddHorizontal(organization, lNode.rect.width, lNode.rect.height)) {
                this.insertNodeToRow(organization, lNode, this.getShortestRowIndex(organization), minWidth);
              } else {
                this.insertNodeToRow(organization, lNode, organization.rows.length, minWidth);
              }
              this.shiftToLastRow(organization);
            }
            return organization;
          };
          CoSELayout.prototype.insertNodeToRow = function(organization, node, rowIndex, minWidth) {
            var minCompoundSize = minWidth;
            if (rowIndex == organization.rows.length) {
              var secondDimension = [];
              organization.rows.push(secondDimension);
              organization.rowWidth.push(minCompoundSize);
              organization.rowHeight.push(0);
            }
            var w = organization.rowWidth[rowIndex] + node.rect.width;
            if (organization.rows[rowIndex].length > 0) {
              w += organization.horizontalPadding;
            }
            organization.rowWidth[rowIndex] = w;
            if (organization.width < w) {
              organization.width = w;
            }
            var h = node.rect.height;
            if (rowIndex > 0)
              h += organization.verticalPadding;
            var extraHeight = 0;
            if (h > organization.rowHeight[rowIndex]) {
              extraHeight = organization.rowHeight[rowIndex];
              organization.rowHeight[rowIndex] = h;
              extraHeight = organization.rowHeight[rowIndex] - extraHeight;
            }
            organization.height += extraHeight;
            organization.rows[rowIndex].push(node);
          };
          CoSELayout.prototype.getShortestRowIndex = function(organization) {
            var r = -1;
            var min = Number.MAX_VALUE;
            for (var i = 0; i < organization.rows.length; i++) {
              if (organization.rowWidth[i] < min) {
                r = i;
                min = organization.rowWidth[i];
              }
            }
            return r;
          };
          CoSELayout.prototype.getLongestRowIndex = function(organization) {
            var r = -1;
            var max = Number.MIN_VALUE;
            for (var i = 0; i < organization.rows.length; i++) {
              if (organization.rowWidth[i] > max) {
                r = i;
                max = organization.rowWidth[i];
              }
            }
            return r;
          };
          CoSELayout.prototype.canAddHorizontal = function(organization, extraWidth, extraHeight) {
            var sri = this.getShortestRowIndex(organization);
            if (sri < 0) {
              return true;
            }
            var min = organization.rowWidth[sri];
            if (min + organization.horizontalPadding + extraWidth <= organization.width)
              return true;
            var hDiff = 0;
            if (organization.rowHeight[sri] < extraHeight) {
              if (sri > 0)
                hDiff = extraHeight + organization.verticalPadding - organization.rowHeight[sri];
            }
            var add_to_row_ratio;
            if (organization.width - min >= extraWidth + organization.horizontalPadding) {
              add_to_row_ratio = (organization.height + hDiff) / (min + extraWidth + organization.horizontalPadding);
            } else {
              add_to_row_ratio = (organization.height + hDiff) / organization.width;
            }
            hDiff = extraHeight + organization.verticalPadding;
            var add_new_row_ratio;
            if (organization.width < extraWidth) {
              add_new_row_ratio = (organization.height + hDiff) / extraWidth;
            } else {
              add_new_row_ratio = (organization.height + hDiff) / organization.width;
            }
            if (add_new_row_ratio < 1)
              add_new_row_ratio = 1 / add_new_row_ratio;
            if (add_to_row_ratio < 1)
              add_to_row_ratio = 1 / add_to_row_ratio;
            return add_to_row_ratio < add_new_row_ratio;
          };
          CoSELayout.prototype.shiftToLastRow = function(organization) {
            var longest = this.getLongestRowIndex(organization);
            var last = organization.rowWidth.length - 1;
            var row = organization.rows[longest];
            var node = row[row.length - 1];
            var diff = node.width + organization.horizontalPadding;
            if (organization.width - organization.rowWidth[last] > diff && longest != last) {
              row.splice(-1, 1);
              organization.rows[last].push(node);
              organization.rowWidth[longest] = organization.rowWidth[longest] - diff;
              organization.rowWidth[last] = organization.rowWidth[last] + diff;
              organization.width = organization.rowWidth[instance.getLongestRowIndex(organization)];
              var maxHeight = Number.MIN_VALUE;
              for (var i = 0; i < row.length; i++) {
                if (row[i].height > maxHeight)
                  maxHeight = row[i].height;
              }
              if (longest > 0)
                maxHeight += organization.verticalPadding;
              var prevTotal = organization.rowHeight[longest] + organization.rowHeight[last];
              organization.rowHeight[longest] = maxHeight;
              if (organization.rowHeight[last] < node.height + organization.verticalPadding)
                organization.rowHeight[last] = node.height + organization.verticalPadding;
              var finalTotal = organization.rowHeight[longest] + organization.rowHeight[last];
              organization.height += finalTotal - prevTotal;
              this.shiftToLastRow(organization);
            }
          };
          CoSELayout.prototype.tilingPreLayout = function() {
            if (CoSEConstants.TILE) {
              this.groupZeroDegreeMembers();
              this.clearCompounds();
              this.clearZeroDegreeMembers();
            }
          };
          CoSELayout.prototype.tilingPostLayout = function() {
            if (CoSEConstants.TILE) {
              this.repopulateZeroDegreeMembers();
              this.repopulateCompounds();
            }
          };
          CoSELayout.prototype.reduceTrees = function() {
            var prunedNodesAll = [];
            var containsLeaf = true;
            var node;
            while (containsLeaf) {
              var allNodes = this.graphManager.getAllNodes();
              var prunedNodesInStepTemp = [];
              containsLeaf = false;
              for (var i = 0; i < allNodes.length; i++) {
                node = allNodes[i];
                if (node.getEdges().length == 1 && !node.getEdges()[0].isInterGraph && node.getChild() == null) {
                  prunedNodesInStepTemp.push([node, node.getEdges()[0], node.getOwner()]);
                  containsLeaf = true;
                }
              }
              if (containsLeaf == true) {
                var prunedNodesInStep = [];
                for (var j = 0; j < prunedNodesInStepTemp.length; j++) {
                  if (prunedNodesInStepTemp[j][0].getEdges().length == 1) {
                    prunedNodesInStep.push(prunedNodesInStepTemp[j]);
                    prunedNodesInStepTemp[j][0].getOwner().remove(prunedNodesInStepTemp[j][0]);
                  }
                }
                prunedNodesAll.push(prunedNodesInStep);
                this.graphManager.resetAllNodes();
                this.graphManager.resetAllEdges();
              }
            }
            this.prunedNodesAll = prunedNodesAll;
          };
          CoSELayout.prototype.growTree = function(prunedNodesAll) {
            var lengthOfPrunedNodesInStep = prunedNodesAll.length;
            var prunedNodesInStep = prunedNodesAll[lengthOfPrunedNodesInStep - 1];
            var nodeData;
            for (var i = 0; i < prunedNodesInStep.length; i++) {
              nodeData = prunedNodesInStep[i];
              this.findPlaceforPrunedNode(nodeData);
              nodeData[2].add(nodeData[0]);
              nodeData[2].add(nodeData[1], nodeData[1].source, nodeData[1].target);
            }
            prunedNodesAll.splice(prunedNodesAll.length - 1, 1);
            this.graphManager.resetAllNodes();
            this.graphManager.resetAllEdges();
          };
          CoSELayout.prototype.findPlaceforPrunedNode = function(nodeData) {
            var gridForPrunedNode;
            var nodeToConnect;
            var prunedNode = nodeData[0];
            if (prunedNode == nodeData[1].source) {
              nodeToConnect = nodeData[1].target;
            } else {
              nodeToConnect = nodeData[1].source;
            }
            var startGridX = nodeToConnect.startX;
            var finishGridX = nodeToConnect.finishX;
            var startGridY = nodeToConnect.startY;
            var finishGridY = nodeToConnect.finishY;
            var upNodeCount = 0;
            var downNodeCount = 0;
            var rightNodeCount = 0;
            var leftNodeCount = 0;
            var controlRegions = [upNodeCount, rightNodeCount, downNodeCount, leftNodeCount];
            if (startGridY > 0) {
              for (var i = startGridX; i <= finishGridX; i++) {
                controlRegions[0] += this.grid[i][startGridY - 1].length + this.grid[i][startGridY].length - 1;
              }
            }
            if (finishGridX < this.grid.length - 1) {
              for (var i = startGridY; i <= finishGridY; i++) {
                controlRegions[1] += this.grid[finishGridX + 1][i].length + this.grid[finishGridX][i].length - 1;
              }
            }
            if (finishGridY < this.grid[0].length - 1) {
              for (var i = startGridX; i <= finishGridX; i++) {
                controlRegions[2] += this.grid[i][finishGridY + 1].length + this.grid[i][finishGridY].length - 1;
              }
            }
            if (startGridX > 0) {
              for (var i = startGridY; i <= finishGridY; i++) {
                controlRegions[3] += this.grid[startGridX - 1][i].length + this.grid[startGridX][i].length - 1;
              }
            }
            var min = Integer.MAX_VALUE;
            var minCount;
            var minIndex;
            for (var j = 0; j < controlRegions.length; j++) {
              if (controlRegions[j] < min) {
                min = controlRegions[j];
                minCount = 1;
                minIndex = j;
              } else if (controlRegions[j] == min) {
                minCount++;
              }
            }
            if (minCount == 3 && min == 0) {
              if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[2] == 0) {
                gridForPrunedNode = 1;
              } else if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[3] == 0) {
                gridForPrunedNode = 0;
              } else if (controlRegions[0] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {
                gridForPrunedNode = 3;
              } else if (controlRegions[1] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {
                gridForPrunedNode = 2;
              }
            } else if (minCount == 2 && min == 0) {
              var random = Math.floor(Math.random() * 2);
              if (controlRegions[0] == 0 && controlRegions[1] == 0) {
                ;
                if (random == 0) {
                  gridForPrunedNode = 0;
                } else {
                  gridForPrunedNode = 1;
                }
              } else if (controlRegions[0] == 0 && controlRegions[2] == 0) {
                if (random == 0) {
                  gridForPrunedNode = 0;
                } else {
                  gridForPrunedNode = 2;
                }
              } else if (controlRegions[0] == 0 && controlRegions[3] == 0) {
                if (random == 0) {
                  gridForPrunedNode = 0;
                } else {
                  gridForPrunedNode = 3;
                }
              } else if (controlRegions[1] == 0 && controlRegions[2] == 0) {
                if (random == 0) {
                  gridForPrunedNode = 1;
                } else {
                  gridForPrunedNode = 2;
                }
              } else if (controlRegions[1] == 0 && controlRegions[3] == 0) {
                if (random == 0) {
                  gridForPrunedNode = 1;
                } else {
                  gridForPrunedNode = 3;
                }
              } else {
                if (random == 0) {
                  gridForPrunedNode = 2;
                } else {
                  gridForPrunedNode = 3;
                }
              }
            } else if (minCount == 4 && min == 0) {
              var random = Math.floor(Math.random() * 4);
              gridForPrunedNode = random;
            } else {
              gridForPrunedNode = minIndex;
            }
            if (gridForPrunedNode == 0) {
              prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() - nodeToConnect.getHeight() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getHeight() / 2);
            } else if (gridForPrunedNode == 1) {
              prunedNode.setCenter(nodeToConnect.getCenterX() + nodeToConnect.getWidth() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getWidth() / 2, nodeToConnect.getCenterY());
            } else if (gridForPrunedNode == 2) {
              prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() + nodeToConnect.getHeight() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getHeight() / 2);
            } else {
              prunedNode.setCenter(nodeToConnect.getCenterX() - nodeToConnect.getWidth() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getWidth() / 2, nodeToConnect.getCenterY());
            }
          };
          module2.exports = CoSELayout;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var coseBase = {};
          coseBase.layoutBase = __webpack_require__(0);
          coseBase.CoSEConstants = __webpack_require__(1);
          coseBase.CoSEEdge = __webpack_require__(2);
          coseBase.CoSEGraph = __webpack_require__(3);
          coseBase.CoSEGraphManager = __webpack_require__(4);
          coseBase.CoSELayout = __webpack_require__(6);
          coseBase.CoSENode = __webpack_require__(5);
          module2.exports = coseBase;
        }
      ]);
    });
  });

  // node_modules/cytoscape-cise/cytoscape-cise.js
  var require_cytoscape_cise = __commonJS((exports, module) => {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory(require_avsdf_base(), require_cose_base());
      else if (typeof define === "function" && define.amd)
        define(["avsdf-base", "cose-base"], factory);
      else if (typeof exports === "object")
        exports["cytoscapeCise"] = factory(require_avsdf_base(), require_cose_base());
      else
        root["cytoscapeCise"] = factory(root["avsdfBase"], root["coseBase"]);
    })(exports, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_3__) {
      return function(modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
          if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
          }
          var module2 = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
          };
          modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
          module2.l = true;
          return module2.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.i = function(value) {
          return value;
        };
        __webpack_require__.d = function(exports2, name, getter) {
          if (!__webpack_require__.o(exports2, name)) {
            Object.defineProperty(exports2, name, {
              configurable: false,
              enumerable: true,
              get: getter
            });
          }
        };
        __webpack_require__.n = function(module2) {
          var getter = module2 && module2.__esModule ? function getDefault() {
            return module2["default"];
          } : function getModuleExports() {
            return module2;
          };
          __webpack_require__.d(getter, "a", getter);
          return getter;
        };
        __webpack_require__.o = function(object, property) {
          return Object.prototype.hasOwnProperty.call(object, property);
        };
        __webpack_require__.p = "";
        return __webpack_require__(__webpack_require__.s = 15);
      }([
        function(module2, exports2) {
          module2.exports = __WEBPACK_EXTERNAL_MODULE_0__;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var FDLayoutConstants = __webpack_require__(0).layoutBase.FDLayoutConstants;
          function CiSEConstants() {
          }
          for (var prop in FDLayoutConstants) {
            CiSEConstants[prop] = FDLayoutConstants[prop];
          }
          CiSEConstants.DEFAULT_SPRING_STRENGTH = 1.5 * FDLayoutConstants.DEFAULT_SPRING_STRENGTH;
          CiSEConstants.DEFAULT_NODE_SEPARATION = FDLayoutConstants.DEFAULT_EDGE_LENGTH / 4;
          CiSEConstants.DEFAULT_IDEAL_INTER_CLUSTER_EDGE_LENGTH_COEFF = 1.4;
          CiSEConstants.DEFAULT_ALLOW_NODES_INSIDE_CIRCLE = false;
          CiSEConstants.DEFAULT_MAX_RATIO_OF_NODES_INSIDE_CIRCLE = 0.1;
          CiSEConstants.DEFAULT_INNER_EDGE_LENGTH = FDLayoutConstants.DEFAULT_EDGE_LENGTH / 3;
          CiSEConstants.MAX_ROTATION_ANGLE = Math.PI / 36;
          CiSEConstants.MIN_ROTATION_ANGLE = -CiSEConstants.MAX_ROTATION_ANGLE;
          CiSEConstants.SWAP_IDLE_DURATION = 45;
          CiSEConstants.SWAP_PREPERATION_DURATION = 5;
          CiSEConstants.SWAP_PERIOD = CiSEConstants.SWAP_IDLE_DURATION + CiSEConstants.SWAP_PREPERATION_DURATION;
          CiSEConstants.SWAP_HISTORY_CLEARANCE_PERIOD = 6 * CiSEConstants.SWAP_PERIOD;
          CiSEConstants.MIN_DISPLACEMENT_FOR_SWAP = 6;
          CiSEConstants.REVERSE_PERIOD = 25;
          module2.exports = CiSEConstants;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          module2.exports = Object.assign != null ? Object.assign.bind(Object) : function(tgt) {
            for (var _len = arguments.length, srcs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              srcs[_key - 1] = arguments[_key];
            }
            srcs.forEach(function(src) {
              Object.keys(src).forEach(function(k) {
                return tgt[k] = src[k];
              });
            });
            return tgt;
          };
        },
        function(module2, exports2) {
          module2.exports = __WEBPACK_EXTERNAL_MODULE_3__;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          module2.exports = __webpack_require__(16);
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var LGraph = __webpack_require__(0).layoutBase.LGraph;
          var IGeometry = __webpack_require__(0).layoutBase.IGeometry;
          var NeedlemanWunsch = __webpack_require__(0).layoutBase.NeedlemanWunsch;
          var CircularForce = __webpack_require__(14);
          var CiSEConstants = __webpack_require__(1);
          var CiSEInterClusterEdgeInfo = __webpack_require__(8);
          var CiSEInterClusterEdgeSort = __webpack_require__(9);
          function CiSECircle(parent, graphMgr, vNode) {
            LGraph.call(this, parent, graphMgr, vNode);
            this.intraClusterEdges = null;
            this.interClusterEdges = null;
            this.inNodes = [];
            this.outNodes = [];
            this.onCircleNodes = [];
            this.inCircleNodes = [];
            this.radius = 0;
            this.orderMatrix = null;
            this.mayBeReversed = true;
          }
          CiSECircle.prototype = Object.create(LGraph.prototype);
          for (var prop in LGraph) {
            CiSECircle[prop] = LGraph[prop];
          }
          CiSECircle.prototype.setRadius = function(radius) {
            this.radius = radius;
          };
          CiSECircle.prototype.getRadius = function() {
            return this.radius;
          };
          CiSECircle.prototype.getInNodes = function() {
            return this.inNodes;
          };
          CiSECircle.prototype.getOutNodes = function() {
            return this.outNodes;
          };
          CiSECircle.prototype.getOnCircleNodes = function() {
            return this.onCircleNodes;
          };
          CiSECircle.prototype.getInCircleNodes = function() {
            return this.inCircleNodes;
          };
          CiSECircle.prototype.setMayNotBeReversed = function() {
            this.mayBeReversed = false;
          };
          CiSECircle.prototype.getMayBeReversed = function() {
            return this.mayBeReversed;
          };
          CiSECircle.prototype.getChildAt = function(index) {
            return this.onCircleNodes[index];
          };
          CiSECircle.prototype.getInterClusterEdges = function() {
            var self2 = this;
            if (this.interClusterEdges === null) {
              this.interClusterEdges = [];
              this.outNodes.forEach(function(node) {
                var edgesToAdd = node.getOnCircleNodeExt().getInterClusterEdges();
                for (var i = 0; i < edgesToAdd.length; i++) {
                  self2.interClusterEdges.push(edgesToAdd[i]);
                }
              });
            }
            return this.interClusterEdges;
          };
          CiSECircle.prototype.getIntraClusterEdges = function() {
            var self2 = this;
            if (this.intraClusterEdges === null) {
              this.intraClusterEdges = [];
              var allEdges = this.getEdges();
              allEdges.forEach(function(edge) {
                if (edge.isIntraEdge())
                  self2.intraClusterEdges.push(edge);
              });
            }
            return this.intraClusterEdges;
          };
          CiSECircle.prototype.calculateParentNodeDimension = function() {
            var self2 = this;
            var maxOnCircleNodeDimension = Number.MIN_SAFE_INTEGER;
            for (var i = 0; i < this.onCircleNodes.length; i++) {
              var node = this.onCircleNodes[i];
              if (node.getWidth() > maxOnCircleNodeDimension) {
                maxOnCircleNodeDimension = node.getWidth();
              }
              if (node.getHeight() > maxOnCircleNodeDimension) {
                maxOnCircleNodeDimension = node.getHeight();
              }
            }
            var dimension = 2 * (self2.radius + self2.margin) + maxOnCircleNodeDimension;
            var parentNode = self2.getParent();
            parentNode.setHeight(dimension);
            parentNode.setWidth(dimension);
          };
          CiSECircle.prototype.computeOrderMatrix = function() {
            var N = this.onCircleNodes.length;
            this.orderMatrix = new Array(N);
            for (var i = 0; i < this.orderMatrix.length; i++) {
              this.orderMatrix[i] = new Array(N);
            }
            for (var _i = 0; _i < N; _i++) {
              for (var j = 0; j < N; j++) {
                if (j > _i) {
                  var angleDiff = this.onCircleNodes[j].getOnCircleNodeExt().getAngle() - this.onCircleNodes[_i].getOnCircleNodeExt().getAngle();
                  if (angleDiff < 0) {
                    angleDiff += IGeometry.TWO_PI;
                  }
                  if (angleDiff <= Math.PI) {
                    this.orderMatrix[_i][j] = true;
                    this.orderMatrix[j][_i] = false;
                  } else {
                    this.orderMatrix[_i][j] = false;
                    this.orderMatrix[j][_i] = true;
                  }
                }
              }
            }
          };
          CiSECircle.prototype.rotate = function() {
            var parentNode = this.getParent();
            var noOfNodes = this.getOnCircleNodes().length;
            var rotationAmount = parentNode.rotationAmount / noOfNodes;
            var layout = this.getGraphManager().getLayout();
            if (rotationAmount !== 0) {
              var theta = rotationAmount / this.radius;
              if (theta > CiSEConstants.MAX_ROTATION_ANGLE)
                theta = CiSEConstants.MAX_ROTATION_ANGLE;
              else if (theta < CiSEConstants.MIN_ROTATION_ANGLE)
                theta = CiSEConstants.MIN_ROTATION_ANGLE;
              for (var i = 0; i < noOfNodes; i++) {
                var onCircleNode = this.getChildAt(i);
                var onCircleNodeExt = onCircleNode.getOnCircleNodeExt();
                onCircleNodeExt.setAngle(onCircleNodeExt.getAngle() + theta);
                onCircleNodeExt.updatePosition();
              }
              layout.totalDisplacement += parentNode.rotationAmount;
              parentNode.rotationAmount = 0;
            }
          };
          CiSECircle.prototype.getOrder = function(nodeA, nodeB) {
            return this.orderMatrix[nodeA.getOnCircleNodeExt().getIndex()][nodeB.getOnCircleNodeExt().getIndex()];
          };
          CiSECircle.prototype.getThisEnd = function(edge) {
            var sourceNode = edge.getSource();
            var targetNode = edge.getTarget();
            if (sourceNode.getOwner() === this)
              return sourceNode;
            else
              return targetNode;
          };
          CiSECircle.prototype.getOtherEnd = function(edge) {
            var sourceNode = edge.getSource();
            var targetNode = edge.getTarget();
            if (sourceNode.getOwner() === this)
              return targetNode;
            else
              return sourceNode;
          };
          CiSECircle.prototype.decomposeForce = function(node) {
            var circularForce = void 0;
            if (node.displacementX !== 0 || node.displacementY !== 0) {
              var ownerNode = this.getParent();
              var Cx = ownerNode.getCenterX();
              var Cy = ownerNode.getCenterY();
              var Nx = node.getCenterX();
              var Ny = node.getCenterY();
              var Fx = node.displacementX;
              var Fy = node.displacementY;
              var C_angle = IGeometry.angleOfVector(Cx, Cy, Nx, Ny);
              var F_angle = IGeometry.angleOfVector(0, 0, Fx, Fy);
              var C_rev_angle = C_angle + Math.PI;
              var isRotationClockwise = void 0;
              if (Math.PI <= C_rev_angle && C_rev_angle < IGeometry.TWO_PI) {
                isRotationClockwise = C_angle <= F_angle && F_angle < C_rev_angle;
              } else {
                C_rev_angle -= IGeometry.TWO_PI;
                isRotationClockwise = !(C_rev_angle <= F_angle && F_angle < C_angle);
              }
              var angle_diff = Math.abs(C_angle - F_angle);
              var F_magnitude = Math.sqrt(Fx * Fx + Fy * Fy);
              var R_magnitude = Math.abs(Math.sin(angle_diff) * F_magnitude);
              if (!isRotationClockwise) {
                R_magnitude = -R_magnitude;
              }
              circularForce = new CircularForce(R_magnitude, Fx, Fy);
            } else {
              circularForce = new CircularForce(0, 0, 0);
            }
            return circularForce;
          };
          CiSECircle.prototype.swapNodes = function(first, second) {
            var smallIndexNode = first;
            var bigIndexNode = second;
            var firstExt = first.getOnCircleNodeExt();
            var secondExt = second.getOnCircleNodeExt();
            if (smallIndexNode.getOnCircleNodeExt().getIndex() > second.getOnCircleNodeExt().getIndex()) {
              smallIndexNode = second;
              bigIndexNode = first;
            }
            if (smallIndexNode.getOnCircleNodeExt().getPrevNode() === bigIndexNode) {
              var tempNode = bigIndexNode;
              bigIndexNode = smallIndexNode;
              smallIndexNode = tempNode;
            }
            var smallIndexNodeExt = smallIndexNode.getOnCircleNodeExt();
            var bigIndexNodeExt = bigIndexNode.getOnCircleNodeExt();
            var smallIndexPrevNode = smallIndexNodeExt.getPrevNode();
            var layout = this.getGraphManager().getLayout();
            var nodeSeparation = layout.getNodeSeparation();
            var angle = (smallIndexPrevNode.getOnCircleNodeExt().getAngle() + (smallIndexPrevNode.getHalfTheDiagonal() + bigIndexNode.getHalfTheDiagonal() + nodeSeparation) / this.radius) % (2 * Math.PI);
            bigIndexNodeExt.setAngle(angle);
            angle = (bigIndexNodeExt.getAngle() + (bigIndexNode.getHalfTheDiagonal() + smallIndexNode.getHalfTheDiagonal() + nodeSeparation) / this.radius) % (2 * Math.PI);
            smallIndexNodeExt.setAngle(angle);
            smallIndexNodeExt.updatePosition();
            bigIndexNodeExt.updatePosition();
            var tempIndex = firstExt.getIndex();
            firstExt.setIndex(secondExt.getIndex());
            secondExt.setIndex(tempIndex);
            this.getOnCircleNodes()[firstExt.getIndex()] = first;
            this.getOnCircleNodes()[secondExt.getIndex()] = second;
            firstExt.updateSwappingConditions();
            secondExt.updateSwappingConditions();
            if (firstExt.getNextNode() === second) {
              firstExt.getPrevNode().getOnCircleNodeExt().updateSwappingConditions();
              secondExt.getNextNode().getOnCircleNodeExt().updateSwappingConditions();
            } else {
              firstExt.getNextNode().getOnCircleNodeExt().updateSwappingConditions();
              secondExt.getPrevNode().getOnCircleNodeExt().updateSwappingConditions();
            }
          };
          CiSECircle.prototype.checkAndReverseIfReverseIsBetter = function() {
            var interClusterEdges = this.getInterClusterEdges();
            var interClusterEdgeInfos = new Array(interClusterEdges.length);
            var angle = void 0;
            var clusterCenter = this.getParent().getCenter();
            var interClusterEdge = void 0;
            var endInThisCluster = void 0;
            var endInOtherCluster = void 0;
            var centerOfEndInOtherCluster = void 0;
            var nodeCount = this.onCircleNodes.length;
            var interClusterEdgeDegree = new Array(nodeCount);
            for (var i = 0; i < nodeCount; i++) {
              interClusterEdgeDegree[i] = 0;
            }
            var noOfOnCircleNodesToBeRepeated = 0;
            for (var _i2 = 0; _i2 < interClusterEdges.length; _i2++) {
              interClusterEdge = interClusterEdges[_i2];
              endInOtherCluster = this.getOtherEnd(interClusterEdge);
              centerOfEndInOtherCluster = endInOtherCluster.getCenter();
              angle = IGeometry.angleOfVector(clusterCenter.x, clusterCenter.y, centerOfEndInOtherCluster.x, centerOfEndInOtherCluster.y);
              interClusterEdgeInfos[_i2] = new CiSEInterClusterEdgeInfo(interClusterEdge, angle);
              endInThisCluster = this.getThisEnd(interClusterEdge);
              interClusterEdgeDegree[endInThisCluster.getOnCircleNodeExt().getIndex()]++;
              if (interClusterEdgeDegree[endInThisCluster.getOnCircleNodeExt().getIndex()] > 1) {
                noOfOnCircleNodesToBeRepeated++;
              }
            }
            var onCircleNodes = this.onCircleNodes;
            var nodeCountWithRepetitions = nodeCount + noOfOnCircleNodesToBeRepeated;
            var clusterNodes = new Array(2 * nodeCountWithRepetitions);
            var reversedClusterNodes = new Array(2 * nodeCountWithRepetitions);
            var node = void 0;
            var index = -1;
            for (var _i3 = 0; _i3 < nodeCount; _i3++) {
              node = onCircleNodes[_i3];
              if (interClusterEdgeDegree[_i3] === 0)
                interClusterEdgeDegree[_i3] = 1;
              for (var j = 0; j < interClusterEdgeDegree[_i3]; j++) {
                index++;
                clusterNodes[index] = clusterNodes[nodeCountWithRepetitions + index] = reversedClusterNodes[nodeCountWithRepetitions - 1 - index] = reversedClusterNodes[2 * nodeCountWithRepetitions - 1 - index] = node.getOnCircleNodeExt().getCharCode();
              }
            }
            var edgeSorter = new CiSEInterClusterEdgeSort(this, interClusterEdgeInfos);
            var neighborNodes = new Array(interClusterEdgeInfos.length);
            for (var _i4 = 0; _i4 < interClusterEdgeInfos.length; _i4++) {
              interClusterEdge = interClusterEdgeInfos[_i4].getEdge();
              endInThisCluster = this.getThisEnd(interClusterEdge);
              neighborNodes[_i4] = endInThisCluster.getOnCircleNodeExt().getCharCode();
            }
            var alignmentScoreCurrent = this.computeAlignmentScore(clusterNodes, neighborNodes);
            if (alignmentScoreCurrent !== -1) {
              var alignmentScoreReversed = this.computeAlignmentScore(reversedClusterNodes, neighborNodes);
              if (alignmentScoreReversed !== -1) {
                if (alignmentScoreReversed > alignmentScoreCurrent) {
                  this.reverseNodes();
                  this.setMayNotBeReversed();
                  return true;
                }
              }
            }
            return false;
          };
          CiSECircle.prototype.computeAlignmentScore = function(charArrayReader1, charArrayReader2) {
            var aligner = new NeedlemanWunsch(charArrayReader1, charArrayReader2, 20, -1, -2);
            return aligner.getScore();
          };
          CiSECircle.prototype.reverseNodes = function() {
            var onCircleNodes = this.getOnCircleNodes();
            var noOfNodesOnCircle = this.getOnCircleNodes().length;
            for (var i = 0; i < noOfNodesOnCircle; i++) {
              var node = onCircleNodes[i];
              var nodeExt = node.getOnCircleNodeExt();
              nodeExt.setIndex((noOfNodesOnCircle - nodeExt.getIndex()) % noOfNodesOnCircle);
            }
            this.reCalculateNodeAnglesAndPositions();
          };
          CiSECircle.prototype.moveOnCircleNodeInside = function(node) {
            var index = this.onCircleNodes.indexOf(node);
            if (index > -1) {
              this.onCircleNodes.splice(index, 1);
            }
            this.inCircleNodes.push(node);
            for (var i = 0; i < this.onCircleNodes.length; i++) {
              var onCircleNode = this.onCircleNodes[i];
              onCircleNode.getOnCircleNodeExt().setIndex(i);
            }
            node.setAsNonOnCircleNode();
            this.reCalculateCircleSizeAndRadius();
            this.reCalculateNodeAnglesAndPositions();
            node.setCenter(this.getParent().getCenterX(), this.getParent().getCenterY());
          };
          CiSECircle.prototype.reCalculateCircleSizeAndRadius = function() {
            var totalDiagonal = 0;
            var onCircleNodes = this.getOnCircleNodes();
            for (var i = 0; i < onCircleNodes.length; i++) {
              var node = onCircleNodes[i];
              var temp = node.getWidth() * node.getWidth() + node.getHeight() * node.getHeight();
              totalDiagonal += Math.sqrt(temp);
            }
            var layout = this.getGraphManager().getLayout();
            var nodeSeparation = layout.getNodeSeparation();
            var perimeter = totalDiagonal + this.getOnCircleNodes().length * nodeSeparation;
            this.radius = perimeter / (2 * Math.PI);
            this.calculateParentNodeDimension();
          };
          CiSECircle.prototype.reCalculateNodeAnglesAndPositions = function() {
            var layout = this.getGraphManager().getLayout();
            var nodeSeparation = layout.getNodeSeparation();
            var inOrderCopy = this.onCircleNodes;
            inOrderCopy.sort(function(a, b) {
              return a.getOnCircleNodeExt().getIndex() - b.getOnCircleNodeExt().getIndex();
            });
            var parentCenterX = this.getParent().getCenterX();
            var parentCenterY = this.getParent().getCenterY();
            for (var i = 0; i < inOrderCopy.length; i++) {
              var node = inOrderCopy[i];
              var angle = void 0;
              if (i === 0) {
                angle = 0;
              } else {
                var previousNode = inOrderCopy[i - 1];
                angle = previousNode.getOnCircleNodeExt().getAngle() + (node.getHalfTheDiagonal() + nodeSeparation + previousNode.getHalfTheDiagonal()) / this.radius;
              }
              node.getOnCircleNodeExt().setAngle(angle);
              node.setCenter(parentCenterX + this.radius * Math.cos(angle), parentCenterY + this.radius * Math.sin(angle));
            }
          };
          module2.exports = CiSECircle;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var FDLayoutEdge = __webpack_require__(0).layoutBase.FDLayoutEdge;
          function CiSEEdge(source, target, vEdge) {
            FDLayoutEdge.call(this, source, target, vEdge);
            this.isIntraCluster = true;
          }
          CiSEEdge.prototype = Object.create(FDLayoutEdge.prototype);
          for (var property in FDLayoutEdge) {
            CiSEEdge[property] = FDLayoutEdge[property];
          }
          CiSEEdge.prototype.isIntraEdge = function() {
            return this.isIntraCluster;
          };
          CiSEEdge.prototype.crossesWithEdge = function(other) {
            var result = false;
            var sourceExt = this.getSource().getOnCircleNodeExt();
            var targetExt = this.getTarget().getOnCircleNodeExt();
            var otherSourceExt = other.getSource().getOnCircleNodeExt();
            var otherTargetExt = other.getTarget().getOnCircleNodeExt();
            var sourcePos = -1;
            var targetPos = -1;
            var otherSourcePos = -1;
            var otherTargetPos = -1;
            if (sourceExt !== null)
              sourcePos = sourceExt.getIndex();
            if (targetExt !== null)
              targetPos = targetExt.getIndex();
            if (otherSourceExt !== null)
              otherSourcePos = otherSourceExt.getIndex();
            if (otherTargetExt !== null)
              otherTargetPos = otherTargetExt.getIndex();
            if (!this.isInterGraph && !other.isInterGraph) {
              if (this.source.getOwner() !== this.target.getOwner())
                result = false;
              else {
                if (sourcePos === -1 || targetPos === -1 || otherSourcePos === -1 || otherTargetPos === -1)
                  result = false;
                var otherSourceDist = otherSourceExt.getCircDistWithTheNode(sourceExt);
                var otherTargetDist = otherTargetExt.getCircDistWithTheNode(sourceExt);
                var thisTargetDist = targetExt.getCircDistWithTheNode(sourceExt);
                if (thisTargetDist < Math.max(otherSourceDist, otherTargetDist) && thisTargetDist > Math.min(otherSourceDist, otherTargetDist) && otherTargetDist !== 0 && otherSourceDist !== 0) {
                  result = true;
                }
              }
            } else {
              result = true;
            }
            return result;
          };
          CiSEEdge.prototype.calculateTotalCrossingWithList = function(edgeList) {
            var totalCrossing = 0;
            for (var i = 0; i < edgeList.length; i++) {
              totalCrossing += this.crossingWithEdge(edgeList[i]);
            }
            return totalCrossing;
          };
          CiSEEdge.prototype.crossingWithEdge = function(other) {
            var crosses = this.crossesWithEdge(other);
            var result = 0;
            if (crosses)
              result = 1;
            return result;
          };
          module2.exports = CiSEEdge;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var LGraphManager = __webpack_require__(0).layoutBase.LGraphManager;
          function CiSEGraphManager(layout) {
            LGraphManager.call(this, layout);
            this.onCircleNodes = [];
            this.inCircleNodes = [];
            this.nonOnCircleNodes = [];
          }
          CiSEGraphManager.prototype = Object.create(LGraphManager.prototype);
          for (var property in LGraphManager) {
            CiSEGraphManager[property] = LGraphManager[property];
          }
          CiSEGraphManager.prototype.getOnCircleNodes = function() {
            return this.onCircleNodes;
          };
          CiSEGraphManager.prototype.getInCircleNodes = function() {
            return this.inCircleNodes;
          };
          CiSEGraphManager.prototype.getNonOnCircleNodes = function() {
            return this.nonOnCircleNodes;
          };
          CiSEGraphManager.prototype.setOnCircleNodes = function(nodes) {
            this.onCircleNodes = nodes;
          };
          CiSEGraphManager.prototype.setInCircleNodes = function(nodes) {
            this.inCircleNodes = nodes;
          };
          CiSEGraphManager.prototype.setNonOnCircleNodes = function(nodes) {
            this.nonOnCircleNodes = nodes;
          };
          module2.exports = CiSEGraphManager;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          function CiSEInterClusterEdgeInfo(edge, angle) {
            this.edge = edge;
            this.angle = angle;
          }
          CiSEInterClusterEdgeInfo.prototype = Object.create(null);
          CiSEInterClusterEdgeInfo.prototype.getEdge = function() {
            return this.edge;
          };
          CiSEInterClusterEdgeInfo.prototype.getAngle = function() {
            return this.angle;
          };
          module2.exports = CiSEInterClusterEdgeInfo;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var _createClass = function() {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            return function(Constructor, protoProps, staticProps) {
              if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();
          function _classCallCheck(instance2, Constructor) {
            if (!(instance2 instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var CiSEInterClusterEdgeSort = function() {
            function CiSEInterClusterEdgeSort2(ownerCircle, A) {
              _classCallCheck(this, CiSEInterClusterEdgeSort2);
              this.ownerCircle = ownerCircle;
              this._quicksort(A, 0, A.length - 1);
            }
            _createClass(CiSEInterClusterEdgeSort2, [{
              key: "compareFunction",
              value: function compareFunction(a, b) {
                if (b.getAngle() > a.getAngle())
                  return true;
                else if (b.getAngle() === a.getAngle()) {
                  if (a === b) {
                    return false;
                  } else {
                    return this.ownerCircle.getOrder(this.ownerCircle.getThisEnd(a.getEdge()), this.ownerCircle.getThisEnd(b.getEdge()));
                  }
                } else {
                  return false;
                }
              }
            }, {
              key: "_quicksort",
              value: function _quicksort(A, p, r) {
                if (p < r) {
                  var q = this._partition(A, p, r);
                  this._quicksort(A, p, q);
                  this._quicksort(A, q + 1, r);
                }
              }
            }, {
              key: "_partition",
              value: function _partition(A, p, r) {
                var x = this._get(A, p);
                var i = p;
                var j = r;
                while (true) {
                  while (this.compareFunction(x, this._get(A, j))) {
                    j--;
                  }
                  while (this.compareFunction(this._get(A, i), x)) {
                    i++;
                  }
                  if (i < j) {
                    this._swap(A, i, j);
                    i++;
                    j--;
                  } else
                    return j;
                }
              }
            }, {
              key: "_get",
              value: function _get(object, index) {
                return object[index];
              }
            }, {
              key: "_set",
              value: function _set(object, index, value) {
                object[index] = value;
              }
            }, {
              key: "_swap",
              value: function _swap(A, i, j) {
                var temp = this._get(A, i);
                this._set(A, i, this._get(A, j));
                this._set(A, j, temp);
              }
            }]);
            return CiSEInterClusterEdgeSort2;
          }();
          module2.exports = CiSEInterClusterEdgeSort;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var Layout2 = __webpack_require__(0).layoutBase.FDLayout;
          var HashMap = __webpack_require__(0).layoutBase.HashMap;
          var PointD = __webpack_require__(0).layoutBase.PointD;
          var DimensionD2 = __webpack_require__(0).layoutBase.DimensionD;
          var AVSDFConstants = __webpack_require__(0).AVSDFConstants;
          var AVSDFLayout = __webpack_require__(0).AVSDFLayout;
          var CoSELayout = __webpack_require__(3).CoSELayout;
          var CoSEConstants = __webpack_require__(3).CoSEConstants;
          var CiSEConstants = __webpack_require__(1);
          var CiSEGraphManager = __webpack_require__(7);
          var CiSECircle = __webpack_require__(5);
          var CiSENode = __webpack_require__(11);
          var CiSEEdge = __webpack_require__(6);
          var CiSEOnCircleNodePair = __webpack_require__(13);
          function CiSELayout() {
            Layout2.call(this);
            this.incremental = CiSEConstants.INCREMENTAL;
            this.nodeSeparation = CiSEConstants.DEFAULT_NODE_SEPARATION;
            this.idealInterClusterEdgeLengthCoefficient = CiSEConstants.DEFAULT_IDEAL_INTER_CLUSTER_EDGE_LENGTH_COEFF;
            this.allowNodesInsideCircle = CiSEConstants.DEFAULT_ALLOW_NODES_INSIDE_CIRCLE;
            this.maxRatioOfNodesInsideCircle = CiSEConstants.DEFAULT_MAX_RATIO_OF_NODES_INSIDE_CIRCLE;
            this.step = CiSELayout.STEP_NOT_STARTED;
            this.phase = CiSELayout.PHASE_NOT_STARTED;
            this.swappedPairsInLastIteration = [];
            this.iterations = 0;
            this.oldTotalDisplacement = 0;
            this.coolingCycle = 0;
            this.maxCoolingCycle = this.maxIterations / CiSEConstants.CONVERGENCE_CHECK_PERIOD;
          }
          CiSELayout.prototype = Object.create(Layout2.prototype);
          for (var property in Layout2) {
            CiSELayout[property] = Layout2[property];
          }
          CiSELayout.STEP_NOT_STARTED = 0;
          CiSELayout.STEP_1 = 1;
          CiSELayout.STEP_2 = 2;
          CiSELayout.STEP_3 = 3;
          CiSELayout.STEP_4 = 4;
          CiSELayout.STEP_5 = 5;
          CiSELayout.PHASE_NOT_STARTED = 0;
          CiSELayout.PHASE_SWAP_PREPERATION = 1;
          CiSELayout.PHASE_PERFORM_SWAP = 2;
          CiSELayout.PHASE_OTHER = 3;
          CiSELayout.prototype.newGraphManager = function() {
            this.graphManager = new CiSEGraphManager(this);
            return this.graphManager;
          };
          CiSELayout.prototype.newCircleLGraph = function(vGraph) {
            return new CiSECircle(null, this.graphManager, vGraph);
          };
          CiSELayout.prototype.newNode = function(loc, size) {
            return new CiSENode(this.graphManager, loc, size, null);
          };
          CiSELayout.prototype.newCiSEOnCircleNode = function(loc, size) {
            var newNode = this.newNode(loc, size);
            newNode.setAsOnCircleNode();
            return newNode;
          };
          CiSELayout.prototype.newEdge = function(source, target, vEdge) {
            return new CiSEEdge(source, target, vEdge);
          };
          CiSELayout.prototype.getNodeSeparation = function() {
            return this.nodeSeparation;
          };
          CiSELayout.prototype.convertToClusteredGraph = function(nodes, edges, clusters) {
            var _this = this;
            var self2 = this;
            var idToLNode = {};
            var rootGraph = this.graphManager.getRoot();
            var idToCytoscapeNode = new HashMap();
            for (var i = 0; i < nodes.length; i++) {
              idToCytoscapeNode.put(nodes[i].data("id"), nodes[i]);
            }
            if (typeof clusters === "function") {
              var cIDs = [];
              var temp = [];
              for (var _i = 0; _i < nodes.length; _i++) {
                var cID = clusters(nodes[_i]);
                if (cID > 0 && cID !== null && cID !== void 0) {
                  var index = cIDs.indexOf(cID);
                  if (index > -1) {
                    temp[index].push(nodes[_i].data("id"));
                  } else {
                    cIDs.push(cID);
                    temp.push([nodes[_i].data("id")]);
                  }
                }
              }
              clusters = temp;
            }
            var _loop = function _loop3(_i22) {
              if (clusters[_i22].length === 0)
                return "continue";
              var clusterNode = _this.newNode(null);
              clusterNode.setClusterId(_i22);
              rootGraph.add(clusterNode);
              var circle = _this.newCircleLGraph(null);
              _this.graphManager.add(circle, clusterNode);
              circle.margin = circle.margin + 15;
              clusters[_i22].forEach(function(nodeID) {
                var cytoNode = idToCytoscapeNode.get(nodeID);
                var dimensions = cytoNode.layoutDimensions({
                  nodeDimensionsIncludeLabels: false
                });
                var ciseNode = self2.newCiSEOnCircleNode(new PointD(cytoNode.position("x") - dimensions.w / 2, cytoNode.position("y") - dimensions.h / 2), new DimensionD2(parseFloat(dimensions.w), parseFloat(dimensions.h)));
                ciseNode.setId(nodeID);
                ciseNode.setClusterId(_i22);
                circle.getOnCircleNodes().push(ciseNode);
                circle.add(ciseNode);
                circle.getInNodes().push(ciseNode);
                idToLNode[ciseNode.getId()] = ciseNode;
              });
            };
            for (var _i2 = 0; _i2 < clusters.length; _i2++) {
              var _ret = _loop(_i2);
              if (_ret === "continue")
                continue;
            }
            var _loop2 = function _loop22(_i32) {
              var clustered = false;
              clusters.forEach(function(cluster) {
                if (cluster.includes(nodes[_i32].data("id")))
                  clustered = true;
              });
              if (!clustered) {
                var cytoNode = nodes[_i32];
                var dimensions = cytoNode.layoutDimensions({
                  nodeDimensionsIncludeLabels: false
                });
                var _CiSENode = _this.newNode(new PointD(cytoNode.position("x") - dimensions.w / 2, cytoNode.position("y") - dimensions.h / 2), new DimensionD2(parseFloat(dimensions.w), parseFloat(dimensions.h)));
                _CiSENode.setClusterId(-1);
                _CiSENode.setId(nodes[_i32].data("id"));
                rootGraph.add(_CiSENode);
                idToLNode[_CiSENode.getId()] = _CiSENode;
              }
            };
            for (var _i3 = 0; _i3 < nodes.length; _i3++) {
              _loop2(_i3);
            }
            for (var _i4 = 0; _i4 < edges.length; _i4++) {
              var e = edges[_i4];
              var sourceNode = idToLNode[e.data("source")];
              var targetNode = idToLNode[e.data("target")];
              var sourceClusterID = sourceNode.getClusterId();
              var targetClusterID = targetNode.getClusterId();
              if (sourceNode === targetNode)
                continue;
              var ciseEdge = self2.newEdge(sourceNode, targetNode, null);
              if (sourceClusterID === targetClusterID && sourceClusterID !== -1 && targetClusterID !== -1) {
                ciseEdge.isIntraCluster = true;
                ciseEdge.getSource().getOwner().add(ciseEdge, ciseEdge.getSource(), ciseEdge.getTarget());
              } else {
                ciseEdge.isIntraCluster = false;
                this.graphManager.add(ciseEdge, ciseEdge.getSource(), ciseEdge.getTarget());
              }
            }
            var onCircleNodes = [];
            var nonOnCircleNodes = [];
            var allNodes = this.graphManager.getAllNodes();
            for (var _i5 = 0; _i5 < allNodes.length; _i5++) {
              if (allNodes[_i5].getOnCircleNodeExt()) {
                onCircleNodes.push(allNodes[_i5]);
              } else {
                nonOnCircleNodes.push(allNodes[_i5]);
              }
            }
            this.graphManager.setOnCircleNodes(onCircleNodes);
            this.graphManager.setNonOnCircleNodes(nonOnCircleNodes);
            this.graphManager.edges.forEach(function(e2) {
              var sourceNode2 = e2.getSource();
              var targetNode2 = e2.getTarget();
              var sourceClusterID2 = sourceNode2.getClusterId();
              var targetClusterID2 = targetNode2.getClusterId();
              if (sourceClusterID2 !== -1) {
                var _circle = sourceNode2.getOwner();
                var _index = _circle.getInNodes().indexOf(sourceNode2);
                if (_index > -1) {
                  _circle.getInNodes().splice(_index, 1);
                  _circle.getOutNodes().push(sourceNode2);
                }
              }
              if (targetClusterID2 !== -1) {
                var _circle2 = targetNode2.getOwner();
                var _index2 = _circle2.getInNodes().indexOf(targetNode2);
                if (_index2 > -1) {
                  _circle2.getInNodes().splice(_index2, 1);
                  _circle2.getOutNodes().push(targetNode2);
                }
              }
            });
            return idToLNode;
          };
          CiSELayout.prototype.doStep1 = function() {
            this.step = CiSELayout.STEP_1;
            this.phase = CiSELayout.PHASE_OTHER;
            var ciseToAvsdf = new HashMap();
            var allGraphs = this.graphManager.getGraphs();
            for (var i = 0; i < allGraphs.length; i++) {
              var graph = allGraphs[i];
              if (graph instanceof CiSECircle) {
                AVSDFConstants.DEFAULT_NODE_SEPARATION = this.nodeSeparation;
                var avsdfLayout = new AVSDFLayout();
                var avsdfCircle = avsdfLayout.graphManager.addRoot();
                var clusteredNodes = graph.getOnCircleNodes();
                for (var _i6 = 0; _i6 < clusteredNodes.length; _i6++) {
                  var ciseOnCircleNode = clusteredNodes[_i6];
                  var avsdfNode = avsdfLayout.newNode(null);
                  var loc = ciseOnCircleNode.getLocation();
                  avsdfNode.setLocation(loc.x, loc.y);
                  avsdfNode.setWidth(ciseOnCircleNode.getWidth());
                  avsdfNode.setHeight(ciseOnCircleNode.getHeight());
                  avsdfCircle.add(avsdfNode);
                  ciseToAvsdf.put(ciseOnCircleNode, avsdfNode);
                }
                var allEdges = this.getAllEdges();
                for (var _i7 = 0; _i7 < allEdges.length; _i7++) {
                  var edge = allEdges[_i7];
                  if (clusteredNodes.includes(edge.getSource()) && clusteredNodes.includes(edge.getTarget())) {
                    var avsdfSource = ciseToAvsdf.get(edge.getSource());
                    var avsdfTarget = ciseToAvsdf.get(edge.getTarget());
                    var avsdfEdge = avsdfLayout.newEdge("");
                    avsdfCircle.add(avsdfEdge, avsdfSource, avsdfTarget);
                  }
                }
                avsdfLayout.layout();
                var sortedByDegreeList = avsdfLayout.initPostProcess();
                for (var _i8 = 0; _i8 < sortedByDegreeList.length; _i8++) {
                  avsdfLayout.oneStepPostProcess(sortedByDegreeList[_i8]);
                }
                avsdfLayout.updateNodeAngles();
                avsdfLayout.updateNodeCoordinates();
                for (var _i9 = 0; _i9 < clusteredNodes.length; _i9++) {
                  var _ciseOnCircleNode = clusteredNodes[_i9];
                  var _avsdfNode = ciseToAvsdf.get(_ciseOnCircleNode);
                  var _loc = _avsdfNode.getLocation();
                  _ciseOnCircleNode.setLocation(_loc.x, _loc.y);
                  _ciseOnCircleNode.getOnCircleNodeExt().setIndex(_avsdfNode.getIndex());
                  _ciseOnCircleNode.getOnCircleNodeExt().setAngle(_avsdfNode.getAngle());
                }
                clusteredNodes.sort(function(a, b) {
                  return a.getOnCircleNodeExt().getIndex() - b.getOnCircleNodeExt().getIndex();
                });
                if (avsdfCircle.getNodes().length > 0) {
                  var parentCiSE = graph.getParent();
                  var parentAVSDF = avsdfCircle.getParent();
                  parentCiSE.setLocation(parentAVSDF.getLocation().x, parentAVSDF.getLocation().y);
                  graph.setRadius(avsdfCircle.getRadius());
                  graph.calculateParentNodeDimension();
                }
              }
            }
          };
          CiSELayout.prototype.doStep2 = function() {
            this.step = CiSELayout.STEP_2;
            this.phase = CiSELayout.PHASE_OTHER;
            var newCoSENodes = [];
            var newCoSEEdges = [];
            var ciseNodeToCoseNode = new HashMap();
            var coseEdgeToCiseEdges = new HashMap();
            var coseLayout = new CoSELayout();
            coseLayout.isSubLayout = false;
            coseLayout.useMultiLevelScaling = false;
            coseLayout.useFRGridVariant = true;
            coseLayout.springConstant *= 1.5;
            var gm = coseLayout.newGraphManager();
            var coseRoot = gm.addRoot();
            var nonOnCircleNodes = this.graphManager.getNonOnCircleNodes();
            for (var i = 0; i < nonOnCircleNodes.length; i++) {
              var ciseNode = nonOnCircleNodes[i];
              var newNode = coseLayout.newNode(null);
              var loc = ciseNode.getLocation();
              newNode.setLocation(loc.x, loc.y);
              newNode.setWidth(ciseNode.getWidth());
              newNode.setHeight(ciseNode.getHeight());
              if (ciseNode.getChild() != null) {
                newNode.setWidth(1.2 * newNode.getWidth());
                newNode.setHeight(1.2 * newNode.getHeight());
              }
              newNode.id = i;
              coseRoot.add(newNode);
              newCoSENodes.push(newNode);
              ciseNodeToCoseNode.put(ciseNode, newNode);
            }
            var nodePairs = new Array(newCoSENodes.length);
            for (var _i10 = 0; _i10 < nodePairs.length; _i10++) {
              nodePairs[_i10] = new Array(newCoSENodes.length);
            }
            var allEdges = this.graphManager.getAllEdges();
            for (var _i11 = 0; _i11 < allEdges.length; _i11++) {
              var ciseEdge = allEdges[_i11];
              var sourceCise = ciseEdge.getSource();
              var targetCise = ciseEdge.getTarget();
              if (sourceCise.getOnCircleNodeExt() != null) {
                sourceCise = ciseEdge.getSource().getOwner().getParent();
              }
              if (targetCise.getOnCircleNodeExt() != null) {
                targetCise = ciseEdge.getTarget().getOwner().getParent();
              }
              var sourceCose = ciseNodeToCoseNode.get(sourceCise);
              var targetCose = ciseNodeToCoseNode.get(targetCise);
              var sourceIndex = newCoSENodes.indexOf(sourceCose);
              var targetIndex = newCoSENodes.indexOf(targetCose);
              var newEdge = void 0;
              if (sourceIndex !== targetIndex) {
                if (nodePairs[sourceIndex][targetIndex] == null && nodePairs[targetIndex][sourceIndex] == null) {
                  newEdge = coseLayout.newEdge(null);
                  coseRoot.add(newEdge, sourceCose, targetCose);
                  newCoSEEdges.push(newEdge);
                  coseEdgeToCiseEdges.put(newEdge, []);
                  nodePairs[sourceIndex][targetIndex] = newEdge;
                  nodePairs[targetIndex][sourceIndex] = newEdge;
                } else {
                  newEdge = nodePairs[sourceIndex][targetIndex];
                }
                coseEdgeToCiseEdges.get(newEdge).push(ciseEdge);
              }
            }
            coseLayout.runLayout();
            for (var _i12 = 0; _i12 < nonOnCircleNodes.length; _i12++) {
              var _ciseNode = nonOnCircleNodes[_i12];
              var coseNode = ciseNodeToCoseNode.get(_ciseNode);
              var _loc2 = coseNode.getLocation();
              _ciseNode.setLocation(_loc2.x, _loc2.y);
            }
            var onCircleNodes = this.graphManager.getOnCircleNodes();
            for (var _i13 = 0; _i13 < onCircleNodes.length; _i13++) {
              var _ciseNode2 = onCircleNodes[_i13];
              var _loc3 = _ciseNode2.getLocation();
              var parentLoc = _ciseNode2.getOwner().getParent().getLocation();
              _ciseNode2.setLocation(_loc3.x + parentLoc.x, _loc3.y + parentLoc.y);
            }
          };
          CiSELayout.prototype.step3Init = function() {
            this.step = CiSELayout.STEP_3;
            this.phase = CiSELayout.PHASE_OTHER;
            this.initSpringEmbedder();
            this.coolingCycle = 0;
          };
          CiSELayout.prototype.step4Init = function() {
            this.step = CiSELayout.STEP_4;
            this.phase = CiSELayout.PHASE_OTHER;
            this.initSpringEmbedder();
            for (var i = 0; i < this.graphManager.getOnCircleNodes().length; i++) {
              this.graphManager.getOnCircleNodes()[i].getOnCircleNodeExt().updateSwappingConditions();
            }
            this.coolingCycle = 0;
          };
          CiSELayout.prototype.step5Init = function() {
            this.step = CiSELayout.STEP_5;
            this.phase = CiSELayout.PHASE_OTHER;
            this.initSpringEmbedder();
            this.coolingCycle = 0;
          };
          CiSELayout.prototype.runSpringEmbedderTick = function() {
            this.iterations++;
            this.totalIterations = this.iterations;
            if (this.iterations % CiSEConstants.CONVERGENCE_CHECK_PERIOD === 0) {
              var notTooEarly = this.step !== CiSELayout.STEP_4 || this.iterations > this.maxIterations / 4;
              if (notTooEarly && this.isConverged()) {
                return true;
              }
              this.coolingFactor = this.initialCoolingFactor * ((this.maxIterations - this.iterations) / this.maxIterations);
            }
            this.totalDisplacement = 0;
            if (this.step === CiSELayout.STEP_3) {
              if (this.iterations % CiSEConstants.REVERSE_PERIOD === 0) {
                this.checkAndReverseIfReverseIsBetter();
              }
            } else if (this.step === CiSELayout.STEP_4) {
              if (this.iterations % CiSEConstants.SWAP_HISTORY_CLEARANCE_PERIOD === 0) {
                this.swappedPairsInLastIteration = [];
              }
              var iterationInPeriod = this.iterations % CiSEConstants.SWAP_PERIOD;
              if (iterationInPeriod >= CiSEConstants.SWAP_IDLE_DURATION) {
                this.phase = CiSELayout.PHASE_SWAP_PREPERATION;
              } else if (iterationInPeriod === 0) {
                this.phase = CiSELayout.PHASE_PERFORM_SWAP;
              } else {
                this.phase = CiSELayout.PHASE_OTHER;
              }
            }
            this.calcSpringForces();
            this.calcRepulsionForces();
            this.calcGravitationalForces();
            this.calcTotalForces();
            this.moveNodes();
            return this.iterations >= this.maxIterations;
          };
          CiSELayout.prototype.prepareCirclesForReversal = function() {
            var nodes = this.graphManager.getRoot().getNodes();
            nodes.forEach(function(node) {
              var circle = node.getChild();
              if (circle !== null && circle !== void 0) {
                if (circle.getInterClusterEdges().length < 2)
                  circle.setMayNotBeReversed();
                circle.computeOrderMatrix();
              }
            });
          };
          CiSELayout.prototype.calcIdealEdgeLengths = function(isPolishingStep) {
            var lEdges = this.graphManager.getAllEdges();
            for (var i = 0; i < lEdges.length; i++) {
              var edge = lEdges[i];
              if (isPolishingStep)
                edge.idealLength = 1.5 * this.idealEdgeLength * this.idealInterClusterEdgeLengthCoefficient;
              else
                edge.idealLength = this.idealEdgeLength * this.idealInterClusterEdgeLengthCoefficient;
            }
            var lNodes = this.graphManager.getInCircleNodes();
            for (var _i14 = 0; _i14 < lNodes.length; _i14++) {
              var node = lNodes[_i14];
              node.getEdges().forEach(function(edge2) {
                edge2.idealLength = CiSEConstants.DEFAULT_INNER_EDGE_LENGTH;
              });
            }
          };
          CiSELayout.prototype.calcSpringForces = function() {
            var lEdges = this.graphManager.getAllEdges();
            for (var i = 0; i < lEdges.length; i++) {
              var edge = lEdges[i];
              var source = edge.getSource();
              var target = edge.getTarget();
              if (edge.isIntraCluster && source.getOnCircleNodeExt() != null && target.getOnCircleNodeExt() != null) {
                continue;
              }
              this.calcSpringForce(edge, edge.idealLength);
            }
          };
          CiSELayout.prototype.calcRepulsionForces = function() {
            var lNodes = this.graphManager.getNonOnCircleNodes();
            for (var i = 0; i < lNodes.length; i++) {
              var nodeA = lNodes[i];
              for (var j = i + 1; j < lNodes.length; j++) {
                var nodeB = lNodes[j];
                this.calcRepulsionForce(nodeA, nodeB);
              }
            }
            var inCircleNodes = this.graphManager.getInCircleNodes();
            for (var _i15 = 0; _i15 < inCircleNodes.length; _i15++) {
              var inCircleNode = inCircleNodes[_i15];
              var ownerCircle = inCircleNode.getOwner();
              var childNodes = ownerCircle.getNodes();
              for (var _i16 = 0; _i16 < childNodes.length; _i16++) {
                var childCiSENode = childNodes[_i16];
                if (childCiSENode !== inCircleNode) {
                  this.calcRepulsionForce(inCircleNode, childCiSENode);
                }
              }
            }
          };
          CiSELayout.prototype.calcGravitationalForces = function() {
            if (!this.graphManager.rootGraph.isConnected) {
              var _lNodes = this.graphManager.getNonOnCircleNodes();
              for (var i = 0; i < _lNodes.length; i++) {
                var node = _lNodes[i];
                this.calcGravitationalForce(node);
              }
            }
            var lNodes = this.graphManager.getInCircleNodes();
            for (var _i17 = 0; _i17 < lNodes.length; _i17++) {
              var _node = lNodes[_i17];
              this.calcGravitationalForce(_node);
            }
          };
          CiSELayout.prototype.calcTotalForces = function() {
            var allNodes = this.graphManager.getAllNodes();
            for (var i = 0; i < allNodes.length; i++) {
              var node = allNodes[i];
              node.displacementX = this.coolingFactor * (node.springForceX + node.repulsionForceX + node.gravitationForceX);
              node.displacementY = this.coolingFactor * (node.springForceY + node.repulsionForceY + node.gravitationForceY);
              node.rotationAmount = 0;
              node.springForceX = 0;
              node.springForceY = 0;
              node.repulsionForceX = 0;
              node.repulsionForceY = 0;
              node.gravitationForceX = 0;
              node.gravitationForceY = 0;
            }
            var onCircleNodes = this.graphManager.getOnCircleNodes();
            for (var _i18 = 0; _i18 < onCircleNodes.length; _i18++) {
              var _node2 = onCircleNodes[_i18];
              var parentNode = _node2.getOwner().getParent();
              var values = _node2.getOwner().decomposeForce(_node2);
              if (this.phase === CiSELayout.PHASE_SWAP_PREPERATION) {
                _node2.getOnCircleNodeExt().addDisplacementForSwap(values.getRotationAmount());
              }
              parentNode.displacementX += values.getDisplacementX();
              parentNode.displacementY += values.getDisplacementY();
              _node2.displacementX = 0;
              _node2.displacementY = 0;
              parentNode.rotationAmount += values.getRotationAmount();
              _node2.rotationAmount = 0;
            }
          };
          CiSELayout.prototype.moveNodes = function() {
            if (this.phase !== CiSELayout.PHASE_PERFORM_SWAP) {
              var nonOnCircleNodes = this.graphManager.getNonOnCircleNodes();
              for (var i = 0; i < nonOnCircleNodes.length; i++) {
                nonOnCircleNodes[i].move();
                if (nonOnCircleNodes[i].getChild() !== null && nonOnCircleNodes[i].getChild() !== void 0) {
                  nonOnCircleNodes[i].getChild().rotate();
                }
              }
              var inCircleNodes = this.graphManager.getInCircleNodes();
              var inCircleNode = void 0;
              for (var _i19 = 0; _i19 < inCircleNodes.length; _i19++) {
                inCircleNode = inCircleNodes[_i19];
                inCircleNode.displacementX /= 20;
                inCircleNode.displacementY /= 20;
                inCircleNode.move();
              }
            } else {
              var ciseOnCircleNodes = this.graphManager.getOnCircleNodes();
              var size = ciseOnCircleNodes.length;
              var nonSafePairs = [];
              var safePairs = [];
              var swappedNodes = [];
              var swappedPairs = [];
              var firstNode = void 0;
              var secondNode = void 0;
              var firstNodeExt = void 0;
              var secondNodeExt = void 0;
              var firstNodeDisp = void 0;
              var secondNodeDisp = void 0;
              var discrepancy = void 0;
              var inSameDirection = void 0;
              for (var _i20 = 0; _i20 < size; _i20++) {
                firstNode = ciseOnCircleNodes[_i20];
                secondNode = firstNode.getOnCircleNodeExt().getNextNode();
                firstNodeExt = firstNode.getOnCircleNodeExt();
                secondNodeExt = secondNode.getOnCircleNodeExt();
                if (!firstNodeExt.canSwapWithNext || !secondNodeExt.canSwapWithPrev)
                  continue;
                firstNodeDisp = firstNodeExt.getDisplacementForSwap();
                secondNodeDisp = secondNodeExt.getDisplacementForSwap();
                discrepancy = firstNodeDisp - secondNodeDisp;
                if (discrepancy < 0)
                  continue;
                inSameDirection = firstNodeDisp > 0 && secondNodeDisp > 0 || firstNodeDisp < 0 && secondNodeDisp < 0;
                var pair = new CiSEOnCircleNodePair(firstNode, secondNode, discrepancy, inSameDirection);
                if (firstNodeDisp === 0 || secondNodeDisp === 0)
                  safePairs.push(pair);
                else
                  nonSafePairs.push(pair);
              }
              var nonSafePair = void 0;
              var lookForSwap = true;
              var rollback = void 0;
              nonSafePairs.sort(function(a, b) {
                return a.getDiscrepancy() - b.getDiscrepancy();
              });
              while (lookForSwap && nonSafePairs.length > 0) {
                nonSafePair = nonSafePairs[nonSafePairs.length - 1];
                firstNode = nonSafePair.getFirstNode();
                secondNode = nonSafePair.getSecondNode();
                firstNodeExt = firstNode.getOnCircleNodeExt();
                secondNodeExt = secondNode.getOnCircleNodeExt();
                if (this.isSwappedPreviously(nonSafePair)) {
                  nonSafePairs.pop();
                  swappedPairs.push(nonSafePair);
                  continue;
                }
                var int1 = firstNodeExt.getInterClusterIntersections(secondNodeExt);
                nonSafePair.swap();
                rollback = false;
                var int2 = firstNodeExt.getInterClusterIntersections(secondNodeExt);
                rollback = int2 > int1;
                if (!rollback && int2 === int1) {
                  rollback = nonSafePair.inSameDirection() || nonSafePair.getDiscrepancy() < CiSEConstants.MIN_DISPLACEMENT_FOR_SWAP;
                }
                if (rollback) {
                  nonSafePair.swap();
                  nonSafePairs.pop();
                  continue;
                }
                swappedNodes.push(nonSafePair.getFirstNode());
                swappedNodes.push(nonSafePair.getSecondNode());
                swappedPairs.push(nonSafePair);
                lookForSwap = false;
              }
              for (var _i21 = 0; _i21 < safePairs.length; _i21++) {
                var safePair = safePairs[_i21];
                if (safePair.inSameDirection() || safePair.getDiscrepancy() < CiSEConstants.MIN_DISPLACEMENT_FOR_SWAP) {
                  continue;
                }
                if (swappedNodes.includes(safePair.getFirstNode()) || swappedNodes.includes(safePair.getSecondNode())) {
                  continue;
                }
                if (!this.isSwappedPreviously(safePair)) {
                  safePair.swap();
                  swappedNodes.push(safePair.getFirstNode());
                  swappedNodes.push(safePair.getSecondNode());
                }
                swappedPairs.push(safePair);
              }
              this.swappedPairsInLastIteration = [];
              for (var _i22 = 0; _i22 < swappedPairs.length; _i22++) {
                this.swappedPairsInLastIteration.push(swappedPairs[_i22]);
              }
              var node = void 0;
              for (var _i23 = 0; _i23 < size; _i23++) {
                node = ciseOnCircleNodes[_i23];
                node.getOnCircleNodeExt().setDisplacementForSwap(0);
              }
            }
          };
          CiSELayout.prototype.isSwappedPreviously = function(pair) {
            for (var i = 0; i < this.swappedPairsInLastIteration.length; i++) {
              var swappedPair = this.swappedPairsInLastIteration[i];
              if (swappedPair.getFirstNode() === pair.getFirstNode() && swappedPair.getSecondNode() === pair.getSecondNode() || swappedPair.getSecondNode() === pair.getFirstNode() && swappedPair.getFirstNode() === pair.getSecondNode()) {
                return true;
              }
            }
            return false;
          };
          CiSELayout.prototype.checkAndReverseIfReverseIsBetter = function() {
            var gm = this.getGraphManager();
            var nodeIterator = gm.getRoot().getNodes();
            var node = void 0;
            var circle = void 0;
            for (var i = 0; i < nodeIterator.length; i++) {
              node = nodeIterator[i];
              circle = node.getChild();
              if (circle != null && circle.getMayBeReversed() && circle.getNodes().length <= 52) {
                if (circle.checkAndReverseIfReverseIsBetter()) {
                  return true;
                }
              }
            }
            return false;
          };
          CiSELayout.prototype.findAndMoveInnerNodes = function() {
            if (!this.allowNodesInsideCircle) {
              return;
            }
            var graphs = this.graphManager.getGraphs();
            for (var i = 0; i < graphs.length; i++) {
              var ciseCircle = graphs[i];
              var innerNodeCount = 0;
              if (ciseCircle !== this.getGraphManager().getRoot()) {
                var maxInnerNodes = ciseCircle.getNodes().length * this.maxRatioOfNodesInsideCircle;
                var innerNode = this.findInnerNode(ciseCircle);
                while (innerNode !== null && innerNode !== void 0 && innerNodeCount < maxInnerNodes) {
                  this.moveInnerNode(innerNode);
                  innerNodeCount++;
                  if (innerNodeCount < maxInnerNodes) {
                    innerNode = this.findInnerNode(ciseCircle);
                  }
                }
              }
            }
          };
          CiSELayout.prototype.findInnerNode = function(ciseCircle) {
            var innerNode = null;
            var onCircleNodeCount = ciseCircle.getOnCircleNodes().length;
            var sortedNodes = ciseCircle.getOnCircleNodes();
            sortedNodes.sort(function(a, b) {
              return a.getEdges().length - b.getEdges().length;
            });
            for (var i = onCircleNodeCount - 1; i >= 0 && innerNode == null; i--) {
              var candidateNode = sortedNodes[i];
              if (candidateNode.getOnCircleNodeExt().getInterClusterEdges().length !== 0) {
                continue;
              }
              var circleSegment = this.findMinimalSpanningSegment(candidateNode);
              if (circleSegment.length === 0) {
                continue;
              }
              var connectedToNonImmediate = false;
              for (var _i24 = 0; _i24 < circleSegment.length; _i24++) {
                var spanningNode = circleSegment[_i24];
                if (connectedToNonImmediate) {
                  break;
                }
                var neighbors = spanningNode.getNeighborsList();
                for (var j = 0; j < neighbors.length; j++) {
                  var neighborOfSpanningNode = neighbors[j];
                  if (neighborOfSpanningNode !== candidateNode && neighborOfSpanningNode.getOwner() === ciseCircle && neighborOfSpanningNode.getOnCircleNodeExt() != null && neighborOfSpanningNode.getOnCircleNodeExt() != void 0) {
                    var spanningIndex = spanningNode.getOnCircleNodeExt().getIndex();
                    var neighborOfSpanningIndex = neighborOfSpanningNode.getOnCircleNodeExt().getIndex();
                    var indexDiff = spanningIndex - neighborOfSpanningIndex;
                    indexDiff += onCircleNodeCount;
                    indexDiff %= onCircleNodeCount;
                    if (indexDiff > 1) {
                      indexDiff = neighborOfSpanningIndex - spanningIndex;
                      indexDiff += onCircleNodeCount;
                      indexDiff %= onCircleNodeCount;
                    }
                    if (indexDiff > 1) {
                      connectedToNonImmediate = true;
                      break;
                    }
                  }
                }
              }
              if (!connectedToNonImmediate) {
                innerNode = candidateNode;
              }
            }
            return innerNode;
          };
          CiSELayout.prototype.moveInnerNode = function(innerNode) {
            var ciseCircle = innerNode.getOwner();
            ciseCircle.moveOnCircleNodeInside(innerNode);
            var onCircleNodesList = this.graphManager.getOnCircleNodes();
            var index = onCircleNodesList.indexOf(innerNode);
            if (index > -1) {
              onCircleNodesList.splice(index, 1);
            }
            this.graphManager.inCircleNodes.push(innerNode);
          };
          CiSELayout.prototype.findMinimalSpanningSegment = function(node) {
            var segment = [];
            var orderedNeigbors = node.getOnCircleNeighbors();
            if (orderedNeigbors.length === 0) {
              return segment;
            }
            orderedNeigbors.sort(function(a, b) {
              return a.getOnCircleNodeExt().getIndex() - b.getOnCircleNodeExt().getIndex();
            });
            var orderedNodes = node.getOwner().getOnCircleNodes();
            orderedNodes.sort(function(a, b) {
              return a.getOnCircleNodeExt().getIndex() - b.getOnCircleNodeExt().getIndex();
            });
            var shortestSegmentStartNode = null;
            var shortestSegmentEndNode = null;
            var shortestSegmentLength = orderedNodes.length;
            var segmentLength = orderedNodes.length;
            var neighSize = orderedNeigbors.length;
            var i = void 0;
            var j = void 0;
            var tempSegmentStartNode = void 0;
            var tempSegmentEndNode = void 0;
            var tempSegmentLength = void 0;
            for (i = 0; i < neighSize; i++) {
              j = (i - 1 + neighSize) % neighSize;
              tempSegmentStartNode = orderedNeigbors[i];
              tempSegmentEndNode = orderedNeigbors[j];
              tempSegmentLength = (tempSegmentEndNode.getOnCircleNodeExt().getIndex() - tempSegmentStartNode.getOnCircleNodeExt().getIndex() + segmentLength) % segmentLength + 1;
              if (tempSegmentLength < shortestSegmentLength) {
                shortestSegmentStartNode = tempSegmentStartNode;
                shortestSegmentEndNode = tempSegmentEndNode;
                shortestSegmentLength = tempSegmentLength;
              }
            }
            var segmentEndReached = false;
            var currentNode = shortestSegmentStartNode;
            while (!segmentEndReached) {
              if (currentNode !== node) {
                segment.push(currentNode);
              }
              if (currentNode === shortestSegmentEndNode) {
                segmentEndReached = true;
              } else {
                var nextIndex = currentNode.getOnCircleNodeExt().getIndex() + 1;
                if (nextIndex === orderedNodes.length) {
                  nextIndex = 0;
                }
                currentNode = orderedNodes[nextIndex];
              }
            }
            return segment;
          };
          module2.exports = CiSELayout;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var FDLayoutNode = __webpack_require__(0).layoutBase.FDLayoutNode;
          var IMath = __webpack_require__(0).layoutBase.IMath;
          var CiSEConstants = __webpack_require__(1);
          var CiSEOnCircleNodeExt = __webpack_require__(12);
          function CiSENode(gm, loc, size, vNode) {
            FDLayoutNode.call(this, gm, loc, size, vNode);
            this.rotationAmount = null;
            this.onCircleNodeExt = null;
            this.clusterID = null;
            this.ID = null;
          }
          CiSENode.prototype = Object.create(FDLayoutNode.prototype);
          for (var prop in FDLayoutNode) {
            CiSENode[prop] = FDLayoutNode[prop];
          }
          CiSENode.prototype.setClusterId = function(cID) {
            this.clusterID = cID;
          };
          CiSENode.prototype.getClusterId = function() {
            return this.clusterID;
          };
          CiSENode.prototype.setId = function(ID) {
            this.ID = ID;
          };
          CiSENode.prototype.getId = function() {
            return this.ID;
          };
          CiSENode.prototype.setAsOnCircleNode = function() {
            this.onCircleNodeExt = new CiSEOnCircleNodeExt(this);
            return this.onCircleNodeExt;
          };
          CiSENode.prototype.setAsNonOnCircleNode = function() {
            this.onCircleNodeExt = null;
          };
          CiSENode.prototype.getOnCircleNodeExt = function() {
            return this.onCircleNodeExt;
          };
          CiSENode.prototype.getLimitedDisplacement = function(displacement) {
            if (Math.abs(displacement) > CiSEConstants.MAX_NODE_DISPLACEMENT)
              displacement = CiSEConstants.MAX_NODE_DISPLACEMENT * IMath.sign(displacement);
            return displacement;
          };
          CiSENode.prototype.getOnCircleNeighbors = function() {
            var neighbors = Array.from(this.getNeighborsList());
            var onCircleNeighbors = [];
            for (var i = 0; i < neighbors.length; i++) {
              var node = neighbors[i];
              if (node.getOnCircleNodeExt() !== null && node.getClusterId() === this.getClusterId())
                onCircleNeighbors.push(node);
            }
            return onCircleNeighbors;
          };
          CiSENode.prototype.getNoOfChildren = function() {
            if (this.getChild() === null || this.getChild() === void 0)
              return 1;
            else
              return this.getChild().getNodes().length;
          };
          CiSENode.prototype.move = function() {
            var layout = this.getOwner().getGraphManager().getLayout();
            this.displacementX = this.getLimitedDisplacement(this.displacementX);
            this.displacementY = this.getLimitedDisplacement(this.displacementY);
            if (this.getChild() !== null && this.getChild() !== void 0) {
              var noOfNodesOnCircle = this.getChild().getNodes().length;
              this.displacementX /= noOfNodesOnCircle;
              this.displacementY /= noOfNodesOnCircle;
              var children = this.getChild().getNodes();
              for (var i = 0; i < children.length; i++) {
                var node = children[i];
                node.moveBy(this.displacementX, this.displacementY);
                layout.totalDisplacement += Math.abs(this.displacementX) + Math.abs(this.displacementY);
              }
            }
            this.moveBy(this.displacementX, this.displacementY);
            layout.totalDisplacement += Math.abs(this.displacementX) + Math.abs(this.displacementY);
            if (this.getChild() !== null && this.getChild() !== void 0) {
              this.getChild().updateBounds(true);
            }
          };
          CiSENode.prototype.reset = function() {
            this.displacementX = 0;
            this.displacementY = 0;
          };
          module2.exports = CiSENode;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var IGeometry = __webpack_require__(0).layoutBase.IGeometry;
          function CiSEOnCircleNodeExt(ciseNode) {
            this.ciseNode = ciseNode;
            this.intraClusterEdges = null;
            this.interClusterEdges = null;
            this.angle = -1;
            this.orderIndex = -1;
            this.canSwapWithNext = null;
            this.canSwapWithPrevious = null;
            this.displacementForSwap = null;
          }
          CiSEOnCircleNodeExt.prototype = Object.create(null);
          CiSEOnCircleNodeExt.prototype.getCiseNode = function() {
            return this.ciseNode;
          };
          CiSEOnCircleNodeExt.prototype.getAngle = function() {
            return this.angle;
          };
          CiSEOnCircleNodeExt.prototype.setAngle = function(angle) {
            this.angle = angle % IGeometry.TWO_PI;
            if (this.angle < 0) {
              this.angle += IGeometry.TWO_PI;
            }
          };
          CiSEOnCircleNodeExt.prototype.getIndex = function() {
            return this.orderIndex;
          };
          CiSEOnCircleNodeExt.prototype.setIndex = function(index) {
            this.orderIndex = index;
          };
          CiSEOnCircleNodeExt.prototype.getCharCode = function() {
            var charCode = void 0;
            if (this.orderIndex < 26)
              charCode = String.fromCharCode(97 + this.orderIndex);
            else if (this.orderIndex < 52)
              charCode = String.fromCharCode(65 + this.orderIndex);
            else
              charCode = "?";
            return charCode;
          };
          CiSEOnCircleNodeExt.prototype.getNextNode = function() {
            var circle = this.ciseNode.getOwner();
            var totalNodes = circle.getOnCircleNodes().length;
            var nextNodeIndex = this.orderIndex + 1;
            if (nextNodeIndex === totalNodes)
              nextNodeIndex = 0;
            return circle.getOnCircleNodes()[nextNodeIndex];
          };
          CiSEOnCircleNodeExt.prototype.getPrevNode = function() {
            var circle = this.ciseNode.getOwner();
            var nextNodeIndex = this.orderIndex - 1;
            if (nextNodeIndex === -1) {
              nextNodeIndex = circle.getOnCircleNodes().length - 1;
            }
            return circle.getOnCircleNodes()[nextNodeIndex];
          };
          CiSEOnCircleNodeExt.prototype.getNextNodeExt = function() {
            return this.getNextNode().getOnCircleNodeExt();
          };
          CiSEOnCircleNodeExt.prototype.prevNextNodeExt = function() {
            return this.getPrevNode().getOnCircleNodeExt();
          };
          CiSEOnCircleNodeExt.prototype.canSwapWithNext = function() {
            return this.canSwapWithNext;
          };
          CiSEOnCircleNodeExt.prototype.canSwapWithPrev = function() {
            return this.canSwapWithPrev;
          };
          CiSEOnCircleNodeExt.prototype.getDisplacementForSwap = function() {
            return this.displacementForSwap;
          };
          CiSEOnCircleNodeExt.prototype.setDisplacementForSwap = function(displacementForSwap) {
            this.displacementForSwap = displacementForSwap;
          };
          CiSEOnCircleNodeExt.prototype.addDisplacementForSwap = function(displacementIncrForSwap) {
            this.displacementForSwap = displacementIncrForSwap;
          };
          CiSEOnCircleNodeExt.prototype.updatePosition = function() {
            var ownerGraph = this.ciseNode.getOwner();
            var parentNode = ownerGraph.getParent();
            var parentX = parentNode.getCenterX();
            var parentY = parentNode.getCenterY();
            var xDifference = ownerGraph.getRadius() * Math.cos(this.angle);
            var yDifference = ownerGraph.getRadius() * Math.sin(this.angle);
            this.ciseNode.setCenter(parentX + xDifference, parentY + yDifference);
          };
          CiSEOnCircleNodeExt.prototype.getCircDistWithTheNode = function(refNode) {
            var otherIndex = refNode.getIndex();
            if (otherIndex === -1 || this.getIndex() === -1) {
              return -1;
            }
            var diff = this.getIndex() - otherIndex;
            if (diff < 0) {
              diff += this.ciseNode.getOwner().getOnCircleNodes().length;
            }
            return diff;
          };
          CiSEOnCircleNodeExt.prototype.calculateTotalCrossing = function() {
            var intraEdges = this.getIntraClusterEdges();
            var count = 0;
            var temp = [];
            this.ciseNode.getOwner().getIntraClusterEdges().forEach(function(edge) {
              temp.push(edge);
            });
            this.ciseNode.getEdges().forEach(function(edge) {
              var index = temp.indexOf(edge);
              if (index > -1) {
                temp.splice(index, 1);
              }
            });
            intraEdges.forEach(function(edge) {
              count += edge.calculateTotalCrossingWithList(temp);
            });
            return count;
          };
          CiSEOnCircleNodeExt.prototype.updateSwappingConditions = function() {
            var currentCrossingNumber = this.calculateTotalCrossing();
            var currentNodeIndex = this.orderIndex;
            var nextNodeExt = this.getNextNode().getOnCircleNodeExt();
            this.orderIndex = nextNodeExt.getIndex();
            nextNodeExt.setIndex(currentNodeIndex);
            var tempCrossingNumber = this.calculateTotalCrossing();
            this.canSwapWithNext = tempCrossingNumber <= currentCrossingNumber;
            nextNodeExt.setIndex(this.orderIndex);
            this.setIndex(currentNodeIndex);
            var prevNodeExt = this.getPrevNode().getOnCircleNodeExt();
            this.orderIndex = prevNodeExt.getIndex();
            prevNodeExt.setIndex(currentNodeIndex);
            tempCrossingNumber = this.calculateTotalCrossing();
            this.canSwapWithPrevious = tempCrossingNumber <= currentCrossingNumber;
            prevNodeExt.setIndex(this.orderIndex);
            this.setIndex(currentNodeIndex);
          };
          CiSEOnCircleNodeExt.prototype.swapWith = function(neighborExt) {
            this.ciseNode.getOwner().swapNodes(this.ciseNode, neighborExt.ciseNode);
          };
          CiSEOnCircleNodeExt.prototype.getInterClusterIntersections = function(other) {
            var count = 0;
            var thisInterClusterEdges = this.getInterClusterEdges();
            var otherInterClusterEdges = other.getInterClusterEdges();
            for (var i = 0; i < thisInterClusterEdges.length; i++) {
              var edge = thisInterClusterEdges[i];
              var point1 = this.ciseNode.getCenter();
              var point2 = edge.getOtherEnd(this.ciseNode).getCenter();
              for (var j = 0; j < otherInterClusterEdges.length; j++) {
                var otherEdge = otherInterClusterEdges[j];
                var point3 = other.ciseNode.getCenter();
                var point4 = otherEdge.getOtherEnd(other.ciseNode).getCenter();
                if (edge.getOtherEnd(this.ciseNode) !== otherEdge.getOtherEnd(other.ciseNode)) {
                  var result = IGeometry.doIntersect(point1, point2, point3, point4);
                  if (result)
                    count++;
                }
              }
            }
            return count;
          };
          CiSEOnCircleNodeExt.prototype.getInterClusterEdges = function() {
            if (this.interClusterEdges === null) {
              this.interClusterEdges = [];
              var edgesOfNode = this.ciseNode.getEdges();
              for (var i = 0; i < edgesOfNode.length; i++) {
                var edge = edgesOfNode[i];
                if (!edge.isIntraCluster) {
                  this.interClusterEdges.push(edge);
                }
              }
            }
            return this.interClusterEdges;
          };
          CiSEOnCircleNodeExt.prototype.getIntraClusterEdges = function() {
            if (this.intraClusterEdges === null) {
              this.intraClusterEdges = [];
              var edgesOfNode = this.ciseNode.getEdges();
              for (var i = 0; i < edgesOfNode.length; i++) {
                var edge = edgesOfNode[i];
                if (edge.isIntraCluster) {
                  this.intraClusterEdges.push(edge);
                }
              }
            }
            return this.intraClusterEdges;
          };
          module2.exports = CiSEOnCircleNodeExt;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          function CiSEOnCircleNodePair(first, second, displacement, inSameDirection) {
            this.firstNode = first;
            this.secondNode = second;
            this.discrepancy = displacement;
            this.inSameDir = inSameDirection;
          }
          CiSEOnCircleNodePair.prototype = Object.create;
          CiSEOnCircleNodePair.prototype.getDiscrepancy = function() {
            return this.discrepancy;
          };
          CiSEOnCircleNodePair.prototype.inSameDirection = function() {
            return this.inSameDir;
          };
          CiSEOnCircleNodePair.prototype.getFirstNode = function() {
            return this.firstNode;
          };
          CiSEOnCircleNodePair.prototype.getSecondNode = function() {
            return this.secondNode;
          };
          CiSEOnCircleNodePair.prototype.compareTo = function(other) {
            return this.getDiscrepancy() - other.getDiscrepancy();
          };
          CiSEOnCircleNodePair.prototype.swap = function() {
            this.getFirstNode().getOnCircleNodeExt().swapWith(this.getSecondNode().getOnCircleNodeExt());
          };
          CiSEOnCircleNodePair.prototype.equals = function(other) {
            var result = other instanceof CiSEOnCircleNodePair;
            if (result) {
              var pair = other;
              result &= this.firstNode.equals(pair.getFirstNode()) && this.secondNode.equals(pair.getSecondNode()) || this.secondNode.equals(pair.getFirstNode()) && this.firstNode.equals(pair.getSecondNode());
            }
            return result;
          };
          CiSEOnCircleNodePair.prototype.hashCode = function() {
            return this.firstNode.hashCode() + this.secondNode.hashCode();
          };
          CiSEOnCircleNodePair.prototype.toString = function() {
            var result = "Swap: " + this.getFirstNode().label;
            result += "<->" + this.getSecondNode().label;
            result += ", " + this.getDiscrepancy();
            return result;
          };
          module2.exports = CiSEOnCircleNodePair;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          function CircularForce(rotationAmount, displacementX, displacementY) {
            this.rotationAmount = rotationAmount;
            this.displacementX = displacementX;
            this.displacementY = displacementY;
          }
          CircularForce.prototype.getRotationAmount = function() {
            return this.rotationAmount;
          };
          CircularForce.prototype.setRotationAmount = function(rotationAmount) {
            this.rotationAmount = rotationAmount;
          };
          CircularForce.prototype.getDisplacementX = function() {
            return this.displacementX;
          };
          CircularForce.prototype.setDisplacementX = function(displacementX) {
            this.displacementX = displacementX;
          };
          CircularForce.prototype.getDisplacementY = function() {
            return this.displacementY;
          };
          CircularForce.prototype.setDisplacementY = function(displacementY) {
            this.displacementY = displacementY;
          };
          module2.exports = CircularForce;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var impl = __webpack_require__(4);
          var register = function register2(cytoscape3) {
            if (!cytoscape3) {
              return;
            }
            cytoscape3("layout", "cise", impl);
          };
          if (typeof cytoscape !== "undefined") {
            register(cytoscape);
          }
          module2.exports = register;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var _createClass = function() {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            return function(Constructor, protoProps, staticProps) {
              if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();
          var _get = function get(object, property, receiver) {
            if (object === null)
              object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);
            if (desc === void 0) {
              var parent = Object.getPrototypeOf(object);
              if (parent === null) {
                return void 0;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;
              if (getter === void 0) {
                return void 0;
              }
              return getter.call(receiver);
            }
          };
          function _classCallCheck(instance2, Constructor) {
            if (!(instance2 instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function _possibleConstructorReturn(self2, call) {
            if (!self2) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self2;
          }
          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
            if (superClass)
              Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }
          var CiSELayout = __webpack_require__(10);
          var CiSEConstants = __webpack_require__(1);
          var FDLayoutConstants = __webpack_require__(0).layoutBase.FDLayoutConstants;
          var ContinuousLayout = __webpack_require__(18);
          var defaults = ContinuousLayout.defaults;
          var assign = __webpack_require__(2);
          var isFn = function isFn2(fn) {
            return typeof fn === "function";
          };
          var optFn = function optFn2(opt, ele) {
            if (isFn(opt)) {
              return opt(ele);
            } else {
              return opt;
            }
          };
          var Layout2 = function(_ContinuousLayout) {
            _inherits(Layout3, _ContinuousLayout);
            function Layout3(options) {
              _classCallCheck(this, Layout3);
              var _this = _possibleConstructorReturn(this, (Layout3.__proto__ || Object.getPrototypeOf(Layout3)).call(this, assign({}, defaults, options)));
              if (options.nodeSeparation !== null && options.nodeSeparation !== void 0)
                CiSEConstants.DEFAULT_NODE_SEPARATION = options.nodeSeparation;
              else
                CiSEConstants.DEFAULT_NODE_SEPARATION = FDLayoutConstants.DEFAULT_EDGE_LENGTH / 4;
              if (options.idealInterClusterEdgeLengthCoefficient !== null && options.idealInterClusterEdgeLengthCoefficient !== void 0)
                CiSEConstants.DEFAULT_IDEAL_INTER_CLUSTER_EDGE_LENGTH_COEFF = options.idealInterClusterEdgeLengthCoefficient;
              else
                CiSEConstants.DEFAULT_IDEAL_INTER_CLUSTER_EDGE_LENGTH_COEFF = 1.4;
              if (options.allowNodesInsideCircle !== null && options.allowNodesInsideCircle !== void 0)
                CiSEConstants.DEFAULT_ALLOW_NODES_INSIDE_CIRCLE = options.allowNodesInsideCircle;
              else
                CiSEConstants.DEFAULT_ALLOW_NODES_INSIDE_CIRCLE = false;
              if (options.maxRatioOfNodesInsideCircle !== null && options.maxRatioOfNodesInsideCircle !== void 0)
                CiSEConstants.DEFAULT_MAX_RATIO_OF_NODES_INSIDE_CIRCLE = options.maxRatioOfNodesInsideCircle;
              else
                CiSEConstants.DEFAULT_MAX_RATIO_OF_NODES_INSIDE_CIRCLE = 0.1;
              if (options.springCoeff !== null && options.springCoeff !== void 0)
                CiSEConstants.DEFAULT_SPRING_STRENGTH = options.springCoeff;
              else
                CiSEConstants.DEFAULT_SPRING_STRENGTH = 1.5 * FDLayoutConstants.DEFAULT_SPRING_STRENGTH;
              if (options.nodeRepulsion != null)
                CiSEConstants.DEFAULT_REPULSION_STRENGTH = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH = options.nodeRepulsion;
              if (options.gravity != null)
                CiSEConstants.DEFAULT_GRAVITY_STRENGTH = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH = options.gravity;
              if (options.gravityRange != null)
                CiSEConstants.DEFAULT_GRAVITY_RANGE_FACTOR = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR = options.gravityRange;
              if (options.maxRatioOfNodesInsideCircle !== null && options.maxRatioOfNodesInsideCircle !== void 0)
                CiSEConstants.DEFAULT_MAX_RATIO_OF_NODES_INSIDE_CIRCLE = options.maxRatioOfNodesInsideCircle;
              else
                CiSEConstants.DEFAULT_MAX_RATIO_OF_NODES_INSIDE_CIRCLE = 0.1;
              return _this;
            }
            _createClass(Layout3, [{
              key: "prerun",
              value: function prerun() {
                var state = this.state;
                var clusters = [[]];
                if (this.options.clusters !== null && this.options.clusters !== void 0)
                  clusters = this.options.clusters;
                var nodes = state.nodes;
                var edges = state.edges;
                var ciseLayout = this.ciseLayout = new CiSELayout();
                var graphManager = this.graphManager = ciseLayout.newGraphManager();
                var root = this.root = graphManager.addRoot();
                this.idToLNode = ciseLayout.convertToClusteredGraph(nodes, edges, clusters);
                root.updateConnected();
                root.calcEstimatedSize();
                ciseLayout.calcNoOfChildrenForAllNodes();
                ciseLayout.doStep1();
                ciseLayout.doStep2();
                root.updateBounds(true);
                root.estimatedSize = Math.max(root.right - root.left, root.bottom - root.top);
                ciseLayout.prepareCirclesForReversal();
                ciseLayout.calcIdealEdgeLengths(false);
                this.initializerIndex = 0;
                this.isDone = false;
                this.isStepDone = false;
                this.timeToSwitchNextStep = true;
              }
            }, {
              key: "tick",
              value: function tick() {
                var _this2 = this;
                var self2 = this;
                var state = this.state;
                state.nodes.forEach(function(n) {
                  var s = _this2.getScratch(n);
                  var location = self2.idToLNode[n.data("id")];
                  s.x = location.getCenterX();
                  s.y = location.getCenterY();
                });
                if (this.timeToSwitchNextStep) {
                  switch (this.initializerIndex) {
                    case 0:
                      this.ciseLayout.step5Init();
                      break;
                    case 1:
                      this.ciseLayout.step3Init();
                      break;
                    case 2:
                      this.ciseLayout.step5Init();
                      break;
                    case 3:
                      this.ciseLayout.step4Init();
                      break;
                    case 4:
                      this.ciseLayout.findAndMoveInnerNodes();
                      this.ciseLayout.calcIdealEdgeLengths(true);
                      this.ciseLayout.step5Init();
                      break;
                  }
                  this.initializerIndex++;
                  this.ciseLayout.iterations = 0;
                  this.ciseLayout.totalDisplacement = 1e3;
                  this.timeToSwitchNextStep = false;
                }
                this.isStepDone = this.ciseLayout.runSpringEmbedderTick();
                if (this.isStepDone && this.initializerIndex < 5) {
                  this.timeToSwitchNextStep = true;
                }
                if (this.isStepDone && this.timeToSwitchNextStep === false) {
                  this.isDone = true;
                }
                return this.isDone;
              }
            }, {
              key: "postrun",
              value: function postrun() {
              }
            }, {
              key: "destroy",
              value: function destroy() {
                _get(Layout3.prototype.__proto__ || Object.getPrototypeOf(Layout3.prototype), "destroy", this).call(this);
                return this;
              }
            }]);
            return Layout3;
          }(ContinuousLayout);
          module2.exports = Layout2;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          module2.exports = Object.freeze({
            animate: false,
            refresh: 10,
            maxIterations: 2500,
            maxSimulationTime: 5e3,
            ungrabifyWhileSimulating: false,
            fit: true,
            padding: 30,
            boundingBox: void 0,
            ready: function ready() {
            },
            stop: function stop() {
            },
            randomize: false,
            infinite: false
          });
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var _createClass = function() {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            return function(Constructor, protoProps, staticProps) {
              if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();
          function _classCallCheck(instance2, Constructor) {
            if (!(instance2 instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var assign = __webpack_require__(2);
          var defaults = __webpack_require__(17);
          var makeBoundingBox = __webpack_require__(19);
          var _require = __webpack_require__(20), setInitialPositionState = _require.setInitialPositionState, refreshPositions = _require.refreshPositions, getNodePositionData = _require.getNodePositionData;
          var _require2 = __webpack_require__(21), multitick = _require2.multitick;
          var Layout2 = function() {
            function Layout3(options) {
              _classCallCheck(this, Layout3);
              var o2 = this.options = assign({}, defaults, options);
              var s = this.state = assign({}, o2, {
                layout: this,
                nodes: o2.eles.nodes(),
                edges: o2.eles.edges(),
                tickIndex: 0,
                firstUpdate: true
              });
              s.animateEnd = o2.animate && o2.animate === "end";
              s.animateContinuously = o2.animate && !s.animateEnd;
            }
            _createClass(Layout3, [{
              key: "getScratch",
              value: function getScratch(el) {
                var name = this.state.name;
                var scratch = el.scratch(name);
                if (!scratch) {
                  scratch = {};
                  el.scratch(name, scratch);
                }
                return scratch;
              }
            }, {
              key: "run",
              value: function run() {
                var l = this;
                var s = this.state;
                s.tickIndex = 0;
                s.firstUpdate = true;
                s.startTime = Date.now();
                s.running = true;
                s.currentBoundingBox = makeBoundingBox(s.boundingBox, s.cy);
                if (s.ready) {
                  l.one("ready", s.ready);
                }
                if (s.stop) {
                  l.one("stop", s.stop);
                }
                s.nodes.forEach(function(n) {
                  return setInitialPositionState(n, s);
                });
                l.prerun(s);
                if (s.animateContinuously) {
                  var ungrabify = function ungrabify2(node) {
                    if (!s.ungrabifyWhileSimulating) {
                      return;
                    }
                    var grabbable = getNodePositionData(node, s).grabbable = node.grabbable();
                    if (grabbable) {
                      node.ungrabify();
                    }
                  };
                  var regrabify = function regrabify2(node) {
                    if (!s.ungrabifyWhileSimulating) {
                      return;
                    }
                    var grabbable = getNodePositionData(node, s).grabbable;
                    if (grabbable) {
                      node.grabify();
                    }
                  };
                  var updateGrabState = function updateGrabState2(node) {
                    return getNodePositionData(node, s).grabbed = node.grabbed();
                  };
                  var onGrab = function onGrab2(_ref) {
                    var target = _ref.target;
                    updateGrabState(target);
                  };
                  var onFree = onGrab;
                  var onDrag = function onDrag2(_ref2) {
                    var target = _ref2.target;
                    var p = getNodePositionData(target, s);
                    var tp = target.position();
                    p.x = tp.x;
                    p.y = tp.y;
                  };
                  var listenToGrab = function listenToGrab2(node) {
                    node.on("grab", onGrab);
                    node.on("free", onFree);
                    node.on("drag", onDrag);
                  };
                  var unlistenToGrab = function unlistenToGrab2(node) {
                    node.removeListener("grab", onGrab);
                    node.removeListener("free", onFree);
                    node.removeListener("drag", onDrag);
                  };
                  var fit = function fit2() {
                    if (s.fit && s.animateContinuously) {
                      s.cy.fit(s.padding);
                    }
                  };
                  var onNotDone = function onNotDone2() {
                    refreshPositions(s.nodes, s);
                    fit();
                    requestAnimationFrame(_frame);
                  };
                  var _frame = function _frame2() {
                    multitick(s, onNotDone, _onDone);
                  };
                  var _onDone = function _onDone3() {
                    refreshPositions(s.nodes, s);
                    fit();
                    s.nodes.forEach(function(n) {
                      regrabify(n);
                      unlistenToGrab(n);
                    });
                    s.running = false;
                    l.emit("layoutstop");
                  };
                  l.emit("layoutstart");
                  s.nodes.forEach(function(n) {
                    ungrabify(n);
                    listenToGrab(n);
                  });
                  _frame();
                } else {
                  var done = false;
                  var _onNotDone = function _onNotDone2() {
                  };
                  var _onDone2 = function _onDone22() {
                    return done = true;
                  };
                  while (!done) {
                    multitick(s, _onNotDone, _onDone2);
                  }
                  s.eles.layoutPositions(this, s, function(node) {
                    var pd = getNodePositionData(node, s);
                    return {x: pd.x, y: pd.y};
                  });
                }
                l.postrun(s);
                return this;
              }
            }, {
              key: "prerun",
              value: function prerun() {
              }
            }, {
              key: "postrun",
              value: function postrun() {
              }
            }, {
              key: "tick",
              value: function tick() {
              }
            }, {
              key: "stop",
              value: function stop() {
                this.state.running = false;
                return this;
              }
            }, {
              key: "destroy",
              value: function destroy() {
                return this;
              }
            }]);
            return Layout3;
          }();
          module2.exports = Layout2;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          module2.exports = function(bb, cy) {
            if (bb == null) {
              bb = {x1: 0, y1: 0, w: cy.width(), h: cy.height()};
            } else {
              bb = {x1: bb.x1, x2: bb.x2, y1: bb.y1, y2: bb.y2, w: bb.w, h: bb.h};
            }
            if (bb.x2 == null) {
              bb.x2 = bb.x1 + bb.w;
            }
            if (bb.w == null) {
              bb.w = bb.x2 - bb.x1;
            }
            if (bb.y2 == null) {
              bb.y2 = bb.y1 + bb.h;
            }
            if (bb.h == null) {
              bb.h = bb.y2 - bb.y1;
            }
            return bb;
          };
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var assign = __webpack_require__(2);
          var setInitialPositionState = function setInitialPositionState2(node, state) {
            var p = node.position();
            var bb = state.currentBoundingBox;
            var scratch = node.scratch(state.name);
            if (scratch == null) {
              scratch = {};
              node.scratch(state.name, scratch);
            }
            assign(scratch, state.randomize ? {
              x: bb.x1 + Math.round(Math.random() * bb.w),
              y: bb.y1 + Math.round(Math.random() * bb.h)
            } : {
              x: p.x,
              y: p.y
            });
            scratch.locked = node.locked();
          };
          var getNodePositionData = function getNodePositionData2(node, state) {
            return node.scratch(state.name);
          };
          var refreshPositions = function refreshPositions2(nodes, state) {
            nodes.positions(function(node) {
              var scratch = node.scratch(state.name);
              return {
                x: scratch.x,
                y: scratch.y
              };
            });
          };
          module2.exports = {setInitialPositionState, getNodePositionData, refreshPositions};
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var nop = function nop2() {
          };
          var tick = function tick2(state) {
            var s = state;
            var l = state.layout;
            var tickIndicatesDone = l.tick(s);
            if (s.firstUpdate) {
              if (s.animateContinuously) {
                s.layout.emit("layoutready");
              }
              s.firstUpdate = false;
            }
            s.tickIndex++;
            return !s.infinite && tickIndicatesDone;
          };
          var multitick = function multitick2(state) {
            var onNotDone = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : nop;
            var onDone = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : nop;
            var done = false;
            var s = state;
            for (var i = 0; i < s.refresh; i++) {
              done = !s.running || tick(s);
              if (done) {
                break;
              }
            }
            if (!done) {
              onNotDone();
            } else {
              onDone();
            }
          };
          module2.exports = {tick, multitick};
        }
      ]);
    });
  });

  // node_modules/lodash/_listCacheClear.js
  var require_listCacheClear = __commonJS((exports, module) => {
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    module.exports = listCacheClear;
  });

  // node_modules/lodash/eq.js
  var require_eq = __commonJS((exports, module) => {
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    module.exports = eq;
  });

  // node_modules/lodash/_assocIndexOf.js
  var require_assocIndexOf = __commonJS((exports, module) => {
    var eq = require_eq();
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    module.exports = assocIndexOf;
  });

  // node_modules/lodash/_listCacheDelete.js
  var require_listCacheDelete = __commonJS((exports, module) => {
    var assocIndexOf = require_assocIndexOf();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    module.exports = listCacheDelete;
  });

  // node_modules/lodash/_listCacheGet.js
  var require_listCacheGet = __commonJS((exports, module) => {
    var assocIndexOf = require_assocIndexOf();
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    module.exports = listCacheGet;
  });

  // node_modules/lodash/_listCacheHas.js
  var require_listCacheHas = __commonJS((exports, module) => {
    var assocIndexOf = require_assocIndexOf();
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    module.exports = listCacheHas;
  });

  // node_modules/lodash/_listCacheSet.js
  var require_listCacheSet = __commonJS((exports, module) => {
    var assocIndexOf = require_assocIndexOf();
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    module.exports = listCacheSet;
  });

  // node_modules/lodash/_ListCache.js
  var require_ListCache = __commonJS((exports, module) => {
    var listCacheClear = require_listCacheClear();
    var listCacheDelete = require_listCacheDelete();
    var listCacheGet = require_listCacheGet();
    var listCacheHas = require_listCacheHas();
    var listCacheSet = require_listCacheSet();
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
  });

  // node_modules/lodash/_stackClear.js
  var require_stackClear = __commonJS((exports, module) => {
    var ListCache = require_ListCache();
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    module.exports = stackClear;
  });

  // node_modules/lodash/_stackDelete.js
  var require_stackDelete = __commonJS((exports, module) => {
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    module.exports = stackDelete;
  });

  // node_modules/lodash/_stackGet.js
  var require_stackGet = __commonJS((exports, module) => {
    function stackGet(key) {
      return this.__data__.get(key);
    }
    module.exports = stackGet;
  });

  // node_modules/lodash/_stackHas.js
  var require_stackHas = __commonJS((exports, module) => {
    function stackHas(key) {
      return this.__data__.has(key);
    }
    module.exports = stackHas;
  });

  // node_modules/lodash/_freeGlobal.js
  var require_freeGlobal = __commonJS((exports, module) => {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  });

  // node_modules/lodash/_root.js
  var require_root = __commonJS((exports, module) => {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module.exports = root;
  });

  // node_modules/lodash/_Symbol.js
  var require_Symbol = __commonJS((exports, module) => {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module.exports = Symbol2;
  });

  // node_modules/lodash/_getRawTag.js
  var require_getRawTag = __commonJS((exports, module) => {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module.exports = getRawTag;
  });

  // node_modules/lodash/_objectToString.js
  var require_objectToString = __commonJS((exports, module) => {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module.exports = objectToString;
  });

  // node_modules/lodash/_baseGetTag.js
  var require_baseGetTag = __commonJS((exports, module) => {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
  });

  // node_modules/lodash/isObject.js
  var require_isObject = __commonJS((exports, module) => {
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module.exports = isObject;
  });

  // node_modules/lodash/isFunction.js
  var require_isFunction = __commonJS((exports, module) => {
    var baseGetTag = require_baseGetTag();
    var isObject = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module.exports = isFunction;
  });

  // node_modules/lodash/_coreJsData.js
  var require_coreJsData = __commonJS((exports, module) => {
    var root = require_root();
    var coreJsData = root["__core-js_shared__"];
    module.exports = coreJsData;
  });

  // node_modules/lodash/_isMasked.js
  var require_isMasked = __commonJS((exports, module) => {
    var coreJsData = require_coreJsData();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module.exports = isMasked;
  });

  // node_modules/lodash/_toSource.js
  var require_toSource = __commonJS((exports, module) => {
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    module.exports = toSource;
  });

  // node_modules/lodash/_baseIsNative.js
  var require_baseIsNative = __commonJS((exports, module) => {
    var isFunction = require_isFunction();
    var isMasked = require_isMasked();
    var isObject = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    module.exports = baseIsNative;
  });

  // node_modules/lodash/_getValue.js
  var require_getValue = __commonJS((exports, module) => {
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    module.exports = getValue;
  });

  // node_modules/lodash/_getNative.js
  var require_getNative = __commonJS((exports, module) => {
    var baseIsNative = require_baseIsNative();
    var getValue = require_getValue();
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    module.exports = getNative;
  });

  // node_modules/lodash/_Map.js
  var require_Map = __commonJS((exports, module) => {
    var getNative = require_getNative();
    var root = require_root();
    var Map2 = getNative(root, "Map");
    module.exports = Map2;
  });

  // node_modules/lodash/_nativeCreate.js
  var require_nativeCreate = __commonJS((exports, module) => {
    var getNative = require_getNative();
    var nativeCreate = getNative(Object, "create");
    module.exports = nativeCreate;
  });

  // node_modules/lodash/_hashClear.js
  var require_hashClear = __commonJS((exports, module) => {
    var nativeCreate = require_nativeCreate();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    module.exports = hashClear;
  });

  // node_modules/lodash/_hashDelete.js
  var require_hashDelete = __commonJS((exports, module) => {
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = hashDelete;
  });

  // node_modules/lodash/_hashGet.js
  var require_hashGet = __commonJS((exports, module) => {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    module.exports = hashGet;
  });

  // node_modules/lodash/_hashHas.js
  var require_hashHas = __commonJS((exports, module) => {
    var nativeCreate = require_nativeCreate();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    module.exports = hashHas;
  });

  // node_modules/lodash/_hashSet.js
  var require_hashSet = __commonJS((exports, module) => {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    module.exports = hashSet;
  });

  // node_modules/lodash/_Hash.js
  var require_Hash = __commonJS((exports, module) => {
    var hashClear = require_hashClear();
    var hashDelete = require_hashDelete();
    var hashGet = require_hashGet();
    var hashHas = require_hashHas();
    var hashSet = require_hashSet();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
  });

  // node_modules/lodash/_mapCacheClear.js
  var require_mapCacheClear = __commonJS((exports, module) => {
    var Hash = require_Hash();
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        hash: new Hash(),
        map: new (Map2 || ListCache)(),
        string: new Hash()
      };
    }
    module.exports = mapCacheClear;
  });

  // node_modules/lodash/_isKeyable.js
  var require_isKeyable = __commonJS((exports, module) => {
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    module.exports = isKeyable;
  });

  // node_modules/lodash/_getMapData.js
  var require_getMapData = __commonJS((exports, module) => {
    var isKeyable = require_isKeyable();
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    module.exports = getMapData;
  });

  // node_modules/lodash/_mapCacheDelete.js
  var require_mapCacheDelete = __commonJS((exports, module) => {
    var getMapData = require_getMapData();
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = mapCacheDelete;
  });

  // node_modules/lodash/_mapCacheGet.js
  var require_mapCacheGet = __commonJS((exports, module) => {
    var getMapData = require_getMapData();
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    module.exports = mapCacheGet;
  });

  // node_modules/lodash/_mapCacheHas.js
  var require_mapCacheHas = __commonJS((exports, module) => {
    var getMapData = require_getMapData();
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    module.exports = mapCacheHas;
  });

  // node_modules/lodash/_mapCacheSet.js
  var require_mapCacheSet = __commonJS((exports, module) => {
    var getMapData = require_getMapData();
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    module.exports = mapCacheSet;
  });

  // node_modules/lodash/_MapCache.js
  var require_MapCache = __commonJS((exports, module) => {
    var mapCacheClear = require_mapCacheClear();
    var mapCacheDelete = require_mapCacheDelete();
    var mapCacheGet = require_mapCacheGet();
    var mapCacheHas = require_mapCacheHas();
    var mapCacheSet = require_mapCacheSet();
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
  });

  // node_modules/lodash/_stackSet.js
  var require_stackSet = __commonJS((exports, module) => {
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    var MapCache = require_MapCache();
    var LARGE_ARRAY_SIZE = 200;
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    module.exports = stackSet;
  });

  // node_modules/lodash/_Stack.js
  var require_Stack = __commonJS((exports, module) => {
    var ListCache = require_ListCache();
    var stackClear = require_stackClear();
    var stackDelete = require_stackDelete();
    var stackGet = require_stackGet();
    var stackHas = require_stackHas();
    var stackSet = require_stackSet();
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    module.exports = Stack;
  });

  // node_modules/lodash/_arrayEach.js
  var require_arrayEach = __commonJS((exports, module) => {
    function arrayEach(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
    module.exports = arrayEach;
  });

  // node_modules/lodash/_defineProperty.js
  var require_defineProperty = __commonJS((exports, module) => {
    var getNative = require_getNative();
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    module.exports = defineProperty;
  });

  // node_modules/lodash/_baseAssignValue.js
  var require_baseAssignValue = __commonJS((exports, module) => {
    var defineProperty = require_defineProperty();
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          configurable: true,
          enumerable: true,
          value,
          writable: true
        });
      } else {
        object[key] = value;
      }
    }
    module.exports = baseAssignValue;
  });

  // node_modules/lodash/_assignValue.js
  var require_assignValue = __commonJS((exports, module) => {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignValue;
  });

  // node_modules/lodash/_copyObject.js
  var require_copyObject = __commonJS((exports, module) => {
    var assignValue = require_assignValue();
    var baseAssignValue = require_baseAssignValue();
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    module.exports = copyObject;
  });

  // node_modules/lodash/_baseTimes.js
  var require_baseTimes = __commonJS((exports, module) => {
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    module.exports = baseTimes;
  });

  // node_modules/lodash/isObjectLike.js
  var require_isObjectLike = __commonJS((exports, module) => {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module.exports = isObjectLike;
  });

  // node_modules/lodash/_baseIsArguments.js
  var require_baseIsArguments = __commonJS((exports, module) => {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    module.exports = baseIsArguments;
  });

  // node_modules/lodash/isArguments.js
  var require_isArguments = __commonJS((exports, module) => {
    var baseIsArguments = require_baseIsArguments();
    var isObjectLike = require_isObjectLike();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    module.exports = isArguments;
  });

  // node_modules/lodash/isArray.js
  var require_isArray = __commonJS((exports, module) => {
    var isArray = Array.isArray;
    module.exports = isArray;
  });

  // node_modules/lodash/stubFalse.js
  var require_stubFalse = __commonJS((exports, module) => {
    function stubFalse() {
      return false;
    }
    module.exports = stubFalse;
  });

  // node_modules/lodash/isBuffer.js
  var require_isBuffer = __commonJS((exports, module) => {
    var root = require_root();
    var stubFalse = require_stubFalse();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    module.exports = isBuffer;
  });

  // node_modules/lodash/_isIndex.js
  var require_isIndex = __commonJS((exports, module) => {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    module.exports = isIndex;
  });

  // node_modules/lodash/isLength.js
  var require_isLength = __commonJS((exports, module) => {
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    module.exports = isLength;
  });

  // node_modules/lodash/_baseIsTypedArray.js
  var require_baseIsTypedArray = __commonJS((exports, module) => {
    var baseGetTag = require_baseGetTag();
    var isLength = require_isLength();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    module.exports = baseIsTypedArray;
  });

  // node_modules/lodash/_baseUnary.js
  var require_baseUnary = __commonJS((exports, module) => {
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    module.exports = baseUnary;
  });

  // node_modules/lodash/_nodeUtil.js
  var require_nodeUtil = __commonJS((exports, module) => {
    var freeGlobal = require_freeGlobal();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    module.exports = nodeUtil;
  });

  // node_modules/lodash/isTypedArray.js
  var require_isTypedArray = __commonJS((exports, module) => {
    var baseIsTypedArray = require_baseIsTypedArray();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    module.exports = isTypedArray;
  });

  // node_modules/lodash/_arrayLikeKeys.js
  var require_arrayLikeKeys = __commonJS((exports, module) => {
    var baseTimes = require_baseTimes();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isIndex = require_isIndex();
    var isTypedArray = require_isTypedArray();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = arrayLikeKeys;
  });

  // node_modules/lodash/_isPrototype.js
  var require_isPrototype = __commonJS((exports, module) => {
    var objectProto = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    module.exports = isPrototype;
  });

  // node_modules/lodash/_overArg.js
  var require_overArg = __commonJS((exports, module) => {
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    module.exports = overArg;
  });

  // node_modules/lodash/_nativeKeys.js
  var require_nativeKeys = __commonJS((exports, module) => {
    var overArg = require_overArg();
    var nativeKeys = overArg(Object.keys, Object);
    module.exports = nativeKeys;
  });

  // node_modules/lodash/_baseKeys.js
  var require_baseKeys = __commonJS((exports, module) => {
    var isPrototype = require_isPrototype();
    var nativeKeys = require_nativeKeys();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeys;
  });

  // node_modules/lodash/isArrayLike.js
  var require_isArrayLike = __commonJS((exports, module) => {
    var isFunction = require_isFunction();
    var isLength = require_isLength();
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    module.exports = isArrayLike;
  });

  // node_modules/lodash/keys.js
  var require_keys = __commonJS((exports, module) => {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeys = require_baseKeys();
    var isArrayLike = require_isArrayLike();
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    module.exports = keys;
  });

  // node_modules/lodash/_baseAssign.js
  var require_baseAssign = __commonJS((exports, module) => {
    var copyObject = require_copyObject();
    var keys = require_keys();
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }
    module.exports = baseAssign;
  });

  // node_modules/lodash/_nativeKeysIn.js
  var require_nativeKeysIn = __commonJS((exports, module) => {
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = nativeKeysIn;
  });

  // node_modules/lodash/_baseKeysIn.js
  var require_baseKeysIn = __commonJS((exports, module) => {
    var isObject = require_isObject();
    var isPrototype = require_isPrototype();
    var nativeKeysIn = require_nativeKeysIn();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeysIn;
  });

  // node_modules/lodash/keysIn.js
  var require_keysIn = __commonJS((exports, module) => {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeysIn = require_baseKeysIn();
    var isArrayLike = require_isArrayLike();
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    module.exports = keysIn;
  });

  // node_modules/lodash/_baseAssignIn.js
  var require_baseAssignIn = __commonJS((exports, module) => {
    var copyObject = require_copyObject();
    var keysIn = require_keysIn();
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }
    module.exports = baseAssignIn;
  });

  // node_modules/lodash/_cloneBuffer.js
  var require_cloneBuffer = __commonJS((exports, module) => {
    var root = require_root();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    module.exports = cloneBuffer;
  });

  // node_modules/lodash/_copyArray.js
  var require_copyArray = __commonJS((exports, module) => {
    function copyArray(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    module.exports = copyArray;
  });

  // node_modules/lodash/_arrayFilter.js
  var require_arrayFilter = __commonJS((exports, module) => {
    function arrayFilter(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    module.exports = arrayFilter;
  });

  // node_modules/lodash/stubArray.js
  var require_stubArray = __commonJS((exports, module) => {
    function stubArray() {
      return [];
    }
    module.exports = stubArray;
  });

  // node_modules/lodash/_getSymbols.js
  var require_getSymbols = __commonJS((exports, module) => {
    var arrayFilter = require_arrayFilter();
    var stubArray = require_stubArray();
    var objectProto = Object.prototype;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    module.exports = getSymbols;
  });

  // node_modules/lodash/_copySymbols.js
  var require_copySymbols = __commonJS((exports, module) => {
    var copyObject = require_copyObject();
    var getSymbols = require_getSymbols();
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }
    module.exports = copySymbols;
  });

  // node_modules/lodash/_arrayPush.js
  var require_arrayPush = __commonJS((exports, module) => {
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    module.exports = arrayPush;
  });

  // node_modules/lodash/_getPrototype.js
  var require_getPrototype = __commonJS((exports, module) => {
    var overArg = require_overArg();
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    module.exports = getPrototype;
  });

  // node_modules/lodash/_getSymbolsIn.js
  var require_getSymbolsIn = __commonJS((exports, module) => {
    var arrayPush = require_arrayPush();
    var getPrototype = require_getPrototype();
    var getSymbols = require_getSymbols();
    var stubArray = require_stubArray();
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };
    module.exports = getSymbolsIn;
  });

  // node_modules/lodash/_copySymbolsIn.js
  var require_copySymbolsIn = __commonJS((exports, module) => {
    var copyObject = require_copyObject();
    var getSymbolsIn = require_getSymbolsIn();
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }
    module.exports = copySymbolsIn;
  });

  // node_modules/lodash/_baseGetAllKeys.js
  var require_baseGetAllKeys = __commonJS((exports, module) => {
    var arrayPush = require_arrayPush();
    var isArray = require_isArray();
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    module.exports = baseGetAllKeys;
  });

  // node_modules/lodash/_getAllKeys.js
  var require_getAllKeys = __commonJS((exports, module) => {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbols = require_getSymbols();
    var keys = require_keys();
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    module.exports = getAllKeys;
  });

  // node_modules/lodash/_getAllKeysIn.js
  var require_getAllKeysIn = __commonJS((exports, module) => {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbolsIn = require_getSymbolsIn();
    var keysIn = require_keysIn();
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }
    module.exports = getAllKeysIn;
  });

  // node_modules/lodash/_DataView.js
  var require_DataView = __commonJS((exports, module) => {
    var getNative = require_getNative();
    var root = require_root();
    var DataView = getNative(root, "DataView");
    module.exports = DataView;
  });

  // node_modules/lodash/_Promise.js
  var require_Promise = __commonJS((exports, module) => {
    var getNative = require_getNative();
    var root = require_root();
    var Promise2 = getNative(root, "Promise");
    module.exports = Promise2;
  });

  // node_modules/lodash/_Set.js
  var require_Set = __commonJS((exports, module) => {
    var getNative = require_getNative();
    var root = require_root();
    var Set2 = getNative(root, "Set");
    module.exports = Set2;
  });

  // node_modules/lodash/_WeakMap.js
  var require_WeakMap = __commonJS((exports, module) => {
    var getNative = require_getNative();
    var root = require_root();
    var WeakMap = getNative(root, "WeakMap");
    module.exports = WeakMap;
  });

  // node_modules/lodash/_getTag.js
  var require_getTag = __commonJS((exports, module) => {
    var DataView = require_DataView();
    var Map2 = require_Map();
    var Promise2 = require_Promise();
    var Set2 = require_Set();
    var WeakMap = require_WeakMap();
    var baseGetTag = require_baseGetTag();
    var toSource = require_toSource();
    var mapTag = "[object Map]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var setTag = "[object Set]";
    var weakMapTag = "[object WeakMap]";
    var dataViewTag = "[object DataView]";
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap);
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    module.exports = getTag;
  });

  // node_modules/lodash/_initCloneArray.js
  var require_initCloneArray = __commonJS((exports, module) => {
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function initCloneArray(array) {
      var length = array.length, result = new array.constructor(length);
      if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }
    module.exports = initCloneArray;
  });

  // node_modules/lodash/_Uint8Array.js
  var require_Uint8Array = __commonJS((exports, module) => {
    var root = require_root();
    var Uint8Array2 = root.Uint8Array;
    module.exports = Uint8Array2;
  });

  // node_modules/lodash/_cloneArrayBuffer.js
  var require_cloneArrayBuffer = __commonJS((exports, module) => {
    var Uint8Array2 = require_Uint8Array();
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    module.exports = cloneArrayBuffer;
  });

  // node_modules/lodash/_cloneDataView.js
  var require_cloneDataView = __commonJS((exports, module) => {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }
    module.exports = cloneDataView;
  });

  // node_modules/lodash/_cloneRegExp.js
  var require_cloneRegExp = __commonJS((exports, module) => {
    var reFlags = /\w*$/;
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }
    module.exports = cloneRegExp;
  });

  // node_modules/lodash/_cloneSymbol.js
  var require_cloneSymbol = __commonJS((exports, module) => {
    var Symbol2 = require_Symbol();
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }
    module.exports = cloneSymbol;
  });

  // node_modules/lodash/_cloneTypedArray.js
  var require_cloneTypedArray = __commonJS((exports, module) => {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    module.exports = cloneTypedArray;
  });

  // node_modules/lodash/_initCloneByTag.js
  var require_initCloneByTag = __commonJS((exports, module) => {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    var cloneDataView = require_cloneDataView();
    var cloneRegExp = require_cloneRegExp();
    var cloneSymbol = require_cloneSymbol();
    var cloneTypedArray = require_cloneTypedArray();
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);
        case boolTag:
        case dateTag:
          return new Ctor(+object);
        case dataViewTag:
          return cloneDataView(object, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
          return cloneTypedArray(object, isDeep);
        case mapTag:
          return new Ctor();
        case numberTag:
        case stringTag:
          return new Ctor(object);
        case regexpTag:
          return cloneRegExp(object);
        case setTag:
          return new Ctor();
        case symbolTag:
          return cloneSymbol(object);
      }
    }
    module.exports = initCloneByTag;
  });

  // node_modules/lodash/_baseCreate.js
  var require_baseCreate = __commonJS((exports, module) => {
    var isObject = require_isObject();
    var objectCreate = Object.create;
    var baseCreate = function() {
      function object() {
      }
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    module.exports = baseCreate;
  });

  // node_modules/lodash/_initCloneObject.js
  var require_initCloneObject = __commonJS((exports, module) => {
    var baseCreate = require_baseCreate();
    var getPrototype = require_getPrototype();
    var isPrototype = require_isPrototype();
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    module.exports = initCloneObject;
  });

  // node_modules/lodash/_baseIsMap.js
  var require_baseIsMap = __commonJS((exports, module) => {
    var getTag = require_getTag();
    var isObjectLike = require_isObjectLike();
    var mapTag = "[object Map]";
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }
    module.exports = baseIsMap;
  });

  // node_modules/lodash/isMap.js
  var require_isMap = __commonJS((exports, module) => {
    var baseIsMap = require_baseIsMap();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsMap = nodeUtil && nodeUtil.isMap;
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
    module.exports = isMap;
  });

  // node_modules/lodash/_baseIsSet.js
  var require_baseIsSet = __commonJS((exports, module) => {
    var getTag = require_getTag();
    var isObjectLike = require_isObjectLike();
    var setTag = "[object Set]";
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }
    module.exports = baseIsSet;
  });

  // node_modules/lodash/isSet.js
  var require_isSet = __commonJS((exports, module) => {
    var baseIsSet = require_baseIsSet();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsSet = nodeUtil && nodeUtil.isSet;
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
    module.exports = isSet;
  });

  // node_modules/lodash/_baseClone.js
  var require_baseClone = __commonJS((exports, module) => {
    var Stack = require_Stack();
    var arrayEach = require_arrayEach();
    var assignValue = require_assignValue();
    var baseAssign = require_baseAssign();
    var baseAssignIn = require_baseAssignIn();
    var cloneBuffer = require_cloneBuffer();
    var copyArray = require_copyArray();
    var copySymbols = require_copySymbols();
    var copySymbolsIn = require_copySymbolsIn();
    var getAllKeys = require_getAllKeys();
    var getAllKeysIn = require_getAllKeysIn();
    var getTag = require_getTag();
    var initCloneArray = require_initCloneArray();
    var initCloneByTag = require_initCloneByTag();
    var initCloneObject = require_initCloneObject();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isMap = require_isMap();
    var isObject = require_isObject();
    var isSet = require_isSet();
    var keys = require_keys();
    var keysIn = require_keysIn();
    var CLONE_DEEP_FLAG = 1;
    var CLONE_FLAT_FLAG = 2;
    var CLONE_SYMBOLS_FLAG = 4;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== void 0) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
          result = isFlat || isFunc ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      stack || (stack = new Stack());
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);
      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key2) {
          result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
        });
      }
      var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
      var props = isArr ? void 0 : keysFunc(value);
      arrayEach(props || value, function(subValue, key2) {
        if (props) {
          key2 = subValue;
          subValue = value[key2];
        }
        assignValue(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
      });
      return result;
    }
    module.exports = baseClone;
  });

  // node_modules/lodash/clone.js
  var require_clone = __commonJS((exports, module) => {
    var baseClone = require_baseClone();
    var CLONE_SYMBOLS_FLAG = 4;
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }
    module.exports = clone;
  });

  // node_modules/lodash/constant.js
  var require_constant = __commonJS((exports, module) => {
    function constant(value) {
      return function() {
        return value;
      };
    }
    module.exports = constant;
  });

  // node_modules/lodash/_createBaseFor.js
  var require_createBaseFor = __commonJS((exports, module) => {
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    module.exports = createBaseFor;
  });

  // node_modules/lodash/_baseFor.js
  var require_baseFor = __commonJS((exports, module) => {
    var createBaseFor = require_createBaseFor();
    var baseFor = createBaseFor();
    module.exports = baseFor;
  });

  // node_modules/lodash/_baseForOwn.js
  var require_baseForOwn = __commonJS((exports, module) => {
    var baseFor = require_baseFor();
    var keys = require_keys();
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }
    module.exports = baseForOwn;
  });

  // node_modules/lodash/_createBaseEach.js
  var require_createBaseEach = __commonJS((exports, module) => {
    var isArrayLike = require_isArrayLike();
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
        while (fromRight ? index-- : ++index < length) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }
    module.exports = createBaseEach;
  });

  // node_modules/lodash/_baseEach.js
  var require_baseEach = __commonJS((exports, module) => {
    var baseForOwn = require_baseForOwn();
    var createBaseEach = require_createBaseEach();
    var baseEach = createBaseEach(baseForOwn);
    module.exports = baseEach;
  });

  // node_modules/lodash/identity.js
  var require_identity = __commonJS((exports, module) => {
    function identity(value) {
      return value;
    }
    module.exports = identity;
  });

  // node_modules/lodash/_castFunction.js
  var require_castFunction = __commonJS((exports, module) => {
    var identity = require_identity();
    function castFunction(value) {
      return typeof value == "function" ? value : identity;
    }
    module.exports = castFunction;
  });

  // node_modules/lodash/forEach.js
  var require_forEach = __commonJS((exports, module) => {
    var arrayEach = require_arrayEach();
    var baseEach = require_baseEach();
    var castFunction = require_castFunction();
    var isArray = require_isArray();
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, castFunction(iteratee));
    }
    module.exports = forEach;
  });

  // node_modules/lodash/each.js
  var require_each = __commonJS((exports, module) => {
    module.exports = require_forEach();
  });

  // node_modules/lodash/_baseFilter.js
  var require_baseFilter = __commonJS((exports, module) => {
    var baseEach = require_baseEach();
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection2) {
        if (predicate(value, index, collection2)) {
          result.push(value);
        }
      });
      return result;
    }
    module.exports = baseFilter;
  });

  // node_modules/lodash/_setCacheAdd.js
  var require_setCacheAdd = __commonJS((exports, module) => {
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    module.exports = setCacheAdd;
  });

  // node_modules/lodash/_setCacheHas.js
  var require_setCacheHas = __commonJS((exports, module) => {
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    module.exports = setCacheHas;
  });

  // node_modules/lodash/_SetCache.js
  var require_SetCache = __commonJS((exports, module) => {
    var MapCache = require_MapCache();
    var setCacheAdd = require_setCacheAdd();
    var setCacheHas = require_setCacheHas();
    function SetCache(values) {
      var index = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module.exports = SetCache;
  });

  // node_modules/lodash/_arraySome.js
  var require_arraySome = __commonJS((exports, module) => {
    function arraySome(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    module.exports = arraySome;
  });

  // node_modules/lodash/_cacheHas.js
  var require_cacheHas = __commonJS((exports, module) => {
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    module.exports = cacheHas;
  });

  // node_modules/lodash/_equalArrays.js
  var require_equalArrays = __commonJS((exports, module) => {
    var SetCache = require_SetCache();
    var arraySome = require_arraySome();
    var cacheHas = require_cacheHas();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    module.exports = equalArrays;
  });

  // node_modules/lodash/_mapToArray.js
  var require_mapToArray = __commonJS((exports, module) => {
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    module.exports = mapToArray;
  });

  // node_modules/lodash/_setToArray.js
  var require_setToArray = __commonJS((exports, module) => {
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    module.exports = setToArray;
  });

  // node_modules/lodash/_equalByTag.js
  var require_equalByTag = __commonJS((exports, module) => {
    var Symbol2 = require_Symbol();
    var Uint8Array2 = require_Uint8Array();
    var eq = require_eq();
    var equalArrays = require_equalArrays();
    var mapToArray = require_mapToArray();
    var setToArray = require_setToArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    module.exports = equalByTag;
  });

  // node_modules/lodash/_equalObjects.js
  var require_equalObjects = __commonJS((exports, module) => {
    var getAllKeys = require_getAllKeys();
    var COMPARE_PARTIAL_FLAG = 1;
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    module.exports = equalObjects;
  });

  // node_modules/lodash/_baseIsEqualDeep.js
  var require_baseIsEqualDeep = __commonJS((exports, module) => {
    var Stack = require_Stack();
    var equalArrays = require_equalArrays();
    var equalByTag = require_equalByTag();
    var equalObjects = require_equalObjects();
    var getTag = require_getTag();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isTypedArray = require_isTypedArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var objectTag = "[object Object]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    module.exports = baseIsEqualDeep;
  });

  // node_modules/lodash/_baseIsEqual.js
  var require_baseIsEqual = __commonJS((exports, module) => {
    var baseIsEqualDeep = require_baseIsEqualDeep();
    var isObjectLike = require_isObjectLike();
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    module.exports = baseIsEqual;
  });

  // node_modules/lodash/_baseIsMatch.js
  var require_baseIsMatch = __commonJS((exports, module) => {
    var Stack = require_Stack();
    var baseIsEqual = require_baseIsEqual();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length, length = index, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    module.exports = baseIsMatch;
  });

  // node_modules/lodash/_isStrictComparable.js
  var require_isStrictComparable = __commonJS((exports, module) => {
    var isObject = require_isObject();
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }
    module.exports = isStrictComparable;
  });

  // node_modules/lodash/_getMatchData.js
  var require_getMatchData = __commonJS((exports, module) => {
    var isStrictComparable = require_isStrictComparable();
    var keys = require_keys();
    function getMatchData(object) {
      var result = keys(object), length = result.length;
      while (length--) {
        var key = result[length], value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    module.exports = getMatchData;
  });

  // node_modules/lodash/_matchesStrictComparable.js
  var require_matchesStrictComparable = __commonJS((exports, module) => {
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    module.exports = matchesStrictComparable;
  });

  // node_modules/lodash/_baseMatches.js
  var require_baseMatches = __commonJS((exports, module) => {
    var baseIsMatch = require_baseIsMatch();
    var getMatchData = require_getMatchData();
    var matchesStrictComparable = require_matchesStrictComparable();
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    module.exports = baseMatches;
  });

  // node_modules/lodash/isSymbol.js
  var require_isSymbol = __commonJS((exports, module) => {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    module.exports = isSymbol;
  });

  // node_modules/lodash/_isKey.js
  var require_isKey = __commonJS((exports, module) => {
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    module.exports = isKey;
  });

  // node_modules/lodash/memoize.js
  var require_memoize = __commonJS((exports, module) => {
    var MapCache = require_MapCache();
    var FUNC_ERROR_TEXT = "Expected a function";
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    module.exports = memoize;
  });

  // node_modules/lodash/_memoizeCapped.js
  var require_memoizeCapped = __commonJS((exports, module) => {
    var memoize = require_memoize();
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });
      var cache = result.cache;
      return result;
    }
    module.exports = memoizeCapped;
  });

  // node_modules/lodash/_stringToPath.js
  var require_stringToPath = __commonJS((exports, module) => {
    var memoizeCapped = require_memoizeCapped();
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    module.exports = stringToPath;
  });

  // node_modules/lodash/_arrayMap.js
  var require_arrayMap = __commonJS((exports, module) => {
    function arrayMap(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    module.exports = arrayMap;
  });

  // node_modules/lodash/_baseToString.js
  var require_baseToString = __commonJS((exports, module) => {
    var Symbol2 = require_Symbol();
    var arrayMap = require_arrayMap();
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray(value)) {
        return arrayMap(value, baseToString) + "";
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = baseToString;
  });

  // node_modules/lodash/toString.js
  var require_toString = __commonJS((exports, module) => {
    var baseToString = require_baseToString();
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    module.exports = toString;
  });

  // node_modules/lodash/_castPath.js
  var require_castPath = __commonJS((exports, module) => {
    var isArray = require_isArray();
    var isKey = require_isKey();
    var stringToPath = require_stringToPath();
    var toString = require_toString();
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }
    module.exports = castPath;
  });

  // node_modules/lodash/_toKey.js
  var require_toKey = __commonJS((exports, module) => {
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = toKey;
  });

  // node_modules/lodash/_baseGet.js
  var require_baseGet = __commonJS((exports, module) => {
    var castPath = require_castPath();
    var toKey = require_toKey();
    function baseGet(object, path) {
      path = castPath(path, object);
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return index && index == length ? object : void 0;
    }
    module.exports = baseGet;
  });

  // node_modules/lodash/get.js
  var require_get = __commonJS((exports, module) => {
    var baseGet = require_baseGet();
    function get(object, path, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path);
      return result === void 0 ? defaultValue : result;
    }
    module.exports = get;
  });

  // node_modules/lodash/_baseHasIn.js
  var require_baseHasIn = __commonJS((exports, module) => {
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }
    module.exports = baseHasIn;
  });

  // node_modules/lodash/_hasPath.js
  var require_hasPath = __commonJS((exports, module) => {
    var castPath = require_castPath();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isIndex = require_isIndex();
    var isLength = require_isLength();
    var toKey = require_toKey();
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);
      var index = -1, length = path.length, result = false;
      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
    }
    module.exports = hasPath;
  });

  // node_modules/lodash/hasIn.js
  var require_hasIn = __commonJS((exports, module) => {
    var baseHasIn = require_baseHasIn();
    var hasPath = require_hasPath();
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }
    module.exports = hasIn;
  });

  // node_modules/lodash/_baseMatchesProperty.js
  var require_baseMatchesProperty = __commonJS((exports, module) => {
    var baseIsEqual = require_baseIsEqual();
    var get = require_get();
    var hasIn = require_hasIn();
    var isKey = require_isKey();
    var isStrictComparable = require_isStrictComparable();
    var matchesStrictComparable = require_matchesStrictComparable();
    var toKey = require_toKey();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }
    module.exports = baseMatchesProperty;
  });

  // node_modules/lodash/_baseProperty.js
  var require_baseProperty = __commonJS((exports, module) => {
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    module.exports = baseProperty;
  });

  // node_modules/lodash/_basePropertyDeep.js
  var require_basePropertyDeep = __commonJS((exports, module) => {
    var baseGet = require_baseGet();
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }
    module.exports = basePropertyDeep;
  });

  // node_modules/lodash/property.js
  var require_property = __commonJS((exports, module) => {
    var baseProperty = require_baseProperty();
    var basePropertyDeep = require_basePropertyDeep();
    var isKey = require_isKey();
    var toKey = require_toKey();
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    module.exports = property;
  });

  // node_modules/lodash/_baseIteratee.js
  var require_baseIteratee = __commonJS((exports, module) => {
    var baseMatches = require_baseMatches();
    var baseMatchesProperty = require_baseMatchesProperty();
    var identity = require_identity();
    var isArray = require_isArray();
    var property = require_property();
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == "object") {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    module.exports = baseIteratee;
  });

  // node_modules/lodash/filter.js
  var require_filter = __commonJS((exports, module) => {
    var arrayFilter = require_arrayFilter();
    var baseFilter = require_baseFilter();
    var baseIteratee = require_baseIteratee();
    var isArray = require_isArray();
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, baseIteratee(predicate, 3));
    }
    module.exports = filter;
  });

  // node_modules/lodash/_baseHas.js
  var require_baseHas = __commonJS((exports, module) => {
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }
    module.exports = baseHas;
  });

  // node_modules/lodash/has.js
  var require_has = __commonJS((exports, module) => {
    var baseHas = require_baseHas();
    var hasPath = require_hasPath();
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }
    module.exports = has;
  });

  // node_modules/lodash/isEmpty.js
  var require_isEmpty = __commonJS((exports, module) => {
    var baseKeys = require_baseKeys();
    var getTag = require_getTag();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isArrayLike = require_isArrayLike();
    var isBuffer = require_isBuffer();
    var isPrototype = require_isPrototype();
    var isTypedArray = require_isTypedArray();
    var mapTag = "[object Map]";
    var setTag = "[object Set]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }
    module.exports = isEmpty;
  });

  // node_modules/lodash/isUndefined.js
  var require_isUndefined = __commonJS((exports, module) => {
    function isUndefined(value) {
      return value === void 0;
    }
    module.exports = isUndefined;
  });

  // node_modules/lodash/_baseMap.js
  var require_baseMap = __commonJS((exports, module) => {
    var baseEach = require_baseEach();
    var isArrayLike = require_isArrayLike();
    function baseMap(collection, iteratee) {
      var index = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
      baseEach(collection, function(value, key, collection2) {
        result[++index] = iteratee(value, key, collection2);
      });
      return result;
    }
    module.exports = baseMap;
  });

  // node_modules/lodash/map.js
  var require_map = __commonJS((exports, module) => {
    var arrayMap = require_arrayMap();
    var baseIteratee = require_baseIteratee();
    var baseMap = require_baseMap();
    var isArray = require_isArray();
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, baseIteratee(iteratee, 3));
    }
    module.exports = map;
  });

  // node_modules/lodash/_arrayReduce.js
  var require_arrayReduce = __commonJS((exports, module) => {
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1, length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }
    module.exports = arrayReduce;
  });

  // node_modules/lodash/_baseReduce.js
  var require_baseReduce = __commonJS((exports, module) => {
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function(value, index, collection2) {
        accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
      });
      return accumulator;
    }
    module.exports = baseReduce;
  });

  // node_modules/lodash/reduce.js
  var require_reduce = __commonJS((exports, module) => {
    var arrayReduce = require_arrayReduce();
    var baseEach = require_baseEach();
    var baseIteratee = require_baseIteratee();
    var baseReduce = require_baseReduce();
    var isArray = require_isArray();
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
      return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }
    module.exports = reduce;
  });

  // node_modules/lodash/isString.js
  var require_isString = __commonJS((exports, module) => {
    var baseGetTag = require_baseGetTag();
    var isArray = require_isArray();
    var isObjectLike = require_isObjectLike();
    var stringTag = "[object String]";
    function isString(value) {
      return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
    }
    module.exports = isString;
  });

  // node_modules/lodash/_asciiSize.js
  var require_asciiSize = __commonJS((exports, module) => {
    var baseProperty = require_baseProperty();
    var asciiSize = baseProperty("length");
    module.exports = asciiSize;
  });

  // node_modules/lodash/_hasUnicode.js
  var require_hasUnicode = __commonJS((exports, module) => {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsZWJ = "\\u200d";
    var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }
    module.exports = hasUnicode;
  });

  // node_modules/lodash/_unicodeSize.js
  var require_unicodeSize = __commonJS((exports, module) => {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsAstral = "[" + rsAstralRange + "]";
    var rsCombo = "[" + rsComboRange + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsZWJ = "\\u200d";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange + "]?";
    var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
    var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;
      while (reUnicode.test(string)) {
        ++result;
      }
      return result;
    }
    module.exports = unicodeSize;
  });

  // node_modules/lodash/_stringSize.js
  var require_stringSize = __commonJS((exports, module) => {
    var asciiSize = require_asciiSize();
    var hasUnicode = require_hasUnicode();
    var unicodeSize = require_unicodeSize();
    function stringSize(string) {
      return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
    }
    module.exports = stringSize;
  });

  // node_modules/lodash/size.js
  var require_size = __commonJS((exports, module) => {
    var baseKeys = require_baseKeys();
    var getTag = require_getTag();
    var isArrayLike = require_isArrayLike();
    var isString = require_isString();
    var stringSize = require_stringSize();
    var mapTag = "[object Map]";
    var setTag = "[object Set]";
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }
    module.exports = size;
  });

  // node_modules/lodash/transform.js
  var require_transform = __commonJS((exports, module) => {
    var arrayEach = require_arrayEach();
    var baseCreate = require_baseCreate();
    var baseForOwn = require_baseForOwn();
    var baseIteratee = require_baseIteratee();
    var getPrototype = require_getPrototype();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isFunction = require_isFunction();
    var isObject = require_isObject();
    var isTypedArray = require_isTypedArray();
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
      iteratee = baseIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor() : [];
        } else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        } else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
        return iteratee(accumulator, value, index, object2);
      });
      return accumulator;
    }
    module.exports = transform;
  });

  // node_modules/lodash/_isFlattenable.js
  var require_isFlattenable = __commonJS((exports, module) => {
    var Symbol2 = require_Symbol();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }
    module.exports = isFlattenable;
  });

  // node_modules/lodash/_baseFlatten.js
  var require_baseFlatten = __commonJS((exports, module) => {
    var arrayPush = require_arrayPush();
    var isFlattenable = require_isFlattenable();
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1, length = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    module.exports = baseFlatten;
  });

  // node_modules/lodash/_apply.js
  var require_apply = __commonJS((exports, module) => {
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    module.exports = apply;
  });

  // node_modules/lodash/_overRest.js
  var require_overRest = __commonJS((exports, module) => {
    var apply = require_apply();
    var nativeMax = Math.max;
    function overRest(func, start, transform) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }
    module.exports = overRest;
  });

  // node_modules/lodash/_baseSetToString.js
  var require_baseSetToString = __commonJS((exports, module) => {
    var constant = require_constant();
    var defineProperty = require_defineProperty();
    var identity = require_identity();
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, "toString", {
        configurable: true,
        enumerable: false,
        value: constant(string),
        writable: true
      });
    };
    module.exports = baseSetToString;
  });

  // node_modules/lodash/_shortOut.js
  var require_shortOut = __commonJS((exports, module) => {
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var nativeNow = Date.now;
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    module.exports = shortOut;
  });

  // node_modules/lodash/_setToString.js
  var require_setToString = __commonJS((exports, module) => {
    var baseSetToString = require_baseSetToString();
    var shortOut = require_shortOut();
    var setToString = shortOut(baseSetToString);
    module.exports = setToString;
  });

  // node_modules/lodash/_baseRest.js
  var require_baseRest = __commonJS((exports, module) => {
    var identity = require_identity();
    var overRest = require_overRest();
    var setToString = require_setToString();
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + "");
    }
    module.exports = baseRest;
  });

  // node_modules/lodash/_baseFindIndex.js
  var require_baseFindIndex = __commonJS((exports, module) => {
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }
    module.exports = baseFindIndex;
  });

  // node_modules/lodash/_baseIsNaN.js
  var require_baseIsNaN = __commonJS((exports, module) => {
    function baseIsNaN(value) {
      return value !== value;
    }
    module.exports = baseIsNaN;
  });

  // node_modules/lodash/_strictIndexOf.js
  var require_strictIndexOf = __commonJS((exports, module) => {
    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1, length = array.length;
      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }
    module.exports = strictIndexOf;
  });

  // node_modules/lodash/_baseIndexOf.js
  var require_baseIndexOf = __commonJS((exports, module) => {
    var baseFindIndex = require_baseFindIndex();
    var baseIsNaN = require_baseIsNaN();
    var strictIndexOf = require_strictIndexOf();
    function baseIndexOf(array, value, fromIndex) {
      return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }
    module.exports = baseIndexOf;
  });

  // node_modules/lodash/_arrayIncludes.js
  var require_arrayIncludes = __commonJS((exports, module) => {
    var baseIndexOf = require_baseIndexOf();
    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }
    module.exports = arrayIncludes;
  });

  // node_modules/lodash/_arrayIncludesWith.js
  var require_arrayIncludesWith = __commonJS((exports, module) => {
    function arrayIncludesWith(array, value, comparator) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }
    module.exports = arrayIncludesWith;
  });

  // node_modules/lodash/noop.js
  var require_noop = __commonJS((exports, module) => {
    function noop() {
    }
    module.exports = noop;
  });

  // node_modules/lodash/_createSet.js
  var require_createSet = __commonJS((exports, module) => {
    var Set2 = require_Set();
    var noop = require_noop();
    var setToArray = require_setToArray();
    var INFINITY = 1 / 0;
    var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values) {
      return new Set2(values);
    };
    module.exports = createSet;
  });

  // node_modules/lodash/_baseUniq.js
  var require_baseUniq = __commonJS((exports, module) => {
    var SetCache = require_SetCache();
    var arrayIncludes = require_arrayIncludes();
    var arrayIncludesWith = require_arrayIncludesWith();
    var cacheHas = require_cacheHas();
    var createSet = require_createSet();
    var setToArray = require_setToArray();
    var LARGE_ARRAY_SIZE = 200;
    function baseUniq(array, iteratee, comparator) {
      var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }
      outer:
        while (++index < length) {
          var value = array[index], computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
      return result;
    }
    module.exports = baseUniq;
  });

  // node_modules/lodash/isArrayLikeObject.js
  var require_isArrayLikeObject = __commonJS((exports, module) => {
    var isArrayLike = require_isArrayLike();
    var isObjectLike = require_isObjectLike();
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    module.exports = isArrayLikeObject;
  });

  // node_modules/lodash/union.js
  var require_union = __commonJS((exports, module) => {
    var baseFlatten = require_baseFlatten();
    var baseRest = require_baseRest();
    var baseUniq = require_baseUniq();
    var isArrayLikeObject = require_isArrayLikeObject();
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });
    module.exports = union;
  });

  // node_modules/lodash/_baseValues.js
  var require_baseValues = __commonJS((exports, module) => {
    var arrayMap = require_arrayMap();
    function baseValues(object, props) {
      return arrayMap(props, function(key) {
        return object[key];
      });
    }
    module.exports = baseValues;
  });

  // node_modules/lodash/values.js
  var require_values = __commonJS((exports, module) => {
    var baseValues = require_baseValues();
    var keys = require_keys();
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }
    module.exports = values;
  });

  // node_modules/graphlib/lib/lodash.js
  var require_lodash2 = __commonJS((exports, module) => {
    var lodash;
    if (true) {
      try {
        lodash = {
          clone: require_clone(),
          constant: require_constant(),
          each: require_each(),
          filter: require_filter(),
          has: require_has(),
          isArray: require_isArray(),
          isEmpty: require_isEmpty(),
          isFunction: require_isFunction(),
          isUndefined: require_isUndefined(),
          keys: require_keys(),
          map: require_map(),
          reduce: require_reduce(),
          size: require_size(),
          transform: require_transform(),
          union: require_union(),
          values: require_values()
        };
      } catch (e) {
      }
    }
    if (!lodash) {
      lodash = window._;
    }
    module.exports = lodash;
  });

  // node_modules/graphlib/lib/graph.js
  var require_graph = __commonJS((exports, module) => {
    "use strict";
    var _ = require_lodash2();
    module.exports = Graph;
    var DEFAULT_EDGE_NAME = "\0";
    var GRAPH_NODE = "\0";
    var EDGE_KEY_DELIM = "";
    function Graph(opts) {
      this._isDirected = _.has(opts, "directed") ? opts.directed : true;
      this._isMultigraph = _.has(opts, "multigraph") ? opts.multigraph : false;
      this._isCompound = _.has(opts, "compound") ? opts.compound : false;
      this._label = void 0;
      this._defaultNodeLabelFn = _.constant(void 0);
      this._defaultEdgeLabelFn = _.constant(void 0);
      this._nodes = {};
      if (this._isCompound) {
        this._parent = {};
        this._children = {};
        this._children[GRAPH_NODE] = {};
      }
      this._in = {};
      this._preds = {};
      this._out = {};
      this._sucs = {};
      this._edgeObjs = {};
      this._edgeLabels = {};
    }
    Graph.prototype._nodeCount = 0;
    Graph.prototype._edgeCount = 0;
    Graph.prototype.isDirected = function() {
      return this._isDirected;
    };
    Graph.prototype.isMultigraph = function() {
      return this._isMultigraph;
    };
    Graph.prototype.isCompound = function() {
      return this._isCompound;
    };
    Graph.prototype.setGraph = function(label) {
      this._label = label;
      return this;
    };
    Graph.prototype.graph = function() {
      return this._label;
    };
    Graph.prototype.setDefaultNodeLabel = function(newDefault) {
      if (!_.isFunction(newDefault)) {
        newDefault = _.constant(newDefault);
      }
      this._defaultNodeLabelFn = newDefault;
      return this;
    };
    Graph.prototype.nodeCount = function() {
      return this._nodeCount;
    };
    Graph.prototype.nodes = function() {
      return _.keys(this._nodes);
    };
    Graph.prototype.sources = function() {
      var self2 = this;
      return _.filter(this.nodes(), function(v) {
        return _.isEmpty(self2._in[v]);
      });
    };
    Graph.prototype.sinks = function() {
      var self2 = this;
      return _.filter(this.nodes(), function(v) {
        return _.isEmpty(self2._out[v]);
      });
    };
    Graph.prototype.setNodes = function(vs, value) {
      var args = arguments;
      var self2 = this;
      _.each(vs, function(v) {
        if (args.length > 1) {
          self2.setNode(v, value);
        } else {
          self2.setNode(v);
        }
      });
      return this;
    };
    Graph.prototype.setNode = function(v, value) {
      if (_.has(this._nodes, v)) {
        if (arguments.length > 1) {
          this._nodes[v] = value;
        }
        return this;
      }
      this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);
      if (this._isCompound) {
        this._parent[v] = GRAPH_NODE;
        this._children[v] = {};
        this._children[GRAPH_NODE][v] = true;
      }
      this._in[v] = {};
      this._preds[v] = {};
      this._out[v] = {};
      this._sucs[v] = {};
      ++this._nodeCount;
      return this;
    };
    Graph.prototype.node = function(v) {
      return this._nodes[v];
    };
    Graph.prototype.hasNode = function(v) {
      return _.has(this._nodes, v);
    };
    Graph.prototype.removeNode = function(v) {
      var self2 = this;
      if (_.has(this._nodes, v)) {
        var removeEdge = function(e) {
          self2.removeEdge(self2._edgeObjs[e]);
        };
        delete this._nodes[v];
        if (this._isCompound) {
          this._removeFromParentsChildList(v);
          delete this._parent[v];
          _.each(this.children(v), function(child) {
            self2.setParent(child);
          });
          delete this._children[v];
        }
        _.each(_.keys(this._in[v]), removeEdge);
        delete this._in[v];
        delete this._preds[v];
        _.each(_.keys(this._out[v]), removeEdge);
        delete this._out[v];
        delete this._sucs[v];
        --this._nodeCount;
      }
      return this;
    };
    Graph.prototype.setParent = function(v, parent) {
      if (!this._isCompound) {
        throw new Error("Cannot set parent in a non-compound graph");
      }
      if (_.isUndefined(parent)) {
        parent = GRAPH_NODE;
      } else {
        parent += "";
        for (var ancestor = parent; !_.isUndefined(ancestor); ancestor = this.parent(ancestor)) {
          if (ancestor === v) {
            throw new Error("Setting " + parent + " as parent of " + v + " would create a cycle");
          }
        }
        this.setNode(parent);
      }
      this.setNode(v);
      this._removeFromParentsChildList(v);
      this._parent[v] = parent;
      this._children[parent][v] = true;
      return this;
    };
    Graph.prototype._removeFromParentsChildList = function(v) {
      delete this._children[this._parent[v]][v];
    };
    Graph.prototype.parent = function(v) {
      if (this._isCompound) {
        var parent = this._parent[v];
        if (parent !== GRAPH_NODE) {
          return parent;
        }
      }
    };
    Graph.prototype.children = function(v) {
      if (_.isUndefined(v)) {
        v = GRAPH_NODE;
      }
      if (this._isCompound) {
        var children = this._children[v];
        if (children) {
          return _.keys(children);
        }
      } else if (v === GRAPH_NODE) {
        return this.nodes();
      } else if (this.hasNode(v)) {
        return [];
      }
    };
    Graph.prototype.predecessors = function(v) {
      var predsV = this._preds[v];
      if (predsV) {
        return _.keys(predsV);
      }
    };
    Graph.prototype.successors = function(v) {
      var sucsV = this._sucs[v];
      if (sucsV) {
        return _.keys(sucsV);
      }
    };
    Graph.prototype.neighbors = function(v) {
      var preds = this.predecessors(v);
      if (preds) {
        return _.union(preds, this.successors(v));
      }
    };
    Graph.prototype.isLeaf = function(v) {
      var neighbors;
      if (this.isDirected()) {
        neighbors = this.successors(v);
      } else {
        neighbors = this.neighbors(v);
      }
      return neighbors.length === 0;
    };
    Graph.prototype.filterNodes = function(filter) {
      var copy = new this.constructor({
        directed: this._isDirected,
        multigraph: this._isMultigraph,
        compound: this._isCompound
      });
      copy.setGraph(this.graph());
      var self2 = this;
      _.each(this._nodes, function(value, v) {
        if (filter(v)) {
          copy.setNode(v, value);
        }
      });
      _.each(this._edgeObjs, function(e) {
        if (copy.hasNode(e.v) && copy.hasNode(e.w)) {
          copy.setEdge(e, self2.edge(e));
        }
      });
      var parents = {};
      function findParent(v) {
        var parent = self2.parent(v);
        if (parent === void 0 || copy.hasNode(parent)) {
          parents[v] = parent;
          return parent;
        } else if (parent in parents) {
          return parents[parent];
        } else {
          return findParent(parent);
        }
      }
      if (this._isCompound) {
        _.each(copy.nodes(), function(v) {
          copy.setParent(v, findParent(v));
        });
      }
      return copy;
    };
    Graph.prototype.setDefaultEdgeLabel = function(newDefault) {
      if (!_.isFunction(newDefault)) {
        newDefault = _.constant(newDefault);
      }
      this._defaultEdgeLabelFn = newDefault;
      return this;
    };
    Graph.prototype.edgeCount = function() {
      return this._edgeCount;
    };
    Graph.prototype.edges = function() {
      return _.values(this._edgeObjs);
    };
    Graph.prototype.setPath = function(vs, value) {
      var self2 = this;
      var args = arguments;
      _.reduce(vs, function(v, w) {
        if (args.length > 1) {
          self2.setEdge(v, w, value);
        } else {
          self2.setEdge(v, w);
        }
        return w;
      });
      return this;
    };
    Graph.prototype.setEdge = function() {
      var v, w, name, value;
      var valueSpecified = false;
      var arg0 = arguments[0];
      if (typeof arg0 === "object" && arg0 !== null && "v" in arg0) {
        v = arg0.v;
        w = arg0.w;
        name = arg0.name;
        if (arguments.length === 2) {
          value = arguments[1];
          valueSpecified = true;
        }
      } else {
        v = arg0;
        w = arguments[1];
        name = arguments[3];
        if (arguments.length > 2) {
          value = arguments[2];
          valueSpecified = true;
        }
      }
      v = "" + v;
      w = "" + w;
      if (!_.isUndefined(name)) {
        name = "" + name;
      }
      var e = edgeArgsToId(this._isDirected, v, w, name);
      if (_.has(this._edgeLabels, e)) {
        if (valueSpecified) {
          this._edgeLabels[e] = value;
        }
        return this;
      }
      if (!_.isUndefined(name) && !this._isMultigraph) {
        throw new Error("Cannot set a named edge when isMultigraph = false");
      }
      this.setNode(v);
      this.setNode(w);
      this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);
      var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);
      v = edgeObj.v;
      w = edgeObj.w;
      Object.freeze(edgeObj);
      this._edgeObjs[e] = edgeObj;
      incrementOrInitEntry(this._preds[w], v);
      incrementOrInitEntry(this._sucs[v], w);
      this._in[w][e] = edgeObj;
      this._out[v][e] = edgeObj;
      this._edgeCount++;
      return this;
    };
    Graph.prototype.edge = function(v, w, name) {
      var e = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v, w, name);
      return this._edgeLabels[e];
    };
    Graph.prototype.hasEdge = function(v, w, name) {
      var e = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v, w, name);
      return _.has(this._edgeLabels, e);
    };
    Graph.prototype.removeEdge = function(v, w, name) {
      var e = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v, w, name);
      var edge = this._edgeObjs[e];
      if (edge) {
        v = edge.v;
        w = edge.w;
        delete this._edgeLabels[e];
        delete this._edgeObjs[e];
        decrementOrRemoveEntry(this._preds[w], v);
        decrementOrRemoveEntry(this._sucs[v], w);
        delete this._in[w][e];
        delete this._out[v][e];
        this._edgeCount--;
      }
      return this;
    };
    Graph.prototype.inEdges = function(v, u) {
      var inV = this._in[v];
      if (inV) {
        var edges = _.values(inV);
        if (!u) {
          return edges;
        }
        return _.filter(edges, function(edge) {
          return edge.v === u;
        });
      }
    };
    Graph.prototype.outEdges = function(v, w) {
      var outV = this._out[v];
      if (outV) {
        var edges = _.values(outV);
        if (!w) {
          return edges;
        }
        return _.filter(edges, function(edge) {
          return edge.w === w;
        });
      }
    };
    Graph.prototype.nodeEdges = function(v, w) {
      var inEdges = this.inEdges(v, w);
      if (inEdges) {
        return inEdges.concat(this.outEdges(v, w));
      }
    };
    function incrementOrInitEntry(map, k) {
      if (map[k]) {
        map[k]++;
      } else {
        map[k] = 1;
      }
    }
    function decrementOrRemoveEntry(map, k) {
      if (!--map[k]) {
        delete map[k];
      }
    }
    function edgeArgsToId(isDirected, v_, w_, name) {
      var v = "" + v_;
      var w = "" + w_;
      if (!isDirected && v > w) {
        var tmp = v;
        v = w;
        w = tmp;
      }
      return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM + (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);
    }
    function edgeArgsToObj(isDirected, v_, w_, name) {
      var v = "" + v_;
      var w = "" + w_;
      if (!isDirected && v > w) {
        var tmp = v;
        v = w;
        w = tmp;
      }
      var edgeObj = {v, w};
      if (name) {
        edgeObj.name = name;
      }
      return edgeObj;
    }
    function edgeObjToId(isDirected, edgeObj) {
      return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);
    }
  });

  // node_modules/graphlib/lib/version.js
  var require_version = __commonJS((exports, module) => {
    module.exports = "2.1.8";
  });

  // node_modules/graphlib/lib/index.js
  var require_lib = __commonJS((exports, module) => {
    module.exports = {
      Graph: require_graph(),
      version: require_version()
    };
  });

  // node_modules/graphlib/lib/json.js
  var require_json = __commonJS((exports, module) => {
    var _ = require_lodash2();
    var Graph = require_graph();
    module.exports = {
      write,
      read
    };
    function write(g) {
      var json = {
        options: {
          directed: g.isDirected(),
          multigraph: g.isMultigraph(),
          compound: g.isCompound()
        },
        nodes: writeNodes(g),
        edges: writeEdges(g)
      };
      if (!_.isUndefined(g.graph())) {
        json.value = _.clone(g.graph());
      }
      return json;
    }
    function writeNodes(g) {
      return _.map(g.nodes(), function(v) {
        var nodeValue = g.node(v);
        var parent = g.parent(v);
        var node = {v};
        if (!_.isUndefined(nodeValue)) {
          node.value = nodeValue;
        }
        if (!_.isUndefined(parent)) {
          node.parent = parent;
        }
        return node;
      });
    }
    function writeEdges(g) {
      return _.map(g.edges(), function(e) {
        var edgeValue = g.edge(e);
        var edge = {v: e.v, w: e.w};
        if (!_.isUndefined(e.name)) {
          edge.name = e.name;
        }
        if (!_.isUndefined(edgeValue)) {
          edge.value = edgeValue;
        }
        return edge;
      });
    }
    function read(json) {
      var g = new Graph(json.options).setGraph(json.value);
      _.each(json.nodes, function(entry) {
        g.setNode(entry.v, entry.value);
        if (entry.parent) {
          g.setParent(entry.v, entry.parent);
        }
      });
      _.each(json.edges, function(entry) {
        g.setEdge({v: entry.v, w: entry.w, name: entry.name}, entry.value);
      });
      return g;
    }
  });

  // node_modules/graphlib/lib/alg/components.js
  var require_components = __commonJS((exports, module) => {
    var _ = require_lodash2();
    module.exports = components;
    function components(g) {
      var visited = {};
      var cmpts = [];
      var cmpt;
      function dfs(v) {
        if (_.has(visited, v))
          return;
        visited[v] = true;
        cmpt.push(v);
        _.each(g.successors(v), dfs);
        _.each(g.predecessors(v), dfs);
      }
      _.each(g.nodes(), function(v) {
        cmpt = [];
        dfs(v);
        if (cmpt.length) {
          cmpts.push(cmpt);
        }
      });
      return cmpts;
    }
  });

  // node_modules/graphlib/lib/data/priority-queue.js
  var require_priority_queue = __commonJS((exports, module) => {
    var _ = require_lodash2();
    module.exports = PriorityQueue;
    function PriorityQueue() {
      this._arr = [];
      this._keyIndices = {};
    }
    PriorityQueue.prototype.size = function() {
      return this._arr.length;
    };
    PriorityQueue.prototype.keys = function() {
      return this._arr.map(function(x) {
        return x.key;
      });
    };
    PriorityQueue.prototype.has = function(key) {
      return _.has(this._keyIndices, key);
    };
    PriorityQueue.prototype.priority = function(key) {
      var index = this._keyIndices[key];
      if (index !== void 0) {
        return this._arr[index].priority;
      }
    };
    PriorityQueue.prototype.min = function() {
      if (this.size() === 0) {
        throw new Error("Queue underflow");
      }
      return this._arr[0].key;
    };
    PriorityQueue.prototype.add = function(key, priority) {
      var keyIndices = this._keyIndices;
      key = String(key);
      if (!_.has(keyIndices, key)) {
        var arr = this._arr;
        var index = arr.length;
        keyIndices[key] = index;
        arr.push({key, priority});
        this._decrease(index);
        return true;
      }
      return false;
    };
    PriorityQueue.prototype.removeMin = function() {
      this._swap(0, this._arr.length - 1);
      var min = this._arr.pop();
      delete this._keyIndices[min.key];
      this._heapify(0);
      return min.key;
    };
    PriorityQueue.prototype.decrease = function(key, priority) {
      var index = this._keyIndices[key];
      if (priority > this._arr[index].priority) {
        throw new Error("New priority is greater than current priority. Key: " + key + " Old: " + this._arr[index].priority + " New: " + priority);
      }
      this._arr[index].priority = priority;
      this._decrease(index);
    };
    PriorityQueue.prototype._heapify = function(i) {
      var arr = this._arr;
      var l = 2 * i;
      var r = l + 1;
      var largest = i;
      if (l < arr.length) {
        largest = arr[l].priority < arr[largest].priority ? l : largest;
        if (r < arr.length) {
          largest = arr[r].priority < arr[largest].priority ? r : largest;
        }
        if (largest !== i) {
          this._swap(i, largest);
          this._heapify(largest);
        }
      }
    };
    PriorityQueue.prototype._decrease = function(index) {
      var arr = this._arr;
      var priority = arr[index].priority;
      var parent;
      while (index !== 0) {
        parent = index >> 1;
        if (arr[parent].priority < priority) {
          break;
        }
        this._swap(index, parent);
        index = parent;
      }
    };
    PriorityQueue.prototype._swap = function(i, j) {
      var arr = this._arr;
      var keyIndices = this._keyIndices;
      var origArrI = arr[i];
      var origArrJ = arr[j];
      arr[i] = origArrJ;
      arr[j] = origArrI;
      keyIndices[origArrJ.key] = i;
      keyIndices[origArrI.key] = j;
    };
  });

  // node_modules/graphlib/lib/alg/dijkstra.js
  var require_dijkstra = __commonJS((exports, module) => {
    var _ = require_lodash2();
    var PriorityQueue = require_priority_queue();
    module.exports = dijkstra;
    var DEFAULT_WEIGHT_FUNC = _.constant(1);
    function dijkstra(g, source, weightFn, edgeFn) {
      return runDijkstra(g, String(source), weightFn || DEFAULT_WEIGHT_FUNC, edgeFn || function(v) {
        return g.outEdges(v);
      });
    }
    function runDijkstra(g, source, weightFn, edgeFn) {
      var results = {};
      var pq = new PriorityQueue();
      var v, vEntry;
      var updateNeighbors = function(edge) {
        var w = edge.v !== v ? edge.v : edge.w;
        var wEntry = results[w];
        var weight = weightFn(edge);
        var distance = vEntry.distance + weight;
        if (weight < 0) {
          throw new Error("dijkstra does not allow negative edge weights. Bad edge: " + edge + " Weight: " + weight);
        }
        if (distance < wEntry.distance) {
          wEntry.distance = distance;
          wEntry.predecessor = v;
          pq.decrease(w, distance);
        }
      };
      g.nodes().forEach(function(v2) {
        var distance = v2 === source ? 0 : Number.POSITIVE_INFINITY;
        results[v2] = {distance};
        pq.add(v2, distance);
      });
      while (pq.size() > 0) {
        v = pq.removeMin();
        vEntry = results[v];
        if (vEntry.distance === Number.POSITIVE_INFINITY) {
          break;
        }
        edgeFn(v).forEach(updateNeighbors);
      }
      return results;
    }
  });

  // node_modules/graphlib/lib/alg/dijkstra-all.js
  var require_dijkstra_all = __commonJS((exports, module) => {
    var dijkstra = require_dijkstra();
    var _ = require_lodash2();
    module.exports = dijkstraAll;
    function dijkstraAll(g, weightFunc, edgeFunc) {
      return _.transform(g.nodes(), function(acc, v) {
        acc[v] = dijkstra(g, v, weightFunc, edgeFunc);
      }, {});
    }
  });

  // node_modules/graphlib/lib/alg/tarjan.js
  var require_tarjan = __commonJS((exports, module) => {
    var _ = require_lodash2();
    module.exports = tarjan;
    function tarjan(g) {
      var index = 0;
      var stack = [];
      var visited = {};
      var results = [];
      function dfs(v) {
        var entry = visited[v] = {
          onStack: true,
          lowlink: index,
          index: index++
        };
        stack.push(v);
        g.successors(v).forEach(function(w2) {
          if (!_.has(visited, w2)) {
            dfs(w2);
            entry.lowlink = Math.min(entry.lowlink, visited[w2].lowlink);
          } else if (visited[w2].onStack) {
            entry.lowlink = Math.min(entry.lowlink, visited[w2].index);
          }
        });
        if (entry.lowlink === entry.index) {
          var cmpt = [];
          var w;
          do {
            w = stack.pop();
            visited[w].onStack = false;
            cmpt.push(w);
          } while (v !== w);
          results.push(cmpt);
        }
      }
      g.nodes().forEach(function(v) {
        if (!_.has(visited, v)) {
          dfs(v);
        }
      });
      return results;
    }
  });

  // node_modules/graphlib/lib/alg/find-cycles.js
  var require_find_cycles = __commonJS((exports, module) => {
    var _ = require_lodash2();
    var tarjan = require_tarjan();
    module.exports = findCycles;
    function findCycles(g) {
      return _.filter(tarjan(g), function(cmpt) {
        return cmpt.length > 1 || cmpt.length === 1 && g.hasEdge(cmpt[0], cmpt[0]);
      });
    }
  });

  // node_modules/graphlib/lib/alg/floyd-warshall.js
  var require_floyd_warshall = __commonJS((exports, module) => {
    var _ = require_lodash2();
    module.exports = floydWarshall;
    var DEFAULT_WEIGHT_FUNC = _.constant(1);
    function floydWarshall(g, weightFn, edgeFn) {
      return runFloydWarshall(g, weightFn || DEFAULT_WEIGHT_FUNC, edgeFn || function(v) {
        return g.outEdges(v);
      });
    }
    function runFloydWarshall(g, weightFn, edgeFn) {
      var results = {};
      var nodes = g.nodes();
      nodes.forEach(function(v) {
        results[v] = {};
        results[v][v] = {distance: 0};
        nodes.forEach(function(w) {
          if (v !== w) {
            results[v][w] = {distance: Number.POSITIVE_INFINITY};
          }
        });
        edgeFn(v).forEach(function(edge) {
          var w = edge.v === v ? edge.w : edge.v;
          var d = weightFn(edge);
          results[v][w] = {distance: d, predecessor: v};
        });
      });
      nodes.forEach(function(k) {
        var rowK = results[k];
        nodes.forEach(function(i) {
          var rowI = results[i];
          nodes.forEach(function(j) {
            var ik = rowI[k];
            var kj = rowK[j];
            var ij = rowI[j];
            var altDistance = ik.distance + kj.distance;
            if (altDistance < ij.distance) {
              ij.distance = altDistance;
              ij.predecessor = kj.predecessor;
            }
          });
        });
      });
      return results;
    }
  });

  // node_modules/graphlib/lib/alg/topsort.js
  var require_topsort = __commonJS((exports, module) => {
    var _ = require_lodash2();
    module.exports = topsort;
    topsort.CycleException = CycleException;
    function topsort(g) {
      var visited = {};
      var stack = {};
      var results = [];
      function visit(node) {
        if (_.has(stack, node)) {
          throw new CycleException();
        }
        if (!_.has(visited, node)) {
          stack[node] = true;
          visited[node] = true;
          _.each(g.predecessors(node), visit);
          delete stack[node];
          results.push(node);
        }
      }
      _.each(g.sinks(), visit);
      if (_.size(visited) !== g.nodeCount()) {
        throw new CycleException();
      }
      return results;
    }
    function CycleException() {
    }
    CycleException.prototype = new Error();
  });

  // node_modules/graphlib/lib/alg/is-acyclic.js
  var require_is_acyclic = __commonJS((exports, module) => {
    var topsort = require_topsort();
    module.exports = isAcyclic;
    function isAcyclic(g) {
      try {
        topsort(g);
      } catch (e) {
        if (e instanceof topsort.CycleException) {
          return false;
        }
        throw e;
      }
      return true;
    }
  });

  // node_modules/graphlib/lib/alg/dfs.js
  var require_dfs = __commonJS((exports, module) => {
    var _ = require_lodash2();
    module.exports = dfs;
    function dfs(g, vs, order) {
      if (!_.isArray(vs)) {
        vs = [vs];
      }
      var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);
      var acc = [];
      var visited = {};
      _.each(vs, function(v) {
        if (!g.hasNode(v)) {
          throw new Error("Graph does not have node: " + v);
        }
        doDfs(g, v, order === "post", visited, navigation, acc);
      });
      return acc;
    }
    function doDfs(g, v, postorder, visited, navigation, acc) {
      if (!_.has(visited, v)) {
        visited[v] = true;
        if (!postorder) {
          acc.push(v);
        }
        _.each(navigation(v), function(w) {
          doDfs(g, w, postorder, visited, navigation, acc);
        });
        if (postorder) {
          acc.push(v);
        }
      }
    }
  });

  // node_modules/graphlib/lib/alg/postorder.js
  var require_postorder = __commonJS((exports, module) => {
    var dfs = require_dfs();
    module.exports = postorder;
    function postorder(g, vs) {
      return dfs(g, vs, "post");
    }
  });

  // node_modules/graphlib/lib/alg/preorder.js
  var require_preorder = __commonJS((exports, module) => {
    var dfs = require_dfs();
    module.exports = preorder;
    function preorder(g, vs) {
      return dfs(g, vs, "pre");
    }
  });

  // node_modules/graphlib/lib/alg/prim.js
  var require_prim = __commonJS((exports, module) => {
    var _ = require_lodash2();
    var Graph = require_graph();
    var PriorityQueue = require_priority_queue();
    module.exports = prim;
    function prim(g, weightFunc) {
      var result = new Graph();
      var parents = {};
      var pq = new PriorityQueue();
      var v;
      function updateNeighbors(edge) {
        var w = edge.v === v ? edge.w : edge.v;
        var pri = pq.priority(w);
        if (pri !== void 0) {
          var edgeWeight = weightFunc(edge);
          if (edgeWeight < pri) {
            parents[w] = v;
            pq.decrease(w, edgeWeight);
          }
        }
      }
      if (g.nodeCount() === 0) {
        return result;
      }
      _.each(g.nodes(), function(v2) {
        pq.add(v2, Number.POSITIVE_INFINITY);
        result.setNode(v2);
      });
      pq.decrease(g.nodes()[0], 0);
      var init = false;
      while (pq.size() > 0) {
        v = pq.removeMin();
        if (_.has(parents, v)) {
          result.setEdge(v, parents[v]);
        } else if (init) {
          throw new Error("Input graph is not connected: " + g);
        } else {
          init = true;
        }
        g.nodeEdges(v).forEach(updateNeighbors);
      }
      return result;
    }
  });

  // node_modules/graphlib/lib/alg/index.js
  var require_alg = __commonJS((exports, module) => {
    module.exports = {
      components: require_components(),
      dijkstra: require_dijkstra(),
      dijkstraAll: require_dijkstra_all(),
      findCycles: require_find_cycles(),
      floydWarshall: require_floyd_warshall(),
      isAcyclic: require_is_acyclic(),
      postorder: require_postorder(),
      preorder: require_preorder(),
      prim: require_prim(),
      tarjan: require_tarjan(),
      topsort: require_topsort()
    };
  });

  // node_modules/graphlib/index.js
  var require_graphlib = __commonJS((exports, module) => {
    var lib = require_lib();
    module.exports = {
      Graph: lib.Graph,
      json: require_json(),
      alg: require_alg(),
      version: lib.version
    };
  });

  // node_modules/dagre/lib/graphlib.js
  var require_graphlib2 = __commonJS((exports, module) => {
    var graphlib;
    if (true) {
      try {
        graphlib = require_graphlib();
      } catch (e) {
      }
    }
    if (!graphlib) {
      graphlib = window.graphlib;
    }
    module.exports = graphlib;
  });

  // node_modules/lodash/cloneDeep.js
  var require_cloneDeep = __commonJS((exports, module) => {
    var baseClone = require_baseClone();
    var CLONE_DEEP_FLAG = 1;
    var CLONE_SYMBOLS_FLAG = 4;
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }
    module.exports = cloneDeep;
  });

  // node_modules/lodash/_isIterateeCall.js
  var require_isIterateeCall = __commonJS((exports, module) => {
    var eq = require_eq();
    var isArrayLike = require_isArrayLike();
    var isIndex = require_isIndex();
    var isObject = require_isObject();
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
        return eq(object[index], value);
      }
      return false;
    }
    module.exports = isIterateeCall;
  });

  // node_modules/lodash/defaults.js
  var require_defaults = __commonJS((exports, module) => {
    var baseRest = require_baseRest();
    var eq = require_eq();
    var isIterateeCall = require_isIterateeCall();
    var keysIn = require_keysIn();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var defaults = baseRest(function(object, sources) {
      object = Object(object);
      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : void 0;
      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }
      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;
        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];
          if (value === void 0 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
            object[key] = source[key];
          }
        }
      }
      return object;
    });
    module.exports = defaults;
  });

  // node_modules/lodash/_createFind.js
  var require_createFind = __commonJS((exports, module) => {
    var baseIteratee = require_baseIteratee();
    var isArrayLike = require_isArrayLike();
    var keys = require_keys();
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = baseIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) {
            return iteratee(iterable[key], key, iterable);
          };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : void 0;
      };
    }
    module.exports = createFind;
  });

  // node_modules/lodash/toNumber.js
  var require_toNumber = __commonJS((exports, module) => {
    var isObject = require_isObject();
    var isSymbol = require_isSymbol();
    var NAN = 0 / 0;
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = toNumber;
  });

  // node_modules/lodash/toFinite.js
  var require_toFinite = __commonJS((exports, module) => {
    var toNumber = require_toNumber();
    var INFINITY = 1 / 0;
    var MAX_INTEGER = 17976931348623157e292;
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    module.exports = toFinite;
  });

  // node_modules/lodash/toInteger.js
  var require_toInteger = __commonJS((exports, module) => {
    var toFinite = require_toFinite();
    function toInteger(value) {
      var result = toFinite(value), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    module.exports = toInteger;
  });

  // node_modules/lodash/findIndex.js
  var require_findIndex = __commonJS((exports, module) => {
    var baseFindIndex = require_baseFindIndex();
    var baseIteratee = require_baseIteratee();
    var toInteger = require_toInteger();
    var nativeMax = Math.max;
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, baseIteratee(predicate, 3), index);
    }
    module.exports = findIndex;
  });

  // node_modules/lodash/find.js
  var require_find = __commonJS((exports, module) => {
    var createFind = require_createFind();
    var findIndex = require_findIndex();
    var find = createFind(findIndex);
    module.exports = find;
  });

  // node_modules/lodash/flatten.js
  var require_flatten = __commonJS((exports, module) => {
    var baseFlatten = require_baseFlatten();
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }
    module.exports = flatten;
  });

  // node_modules/lodash/forIn.js
  var require_forIn = __commonJS((exports, module) => {
    var baseFor = require_baseFor();
    var castFunction = require_castFunction();
    var keysIn = require_keysIn();
    function forIn(object, iteratee) {
      return object == null ? object : baseFor(object, castFunction(iteratee), keysIn);
    }
    module.exports = forIn;
  });

  // node_modules/lodash/last.js
  var require_last = __commonJS((exports, module) => {
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : void 0;
    }
    module.exports = last;
  });

  // node_modules/lodash/mapValues.js
  var require_mapValues = __commonJS((exports, module) => {
    var baseAssignValue = require_baseAssignValue();
    var baseForOwn = require_baseForOwn();
    var baseIteratee = require_baseIteratee();
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = baseIteratee(iteratee, 3);
      baseForOwn(object, function(value, key, object2) {
        baseAssignValue(result, key, iteratee(value, key, object2));
      });
      return result;
    }
    module.exports = mapValues;
  });

  // node_modules/lodash/_baseExtremum.js
  var require_baseExtremum = __commonJS((exports, module) => {
    var isSymbol = require_isSymbol();
    function baseExtremum(array, iteratee, comparator) {
      var index = -1, length = array.length;
      while (++index < length) {
        var value = array[index], current = iteratee(value);
        if (current != null && (computed === void 0 ? current === current && !isSymbol(current) : comparator(current, computed))) {
          var computed = current, result = value;
        }
      }
      return result;
    }
    module.exports = baseExtremum;
  });

  // node_modules/lodash/_baseGt.js
  var require_baseGt = __commonJS((exports, module) => {
    function baseGt(value, other) {
      return value > other;
    }
    module.exports = baseGt;
  });

  // node_modules/lodash/max.js
  var require_max = __commonJS((exports, module) => {
    var baseExtremum = require_baseExtremum();
    var baseGt = require_baseGt();
    var identity = require_identity();
    function max(array) {
      return array && array.length ? baseExtremum(array, identity, baseGt) : void 0;
    }
    module.exports = max;
  });

  // node_modules/lodash/_assignMergeValue.js
  var require_assignMergeValue = __commonJS((exports, module) => {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignMergeValue;
  });

  // node_modules/lodash/isPlainObject.js
  var require_isPlainObject = __commonJS((exports, module) => {
    var baseGetTag = require_baseGetTag();
    var getPrototype = require_getPrototype();
    var isObjectLike = require_isObjectLike();
    var objectTag = "[object Object]";
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    module.exports = isPlainObject;
  });

  // node_modules/lodash/_safeGet.js
  var require_safeGet = __commonJS((exports, module) => {
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    module.exports = safeGet;
  });

  // node_modules/lodash/toPlainObject.js
  var require_toPlainObject = __commonJS((exports, module) => {
    var copyObject = require_copyObject();
    var keysIn = require_keysIn();
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    module.exports = toPlainObject;
  });

  // node_modules/lodash/_baseMergeDeep.js
  var require_baseMergeDeep = __commonJS((exports, module) => {
    var assignMergeValue = require_assignMergeValue();
    var cloneBuffer = require_cloneBuffer();
    var cloneTypedArray = require_cloneTypedArray();
    var copyArray = require_copyArray();
    var initCloneObject = require_initCloneObject();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isArrayLikeObject = require_isArrayLikeObject();
    var isBuffer = require_isBuffer();
    var isFunction = require_isFunction();
    var isObject = require_isObject();
    var isPlainObject = require_isPlainObject();
    var isTypedArray = require_isTypedArray();
    var safeGet = require_safeGet();
    var toPlainObject = require_toPlainObject();
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    module.exports = baseMergeDeep;
  });

  // node_modules/lodash/_baseMerge.js
  var require_baseMerge = __commonJS((exports, module) => {
    var Stack = require_Stack();
    var assignMergeValue = require_assignMergeValue();
    var baseFor = require_baseFor();
    var baseMergeDeep = require_baseMergeDeep();
    var isObject = require_isObject();
    var keysIn = require_keysIn();
    var safeGet = require_safeGet();
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    module.exports = baseMerge;
  });

  // node_modules/lodash/_createAssigner.js
  var require_createAssigner = __commonJS((exports, module) => {
    var baseRest = require_baseRest();
    var isIterateeCall = require_isIterateeCall();
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    module.exports = createAssigner;
  });

  // node_modules/lodash/merge.js
  var require_merge = __commonJS((exports, module) => {
    var baseMerge = require_baseMerge();
    var createAssigner = require_createAssigner();
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });
    module.exports = merge;
  });

  // node_modules/lodash/_baseLt.js
  var require_baseLt = __commonJS((exports, module) => {
    function baseLt(value, other) {
      return value < other;
    }
    module.exports = baseLt;
  });

  // node_modules/lodash/min.js
  var require_min = __commonJS((exports, module) => {
    var baseExtremum = require_baseExtremum();
    var baseLt = require_baseLt();
    var identity = require_identity();
    function min(array) {
      return array && array.length ? baseExtremum(array, identity, baseLt) : void 0;
    }
    module.exports = min;
  });

  // node_modules/lodash/minBy.js
  var require_minBy = __commonJS((exports, module) => {
    var baseExtremum = require_baseExtremum();
    var baseIteratee = require_baseIteratee();
    var baseLt = require_baseLt();
    function minBy(array, iteratee) {
      return array && array.length ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt) : void 0;
    }
    module.exports = minBy;
  });

  // node_modules/lodash/now.js
  var require_now = __commonJS((exports, module) => {
    var root = require_root();
    var now = function() {
      return root.Date.now();
    };
    module.exports = now;
  });

  // node_modules/lodash/_baseSet.js
  var require_baseSet = __commonJS((exports, module) => {
    var assignValue = require_assignValue();
    var castPath = require_castPath();
    var isIndex = require_isIndex();
    var isObject = require_isObject();
    var toKey = require_toKey();
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);
      var index = -1, length = path.length, lastIndex = length - 1, nested = object;
      while (nested != null && ++index < length) {
        var key = toKey(path[index]), newValue = value;
        if (key === "__proto__" || key === "constructor" || key === "prototype") {
          return object;
        }
        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : void 0;
          if (newValue === void 0) {
            newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }
    module.exports = baseSet;
  });

  // node_modules/lodash/_basePickBy.js
  var require_basePickBy = __commonJS((exports, module) => {
    var baseGet = require_baseGet();
    var baseSet = require_baseSet();
    var castPath = require_castPath();
    function basePickBy(object, paths, predicate) {
      var index = -1, length = paths.length, result = {};
      while (++index < length) {
        var path = paths[index], value = baseGet(object, path);
        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }
    module.exports = basePickBy;
  });

  // node_modules/lodash/_basePick.js
  var require_basePick = __commonJS((exports, module) => {
    var basePickBy = require_basePickBy();
    var hasIn = require_hasIn();
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }
    module.exports = basePick;
  });

  // node_modules/lodash/_flatRest.js
  var require_flatRest = __commonJS((exports, module) => {
    var flatten = require_flatten();
    var overRest = require_overRest();
    var setToString = require_setToString();
    function flatRest(func) {
      return setToString(overRest(func, void 0, flatten), func + "");
    }
    module.exports = flatRest;
  });

  // node_modules/lodash/pick.js
  var require_pick = __commonJS((exports, module) => {
    var basePick = require_basePick();
    var flatRest = require_flatRest();
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });
    module.exports = pick;
  });

  // node_modules/lodash/_baseRange.js
  var require_baseRange = __commonJS((exports, module) => {
    var nativeCeil = Math.ceil;
    var nativeMax = Math.max;
    function baseRange(start, end, step, fromRight) {
      var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result = Array(length);
      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }
    module.exports = baseRange;
  });

  // node_modules/lodash/_createRange.js
  var require_createRange = __commonJS((exports, module) => {
    var baseRange = require_baseRange();
    var isIterateeCall = require_isIterateeCall();
    var toFinite = require_toFinite();
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
          end = step = void 0;
        }
        start = toFinite(start);
        if (end === void 0) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === void 0 ? start < end ? 1 : -1 : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }
    module.exports = createRange;
  });

  // node_modules/lodash/range.js
  var require_range = __commonJS((exports, module) => {
    var createRange = require_createRange();
    var range = createRange();
    module.exports = range;
  });

  // node_modules/lodash/_baseSortBy.js
  var require_baseSortBy = __commonJS((exports, module) => {
    function baseSortBy(array, comparer) {
      var length = array.length;
      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }
    module.exports = baseSortBy;
  });

  // node_modules/lodash/_compareAscending.js
  var require_compareAscending = __commonJS((exports, module) => {
    var isSymbol = require_isSymbol();
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== void 0, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
        var othIsDefined = other !== void 0, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
        if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
          return 1;
        }
        if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }
    module.exports = compareAscending;
  });

  // node_modules/lodash/_compareMultiple.js
  var require_compareMultiple = __commonJS((exports, module) => {
    var compareAscending = require_compareAscending();
    function compareMultiple(object, other, orders) {
      var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == "desc" ? -1 : 1);
        }
      }
      return object.index - other.index;
    }
    module.exports = compareMultiple;
  });

  // node_modules/lodash/_baseOrderBy.js
  var require_baseOrderBy = __commonJS((exports, module) => {
    var arrayMap = require_arrayMap();
    var baseGet = require_baseGet();
    var baseIteratee = require_baseIteratee();
    var baseMap = require_baseMap();
    var baseSortBy = require_baseSortBy();
    var baseUnary = require_baseUnary();
    var compareMultiple = require_compareMultiple();
    var identity = require_identity();
    var isArray = require_isArray();
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            };
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }
      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(baseIteratee));
      var result = baseMap(collection, function(value, key, collection2) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return {criteria, index: ++index, value};
      });
      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }
    module.exports = baseOrderBy;
  });

  // node_modules/lodash/sortBy.js
  var require_sortBy = __commonJS((exports, module) => {
    var baseFlatten = require_baseFlatten();
    var baseOrderBy = require_baseOrderBy();
    var baseRest = require_baseRest();
    var isIterateeCall = require_isIterateeCall();
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });
    module.exports = sortBy;
  });

  // node_modules/lodash/uniqueId.js
  var require_uniqueId = __commonJS((exports, module) => {
    var toString = require_toString();
    var idCounter = 0;
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }
    module.exports = uniqueId;
  });

  // node_modules/lodash/_baseZipObject.js
  var require_baseZipObject = __commonJS((exports, module) => {
    function baseZipObject(props, values, assignFunc) {
      var index = -1, length = props.length, valsLength = values.length, result = {};
      while (++index < length) {
        var value = index < valsLength ? values[index] : void 0;
        assignFunc(result, props[index], value);
      }
      return result;
    }
    module.exports = baseZipObject;
  });

  // node_modules/lodash/zipObject.js
  var require_zipObject = __commonJS((exports, module) => {
    var assignValue = require_assignValue();
    var baseZipObject = require_baseZipObject();
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }
    module.exports = zipObject;
  });

  // node_modules/dagre/lib/lodash.js
  var require_lodash3 = __commonJS((exports, module) => {
    var lodash;
    if (true) {
      try {
        lodash = {
          cloneDeep: require_cloneDeep(),
          constant: require_constant(),
          defaults: require_defaults(),
          each: require_each(),
          filter: require_filter(),
          find: require_find(),
          flatten: require_flatten(),
          forEach: require_forEach(),
          forIn: require_forIn(),
          has: require_has(),
          isUndefined: require_isUndefined(),
          last: require_last(),
          map: require_map(),
          mapValues: require_mapValues(),
          max: require_max(),
          merge: require_merge(),
          min: require_min(),
          minBy: require_minBy(),
          now: require_now(),
          pick: require_pick(),
          range: require_range(),
          reduce: require_reduce(),
          sortBy: require_sortBy(),
          uniqueId: require_uniqueId(),
          values: require_values(),
          zipObject: require_zipObject()
        };
      } catch (e) {
      }
    }
    if (!lodash) {
      lodash = window._;
    }
    module.exports = lodash;
  });

  // node_modules/dagre/lib/data/list.js
  var require_list = __commonJS((exports, module) => {
    module.exports = List;
    function List() {
      var sentinel = {};
      sentinel._next = sentinel._prev = sentinel;
      this._sentinel = sentinel;
    }
    List.prototype.dequeue = function() {
      var sentinel = this._sentinel;
      var entry = sentinel._prev;
      if (entry !== sentinel) {
        unlink(entry);
        return entry;
      }
    };
    List.prototype.enqueue = function(entry) {
      var sentinel = this._sentinel;
      if (entry._prev && entry._next) {
        unlink(entry);
      }
      entry._next = sentinel._next;
      sentinel._next._prev = entry;
      sentinel._next = entry;
      entry._prev = sentinel;
    };
    List.prototype.toString = function() {
      var strs = [];
      var sentinel = this._sentinel;
      var curr = sentinel._prev;
      while (curr !== sentinel) {
        strs.push(JSON.stringify(curr, filterOutLinks));
        curr = curr._prev;
      }
      return "[" + strs.join(", ") + "]";
    };
    function unlink(entry) {
      entry._prev._next = entry._next;
      entry._next._prev = entry._prev;
      delete entry._next;
      delete entry._prev;
    }
    function filterOutLinks(k, v) {
      if (k !== "_next" && k !== "_prev") {
        return v;
      }
    }
  });

  // node_modules/dagre/lib/greedy-fas.js
  var require_greedy_fas = __commonJS((exports, module) => {
    var _ = require_lodash3();
    var Graph = require_graphlib2().Graph;
    var List = require_list();
    module.exports = greedyFAS;
    var DEFAULT_WEIGHT_FN = _.constant(1);
    function greedyFAS(g, weightFn) {
      if (g.nodeCount() <= 1) {
        return [];
      }
      var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);
      var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);
      return _.flatten(_.map(results, function(e) {
        return g.outEdges(e.v, e.w);
      }), true);
    }
    function doGreedyFAS(g, buckets, zeroIdx) {
      var results = [];
      var sources = buckets[buckets.length - 1];
      var sinks = buckets[0];
      var entry;
      while (g.nodeCount()) {
        while (entry = sinks.dequeue()) {
          removeNode(g, buckets, zeroIdx, entry);
        }
        while (entry = sources.dequeue()) {
          removeNode(g, buckets, zeroIdx, entry);
        }
        if (g.nodeCount()) {
          for (var i = buckets.length - 2; i > 0; --i) {
            entry = buckets[i].dequeue();
            if (entry) {
              results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));
              break;
            }
          }
        }
      }
      return results;
    }
    function removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {
      var results = collectPredecessors ? [] : void 0;
      _.forEach(g.inEdges(entry.v), function(edge) {
        var weight = g.edge(edge);
        var uEntry = g.node(edge.v);
        if (collectPredecessors) {
          results.push({v: edge.v, w: edge.w});
        }
        uEntry.out -= weight;
        assignBucket(buckets, zeroIdx, uEntry);
      });
      _.forEach(g.outEdges(entry.v), function(edge) {
        var weight = g.edge(edge);
        var w = edge.w;
        var wEntry = g.node(w);
        wEntry["in"] -= weight;
        assignBucket(buckets, zeroIdx, wEntry);
      });
      g.removeNode(entry.v);
      return results;
    }
    function buildState(g, weightFn) {
      var fasGraph = new Graph();
      var maxIn = 0;
      var maxOut = 0;
      _.forEach(g.nodes(), function(v) {
        fasGraph.setNode(v, {v, in: 0, out: 0});
      });
      _.forEach(g.edges(), function(e) {
        var prevWeight = fasGraph.edge(e.v, e.w) || 0;
        var weight = weightFn(e);
        var edgeWeight = prevWeight + weight;
        fasGraph.setEdge(e.v, e.w, edgeWeight);
        maxOut = Math.max(maxOut, fasGraph.node(e.v).out += weight);
        maxIn = Math.max(maxIn, fasGraph.node(e.w)["in"] += weight);
      });
      var buckets = _.range(maxOut + maxIn + 3).map(function() {
        return new List();
      });
      var zeroIdx = maxIn + 1;
      _.forEach(fasGraph.nodes(), function(v) {
        assignBucket(buckets, zeroIdx, fasGraph.node(v));
      });
      return {graph: fasGraph, buckets, zeroIdx};
    }
    function assignBucket(buckets, zeroIdx, entry) {
      if (!entry.out) {
        buckets[0].enqueue(entry);
      } else if (!entry["in"]) {
        buckets[buckets.length - 1].enqueue(entry);
      } else {
        buckets[entry.out - entry["in"] + zeroIdx].enqueue(entry);
      }
    }
  });

  // node_modules/dagre/lib/acyclic.js
  var require_acyclic = __commonJS((exports, module) => {
    "use strict";
    var _ = require_lodash3();
    var greedyFAS = require_greedy_fas();
    module.exports = {
      run,
      undo
    };
    function run(g) {
      var fas = g.graph().acyclicer === "greedy" ? greedyFAS(g, weightFn(g)) : dfsFAS(g);
      _.forEach(fas, function(e) {
        var label = g.edge(e);
        g.removeEdge(e);
        label.forwardName = e.name;
        label.reversed = true;
        g.setEdge(e.w, e.v, label, _.uniqueId("rev"));
      });
      function weightFn(g2) {
        return function(e) {
          return g2.edge(e).weight;
        };
      }
    }
    function dfsFAS(g) {
      var fas = [];
      var stack = {};
      var visited = {};
      function dfs(v) {
        if (_.has(visited, v)) {
          return;
        }
        visited[v] = true;
        stack[v] = true;
        _.forEach(g.outEdges(v), function(e) {
          if (_.has(stack, e.w)) {
            fas.push(e);
          } else {
            dfs(e.w);
          }
        });
        delete stack[v];
      }
      _.forEach(g.nodes(), dfs);
      return fas;
    }
    function undo(g) {
      _.forEach(g.edges(), function(e) {
        var label = g.edge(e);
        if (label.reversed) {
          g.removeEdge(e);
          var forwardName = label.forwardName;
          delete label.reversed;
          delete label.forwardName;
          g.setEdge(e.w, e.v, label, forwardName);
        }
      });
    }
  });

  // node_modules/dagre/lib/util.js
  var require_util = __commonJS((exports, module) => {
    "use strict";
    var _ = require_lodash3();
    var Graph = require_graphlib2().Graph;
    module.exports = {
      addDummyNode,
      simplify,
      asNonCompoundGraph,
      successorWeights,
      predecessorWeights,
      intersectRect,
      buildLayerMatrix,
      normalizeRanks,
      removeEmptyRanks,
      addBorderNode,
      maxRank,
      partition,
      time,
      notime
    };
    function addDummyNode(g, type, attrs, name) {
      var v;
      do {
        v = _.uniqueId(name);
      } while (g.hasNode(v));
      attrs.dummy = type;
      g.setNode(v, attrs);
      return v;
    }
    function simplify(g) {
      var simplified = new Graph().setGraph(g.graph());
      _.forEach(g.nodes(), function(v) {
        simplified.setNode(v, g.node(v));
      });
      _.forEach(g.edges(), function(e) {
        var simpleLabel = simplified.edge(e.v, e.w) || {weight: 0, minlen: 1};
        var label = g.edge(e);
        simplified.setEdge(e.v, e.w, {
          weight: simpleLabel.weight + label.weight,
          minlen: Math.max(simpleLabel.minlen, label.minlen)
        });
      });
      return simplified;
    }
    function asNonCompoundGraph(g) {
      var simplified = new Graph({multigraph: g.isMultigraph()}).setGraph(g.graph());
      _.forEach(g.nodes(), function(v) {
        if (!g.children(v).length) {
          simplified.setNode(v, g.node(v));
        }
      });
      _.forEach(g.edges(), function(e) {
        simplified.setEdge(e, g.edge(e));
      });
      return simplified;
    }
    function successorWeights(g) {
      var weightMap = _.map(g.nodes(), function(v) {
        var sucs = {};
        _.forEach(g.outEdges(v), function(e) {
          sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;
        });
        return sucs;
      });
      return _.zipObject(g.nodes(), weightMap);
    }
    function predecessorWeights(g) {
      var weightMap = _.map(g.nodes(), function(v) {
        var preds = {};
        _.forEach(g.inEdges(v), function(e) {
          preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;
        });
        return preds;
      });
      return _.zipObject(g.nodes(), weightMap);
    }
    function intersectRect(rect, point) {
      var x = rect.x;
      var y = rect.y;
      var dx = point.x - x;
      var dy = point.y - y;
      var w = rect.width / 2;
      var h = rect.height / 2;
      if (!dx && !dy) {
        throw new Error("Not possible to find intersection inside of the rectangle");
      }
      var sx, sy;
      if (Math.abs(dy) * w > Math.abs(dx) * h) {
        if (dy < 0) {
          h = -h;
        }
        sx = h * dx / dy;
        sy = h;
      } else {
        if (dx < 0) {
          w = -w;
        }
        sx = w;
        sy = w * dy / dx;
      }
      return {x: x + sx, y: y + sy};
    }
    function buildLayerMatrix(g) {
      var layering = _.map(_.range(maxRank(g) + 1), function() {
        return [];
      });
      _.forEach(g.nodes(), function(v) {
        var node = g.node(v);
        var rank = node.rank;
        if (!_.isUndefined(rank)) {
          layering[rank][node.order] = v;
        }
      });
      return layering;
    }
    function normalizeRanks(g) {
      var min = _.min(_.map(g.nodes(), function(v) {
        return g.node(v).rank;
      }));
      _.forEach(g.nodes(), function(v) {
        var node = g.node(v);
        if (_.has(node, "rank")) {
          node.rank -= min;
        }
      });
    }
    function removeEmptyRanks(g) {
      var offset = _.min(_.map(g.nodes(), function(v) {
        return g.node(v).rank;
      }));
      var layers = [];
      _.forEach(g.nodes(), function(v) {
        var rank = g.node(v).rank - offset;
        if (!layers[rank]) {
          layers[rank] = [];
        }
        layers[rank].push(v);
      });
      var delta = 0;
      var nodeRankFactor = g.graph().nodeRankFactor;
      _.forEach(layers, function(vs, i) {
        if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {
          --delta;
        } else if (delta) {
          _.forEach(vs, function(v) {
            g.node(v).rank += delta;
          });
        }
      });
    }
    function addBorderNode(g, prefix, rank, order) {
      var node = {
        width: 0,
        height: 0
      };
      if (arguments.length >= 4) {
        node.rank = rank;
        node.order = order;
      }
      return addDummyNode(g, "border", node, prefix);
    }
    function maxRank(g) {
      return _.max(_.map(g.nodes(), function(v) {
        var rank = g.node(v).rank;
        if (!_.isUndefined(rank)) {
          return rank;
        }
      }));
    }
    function partition(collection, fn) {
      var result = {lhs: [], rhs: []};
      _.forEach(collection, function(value) {
        if (fn(value)) {
          result.lhs.push(value);
        } else {
          result.rhs.push(value);
        }
      });
      return result;
    }
    function time(name, fn) {
      var start = _.now();
      try {
        return fn();
      } finally {
        console.log(name + " time: " + (_.now() - start) + "ms");
      }
    }
    function notime(name, fn) {
      return fn();
    }
  });

  // node_modules/dagre/lib/normalize.js
  var require_normalize = __commonJS((exports, module) => {
    "use strict";
    var _ = require_lodash3();
    var util = require_util();
    module.exports = {
      run,
      undo
    };
    function run(g) {
      g.graph().dummyChains = [];
      _.forEach(g.edges(), function(edge) {
        normalizeEdge(g, edge);
      });
    }
    function normalizeEdge(g, e) {
      var v = e.v;
      var vRank = g.node(v).rank;
      var w = e.w;
      var wRank = g.node(w).rank;
      var name = e.name;
      var edgeLabel = g.edge(e);
      var labelRank = edgeLabel.labelRank;
      if (wRank === vRank + 1)
        return;
      g.removeEdge(e);
      var dummy, attrs, i;
      for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {
        edgeLabel.points = [];
        attrs = {
          width: 0,
          height: 0,
          edgeLabel,
          edgeObj: e,
          rank: vRank
        };
        dummy = util.addDummyNode(g, "edge", attrs, "_d");
        if (vRank === labelRank) {
          attrs.width = edgeLabel.width;
          attrs.height = edgeLabel.height;
          attrs.dummy = "edge-label";
          attrs.labelpos = edgeLabel.labelpos;
        }
        g.setEdge(v, dummy, {weight: edgeLabel.weight}, name);
        if (i === 0) {
          g.graph().dummyChains.push(dummy);
        }
        v = dummy;
      }
      g.setEdge(v, w, {weight: edgeLabel.weight}, name);
    }
    function undo(g) {
      _.forEach(g.graph().dummyChains, function(v) {
        var node = g.node(v);
        var origLabel = node.edgeLabel;
        var w;
        g.setEdge(node.edgeObj, origLabel);
        while (node.dummy) {
          w = g.successors(v)[0];
          g.removeNode(v);
          origLabel.points.push({x: node.x, y: node.y});
          if (node.dummy === "edge-label") {
            origLabel.x = node.x;
            origLabel.y = node.y;
            origLabel.width = node.width;
            origLabel.height = node.height;
          }
          v = w;
          node = g.node(v);
        }
      });
    }
  });

  // node_modules/dagre/lib/rank/util.js
  var require_util2 = __commonJS((exports, module) => {
    "use strict";
    var _ = require_lodash3();
    module.exports = {
      longestPath,
      slack
    };
    function longestPath(g) {
      var visited = {};
      function dfs(v) {
        var label = g.node(v);
        if (_.has(visited, v)) {
          return label.rank;
        }
        visited[v] = true;
        var rank = _.min(_.map(g.outEdges(v), function(e) {
          return dfs(e.w) - g.edge(e).minlen;
        }));
        if (rank === Number.POSITIVE_INFINITY || rank === void 0 || rank === null) {
          rank = 0;
        }
        return label.rank = rank;
      }
      _.forEach(g.sources(), dfs);
    }
    function slack(g, e) {
      return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;
    }
  });

  // node_modules/dagre/lib/rank/feasible-tree.js
  var require_feasible_tree = __commonJS((exports, module) => {
    "use strict";
    var _ = require_lodash3();
    var Graph = require_graphlib2().Graph;
    var slack = require_util2().slack;
    module.exports = feasibleTree;
    function feasibleTree(g) {
      var t = new Graph({directed: false});
      var start = g.nodes()[0];
      var size = g.nodeCount();
      t.setNode(start, {});
      var edge, delta;
      while (tightTree(t, g) < size) {
        edge = findMinSlackEdge(t, g);
        delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);
        shiftRanks(t, g, delta);
      }
      return t;
    }
    function tightTree(t, g) {
      function dfs(v) {
        _.forEach(g.nodeEdges(v), function(e) {
          var edgeV = e.v, w = v === edgeV ? e.w : edgeV;
          if (!t.hasNode(w) && !slack(g, e)) {
            t.setNode(w, {});
            t.setEdge(v, w, {});
            dfs(w);
          }
        });
      }
      _.forEach(t.nodes(), dfs);
      return t.nodeCount();
    }
    function findMinSlackEdge(t, g) {
      return _.minBy(g.edges(), function(e) {
        if (t.hasNode(e.v) !== t.hasNode(e.w)) {
          return slack(g, e);
        }
      });
    }
    function shiftRanks(t, g, delta) {
      _.forEach(t.nodes(), function(v) {
        g.node(v).rank += delta;
      });
    }
  });

  // node_modules/dagre/lib/rank/network-simplex.js
  var require_network_simplex = __commonJS((exports, module) => {
    "use strict";
    var _ = require_lodash3();
    var feasibleTree = require_feasible_tree();
    var slack = require_util2().slack;
    var initRank = require_util2().longestPath;
    var preorder = require_graphlib2().alg.preorder;
    var postorder = require_graphlib2().alg.postorder;
    var simplify = require_util().simplify;
    module.exports = networkSimplex;
    networkSimplex.initLowLimValues = initLowLimValues;
    networkSimplex.initCutValues = initCutValues;
    networkSimplex.calcCutValue = calcCutValue;
    networkSimplex.leaveEdge = leaveEdge;
    networkSimplex.enterEdge = enterEdge;
    networkSimplex.exchangeEdges = exchangeEdges;
    function networkSimplex(g) {
      g = simplify(g);
      initRank(g);
      var t = feasibleTree(g);
      initLowLimValues(t);
      initCutValues(t, g);
      var e, f;
      while (e = leaveEdge(t)) {
        f = enterEdge(t, g, e);
        exchangeEdges(t, g, e, f);
      }
    }
    function initCutValues(t, g) {
      var vs = postorder(t, t.nodes());
      vs = vs.slice(0, vs.length - 1);
      _.forEach(vs, function(v) {
        assignCutValue(t, g, v);
      });
    }
    function assignCutValue(t, g, child) {
      var childLab = t.node(child);
      var parent = childLab.parent;
      t.edge(child, parent).cutvalue = calcCutValue(t, g, child);
    }
    function calcCutValue(t, g, child) {
      var childLab = t.node(child);
      var parent = childLab.parent;
      var childIsTail = true;
      var graphEdge = g.edge(child, parent);
      var cutValue = 0;
      if (!graphEdge) {
        childIsTail = false;
        graphEdge = g.edge(parent, child);
      }
      cutValue = graphEdge.weight;
      _.forEach(g.nodeEdges(child), function(e) {
        var isOutEdge = e.v === child, other = isOutEdge ? e.w : e.v;
        if (other !== parent) {
          var pointsToHead = isOutEdge === childIsTail, otherWeight = g.edge(e).weight;
          cutValue += pointsToHead ? otherWeight : -otherWeight;
          if (isTreeEdge(t, child, other)) {
            var otherCutValue = t.edge(child, other).cutvalue;
            cutValue += pointsToHead ? -otherCutValue : otherCutValue;
          }
        }
      });
      return cutValue;
    }
    function initLowLimValues(tree, root) {
      if (arguments.length < 2) {
        root = tree.nodes()[0];
      }
      dfsAssignLowLim(tree, {}, 1, root);
    }
    function dfsAssignLowLim(tree, visited, nextLim, v, parent) {
      var low = nextLim;
      var label = tree.node(v);
      visited[v] = true;
      _.forEach(tree.neighbors(v), function(w) {
        if (!_.has(visited, w)) {
          nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);
        }
      });
      label.low = low;
      label.lim = nextLim++;
      if (parent) {
        label.parent = parent;
      } else {
        delete label.parent;
      }
      return nextLim;
    }
    function leaveEdge(tree) {
      return _.find(tree.edges(), function(e) {
        return tree.edge(e).cutvalue < 0;
      });
    }
    function enterEdge(t, g, edge) {
      var v = edge.v;
      var w = edge.w;
      if (!g.hasEdge(v, w)) {
        v = edge.w;
        w = edge.v;
      }
      var vLabel = t.node(v);
      var wLabel = t.node(w);
      var tailLabel = vLabel;
      var flip = false;
      if (vLabel.lim > wLabel.lim) {
        tailLabel = wLabel;
        flip = true;
      }
      var candidates = _.filter(g.edges(), function(edge2) {
        return flip === isDescendant(t, t.node(edge2.v), tailLabel) && flip !== isDescendant(t, t.node(edge2.w), tailLabel);
      });
      return _.minBy(candidates, function(edge2) {
        return slack(g, edge2);
      });
    }
    function exchangeEdges(t, g, e, f) {
      var v = e.v;
      var w = e.w;
      t.removeEdge(v, w);
      t.setEdge(f.v, f.w, {});
      initLowLimValues(t);
      initCutValues(t, g);
      updateRanks(t, g);
    }
    function updateRanks(t, g) {
      var root = _.find(t.nodes(), function(v) {
        return !g.node(v).parent;
      });
      var vs = preorder(t, root);
      vs = vs.slice(1);
      _.forEach(vs, function(v) {
        var parent = t.node(v).parent, edge = g.edge(v, parent), flipped = false;
        if (!edge) {
          edge = g.edge(parent, v);
          flipped = true;
        }
        g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);
      });
    }
    function isTreeEdge(tree, u, v) {
      return tree.hasEdge(u, v);
    }
    function isDescendant(tree, vLabel, rootLabel) {
      return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;
    }
  });

  // node_modules/dagre/lib/rank/index.js
  var require_rank = __commonJS((exports, module) => {
    "use strict";
    var rankUtil = require_util2();
    var longestPath = rankUtil.longestPath;
    var feasibleTree = require_feasible_tree();
    var networkSimplex = require_network_simplex();
    module.exports = rank;
    function rank(g) {
      switch (g.graph().ranker) {
        case "network-simplex":
          networkSimplexRanker(g);
          break;
        case "tight-tree":
          tightTreeRanker(g);
          break;
        case "longest-path":
          longestPathRanker(g);
          break;
        default:
          networkSimplexRanker(g);
      }
    }
    var longestPathRanker = longestPath;
    function tightTreeRanker(g) {
      longestPath(g);
      feasibleTree(g);
    }
    function networkSimplexRanker(g) {
      networkSimplex(g);
    }
  });

  // node_modules/dagre/lib/parent-dummy-chains.js
  var require_parent_dummy_chains = __commonJS((exports, module) => {
    var _ = require_lodash3();
    module.exports = parentDummyChains;
    function parentDummyChains(g) {
      var postorderNums = postorder(g);
      _.forEach(g.graph().dummyChains, function(v) {
        var node = g.node(v);
        var edgeObj = node.edgeObj;
        var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);
        var path = pathData.path;
        var lca = pathData.lca;
        var pathIdx = 0;
        var pathV = path[pathIdx];
        var ascending = true;
        while (v !== edgeObj.w) {
          node = g.node(v);
          if (ascending) {
            while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {
              pathIdx++;
            }
            if (pathV === lca) {
              ascending = false;
            }
          }
          if (!ascending) {
            while (pathIdx < path.length - 1 && g.node(pathV = path[pathIdx + 1]).minRank <= node.rank) {
              pathIdx++;
            }
            pathV = path[pathIdx];
          }
          g.setParent(v, pathV);
          v = g.successors(v)[0];
        }
      });
    }
    function findPath(g, postorderNums, v, w) {
      var vPath = [];
      var wPath = [];
      var low = Math.min(postorderNums[v].low, postorderNums[w].low);
      var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);
      var parent;
      var lca;
      parent = v;
      do {
        parent = g.parent(parent);
        vPath.push(parent);
      } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));
      lca = parent;
      parent = w;
      while ((parent = g.parent(parent)) !== lca) {
        wPath.push(parent);
      }
      return {path: vPath.concat(wPath.reverse()), lca};
    }
    function postorder(g) {
      var result = {};
      var lim = 0;
      function dfs(v) {
        var low = lim;
        _.forEach(g.children(v), dfs);
        result[v] = {low, lim: lim++};
      }
      _.forEach(g.children(), dfs);
      return result;
    }
  });

  // node_modules/dagre/lib/nesting-graph.js
  var require_nesting_graph = __commonJS((exports, module) => {
    var _ = require_lodash3();
    var util = require_util();
    module.exports = {
      run,
      cleanup
    };
    function run(g) {
      var root = util.addDummyNode(g, "root", {}, "_root");
      var depths = treeDepths(g);
      var height = _.max(_.values(depths)) - 1;
      var nodeSep = 2 * height + 1;
      g.graph().nestingRoot = root;
      _.forEach(g.edges(), function(e) {
        g.edge(e).minlen *= nodeSep;
      });
      var weight = sumWeights(g) + 1;
      _.forEach(g.children(), function(child) {
        dfs(g, root, nodeSep, weight, height, depths, child);
      });
      g.graph().nodeRankFactor = nodeSep;
    }
    function dfs(g, root, nodeSep, weight, height, depths, v) {
      var children = g.children(v);
      if (!children.length) {
        if (v !== root) {
          g.setEdge(root, v, {weight: 0, minlen: nodeSep});
        }
        return;
      }
      var top = util.addBorderNode(g, "_bt");
      var bottom = util.addBorderNode(g, "_bb");
      var label = g.node(v);
      g.setParent(top, v);
      label.borderTop = top;
      g.setParent(bottom, v);
      label.borderBottom = bottom;
      _.forEach(children, function(child) {
        dfs(g, root, nodeSep, weight, height, depths, child);
        var childNode = g.node(child);
        var childTop = childNode.borderTop ? childNode.borderTop : child;
        var childBottom = childNode.borderBottom ? childNode.borderBottom : child;
        var thisWeight = childNode.borderTop ? weight : 2 * weight;
        var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;
        g.setEdge(top, childTop, {
          weight: thisWeight,
          minlen,
          nestingEdge: true
        });
        g.setEdge(childBottom, bottom, {
          weight: thisWeight,
          minlen,
          nestingEdge: true
        });
      });
      if (!g.parent(v)) {
        g.setEdge(root, top, {weight: 0, minlen: height + depths[v]});
      }
    }
    function treeDepths(g) {
      var depths = {};
      function dfs2(v, depth) {
        var children = g.children(v);
        if (children && children.length) {
          _.forEach(children, function(child) {
            dfs2(child, depth + 1);
          });
        }
        depths[v] = depth;
      }
      _.forEach(g.children(), function(v) {
        dfs2(v, 1);
      });
      return depths;
    }
    function sumWeights(g) {
      return _.reduce(g.edges(), function(acc, e) {
        return acc + g.edge(e).weight;
      }, 0);
    }
    function cleanup(g) {
      var graphLabel = g.graph();
      g.removeNode(graphLabel.nestingRoot);
      delete graphLabel.nestingRoot;
      _.forEach(g.edges(), function(e) {
        var edge = g.edge(e);
        if (edge.nestingEdge) {
          g.removeEdge(e);
        }
      });
    }
  });

  // node_modules/dagre/lib/add-border-segments.js
  var require_add_border_segments = __commonJS((exports, module) => {
    var _ = require_lodash3();
    var util = require_util();
    module.exports = addBorderSegments;
    function addBorderSegments(g) {
      function dfs(v) {
        var children = g.children(v);
        var node = g.node(v);
        if (children.length) {
          _.forEach(children, dfs);
        }
        if (_.has(node, "minRank")) {
          node.borderLeft = [];
          node.borderRight = [];
          for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {
            addBorderNode(g, "borderLeft", "_bl", v, node, rank);
            addBorderNode(g, "borderRight", "_br", v, node, rank);
          }
        }
      }
      _.forEach(g.children(), dfs);
    }
    function addBorderNode(g, prop, prefix, sg, sgNode, rank) {
      var label = {width: 0, height: 0, rank, borderType: prop};
      var prev = sgNode[prop][rank - 1];
      var curr = util.addDummyNode(g, "border", label, prefix);
      sgNode[prop][rank] = curr;
      g.setParent(curr, sg);
      if (prev) {
        g.setEdge(prev, curr, {weight: 1});
      }
    }
  });

  // node_modules/dagre/lib/coordinate-system.js
  var require_coordinate_system = __commonJS((exports, module) => {
    "use strict";
    var _ = require_lodash3();
    module.exports = {
      adjust,
      undo
    };
    function adjust(g) {
      var rankDir = g.graph().rankdir.toLowerCase();
      if (rankDir === "lr" || rankDir === "rl") {
        swapWidthHeight(g);
      }
    }
    function undo(g) {
      var rankDir = g.graph().rankdir.toLowerCase();
      if (rankDir === "bt" || rankDir === "rl") {
        reverseY(g);
      }
      if (rankDir === "lr" || rankDir === "rl") {
        swapXY(g);
        swapWidthHeight(g);
      }
    }
    function swapWidthHeight(g) {
      _.forEach(g.nodes(), function(v) {
        swapWidthHeightOne(g.node(v));
      });
      _.forEach(g.edges(), function(e) {
        swapWidthHeightOne(g.edge(e));
      });
    }
    function swapWidthHeightOne(attrs) {
      var w = attrs.width;
      attrs.width = attrs.height;
      attrs.height = w;
    }
    function reverseY(g) {
      _.forEach(g.nodes(), function(v) {
        reverseYOne(g.node(v));
      });
      _.forEach(g.edges(), function(e) {
        var edge = g.edge(e);
        _.forEach(edge.points, reverseYOne);
        if (_.has(edge, "y")) {
          reverseYOne(edge);
        }
      });
    }
    function reverseYOne(attrs) {
      attrs.y = -attrs.y;
    }
    function swapXY(g) {
      _.forEach(g.nodes(), function(v) {
        swapXYOne(g.node(v));
      });
      _.forEach(g.edges(), function(e) {
        var edge = g.edge(e);
        _.forEach(edge.points, swapXYOne);
        if (_.has(edge, "x")) {
          swapXYOne(edge);
        }
      });
    }
    function swapXYOne(attrs) {
      var x = attrs.x;
      attrs.x = attrs.y;
      attrs.y = x;
    }
  });

  // node_modules/dagre/lib/order/init-order.js
  var require_init_order = __commonJS((exports, module) => {
    "use strict";
    var _ = require_lodash3();
    module.exports = initOrder;
    function initOrder(g) {
      var visited = {};
      var simpleNodes = _.filter(g.nodes(), function(v) {
        return !g.children(v).length;
      });
      var maxRank = _.max(_.map(simpleNodes, function(v) {
        return g.node(v).rank;
      }));
      var layers = _.map(_.range(maxRank + 1), function() {
        return [];
      });
      function dfs(v) {
        if (_.has(visited, v))
          return;
        visited[v] = true;
        var node = g.node(v);
        layers[node.rank].push(v);
        _.forEach(g.successors(v), dfs);
      }
      var orderedVs = _.sortBy(simpleNodes, function(v) {
        return g.node(v).rank;
      });
      _.forEach(orderedVs, dfs);
      return layers;
    }
  });

  // node_modules/dagre/lib/order/cross-count.js
  var require_cross_count = __commonJS((exports, module) => {
    "use strict";
    var _ = require_lodash3();
    module.exports = crossCount;
    function crossCount(g, layering) {
      var cc = 0;
      for (var i = 1; i < layering.length; ++i) {
        cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);
      }
      return cc;
    }
    function twoLayerCrossCount(g, northLayer, southLayer) {
      var southPos = _.zipObject(southLayer, _.map(southLayer, function(v, i) {
        return i;
      }));
      var southEntries = _.flatten(_.map(northLayer, function(v) {
        return _.sortBy(_.map(g.outEdges(v), function(e) {
          return {pos: southPos[e.w], weight: g.edge(e).weight};
        }), "pos");
      }), true);
      var firstIndex = 1;
      while (firstIndex < southLayer.length)
        firstIndex <<= 1;
      var treeSize = 2 * firstIndex - 1;
      firstIndex -= 1;
      var tree = _.map(new Array(treeSize), function() {
        return 0;
      });
      var cc = 0;
      _.forEach(southEntries.forEach(function(entry) {
        var index = entry.pos + firstIndex;
        tree[index] += entry.weight;
        var weightSum = 0;
        while (index > 0) {
          if (index % 2) {
            weightSum += tree[index + 1];
          }
          index = index - 1 >> 1;
          tree[index] += entry.weight;
        }
        cc += entry.weight * weightSum;
      }));
      return cc;
    }
  });

  // node_modules/dagre/lib/order/barycenter.js
  var require_barycenter = __commonJS((exports, module) => {
    var _ = require_lodash3();
    module.exports = barycenter;
    function barycenter(g, movable) {
      return _.map(movable, function(v) {
        var inV = g.inEdges(v);
        if (!inV.length) {
          return {v};
        } else {
          var result = _.reduce(inV, function(acc, e) {
            var edge = g.edge(e), nodeU = g.node(e.v);
            return {
              sum: acc.sum + edge.weight * nodeU.order,
              weight: acc.weight + edge.weight
            };
          }, {sum: 0, weight: 0});
          return {
            v,
            barycenter: result.sum / result.weight,
            weight: result.weight
          };
        }
      });
    }
  });

  // node_modules/dagre/lib/order/resolve-conflicts.js
  var require_resolve_conflicts = __commonJS((exports, module) => {
    "use strict";
    var _ = require_lodash3();
    module.exports = resolveConflicts;
    function resolveConflicts(entries, cg) {
      var mappedEntries = {};
      _.forEach(entries, function(entry, i) {
        var tmp = mappedEntries[entry.v] = {
          indegree: 0,
          in: [],
          out: [],
          vs: [entry.v],
          i
        };
        if (!_.isUndefined(entry.barycenter)) {
          tmp.barycenter = entry.barycenter;
          tmp.weight = entry.weight;
        }
      });
      _.forEach(cg.edges(), function(e) {
        var entryV = mappedEntries[e.v];
        var entryW = mappedEntries[e.w];
        if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {
          entryW.indegree++;
          entryV.out.push(mappedEntries[e.w]);
        }
      });
      var sourceSet = _.filter(mappedEntries, function(entry) {
        return !entry.indegree;
      });
      return doResolveConflicts(sourceSet);
    }
    function doResolveConflicts(sourceSet) {
      var entries = [];
      function handleIn(vEntry) {
        return function(uEntry) {
          if (uEntry.merged) {
            return;
          }
          if (_.isUndefined(uEntry.barycenter) || _.isUndefined(vEntry.barycenter) || uEntry.barycenter >= vEntry.barycenter) {
            mergeEntries(vEntry, uEntry);
          }
        };
      }
      function handleOut(vEntry) {
        return function(wEntry) {
          wEntry["in"].push(vEntry);
          if (--wEntry.indegree === 0) {
            sourceSet.push(wEntry);
          }
        };
      }
      while (sourceSet.length) {
        var entry = sourceSet.pop();
        entries.push(entry);
        _.forEach(entry["in"].reverse(), handleIn(entry));
        _.forEach(entry.out, handleOut(entry));
      }
      return _.map(_.filter(entries, function(entry2) {
        return !entry2.merged;
      }), function(entry2) {
        return _.pick(entry2, ["vs", "i", "barycenter", "weight"]);
      });
    }
    function mergeEntries(target, source) {
      var sum = 0;
      var weight = 0;
      if (target.weight) {
        sum += target.barycenter * target.weight;
        weight += target.weight;
      }
      if (source.weight) {
        sum += source.barycenter * source.weight;
        weight += source.weight;
      }
      target.vs = source.vs.concat(target.vs);
      target.barycenter = sum / weight;
      target.weight = weight;
      target.i = Math.min(source.i, target.i);
      source.merged = true;
    }
  });

  // node_modules/dagre/lib/order/sort.js
  var require_sort = __commonJS((exports, module) => {
    var _ = require_lodash3();
    var util = require_util();
    module.exports = sort;
    function sort(entries, biasRight) {
      var parts = util.partition(entries, function(entry) {
        return _.has(entry, "barycenter");
      });
      var sortable = parts.lhs, unsortable = _.sortBy(parts.rhs, function(entry) {
        return -entry.i;
      }), vs = [], sum = 0, weight = 0, vsIndex = 0;
      sortable.sort(compareWithBias(!!biasRight));
      vsIndex = consumeUnsortable(vs, unsortable, vsIndex);
      _.forEach(sortable, function(entry) {
        vsIndex += entry.vs.length;
        vs.push(entry.vs);
        sum += entry.barycenter * entry.weight;
        weight += entry.weight;
        vsIndex = consumeUnsortable(vs, unsortable, vsIndex);
      });
      var result = {vs: _.flatten(vs, true)};
      if (weight) {
        result.barycenter = sum / weight;
        result.weight = weight;
      }
      return result;
    }
    function consumeUnsortable(vs, unsortable, index) {
      var last;
      while (unsortable.length && (last = _.last(unsortable)).i <= index) {
        unsortable.pop();
        vs.push(last.vs);
        index++;
      }
      return index;
    }
    function compareWithBias(bias) {
      return function(entryV, entryW) {
        if (entryV.barycenter < entryW.barycenter) {
          return -1;
        } else if (entryV.barycenter > entryW.barycenter) {
          return 1;
        }
        return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;
      };
    }
  });

  // node_modules/dagre/lib/order/sort-subgraph.js
  var require_sort_subgraph = __commonJS((exports, module) => {
    var _ = require_lodash3();
    var barycenter = require_barycenter();
    var resolveConflicts = require_resolve_conflicts();
    var sort = require_sort();
    module.exports = sortSubgraph;
    function sortSubgraph(g, v, cg, biasRight) {
      var movable = g.children(v);
      var node = g.node(v);
      var bl = node ? node.borderLeft : void 0;
      var br = node ? node.borderRight : void 0;
      var subgraphs = {};
      if (bl) {
        movable = _.filter(movable, function(w) {
          return w !== bl && w !== br;
        });
      }
      var barycenters = barycenter(g, movable);
      _.forEach(barycenters, function(entry) {
        if (g.children(entry.v).length) {
          var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);
          subgraphs[entry.v] = subgraphResult;
          if (_.has(subgraphResult, "barycenter")) {
            mergeBarycenters(entry, subgraphResult);
          }
        }
      });
      var entries = resolveConflicts(barycenters, cg);
      expandSubgraphs(entries, subgraphs);
      var result = sort(entries, biasRight);
      if (bl) {
        result.vs = _.flatten([bl, result.vs, br], true);
        if (g.predecessors(bl).length) {
          var blPred = g.node(g.predecessors(bl)[0]), brPred = g.node(g.predecessors(br)[0]);
          if (!_.has(result, "barycenter")) {
            result.barycenter = 0;
            result.weight = 0;
          }
          result.barycenter = (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);
          result.weight += 2;
        }
      }
      return result;
    }
    function expandSubgraphs(entries, subgraphs) {
      _.forEach(entries, function(entry) {
        entry.vs = _.flatten(entry.vs.map(function(v) {
          if (subgraphs[v]) {
            return subgraphs[v].vs;
          }
          return v;
        }), true);
      });
    }
    function mergeBarycenters(target, other) {
      if (!_.isUndefined(target.barycenter)) {
        target.barycenter = (target.barycenter * target.weight + other.barycenter * other.weight) / (target.weight + other.weight);
        target.weight += other.weight;
      } else {
        target.barycenter = other.barycenter;
        target.weight = other.weight;
      }
    }
  });

  // node_modules/dagre/lib/order/build-layer-graph.js
  var require_build_layer_graph = __commonJS((exports, module) => {
    var _ = require_lodash3();
    var Graph = require_graphlib2().Graph;
    module.exports = buildLayerGraph;
    function buildLayerGraph(g, rank, relationship) {
      var root = createRootNode(g), result = new Graph({compound: true}).setGraph({root}).setDefaultNodeLabel(function(v) {
        return g.node(v);
      });
      _.forEach(g.nodes(), function(v) {
        var node = g.node(v), parent = g.parent(v);
        if (node.rank === rank || node.minRank <= rank && rank <= node.maxRank) {
          result.setNode(v);
          result.setParent(v, parent || root);
          _.forEach(g[relationship](v), function(e) {
            var u = e.v === v ? e.w : e.v, edge = result.edge(u, v), weight = !_.isUndefined(edge) ? edge.weight : 0;
            result.setEdge(u, v, {weight: g.edge(e).weight + weight});
          });
          if (_.has(node, "minRank")) {
            result.setNode(v, {
              borderLeft: node.borderLeft[rank],
              borderRight: node.borderRight[rank]
            });
          }
        }
      });
      return result;
    }
    function createRootNode(g) {
      var v;
      while (g.hasNode(v = _.uniqueId("_root")))
        ;
      return v;
    }
  });

  // node_modules/dagre/lib/order/add-subgraph-constraints.js
  var require_add_subgraph_constraints = __commonJS((exports, module) => {
    var _ = require_lodash3();
    module.exports = addSubgraphConstraints;
    function addSubgraphConstraints(g, cg, vs) {
      var prev = {}, rootPrev;
      _.forEach(vs, function(v) {
        var child = g.parent(v), parent, prevChild;
        while (child) {
          parent = g.parent(child);
          if (parent) {
            prevChild = prev[parent];
            prev[parent] = child;
          } else {
            prevChild = rootPrev;
            rootPrev = child;
          }
          if (prevChild && prevChild !== child) {
            cg.setEdge(prevChild, child);
            return;
          }
          child = parent;
        }
      });
    }
  });

  // node_modules/dagre/lib/order/index.js
  var require_order = __commonJS((exports, module) => {
    "use strict";
    var _ = require_lodash3();
    var initOrder = require_init_order();
    var crossCount = require_cross_count();
    var sortSubgraph = require_sort_subgraph();
    var buildLayerGraph = require_build_layer_graph();
    var addSubgraphConstraints = require_add_subgraph_constraints();
    var Graph = require_graphlib2().Graph;
    var util = require_util();
    module.exports = order;
    function order(g) {
      var maxRank = util.maxRank(g), downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), "inEdges"), upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), "outEdges");
      var layering = initOrder(g);
      assignOrder(g, layering);
      var bestCC = Number.POSITIVE_INFINITY, best;
      for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {
        sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);
        layering = util.buildLayerMatrix(g);
        var cc = crossCount(g, layering);
        if (cc < bestCC) {
          lastBest = 0;
          best = _.cloneDeep(layering);
          bestCC = cc;
        }
      }
      assignOrder(g, best);
    }
    function buildLayerGraphs(g, ranks, relationship) {
      return _.map(ranks, function(rank) {
        return buildLayerGraph(g, rank, relationship);
      });
    }
    function sweepLayerGraphs(layerGraphs, biasRight) {
      var cg = new Graph();
      _.forEach(layerGraphs, function(lg) {
        var root = lg.graph().root;
        var sorted = sortSubgraph(lg, root, cg, biasRight);
        _.forEach(sorted.vs, function(v, i) {
          lg.node(v).order = i;
        });
        addSubgraphConstraints(lg, cg, sorted.vs);
      });
    }
    function assignOrder(g, layering) {
      _.forEach(layering, function(layer) {
        _.forEach(layer, function(v, i) {
          g.node(v).order = i;
        });
      });
    }
  });

  // node_modules/dagre/lib/position/bk.js
  var require_bk = __commonJS((exports, module) => {
    "use strict";
    var _ = require_lodash3();
    var Graph = require_graphlib2().Graph;
    var util = require_util();
    module.exports = {
      positionX,
      findType1Conflicts,
      findType2Conflicts,
      addConflict,
      hasConflict,
      verticalAlignment,
      horizontalCompaction,
      alignCoordinates,
      findSmallestWidthAlignment,
      balance
    };
    function findType1Conflicts(g, layering) {
      var conflicts = {};
      function visitLayer(prevLayer, layer) {
        var k0 = 0, scanPos = 0, prevLayerLength = prevLayer.length, lastNode = _.last(layer);
        _.forEach(layer, function(v, i) {
          var w = findOtherInnerSegmentNode(g, v), k1 = w ? g.node(w).order : prevLayerLength;
          if (w || v === lastNode) {
            _.forEach(layer.slice(scanPos, i + 1), function(scanNode) {
              _.forEach(g.predecessors(scanNode), function(u) {
                var uLabel = g.node(u), uPos = uLabel.order;
                if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) {
                  addConflict(conflicts, u, scanNode);
                }
              });
            });
            scanPos = i + 1;
            k0 = k1;
          }
        });
        return layer;
      }
      _.reduce(layering, visitLayer);
      return conflicts;
    }
    function findType2Conflicts(g, layering) {
      var conflicts = {};
      function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {
        var v;
        _.forEach(_.range(southPos, southEnd), function(i) {
          v = south[i];
          if (g.node(v).dummy) {
            _.forEach(g.predecessors(v), function(u) {
              var uNode = g.node(u);
              if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {
                addConflict(conflicts, u, v);
              }
            });
          }
        });
      }
      function visitLayer(north, south) {
        var prevNorthPos = -1, nextNorthPos, southPos = 0;
        _.forEach(south, function(v, southLookahead) {
          if (g.node(v).dummy === "border") {
            var predecessors = g.predecessors(v);
            if (predecessors.length) {
              nextNorthPos = g.node(predecessors[0]).order;
              scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);
              southPos = southLookahead;
              prevNorthPos = nextNorthPos;
            }
          }
          scan(south, southPos, south.length, nextNorthPos, north.length);
        });
        return south;
      }
      _.reduce(layering, visitLayer);
      return conflicts;
    }
    function findOtherInnerSegmentNode(g, v) {
      if (g.node(v).dummy) {
        return _.find(g.predecessors(v), function(u) {
          return g.node(u).dummy;
        });
      }
    }
    function addConflict(conflicts, v, w) {
      if (v > w) {
        var tmp = v;
        v = w;
        w = tmp;
      }
      var conflictsV = conflicts[v];
      if (!conflictsV) {
        conflicts[v] = conflictsV = {};
      }
      conflictsV[w] = true;
    }
    function hasConflict(conflicts, v, w) {
      if (v > w) {
        var tmp = v;
        v = w;
        w = tmp;
      }
      return _.has(conflicts[v], w);
    }
    function verticalAlignment(g, layering, conflicts, neighborFn) {
      var root = {}, align = {}, pos = {};
      _.forEach(layering, function(layer) {
        _.forEach(layer, function(v, order) {
          root[v] = v;
          align[v] = v;
          pos[v] = order;
        });
      });
      _.forEach(layering, function(layer) {
        var prevIdx = -1;
        _.forEach(layer, function(v) {
          var ws = neighborFn(v);
          if (ws.length) {
            ws = _.sortBy(ws, function(w2) {
              return pos[w2];
            });
            var mp = (ws.length - 1) / 2;
            for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {
              var w = ws[i];
              if (align[v] === v && prevIdx < pos[w] && !hasConflict(conflicts, v, w)) {
                align[w] = v;
                align[v] = root[v] = root[w];
                prevIdx = pos[w];
              }
            }
          }
        });
      });
      return {root, align};
    }
    function horizontalCompaction(g, layering, root, align, reverseSep) {
      var xs = {}, blockG = buildBlockGraph(g, layering, root, reverseSep), borderType = reverseSep ? "borderLeft" : "borderRight";
      function iterate(setXsFunc, nextNodesFunc) {
        var stack = blockG.nodes();
        var elem = stack.pop();
        var visited = {};
        while (elem) {
          if (visited[elem]) {
            setXsFunc(elem);
          } else {
            visited[elem] = true;
            stack.push(elem);
            stack = stack.concat(nextNodesFunc(elem));
          }
          elem = stack.pop();
        }
      }
      function pass1(elem) {
        xs[elem] = blockG.inEdges(elem).reduce(function(acc, e) {
          return Math.max(acc, xs[e.v] + blockG.edge(e));
        }, 0);
      }
      function pass2(elem) {
        var min = blockG.outEdges(elem).reduce(function(acc, e) {
          return Math.min(acc, xs[e.w] - blockG.edge(e));
        }, Number.POSITIVE_INFINITY);
        var node = g.node(elem);
        if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {
          xs[elem] = Math.max(xs[elem], min);
        }
      }
      iterate(pass1, blockG.predecessors.bind(blockG));
      iterate(pass2, blockG.successors.bind(blockG));
      _.forEach(align, function(v) {
        xs[v] = xs[root[v]];
      });
      return xs;
    }
    function buildBlockGraph(g, layering, root, reverseSep) {
      var blockGraph = new Graph(), graphLabel = g.graph(), sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);
      _.forEach(layering, function(layer) {
        var u;
        _.forEach(layer, function(v) {
          var vRoot = root[v];
          blockGraph.setNode(vRoot);
          if (u) {
            var uRoot = root[u], prevMax = blockGraph.edge(uRoot, vRoot);
            blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));
          }
          u = v;
        });
      });
      return blockGraph;
    }
    function findSmallestWidthAlignment(g, xss) {
      return _.minBy(_.values(xss), function(xs) {
        var max = Number.NEGATIVE_INFINITY;
        var min = Number.POSITIVE_INFINITY;
        _.forIn(xs, function(x, v) {
          var halfWidth = width(g, v) / 2;
          max = Math.max(x + halfWidth, max);
          min = Math.min(x - halfWidth, min);
        });
        return max - min;
      });
    }
    function alignCoordinates(xss, alignTo) {
      var alignToVals = _.values(alignTo), alignToMin = _.min(alignToVals), alignToMax = _.max(alignToVals);
      _.forEach(["u", "d"], function(vert) {
        _.forEach(["l", "r"], function(horiz) {
          var alignment = vert + horiz, xs = xss[alignment], delta;
          if (xs === alignTo)
            return;
          var xsVals = _.values(xs);
          delta = horiz === "l" ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);
          if (delta) {
            xss[alignment] = _.mapValues(xs, function(x) {
              return x + delta;
            });
          }
        });
      });
    }
    function balance(xss, align) {
      return _.mapValues(xss.ul, function(ignore, v) {
        if (align) {
          return xss[align.toLowerCase()][v];
        } else {
          var xs = _.sortBy(_.map(xss, v));
          return (xs[1] + xs[2]) / 2;
        }
      });
    }
    function positionX(g) {
      var layering = util.buildLayerMatrix(g);
      var conflicts = _.merge(findType1Conflicts(g, layering), findType2Conflicts(g, layering));
      var xss = {};
      var adjustedLayering;
      _.forEach(["u", "d"], function(vert) {
        adjustedLayering = vert === "u" ? layering : _.values(layering).reverse();
        _.forEach(["l", "r"], function(horiz) {
          if (horiz === "r") {
            adjustedLayering = _.map(adjustedLayering, function(inner) {
              return _.values(inner).reverse();
            });
          }
          var neighborFn = (vert === "u" ? g.predecessors : g.successors).bind(g);
          var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);
          var xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === "r");
          if (horiz === "r") {
            xs = _.mapValues(xs, function(x) {
              return -x;
            });
          }
          xss[vert + horiz] = xs;
        });
      });
      var smallestWidth = findSmallestWidthAlignment(g, xss);
      alignCoordinates(xss, smallestWidth);
      return balance(xss, g.graph().align);
    }
    function sep(nodeSep, edgeSep, reverseSep) {
      return function(g, v, w) {
        var vLabel = g.node(v);
        var wLabel = g.node(w);
        var sum = 0;
        var delta;
        sum += vLabel.width / 2;
        if (_.has(vLabel, "labelpos")) {
          switch (vLabel.labelpos.toLowerCase()) {
            case "l":
              delta = -vLabel.width / 2;
              break;
            case "r":
              delta = vLabel.width / 2;
              break;
          }
        }
        if (delta) {
          sum += reverseSep ? delta : -delta;
        }
        delta = 0;
        sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;
        sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;
        sum += wLabel.width / 2;
        if (_.has(wLabel, "labelpos")) {
          switch (wLabel.labelpos.toLowerCase()) {
            case "l":
              delta = wLabel.width / 2;
              break;
            case "r":
              delta = -wLabel.width / 2;
              break;
          }
        }
        if (delta) {
          sum += reverseSep ? delta : -delta;
        }
        delta = 0;
        return sum;
      };
    }
    function width(g, v) {
      return g.node(v).width;
    }
  });

  // node_modules/dagre/lib/position/index.js
  var require_position = __commonJS((exports, module) => {
    "use strict";
    var _ = require_lodash3();
    var util = require_util();
    var positionX = require_bk().positionX;
    module.exports = position;
    function position(g) {
      g = util.asNonCompoundGraph(g);
      positionY(g);
      _.forEach(positionX(g), function(x, v) {
        g.node(v).x = x;
      });
    }
    function positionY(g) {
      var layering = util.buildLayerMatrix(g);
      var rankSep = g.graph().ranksep;
      var prevY = 0;
      _.forEach(layering, function(layer) {
        var maxHeight = _.max(_.map(layer, function(v) {
          return g.node(v).height;
        }));
        _.forEach(layer, function(v) {
          g.node(v).y = prevY + maxHeight / 2;
        });
        prevY += maxHeight + rankSep;
      });
    }
  });

  // node_modules/dagre/lib/layout.js
  var require_layout = __commonJS((exports, module) => {
    "use strict";
    var _ = require_lodash3();
    var acyclic = require_acyclic();
    var normalize = require_normalize();
    var rank = require_rank();
    var normalizeRanks = require_util().normalizeRanks;
    var parentDummyChains = require_parent_dummy_chains();
    var removeEmptyRanks = require_util().removeEmptyRanks;
    var nestingGraph = require_nesting_graph();
    var addBorderSegments = require_add_border_segments();
    var coordinateSystem = require_coordinate_system();
    var order = require_order();
    var position = require_position();
    var util = require_util();
    var Graph = require_graphlib2().Graph;
    module.exports = layout;
    function layout(g, opts) {
      var time = opts && opts.debugTiming ? util.time : util.notime;
      time("layout", function() {
        var layoutGraph = time("  buildLayoutGraph", function() {
          return buildLayoutGraph(g);
        });
        time("  runLayout", function() {
          runLayout(layoutGraph, time);
        });
        time("  updateInputGraph", function() {
          updateInputGraph(g, layoutGraph);
        });
      });
    }
    function runLayout(g, time) {
      time("    makeSpaceForEdgeLabels", function() {
        makeSpaceForEdgeLabels(g);
      });
      time("    removeSelfEdges", function() {
        removeSelfEdges(g);
      });
      time("    acyclic", function() {
        acyclic.run(g);
      });
      time("    nestingGraph.run", function() {
        nestingGraph.run(g);
      });
      time("    rank", function() {
        rank(util.asNonCompoundGraph(g));
      });
      time("    injectEdgeLabelProxies", function() {
        injectEdgeLabelProxies(g);
      });
      time("    removeEmptyRanks", function() {
        removeEmptyRanks(g);
      });
      time("    nestingGraph.cleanup", function() {
        nestingGraph.cleanup(g);
      });
      time("    normalizeRanks", function() {
        normalizeRanks(g);
      });
      time("    assignRankMinMax", function() {
        assignRankMinMax(g);
      });
      time("    removeEdgeLabelProxies", function() {
        removeEdgeLabelProxies(g);
      });
      time("    normalize.run", function() {
        normalize.run(g);
      });
      time("    parentDummyChains", function() {
        parentDummyChains(g);
      });
      time("    addBorderSegments", function() {
        addBorderSegments(g);
      });
      time("    order", function() {
        order(g);
      });
      time("    insertSelfEdges", function() {
        insertSelfEdges(g);
      });
      time("    adjustCoordinateSystem", function() {
        coordinateSystem.adjust(g);
      });
      time("    position", function() {
        position(g);
      });
      time("    positionSelfEdges", function() {
        positionSelfEdges(g);
      });
      time("    removeBorderNodes", function() {
        removeBorderNodes(g);
      });
      time("    normalize.undo", function() {
        normalize.undo(g);
      });
      time("    fixupEdgeLabelCoords", function() {
        fixupEdgeLabelCoords(g);
      });
      time("    undoCoordinateSystem", function() {
        coordinateSystem.undo(g);
      });
      time("    translateGraph", function() {
        translateGraph(g);
      });
      time("    assignNodeIntersects", function() {
        assignNodeIntersects(g);
      });
      time("    reversePoints", function() {
        reversePointsForReversedEdges(g);
      });
      time("    acyclic.undo", function() {
        acyclic.undo(g);
      });
    }
    function updateInputGraph(inputGraph, layoutGraph) {
      _.forEach(inputGraph.nodes(), function(v) {
        var inputLabel = inputGraph.node(v);
        var layoutLabel = layoutGraph.node(v);
        if (inputLabel) {
          inputLabel.x = layoutLabel.x;
          inputLabel.y = layoutLabel.y;
          if (layoutGraph.children(v).length) {
            inputLabel.width = layoutLabel.width;
            inputLabel.height = layoutLabel.height;
          }
        }
      });
      _.forEach(inputGraph.edges(), function(e) {
        var inputLabel = inputGraph.edge(e);
        var layoutLabel = layoutGraph.edge(e);
        inputLabel.points = layoutLabel.points;
        if (_.has(layoutLabel, "x")) {
          inputLabel.x = layoutLabel.x;
          inputLabel.y = layoutLabel.y;
        }
      });
      inputGraph.graph().width = layoutGraph.graph().width;
      inputGraph.graph().height = layoutGraph.graph().height;
    }
    var graphNumAttrs = ["nodesep", "edgesep", "ranksep", "marginx", "marginy"];
    var graphDefaults = {ranksep: 50, edgesep: 20, nodesep: 50, rankdir: "tb"};
    var graphAttrs = ["acyclicer", "ranker", "rankdir", "align"];
    var nodeNumAttrs = ["width", "height"];
    var nodeDefaults = {width: 0, height: 0};
    var edgeNumAttrs = ["minlen", "weight", "width", "height", "labeloffset"];
    var edgeDefaults = {
      minlen: 1,
      weight: 1,
      width: 0,
      height: 0,
      labeloffset: 10,
      labelpos: "r"
    };
    var edgeAttrs = ["labelpos"];
    function buildLayoutGraph(inputGraph) {
      var g = new Graph({multigraph: true, compound: true});
      var graph = canonicalize(inputGraph.graph());
      g.setGraph(_.merge({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), _.pick(graph, graphAttrs)));
      _.forEach(inputGraph.nodes(), function(v) {
        var node = canonicalize(inputGraph.node(v));
        g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));
        g.setParent(v, inputGraph.parent(v));
      });
      _.forEach(inputGraph.edges(), function(e) {
        var edge = canonicalize(inputGraph.edge(e));
        g.setEdge(e, _.merge({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), _.pick(edge, edgeAttrs)));
      });
      return g;
    }
    function makeSpaceForEdgeLabels(g) {
      var graph = g.graph();
      graph.ranksep /= 2;
      _.forEach(g.edges(), function(e) {
        var edge = g.edge(e);
        edge.minlen *= 2;
        if (edge.labelpos.toLowerCase() !== "c") {
          if (graph.rankdir === "TB" || graph.rankdir === "BT") {
            edge.width += edge.labeloffset;
          } else {
            edge.height += edge.labeloffset;
          }
        }
      });
    }
    function injectEdgeLabelProxies(g) {
      _.forEach(g.edges(), function(e) {
        var edge = g.edge(e);
        if (edge.width && edge.height) {
          var v = g.node(e.v);
          var w = g.node(e.w);
          var label = {rank: (w.rank - v.rank) / 2 + v.rank, e};
          util.addDummyNode(g, "edge-proxy", label, "_ep");
        }
      });
    }
    function assignRankMinMax(g) {
      var maxRank = 0;
      _.forEach(g.nodes(), function(v) {
        var node = g.node(v);
        if (node.borderTop) {
          node.minRank = g.node(node.borderTop).rank;
          node.maxRank = g.node(node.borderBottom).rank;
          maxRank = _.max(maxRank, node.maxRank);
        }
      });
      g.graph().maxRank = maxRank;
    }
    function removeEdgeLabelProxies(g) {
      _.forEach(g.nodes(), function(v) {
        var node = g.node(v);
        if (node.dummy === "edge-proxy") {
          g.edge(node.e).labelRank = node.rank;
          g.removeNode(v);
        }
      });
    }
    function translateGraph(g) {
      var minX = Number.POSITIVE_INFINITY;
      var maxX = 0;
      var minY = Number.POSITIVE_INFINITY;
      var maxY = 0;
      var graphLabel = g.graph();
      var marginX = graphLabel.marginx || 0;
      var marginY = graphLabel.marginy || 0;
      function getExtremes(attrs) {
        var x = attrs.x;
        var y = attrs.y;
        var w = attrs.width;
        var h = attrs.height;
        minX = Math.min(minX, x - w / 2);
        maxX = Math.max(maxX, x + w / 2);
        minY = Math.min(minY, y - h / 2);
        maxY = Math.max(maxY, y + h / 2);
      }
      _.forEach(g.nodes(), function(v) {
        getExtremes(g.node(v));
      });
      _.forEach(g.edges(), function(e) {
        var edge = g.edge(e);
        if (_.has(edge, "x")) {
          getExtremes(edge);
        }
      });
      minX -= marginX;
      minY -= marginY;
      _.forEach(g.nodes(), function(v) {
        var node = g.node(v);
        node.x -= minX;
        node.y -= minY;
      });
      _.forEach(g.edges(), function(e) {
        var edge = g.edge(e);
        _.forEach(edge.points, function(p) {
          p.x -= minX;
          p.y -= minY;
        });
        if (_.has(edge, "x")) {
          edge.x -= minX;
        }
        if (_.has(edge, "y")) {
          edge.y -= minY;
        }
      });
      graphLabel.width = maxX - minX + marginX;
      graphLabel.height = maxY - minY + marginY;
    }
    function assignNodeIntersects(g) {
      _.forEach(g.edges(), function(e) {
        var edge = g.edge(e);
        var nodeV = g.node(e.v);
        var nodeW = g.node(e.w);
        var p1, p2;
        if (!edge.points) {
          edge.points = [];
          p1 = nodeW;
          p2 = nodeV;
        } else {
          p1 = edge.points[0];
          p2 = edge.points[edge.points.length - 1];
        }
        edge.points.unshift(util.intersectRect(nodeV, p1));
        edge.points.push(util.intersectRect(nodeW, p2));
      });
    }
    function fixupEdgeLabelCoords(g) {
      _.forEach(g.edges(), function(e) {
        var edge = g.edge(e);
        if (_.has(edge, "x")) {
          if (edge.labelpos === "l" || edge.labelpos === "r") {
            edge.width -= edge.labeloffset;
          }
          switch (edge.labelpos) {
            case "l":
              edge.x -= edge.width / 2 + edge.labeloffset;
              break;
            case "r":
              edge.x += edge.width / 2 + edge.labeloffset;
              break;
          }
        }
      });
    }
    function reversePointsForReversedEdges(g) {
      _.forEach(g.edges(), function(e) {
        var edge = g.edge(e);
        if (edge.reversed) {
          edge.points.reverse();
        }
      });
    }
    function removeBorderNodes(g) {
      _.forEach(g.nodes(), function(v) {
        if (g.children(v).length) {
          var node = g.node(v);
          var t = g.node(node.borderTop);
          var b = g.node(node.borderBottom);
          var l = g.node(_.last(node.borderLeft));
          var r = g.node(_.last(node.borderRight));
          node.width = Math.abs(r.x - l.x);
          node.height = Math.abs(b.y - t.y);
          node.x = l.x + node.width / 2;
          node.y = t.y + node.height / 2;
        }
      });
      _.forEach(g.nodes(), function(v) {
        if (g.node(v).dummy === "border") {
          g.removeNode(v);
        }
      });
    }
    function removeSelfEdges(g) {
      _.forEach(g.edges(), function(e) {
        if (e.v === e.w) {
          var node = g.node(e.v);
          if (!node.selfEdges) {
            node.selfEdges = [];
          }
          node.selfEdges.push({e, label: g.edge(e)});
          g.removeEdge(e);
        }
      });
    }
    function insertSelfEdges(g) {
      var layers = util.buildLayerMatrix(g);
      _.forEach(layers, function(layer) {
        var orderShift = 0;
        _.forEach(layer, function(v, i) {
          var node = g.node(v);
          node.order = i + orderShift;
          _.forEach(node.selfEdges, function(selfEdge) {
            util.addDummyNode(g, "selfedge", {
              width: selfEdge.label.width,
              height: selfEdge.label.height,
              rank: node.rank,
              order: i + ++orderShift,
              e: selfEdge.e,
              label: selfEdge.label
            }, "_se");
          });
          delete node.selfEdges;
        });
      });
    }
    function positionSelfEdges(g) {
      _.forEach(g.nodes(), function(v) {
        var node = g.node(v);
        if (node.dummy === "selfedge") {
          var selfNode = g.node(node.e.v);
          var x = selfNode.x + selfNode.width / 2;
          var y = selfNode.y;
          var dx = node.x - x;
          var dy = selfNode.height / 2;
          g.setEdge(node.e, node.label);
          g.removeNode(v);
          node.label.points = [
            {x: x + 2 * dx / 3, y: y - dy},
            {x: x + 5 * dx / 6, y: y - dy},
            {x: x + dx, y},
            {x: x + 5 * dx / 6, y: y + dy},
            {x: x + 2 * dx / 3, y: y + dy}
          ];
          node.label.x = node.x;
          node.label.y = node.y;
        }
      });
    }
    function selectNumberAttrs(obj, attrs) {
      return _.mapValues(_.pick(obj, attrs), Number);
    }
    function canonicalize(attrs) {
      var newAttrs = {};
      _.forEach(attrs, function(v, k) {
        newAttrs[k.toLowerCase()] = v;
      });
      return newAttrs;
    }
  });

  // node_modules/dagre/lib/debug.js
  var require_debug = __commonJS((exports, module) => {
    var _ = require_lodash3();
    var util = require_util();
    var Graph = require_graphlib2().Graph;
    module.exports = {
      debugOrdering
    };
    function debugOrdering(g) {
      var layerMatrix = util.buildLayerMatrix(g);
      var h = new Graph({compound: true, multigraph: true}).setGraph({});
      _.forEach(g.nodes(), function(v) {
        h.setNode(v, {label: v});
        h.setParent(v, "layer" + g.node(v).rank);
      });
      _.forEach(g.edges(), function(e) {
        h.setEdge(e.v, e.w, {}, e.name);
      });
      _.forEach(layerMatrix, function(layer, i) {
        var layerV = "layer" + i;
        h.setNode(layerV, {rank: "same"});
        _.reduce(layer, function(u, v) {
          h.setEdge(u, v, {style: "invis"});
          return v;
        });
      });
      return h;
    }
  });

  // node_modules/dagre/lib/version.js
  var require_version2 = __commonJS((exports, module) => {
    module.exports = "0.8.5";
  });

  // node_modules/dagre/index.js
  var require_dagre = __commonJS((exports, module) => {
    module.exports = {
      graphlib: require_graphlib2(),
      layout: require_layout(),
      debug: require_debug(),
      util: {
        time: require_util().time,
        notime: require_util().notime
      },
      version: require_version2()
    };
  });

  // node_modules/cytoscape-dagre/cytoscape-dagre.js
  var require_cytoscape_dagre = __commonJS((exports, module) => {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory(require_dagre());
      else if (typeof define === "function" && define.amd)
        define(["dagre"], factory);
      else if (typeof exports === "object")
        exports["cytoscapeDagre"] = factory(require_dagre());
      else
        root["cytoscapeDagre"] = factory(root["dagre"]);
    })(exports, function(__WEBPACK_EXTERNAL_MODULE__4__) {
      return function(modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
          if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
          }
          var module2 = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
          };
          modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
          module2.l = true;
          return module2.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.d = function(exports2, name, getter) {
          if (!__webpack_require__.o(exports2, name)) {
            Object.defineProperty(exports2, name, {enumerable: true, get: getter});
          }
        };
        __webpack_require__.r = function(exports2) {
          if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
            Object.defineProperty(exports2, Symbol.toStringTag, {value: "Module"});
          }
          Object.defineProperty(exports2, "__esModule", {value: true});
        };
        __webpack_require__.t = function(value, mode) {
          if (mode & 1)
            value = __webpack_require__(value);
          if (mode & 8)
            return value;
          if (mode & 4 && typeof value === "object" && value && value.__esModule)
            return value;
          var ns = Object.create(null);
          __webpack_require__.r(ns);
          Object.defineProperty(ns, "default", {enumerable: true, value});
          if (mode & 2 && typeof value != "string")
            for (var key in value)
              __webpack_require__.d(ns, key, function(key2) {
                return value[key2];
              }.bind(null, key));
          return ns;
        };
        __webpack_require__.n = function(module2) {
          var getter = module2 && module2.__esModule ? function getDefault() {
            return module2["default"];
          } : function getModuleExports() {
            return module2;
          };
          __webpack_require__.d(getter, "a", getter);
          return getter;
        };
        __webpack_require__.o = function(object, property) {
          return Object.prototype.hasOwnProperty.call(object, property);
        };
        __webpack_require__.p = "";
        return __webpack_require__(__webpack_require__.s = 0);
      }([
        function(module2, exports2, __webpack_require__) {
          var impl = __webpack_require__(1);
          var register = function register2(cytoscape3) {
            if (!cytoscape3) {
              return;
            }
            cytoscape3("layout", "dagre", impl);
          };
          if (typeof cytoscape !== "undefined") {
            register(cytoscape);
          }
          module2.exports = register;
        },
        function(module2, exports2, __webpack_require__) {
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          var isFunction = function isFunction2(o2) {
            return typeof o2 === "function";
          };
          var defaults = __webpack_require__(2);
          var assign = __webpack_require__(3);
          var dagre2 = __webpack_require__(4);
          function DagreLayout(options) {
            this.options = assign({}, defaults, options);
          }
          DagreLayout.prototype.run = function() {
            var options = this.options;
            var layout = this;
            var cy = options.cy;
            var eles = options.eles;
            var getVal = function getVal2(ele, val) {
              return isFunction(val) ? val.apply(ele, [ele]) : val;
            };
            var bb = options.boundingBox || {
              x1: 0,
              y1: 0,
              w: cy.width(),
              h: cy.height()
            };
            if (bb.x2 === void 0) {
              bb.x2 = bb.x1 + bb.w;
            }
            if (bb.w === void 0) {
              bb.w = bb.x2 - bb.x1;
            }
            if (bb.y2 === void 0) {
              bb.y2 = bb.y1 + bb.h;
            }
            if (bb.h === void 0) {
              bb.h = bb.y2 - bb.y1;
            }
            var g = new dagre2.graphlib.Graph({
              multigraph: true,
              compound: true
            });
            var gObj = {};
            var setGObj = function setGObj2(name, val) {
              if (val != null) {
                gObj[name] = val;
              }
            };
            setGObj("nodesep", options.nodeSep);
            setGObj("edgesep", options.edgeSep);
            setGObj("ranksep", options.rankSep);
            setGObj("rankdir", options.rankDir);
            setGObj("ranker", options.ranker);
            g.setGraph(gObj);
            g.setDefaultEdgeLabel(function() {
              return {};
            });
            g.setDefaultNodeLabel(function() {
              return {};
            });
            var nodes = eles.nodes();
            for (var i = 0; i < nodes.length; i++) {
              var node = nodes[i];
              var nbb = node.layoutDimensions(options);
              g.setNode(node.id(), {
                width: nbb.w,
                height: nbb.h,
                name: node.id()
              });
            }
            for (var _i = 0; _i < nodes.length; _i++) {
              var _node = nodes[_i];
              if (_node.isChild()) {
                g.setParent(_node.id(), _node.parent().id());
              }
            }
            var edges = eles.edges().stdFilter(function(edge2) {
              return !edge2.source().isParent() && !edge2.target().isParent();
            });
            for (var _i2 = 0; _i2 < edges.length; _i2++) {
              var edge = edges[_i2];
              g.setEdge(edge.source().id(), edge.target().id(), {
                minlen: getVal(edge, options.minLen),
                weight: getVal(edge, options.edgeWeight),
                name: edge.id()
              }, edge.id());
            }
            dagre2.layout(g);
            var gNodeIds = g.nodes();
            for (var _i3 = 0; _i3 < gNodeIds.length; _i3++) {
              var id = gNodeIds[_i3];
              var n = g.node(id);
              cy.getElementById(id).scratch().dagre = n;
            }
            var dagreBB;
            if (options.boundingBox) {
              dagreBB = {
                x1: Infinity,
                x2: -Infinity,
                y1: Infinity,
                y2: -Infinity
              };
              nodes.forEach(function(node2) {
                var dModel = node2.scratch().dagre;
                dagreBB.x1 = Math.min(dagreBB.x1, dModel.x);
                dagreBB.x2 = Math.max(dagreBB.x2, dModel.x);
                dagreBB.y1 = Math.min(dagreBB.y1, dModel.y);
                dagreBB.y2 = Math.max(dagreBB.y2, dModel.y);
              });
              dagreBB.w = dagreBB.x2 - dagreBB.x1;
              dagreBB.h = dagreBB.y2 - dagreBB.y1;
            } else {
              dagreBB = bb;
            }
            var constrainPos = function constrainPos2(p) {
              if (options.boundingBox) {
                var xPct = dagreBB.w === 0 ? 0 : (p.x - dagreBB.x1) / dagreBB.w;
                var yPct = dagreBB.h === 0 ? 0 : (p.y - dagreBB.y1) / dagreBB.h;
                return {
                  x: bb.x1 + xPct * bb.w,
                  y: bb.y1 + yPct * bb.h
                };
              } else {
                return p;
              }
            };
            nodes.layoutPositions(layout, options, function(ele) {
              ele = _typeof(ele) === "object" ? ele : this;
              var dModel = ele.scratch().dagre;
              return constrainPos({
                x: dModel.x,
                y: dModel.y
              });
            });
            return this;
          };
          module2.exports = DagreLayout;
        },
        function(module2, exports2) {
          var defaults = {
            nodeSep: void 0,
            edgeSep: void 0,
            rankSep: void 0,
            rankDir: void 0,
            ranker: void 0,
            minLen: function minLen(edge) {
              return 1;
            },
            edgeWeight: function edgeWeight(edge) {
              return 1;
            },
            fit: true,
            padding: 30,
            spacingFactor: void 0,
            nodeDimensionsIncludeLabels: false,
            animate: false,
            animateFilter: function animateFilter(node, i) {
              return true;
            },
            animationDuration: 500,
            animationEasing: void 0,
            boundingBox: void 0,
            transform: function transform(node, pos) {
              return pos;
            },
            ready: function ready() {
            },
            stop: function stop() {
            }
          };
          module2.exports = defaults;
        },
        function(module2, exports2) {
          module2.exports = Object.assign != null ? Object.assign.bind(Object) : function(tgt) {
            for (var _len = arguments.length, srcs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              srcs[_key - 1] = arguments[_key];
            }
            srcs.forEach(function(src) {
              Object.keys(src).forEach(function(k) {
                return tgt[k] = src[k];
              });
            });
            return tgt;
          };
        },
        function(module2, exports2) {
          module2.exports = __WEBPACK_EXTERNAL_MODULE__4__;
        }
      ]);
    });
  });

  // node_modules/webcola/dist/src/powergraph.js
  var require_powergraph = __commonJS((exports) => {
    "use strict";
    Object.defineProperty(exports, "__esModule", {value: true});
    var PowerEdge = function() {
      function PowerEdge2(source, target, type) {
        this.source = source;
        this.target = target;
        this.type = type;
      }
      return PowerEdge2;
    }();
    exports.PowerEdge = PowerEdge;
    var Configuration = function() {
      function Configuration2(n, edges, linkAccessor, rootGroup) {
        var _this = this;
        this.linkAccessor = linkAccessor;
        this.modules = new Array(n);
        this.roots = [];
        if (rootGroup) {
          this.initModulesFromGroup(rootGroup);
        } else {
          this.roots.push(new ModuleSet());
          for (var i = 0; i < n; ++i)
            this.roots[0].add(this.modules[i] = new Module(i));
        }
        this.R = edges.length;
        edges.forEach(function(e) {
          var s = _this.modules[linkAccessor.getSourceIndex(e)], t = _this.modules[linkAccessor.getTargetIndex(e)], type = linkAccessor.getType(e);
          s.outgoing.add(type, t);
          t.incoming.add(type, s);
        });
      }
      Configuration2.prototype.initModulesFromGroup = function(group) {
        var moduleSet = new ModuleSet();
        this.roots.push(moduleSet);
        for (var i = 0; i < group.leaves.length; ++i) {
          var node = group.leaves[i];
          var module2 = new Module(node.id);
          this.modules[node.id] = module2;
          moduleSet.add(module2);
        }
        if (group.groups) {
          for (var j = 0; j < group.groups.length; ++j) {
            var child = group.groups[j];
            var definition = {};
            for (var prop in child)
              if (prop !== "leaves" && prop !== "groups" && child.hasOwnProperty(prop))
                definition[prop] = child[prop];
            moduleSet.add(new Module(-1 - j, new LinkSets(), new LinkSets(), this.initModulesFromGroup(child), definition));
          }
        }
        return moduleSet;
      };
      Configuration2.prototype.merge = function(a, b, k) {
        if (k === void 0) {
          k = 0;
        }
        var inInt = a.incoming.intersection(b.incoming), outInt = a.outgoing.intersection(b.outgoing);
        var children = new ModuleSet();
        children.add(a);
        children.add(b);
        var m = new Module(this.modules.length, outInt, inInt, children);
        this.modules.push(m);
        var update2 = function(s, i, o2) {
          s.forAll(function(ms, linktype) {
            ms.forAll(function(n) {
              var nls = n[i];
              nls.add(linktype, m);
              nls.remove(linktype, a);
              nls.remove(linktype, b);
              a[o2].remove(linktype, n);
              b[o2].remove(linktype, n);
            });
          });
        };
        update2(outInt, "incoming", "outgoing");
        update2(inInt, "outgoing", "incoming");
        this.R -= inInt.count() + outInt.count();
        this.roots[k].remove(a);
        this.roots[k].remove(b);
        this.roots[k].add(m);
        return m;
      };
      Configuration2.prototype.rootMerges = function(k) {
        if (k === void 0) {
          k = 0;
        }
        var rs = this.roots[k].modules();
        var n = rs.length;
        var merges = new Array(n * (n - 1));
        var ctr = 0;
        for (var i = 0, i_ = n - 1; i < i_; ++i) {
          for (var j = i + 1; j < n; ++j) {
            var a = rs[i], b = rs[j];
            merges[ctr] = {id: ctr, nEdges: this.nEdges(a, b), a, b};
            ctr++;
          }
        }
        return merges;
      };
      Configuration2.prototype.greedyMerge = function() {
        for (var i = 0; i < this.roots.length; ++i) {
          if (this.roots[i].modules().length < 2)
            continue;
          var ms = this.rootMerges(i).sort(function(a, b) {
            return a.nEdges == b.nEdges ? a.id - b.id : a.nEdges - b.nEdges;
          });
          var m = ms[0];
          if (m.nEdges >= this.R)
            continue;
          this.merge(m.a, m.b, i);
          return true;
        }
      };
      Configuration2.prototype.nEdges = function(a, b) {
        var inInt = a.incoming.intersection(b.incoming), outInt = a.outgoing.intersection(b.outgoing);
        return this.R - inInt.count() - outInt.count();
      };
      Configuration2.prototype.getGroupHierarchy = function(retargetedEdges) {
        var _this = this;
        var groups = [];
        var root = {};
        toGroups(this.roots[0], root, groups);
        var es = this.allEdges();
        es.forEach(function(e) {
          var a = _this.modules[e.source];
          var b = _this.modules[e.target];
          retargetedEdges.push(new PowerEdge(typeof a.gid === "undefined" ? e.source : groups[a.gid], typeof b.gid === "undefined" ? e.target : groups[b.gid], e.type));
        });
        return groups;
      };
      Configuration2.prototype.allEdges = function() {
        var es = [];
        Configuration2.getEdges(this.roots[0], es);
        return es;
      };
      Configuration2.getEdges = function(modules, es) {
        modules.forAll(function(m) {
          m.getEdges(es);
          Configuration2.getEdges(m.children, es);
        });
      };
      return Configuration2;
    }();
    exports.Configuration = Configuration;
    function toGroups(modules, group, groups) {
      modules.forAll(function(m) {
        if (m.isLeaf()) {
          if (!group.leaves)
            group.leaves = [];
          group.leaves.push(m.id);
        } else {
          var g = group;
          m.gid = groups.length;
          if (!m.isIsland() || m.isPredefined()) {
            g = {id: m.gid};
            if (m.isPredefined())
              for (var prop in m.definition)
                g[prop] = m.definition[prop];
            if (!group.groups)
              group.groups = [];
            group.groups.push(m.gid);
            groups.push(g);
          }
          toGroups(m.children, g, groups);
        }
      });
    }
    var Module = function() {
      function Module2(id, outgoing, incoming, children, definition) {
        if (outgoing === void 0) {
          outgoing = new LinkSets();
        }
        if (incoming === void 0) {
          incoming = new LinkSets();
        }
        if (children === void 0) {
          children = new ModuleSet();
        }
        this.id = id;
        this.outgoing = outgoing;
        this.incoming = incoming;
        this.children = children;
        this.definition = definition;
      }
      Module2.prototype.getEdges = function(es) {
        var _this = this;
        this.outgoing.forAll(function(ms, edgetype) {
          ms.forAll(function(target) {
            es.push(new PowerEdge(_this.id, target.id, edgetype));
          });
        });
      };
      Module2.prototype.isLeaf = function() {
        return this.children.count() === 0;
      };
      Module2.prototype.isIsland = function() {
        return this.outgoing.count() === 0 && this.incoming.count() === 0;
      };
      Module2.prototype.isPredefined = function() {
        return typeof this.definition !== "undefined";
      };
      return Module2;
    }();
    exports.Module = Module;
    function intersection(m, n) {
      var i = {};
      for (var v in m)
        if (v in n)
          i[v] = m[v];
      return i;
    }
    var ModuleSet = function() {
      function ModuleSet2() {
        this.table = {};
      }
      ModuleSet2.prototype.count = function() {
        return Object.keys(this.table).length;
      };
      ModuleSet2.prototype.intersection = function(other) {
        var result = new ModuleSet2();
        result.table = intersection(this.table, other.table);
        return result;
      };
      ModuleSet2.prototype.intersectionCount = function(other) {
        return this.intersection(other).count();
      };
      ModuleSet2.prototype.contains = function(id) {
        return id in this.table;
      };
      ModuleSet2.prototype.add = function(m) {
        this.table[m.id] = m;
      };
      ModuleSet2.prototype.remove = function(m) {
        delete this.table[m.id];
      };
      ModuleSet2.prototype.forAll = function(f) {
        for (var mid in this.table) {
          f(this.table[mid]);
        }
      };
      ModuleSet2.prototype.modules = function() {
        var vs = [];
        this.forAll(function(m) {
          if (!m.isPredefined())
            vs.push(m);
        });
        return vs;
      };
      return ModuleSet2;
    }();
    exports.ModuleSet = ModuleSet;
    var LinkSets = function() {
      function LinkSets2() {
        this.sets = {};
        this.n = 0;
      }
      LinkSets2.prototype.count = function() {
        return this.n;
      };
      LinkSets2.prototype.contains = function(id) {
        var result = false;
        this.forAllModules(function(m) {
          if (!result && m.id == id) {
            result = true;
          }
        });
        return result;
      };
      LinkSets2.prototype.add = function(linktype, m) {
        var s = linktype in this.sets ? this.sets[linktype] : this.sets[linktype] = new ModuleSet();
        s.add(m);
        ++this.n;
      };
      LinkSets2.prototype.remove = function(linktype, m) {
        var ms = this.sets[linktype];
        ms.remove(m);
        if (ms.count() === 0) {
          delete this.sets[linktype];
        }
        --this.n;
      };
      LinkSets2.prototype.forAll = function(f) {
        for (var linktype in this.sets) {
          f(this.sets[linktype], Number(linktype));
        }
      };
      LinkSets2.prototype.forAllModules = function(f) {
        this.forAll(function(ms, lt) {
          return ms.forAll(f);
        });
      };
      LinkSets2.prototype.intersection = function(other) {
        var result = new LinkSets2();
        this.forAll(function(ms, lt) {
          if (lt in other.sets) {
            var i = ms.intersection(other.sets[lt]), n = i.count();
            if (n > 0) {
              result.sets[lt] = i;
              result.n += n;
            }
          }
        });
        return result;
      };
      return LinkSets2;
    }();
    exports.LinkSets = LinkSets;
    function getGroups(nodes, links, la, rootGroup) {
      var n = nodes.length, c = new Configuration(n, links, la, rootGroup);
      while (c.greedyMerge())
        ;
      var powerEdges = [];
      var g = c.getGroupHierarchy(powerEdges);
      powerEdges.forEach(function(e) {
        var f = function(end) {
          var g2 = e[end];
          if (typeof g2 == "number")
            e[end] = nodes[g2];
        };
        f("source");
        f("target");
      });
      return {groups: g, powerEdges};
    }
    exports.getGroups = getGroups;
  });

  // node_modules/webcola/dist/src/linklengths.js
  var require_linklengths = __commonJS((exports) => {
    "use strict";
    Object.defineProperty(exports, "__esModule", {value: true});
    function unionCount(a, b) {
      var u = {};
      for (var i in a)
        u[i] = {};
      for (var i in b)
        u[i] = {};
      return Object.keys(u).length;
    }
    function intersectionCount(a, b) {
      var n = 0;
      for (var i in a)
        if (typeof b[i] !== "undefined")
          ++n;
      return n;
    }
    function getNeighbours(links, la) {
      var neighbours = {};
      var addNeighbours = function(u, v) {
        if (typeof neighbours[u] === "undefined")
          neighbours[u] = {};
        neighbours[u][v] = {};
      };
      links.forEach(function(e) {
        var u = la.getSourceIndex(e), v = la.getTargetIndex(e);
        addNeighbours(u, v);
        addNeighbours(v, u);
      });
      return neighbours;
    }
    function computeLinkLengths(links, w, f, la) {
      var neighbours = getNeighbours(links, la);
      links.forEach(function(l) {
        var a = neighbours[la.getSourceIndex(l)];
        var b = neighbours[la.getTargetIndex(l)];
        la.setLength(l, 1 + w * f(a, b));
      });
    }
    function symmetricDiffLinkLengths(links, la, w) {
      if (w === void 0) {
        w = 1;
      }
      computeLinkLengths(links, w, function(a, b) {
        return Math.sqrt(unionCount(a, b) - intersectionCount(a, b));
      }, la);
    }
    exports.symmetricDiffLinkLengths = symmetricDiffLinkLengths;
    function jaccardLinkLengths(links, la, w) {
      if (w === void 0) {
        w = 1;
      }
      computeLinkLengths(links, w, function(a, b) {
        return Math.min(Object.keys(a).length, Object.keys(b).length) < 1.1 ? 0 : intersectionCount(a, b) / unionCount(a, b);
      }, la);
    }
    exports.jaccardLinkLengths = jaccardLinkLengths;
    function generateDirectedEdgeConstraints(n, links, axis, la) {
      var components = stronglyConnectedComponents(n, links, la);
      var nodes = {};
      components.forEach(function(c, i) {
        return c.forEach(function(v) {
          return nodes[v] = i;
        });
      });
      var constraints = [];
      links.forEach(function(l) {
        var ui = la.getSourceIndex(l), vi = la.getTargetIndex(l), u = nodes[ui], v = nodes[vi];
        if (u !== v) {
          constraints.push({
            axis,
            left: ui,
            right: vi,
            gap: la.getMinSeparation(l)
          });
        }
      });
      return constraints;
    }
    exports.generateDirectedEdgeConstraints = generateDirectedEdgeConstraints;
    function stronglyConnectedComponents(numVertices, edges, la) {
      var nodes = [];
      var index = 0;
      var stack = [];
      var components = [];
      function strongConnect(v2) {
        v2.index = v2.lowlink = index++;
        stack.push(v2);
        v2.onStack = true;
        for (var _i2 = 0, _a2 = v2.out; _i2 < _a2.length; _i2++) {
          var w2 = _a2[_i2];
          if (typeof w2.index === "undefined") {
            strongConnect(w2);
            v2.lowlink = Math.min(v2.lowlink, w2.lowlink);
          } else if (w2.onStack) {
            v2.lowlink = Math.min(v2.lowlink, w2.index);
          }
        }
        if (v2.lowlink === v2.index) {
          var component = [];
          while (stack.length) {
            w2 = stack.pop();
            w2.onStack = false;
            component.push(w2);
            if (w2 === v2)
              break;
          }
          components.push(component.map(function(v3) {
            return v3.id;
          }));
        }
      }
      for (var i = 0; i < numVertices; i++) {
        nodes.push({id: i, out: []});
      }
      for (var _i = 0, edges_1 = edges; _i < edges_1.length; _i++) {
        var e = edges_1[_i];
        var v_1 = nodes[la.getSourceIndex(e)], w = nodes[la.getTargetIndex(e)];
        v_1.out.push(w);
      }
      for (var _a = 0, nodes_1 = nodes; _a < nodes_1.length; _a++) {
        var v = nodes_1[_a];
        if (typeof v.index === "undefined")
          strongConnect(v);
      }
      return components;
    }
    exports.stronglyConnectedComponents = stronglyConnectedComponents;
  });

  // node_modules/webcola/dist/src/descent.js
  var require_descent = __commonJS((exports) => {
    "use strict";
    Object.defineProperty(exports, "__esModule", {value: true});
    var Locks = function() {
      function Locks2() {
        this.locks = {};
      }
      Locks2.prototype.add = function(id, x) {
        this.locks[id] = x;
      };
      Locks2.prototype.clear = function() {
        this.locks = {};
      };
      Locks2.prototype.isEmpty = function() {
        for (var l in this.locks)
          return false;
        return true;
      };
      Locks2.prototype.apply = function(f) {
        for (var l in this.locks) {
          f(Number(l), this.locks[l]);
        }
      };
      return Locks2;
    }();
    exports.Locks = Locks;
    var Descent = function() {
      function Descent2(x, D, G) {
        if (G === void 0) {
          G = null;
        }
        this.D = D;
        this.G = G;
        this.threshold = 1e-4;
        this.numGridSnapNodes = 0;
        this.snapGridSize = 100;
        this.snapStrength = 1e3;
        this.scaleSnapByMaxH = false;
        this.random = new PseudoRandom();
        this.project = null;
        this.x = x;
        this.k = x.length;
        var n = this.n = x[0].length;
        this.H = new Array(this.k);
        this.g = new Array(this.k);
        this.Hd = new Array(this.k);
        this.a = new Array(this.k);
        this.b = new Array(this.k);
        this.c = new Array(this.k);
        this.d = new Array(this.k);
        this.e = new Array(this.k);
        this.ia = new Array(this.k);
        this.ib = new Array(this.k);
        this.xtmp = new Array(this.k);
        this.locks = new Locks();
        this.minD = Number.MAX_VALUE;
        var i = n, j;
        while (i--) {
          j = n;
          while (--j > i) {
            var d = D[i][j];
            if (d > 0 && d < this.minD) {
              this.minD = d;
            }
          }
        }
        if (this.minD === Number.MAX_VALUE)
          this.minD = 1;
        i = this.k;
        while (i--) {
          this.g[i] = new Array(n);
          this.H[i] = new Array(n);
          j = n;
          while (j--) {
            this.H[i][j] = new Array(n);
          }
          this.Hd[i] = new Array(n);
          this.a[i] = new Array(n);
          this.b[i] = new Array(n);
          this.c[i] = new Array(n);
          this.d[i] = new Array(n);
          this.e[i] = new Array(n);
          this.ia[i] = new Array(n);
          this.ib[i] = new Array(n);
          this.xtmp[i] = new Array(n);
        }
      }
      Descent2.createSquareMatrix = function(n, f) {
        var M = new Array(n);
        for (var i = 0; i < n; ++i) {
          M[i] = new Array(n);
          for (var j = 0; j < n; ++j) {
            M[i][j] = f(i, j);
          }
        }
        return M;
      };
      Descent2.prototype.offsetDir = function() {
        var _this = this;
        var u = new Array(this.k);
        var l = 0;
        for (var i = 0; i < this.k; ++i) {
          var x = u[i] = this.random.getNextBetween(0.01, 1) - 0.5;
          l += x * x;
        }
        l = Math.sqrt(l);
        return u.map(function(x2) {
          return x2 *= _this.minD / l;
        });
      };
      Descent2.prototype.computeDerivatives = function(x) {
        var _this = this;
        var n = this.n;
        if (n < 1)
          return;
        var i;
        var d = new Array(this.k);
        var d2 = new Array(this.k);
        var Huu = new Array(this.k);
        var maxH = 0;
        for (var u = 0; u < n; ++u) {
          for (i = 0; i < this.k; ++i)
            Huu[i] = this.g[i][u] = 0;
          for (var v = 0; v < n; ++v) {
            if (u === v)
              continue;
            var maxDisplaces = n;
            while (maxDisplaces--) {
              var sd2 = 0;
              for (i = 0; i < this.k; ++i) {
                var dx = d[i] = x[i][u] - x[i][v];
                sd2 += d2[i] = dx * dx;
              }
              if (sd2 > 1e-9)
                break;
              var rd = this.offsetDir();
              for (i = 0; i < this.k; ++i)
                x[i][v] += rd[i];
            }
            var l = Math.sqrt(sd2);
            var D = this.D[u][v];
            var weight = this.G != null ? this.G[u][v] : 1;
            if (weight > 1 && l > D || !isFinite(D)) {
              for (i = 0; i < this.k; ++i)
                this.H[i][u][v] = 0;
              continue;
            }
            if (weight > 1) {
              weight = 1;
            }
            var D2 = D * D;
            var gs = 2 * weight * (l - D) / (D2 * l);
            var l3 = l * l * l;
            var hs = 2 * -weight / (D2 * l3);
            if (!isFinite(gs))
              console.log(gs);
            for (i = 0; i < this.k; ++i) {
              this.g[i][u] += d[i] * gs;
              Huu[i] -= this.H[i][u][v] = hs * (l3 + D * (d2[i] - sd2) + l * sd2);
            }
          }
          for (i = 0; i < this.k; ++i)
            maxH = Math.max(maxH, this.H[i][u][u] = Huu[i]);
        }
        var r = this.snapGridSize / 2;
        var g = this.snapGridSize;
        var w = this.snapStrength;
        var k = w / (r * r);
        var numNodes = this.numGridSnapNodes;
        for (var u = 0; u < numNodes; ++u) {
          for (i = 0; i < this.k; ++i) {
            var xiu = this.x[i][u];
            var m = xiu / g;
            var f = m % 1;
            var q = m - f;
            var a = Math.abs(f);
            var dx = a <= 0.5 ? xiu - q * g : xiu > 0 ? xiu - (q + 1) * g : xiu - (q - 1) * g;
            if (-r < dx && dx <= r) {
              if (this.scaleSnapByMaxH) {
                this.g[i][u] += maxH * k * dx;
                this.H[i][u][u] += maxH * k;
              } else {
                this.g[i][u] += k * dx;
                this.H[i][u][u] += k;
              }
            }
          }
        }
        if (!this.locks.isEmpty()) {
          this.locks.apply(function(u2, p) {
            for (i = 0; i < _this.k; ++i) {
              _this.H[i][u2][u2] += maxH;
              _this.g[i][u2] -= maxH * (p[i] - x[i][u2]);
            }
          });
        }
      };
      Descent2.dotProd = function(a, b) {
        var x = 0, i = a.length;
        while (i--)
          x += a[i] * b[i];
        return x;
      };
      Descent2.rightMultiply = function(m, v, r) {
        var i = m.length;
        while (i--)
          r[i] = Descent2.dotProd(m[i], v);
      };
      Descent2.prototype.computeStepSize = function(d) {
        var numerator = 0, denominator = 0;
        for (var i = 0; i < this.k; ++i) {
          numerator += Descent2.dotProd(this.g[i], d[i]);
          Descent2.rightMultiply(this.H[i], d[i], this.Hd[i]);
          denominator += Descent2.dotProd(d[i], this.Hd[i]);
        }
        if (denominator === 0 || !isFinite(denominator))
          return 0;
        return 1 * numerator / denominator;
      };
      Descent2.prototype.reduceStress = function() {
        this.computeDerivatives(this.x);
        var alpha = this.computeStepSize(this.g);
        for (var i = 0; i < this.k; ++i) {
          this.takeDescentStep(this.x[i], this.g[i], alpha);
        }
        return this.computeStress();
      };
      Descent2.copy = function(a, b) {
        var m = a.length, n = b[0].length;
        for (var i = 0; i < m; ++i) {
          for (var j = 0; j < n; ++j) {
            b[i][j] = a[i][j];
          }
        }
      };
      Descent2.prototype.stepAndProject = function(x0, r, d, stepSize) {
        Descent2.copy(x0, r);
        this.takeDescentStep(r[0], d[0], stepSize);
        if (this.project)
          this.project[0](x0[0], x0[1], r[0]);
        this.takeDescentStep(r[1], d[1], stepSize);
        if (this.project)
          this.project[1](r[0], x0[1], r[1]);
        for (var i = 2; i < this.k; i++)
          this.takeDescentStep(r[i], d[i], stepSize);
      };
      Descent2.mApply = function(m, n, f) {
        var i = m;
        while (i-- > 0) {
          var j = n;
          while (j-- > 0)
            f(i, j);
        }
      };
      Descent2.prototype.matrixApply = function(f) {
        Descent2.mApply(this.k, this.n, f);
      };
      Descent2.prototype.computeNextPosition = function(x0, r) {
        var _this = this;
        this.computeDerivatives(x0);
        var alpha = this.computeStepSize(this.g);
        this.stepAndProject(x0, r, this.g, alpha);
        if (this.project) {
          this.matrixApply(function(i, j) {
            return _this.e[i][j] = x0[i][j] - r[i][j];
          });
          var beta = this.computeStepSize(this.e);
          beta = Math.max(0.2, Math.min(beta, 1));
          this.stepAndProject(x0, r, this.e, beta);
        }
      };
      Descent2.prototype.run = function(iterations) {
        var stress = Number.MAX_VALUE, converged = false;
        while (!converged && iterations-- > 0) {
          var s = this.rungeKutta();
          converged = Math.abs(stress / s - 1) < this.threshold;
          stress = s;
        }
        return stress;
      };
      Descent2.prototype.rungeKutta = function() {
        var _this = this;
        this.computeNextPosition(this.x, this.a);
        Descent2.mid(this.x, this.a, this.ia);
        this.computeNextPosition(this.ia, this.b);
        Descent2.mid(this.x, this.b, this.ib);
        this.computeNextPosition(this.ib, this.c);
        this.computeNextPosition(this.c, this.d);
        var disp = 0;
        this.matrixApply(function(i, j) {
          var x = (_this.a[i][j] + 2 * _this.b[i][j] + 2 * _this.c[i][j] + _this.d[i][j]) / 6, d = _this.x[i][j] - x;
          disp += d * d;
          _this.x[i][j] = x;
        });
        return disp;
      };
      Descent2.mid = function(a, b, m) {
        Descent2.mApply(a.length, a[0].length, function(i, j) {
          return m[i][j] = a[i][j] + (b[i][j] - a[i][j]) / 2;
        });
      };
      Descent2.prototype.takeDescentStep = function(x, d, stepSize) {
        for (var i = 0; i < this.n; ++i) {
          x[i] = x[i] - stepSize * d[i];
        }
      };
      Descent2.prototype.computeStress = function() {
        var stress = 0;
        for (var u = 0, nMinus1 = this.n - 1; u < nMinus1; ++u) {
          for (var v = u + 1, n = this.n; v < n; ++v) {
            var l = 0;
            for (var i = 0; i < this.k; ++i) {
              var dx = this.x[i][u] - this.x[i][v];
              l += dx * dx;
            }
            l = Math.sqrt(l);
            var d = this.D[u][v];
            if (!isFinite(d))
              continue;
            var rl = d - l;
            var d2 = d * d;
            stress += rl * rl / d2;
          }
        }
        return stress;
      };
      Descent2.zeroDistance = 1e-10;
      return Descent2;
    }();
    exports.Descent = Descent;
    var PseudoRandom = function() {
      function PseudoRandom2(seed) {
        if (seed === void 0) {
          seed = 1;
        }
        this.seed = seed;
        this.a = 214013;
        this.c = 2531011;
        this.m = 2147483648;
        this.range = 32767;
      }
      PseudoRandom2.prototype.getNext = function() {
        this.seed = (this.seed * this.a + this.c) % this.m;
        return (this.seed >> 16) / this.range;
      };
      PseudoRandom2.prototype.getNextBetween = function(min, max) {
        return min + this.getNext() * (max - min);
      };
      return PseudoRandom2;
    }();
    exports.PseudoRandom = PseudoRandom;
  });

  // node_modules/webcola/dist/src/vpsc.js
  var require_vpsc = __commonJS((exports) => {
    "use strict";
    Object.defineProperty(exports, "__esModule", {value: true});
    var PositionStats = function() {
      function PositionStats2(scale) {
        this.scale = scale;
        this.AB = 0;
        this.AD = 0;
        this.A2 = 0;
      }
      PositionStats2.prototype.addVariable = function(v) {
        var ai = this.scale / v.scale;
        var bi = v.offset / v.scale;
        var wi = v.weight;
        this.AB += wi * ai * bi;
        this.AD += wi * ai * v.desiredPosition;
        this.A2 += wi * ai * ai;
      };
      PositionStats2.prototype.getPosn = function() {
        return (this.AD - this.AB) / this.A2;
      };
      return PositionStats2;
    }();
    exports.PositionStats = PositionStats;
    var Constraint = function() {
      function Constraint2(left, right, gap, equality) {
        if (equality === void 0) {
          equality = false;
        }
        this.left = left;
        this.right = right;
        this.gap = gap;
        this.equality = equality;
        this.active = false;
        this.unsatisfiable = false;
        this.left = left;
        this.right = right;
        this.gap = gap;
        this.equality = equality;
      }
      Constraint2.prototype.slack = function() {
        return this.unsatisfiable ? Number.MAX_VALUE : this.right.scale * this.right.position() - this.gap - this.left.scale * this.left.position();
      };
      return Constraint2;
    }();
    exports.Constraint = Constraint;
    var Variable = function() {
      function Variable2(desiredPosition, weight, scale) {
        if (weight === void 0) {
          weight = 1;
        }
        if (scale === void 0) {
          scale = 1;
        }
        this.desiredPosition = desiredPosition;
        this.weight = weight;
        this.scale = scale;
        this.offset = 0;
      }
      Variable2.prototype.dfdv = function() {
        return 2 * this.weight * (this.position() - this.desiredPosition);
      };
      Variable2.prototype.position = function() {
        return (this.block.ps.scale * this.block.posn + this.offset) / this.scale;
      };
      Variable2.prototype.visitNeighbours = function(prev, f) {
        var ff = function(c, next2) {
          return c.active && prev !== next2 && f(c, next2);
        };
        this.cOut.forEach(function(c) {
          return ff(c, c.right);
        });
        this.cIn.forEach(function(c) {
          return ff(c, c.left);
        });
      };
      return Variable2;
    }();
    exports.Variable = Variable;
    var Block = function() {
      function Block2(v) {
        this.vars = [];
        v.offset = 0;
        this.ps = new PositionStats(v.scale);
        this.addVariable(v);
      }
      Block2.prototype.addVariable = function(v) {
        v.block = this;
        this.vars.push(v);
        this.ps.addVariable(v);
        this.posn = this.ps.getPosn();
      };
      Block2.prototype.updateWeightedPosition = function() {
        this.ps.AB = this.ps.AD = this.ps.A2 = 0;
        for (var i = 0, n = this.vars.length; i < n; ++i)
          this.ps.addVariable(this.vars[i]);
        this.posn = this.ps.getPosn();
      };
      Block2.prototype.compute_lm = function(v, u, postAction) {
        var _this = this;
        var dfdv = v.dfdv();
        v.visitNeighbours(u, function(c, next2) {
          var _dfdv = _this.compute_lm(next2, v, postAction);
          if (next2 === c.right) {
            dfdv += _dfdv * c.left.scale;
            c.lm = _dfdv;
          } else {
            dfdv += _dfdv * c.right.scale;
            c.lm = -_dfdv;
          }
          postAction(c);
        });
        return dfdv / v.scale;
      };
      Block2.prototype.populateSplitBlock = function(v, prev) {
        var _this = this;
        v.visitNeighbours(prev, function(c, next2) {
          next2.offset = v.offset + (next2 === c.right ? c.gap : -c.gap);
          _this.addVariable(next2);
          _this.populateSplitBlock(next2, v);
        });
      };
      Block2.prototype.traverse = function(visit, acc, v, prev) {
        var _this = this;
        if (v === void 0) {
          v = this.vars[0];
        }
        if (prev === void 0) {
          prev = null;
        }
        v.visitNeighbours(prev, function(c, next2) {
          acc.push(visit(c));
          _this.traverse(visit, acc, next2, v);
        });
      };
      Block2.prototype.findMinLM = function() {
        var m = null;
        this.compute_lm(this.vars[0], null, function(c) {
          if (!c.equality && (m === null || c.lm < m.lm))
            m = c;
        });
        return m;
      };
      Block2.prototype.findMinLMBetween = function(lv, rv) {
        this.compute_lm(lv, null, function() {
        });
        var m = null;
        this.findPath(lv, null, rv, function(c, next2) {
          if (!c.equality && c.right === next2 && (m === null || c.lm < m.lm))
            m = c;
        });
        return m;
      };
      Block2.prototype.findPath = function(v, prev, to, visit) {
        var _this = this;
        var endFound = false;
        v.visitNeighbours(prev, function(c, next2) {
          if (!endFound && (next2 === to || _this.findPath(next2, v, to, visit))) {
            endFound = true;
            visit(c, next2);
          }
        });
        return endFound;
      };
      Block2.prototype.isActiveDirectedPathBetween = function(u, v) {
        if (u === v)
          return true;
        var i = u.cOut.length;
        while (i--) {
          var c = u.cOut[i];
          if (c.active && this.isActiveDirectedPathBetween(c.right, v))
            return true;
        }
        return false;
      };
      Block2.split = function(c) {
        c.active = false;
        return [Block2.createSplitBlock(c.left), Block2.createSplitBlock(c.right)];
      };
      Block2.createSplitBlock = function(startVar) {
        var b = new Block2(startVar);
        b.populateSplitBlock(startVar, null);
        return b;
      };
      Block2.prototype.splitBetween = function(vl, vr) {
        var c = this.findMinLMBetween(vl, vr);
        if (c !== null) {
          var bs = Block2.split(c);
          return {constraint: c, lb: bs[0], rb: bs[1]};
        }
        return null;
      };
      Block2.prototype.mergeAcross = function(b, c, dist) {
        c.active = true;
        for (var i = 0, n = b.vars.length; i < n; ++i) {
          var v = b.vars[i];
          v.offset += dist;
          this.addVariable(v);
        }
        this.posn = this.ps.getPosn();
      };
      Block2.prototype.cost = function() {
        var sum = 0, i = this.vars.length;
        while (i--) {
          var v = this.vars[i], d = v.position() - v.desiredPosition;
          sum += d * d * v.weight;
        }
        return sum;
      };
      return Block2;
    }();
    exports.Block = Block;
    var Blocks = function() {
      function Blocks2(vs) {
        this.vs = vs;
        var n = vs.length;
        this.list = new Array(n);
        while (n--) {
          var b = new Block(vs[n]);
          this.list[n] = b;
          b.blockInd = n;
        }
      }
      Blocks2.prototype.cost = function() {
        var sum = 0, i = this.list.length;
        while (i--)
          sum += this.list[i].cost();
        return sum;
      };
      Blocks2.prototype.insert = function(b) {
        b.blockInd = this.list.length;
        this.list.push(b);
      };
      Blocks2.prototype.remove = function(b) {
        var last = this.list.length - 1;
        var swapBlock = this.list[last];
        this.list.length = last;
        if (b !== swapBlock) {
          this.list[b.blockInd] = swapBlock;
          swapBlock.blockInd = b.blockInd;
        }
      };
      Blocks2.prototype.merge = function(c) {
        var l = c.left.block, r = c.right.block;
        var dist = c.right.offset - c.left.offset - c.gap;
        if (l.vars.length < r.vars.length) {
          r.mergeAcross(l, c, dist);
          this.remove(l);
        } else {
          l.mergeAcross(r, c, -dist);
          this.remove(r);
        }
      };
      Blocks2.prototype.forEach = function(f) {
        this.list.forEach(f);
      };
      Blocks2.prototype.updateBlockPositions = function() {
        this.list.forEach(function(b) {
          return b.updateWeightedPosition();
        });
      };
      Blocks2.prototype.split = function(inactive) {
        var _this = this;
        this.updateBlockPositions();
        this.list.forEach(function(b) {
          var v = b.findMinLM();
          if (v !== null && v.lm < Solver.LAGRANGIAN_TOLERANCE) {
            b = v.left.block;
            Block.split(v).forEach(function(nb) {
              return _this.insert(nb);
            });
            _this.remove(b);
            inactive.push(v);
          }
        });
      };
      return Blocks2;
    }();
    exports.Blocks = Blocks;
    var Solver = function() {
      function Solver2(vs, cs) {
        this.vs = vs;
        this.cs = cs;
        this.vs = vs;
        vs.forEach(function(v) {
          v.cIn = [], v.cOut = [];
        });
        this.cs = cs;
        cs.forEach(function(c) {
          c.left.cOut.push(c);
          c.right.cIn.push(c);
        });
        this.inactive = cs.map(function(c) {
          c.active = false;
          return c;
        });
        this.bs = null;
      }
      Solver2.prototype.cost = function() {
        return this.bs.cost();
      };
      Solver2.prototype.setStartingPositions = function(ps) {
        this.inactive = this.cs.map(function(c) {
          c.active = false;
          return c;
        });
        this.bs = new Blocks(this.vs);
        this.bs.forEach(function(b, i) {
          return b.posn = ps[i];
        });
      };
      Solver2.prototype.setDesiredPositions = function(ps) {
        this.vs.forEach(function(v, i) {
          return v.desiredPosition = ps[i];
        });
      };
      Solver2.prototype.mostViolated = function() {
        var minSlack = Number.MAX_VALUE, v = null, l = this.inactive, n = l.length, deletePoint = n;
        for (var i = 0; i < n; ++i) {
          var c = l[i];
          if (c.unsatisfiable)
            continue;
          var slack = c.slack();
          if (c.equality || slack < minSlack) {
            minSlack = slack;
            v = c;
            deletePoint = i;
            if (c.equality)
              break;
          }
        }
        if (deletePoint !== n && (minSlack < Solver2.ZERO_UPPERBOUND && !v.active || v.equality)) {
          l[deletePoint] = l[n - 1];
          l.length = n - 1;
        }
        return v;
      };
      Solver2.prototype.satisfy = function() {
        if (this.bs == null) {
          this.bs = new Blocks(this.vs);
        }
        this.bs.split(this.inactive);
        var v = null;
        while ((v = this.mostViolated()) && (v.equality || v.slack() < Solver2.ZERO_UPPERBOUND && !v.active)) {
          var lb = v.left.block, rb = v.right.block;
          if (lb !== rb) {
            this.bs.merge(v);
          } else {
            if (lb.isActiveDirectedPathBetween(v.right, v.left)) {
              v.unsatisfiable = true;
              continue;
            }
            var split = lb.splitBetween(v.left, v.right);
            if (split !== null) {
              this.bs.insert(split.lb);
              this.bs.insert(split.rb);
              this.bs.remove(lb);
              this.inactive.push(split.constraint);
            } else {
              v.unsatisfiable = true;
              continue;
            }
            if (v.slack() >= 0) {
              this.inactive.push(v);
            } else {
              this.bs.merge(v);
            }
          }
        }
      };
      Solver2.prototype.solve = function() {
        this.satisfy();
        var lastcost = Number.MAX_VALUE, cost = this.bs.cost();
        while (Math.abs(lastcost - cost) > 1e-4) {
          this.satisfy();
          lastcost = cost;
          cost = this.bs.cost();
        }
        return cost;
      };
      Solver2.LAGRANGIAN_TOLERANCE = -1e-4;
      Solver2.ZERO_UPPERBOUND = -1e-10;
      return Solver2;
    }();
    exports.Solver = Solver;
    function removeOverlapInOneDimension(spans, lowerBound, upperBound) {
      var vs = spans.map(function(s) {
        return new Variable(s.desiredCenter);
      });
      var cs = [];
      var n = spans.length;
      for (var i = 0; i < n - 1; i++) {
        var left = spans[i], right = spans[i + 1];
        cs.push(new Constraint(vs[i], vs[i + 1], (left.size + right.size) / 2));
      }
      var leftMost = vs[0], rightMost = vs[n - 1], leftMostSize = spans[0].size / 2, rightMostSize = spans[n - 1].size / 2;
      var vLower = null, vUpper = null;
      if (lowerBound) {
        vLower = new Variable(lowerBound, leftMost.weight * 1e3);
        vs.push(vLower);
        cs.push(new Constraint(vLower, leftMost, leftMostSize));
      }
      if (upperBound) {
        vUpper = new Variable(upperBound, rightMost.weight * 1e3);
        vs.push(vUpper);
        cs.push(new Constraint(rightMost, vUpper, rightMostSize));
      }
      var solver = new Solver(vs, cs);
      solver.solve();
      return {
        newCenters: vs.slice(0, spans.length).map(function(v) {
          return v.position();
        }),
        lowerBound: vLower ? vLower.position() : leftMost.position() - leftMostSize,
        upperBound: vUpper ? vUpper.position() : rightMost.position() + rightMostSize
      };
    }
    exports.removeOverlapInOneDimension = removeOverlapInOneDimension;
  });

  // node_modules/webcola/dist/src/rbtree.js
  var require_rbtree = __commonJS((exports) => {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {value: true});
    var TreeBase = function() {
      function TreeBase2() {
        this.findIter = function(data) {
          var res = this._root;
          var iter = this.iterator();
          while (res !== null) {
            var c = this._comparator(data, res.data);
            if (c === 0) {
              iter._cursor = res;
              return iter;
            } else {
              iter._ancestors.push(res);
              res = res.get_child(c > 0);
            }
          }
          return null;
        };
      }
      TreeBase2.prototype.clear = function() {
        this._root = null;
        this.size = 0;
      };
      ;
      TreeBase2.prototype.find = function(data) {
        var res = this._root;
        while (res !== null) {
          var c = this._comparator(data, res.data);
          if (c === 0) {
            return res.data;
          } else {
            res = res.get_child(c > 0);
          }
        }
        return null;
      };
      ;
      TreeBase2.prototype.lowerBound = function(data) {
        return this._bound(data, this._comparator);
      };
      ;
      TreeBase2.prototype.upperBound = function(data) {
        var cmp = this._comparator;
        function reverse_cmp(a, b) {
          return cmp(b, a);
        }
        return this._bound(data, reverse_cmp);
      };
      ;
      TreeBase2.prototype.min = function() {
        var res = this._root;
        if (res === null) {
          return null;
        }
        while (res.left !== null) {
          res = res.left;
        }
        return res.data;
      };
      ;
      TreeBase2.prototype.max = function() {
        var res = this._root;
        if (res === null) {
          return null;
        }
        while (res.right !== null) {
          res = res.right;
        }
        return res.data;
      };
      ;
      TreeBase2.prototype.iterator = function() {
        return new Iterator(this);
      };
      ;
      TreeBase2.prototype.each = function(cb) {
        var it = this.iterator(), data;
        while ((data = it.next()) !== null) {
          cb(data);
        }
      };
      ;
      TreeBase2.prototype.reach = function(cb) {
        var it = this.iterator(), data;
        while ((data = it.prev()) !== null) {
          cb(data);
        }
      };
      ;
      TreeBase2.prototype._bound = function(data, cmp) {
        var cur = this._root;
        var iter = this.iterator();
        while (cur !== null) {
          var c = this._comparator(data, cur.data);
          if (c === 0) {
            iter._cursor = cur;
            return iter;
          }
          iter._ancestors.push(cur);
          cur = cur.get_child(c > 0);
        }
        for (var i = iter._ancestors.length - 1; i >= 0; --i) {
          cur = iter._ancestors[i];
          if (cmp(data, cur.data) > 0) {
            iter._cursor = cur;
            iter._ancestors.length = i;
            return iter;
          }
        }
        iter._ancestors.length = 0;
        return iter;
      };
      ;
      return TreeBase2;
    }();
    exports.TreeBase = TreeBase;
    var Iterator = function() {
      function Iterator2(tree) {
        this._tree = tree;
        this._ancestors = [];
        this._cursor = null;
      }
      Iterator2.prototype.data = function() {
        return this._cursor !== null ? this._cursor.data : null;
      };
      ;
      Iterator2.prototype.next = function() {
        if (this._cursor === null) {
          var root = this._tree._root;
          if (root !== null) {
            this._minNode(root);
          }
        } else {
          if (this._cursor.right === null) {
            var save;
            do {
              save = this._cursor;
              if (this._ancestors.length) {
                this._cursor = this._ancestors.pop();
              } else {
                this._cursor = null;
                break;
              }
            } while (this._cursor.right === save);
          } else {
            this._ancestors.push(this._cursor);
            this._minNode(this._cursor.right);
          }
        }
        return this._cursor !== null ? this._cursor.data : null;
      };
      ;
      Iterator2.prototype.prev = function() {
        if (this._cursor === null) {
          var root = this._tree._root;
          if (root !== null) {
            this._maxNode(root);
          }
        } else {
          if (this._cursor.left === null) {
            var save;
            do {
              save = this._cursor;
              if (this._ancestors.length) {
                this._cursor = this._ancestors.pop();
              } else {
                this._cursor = null;
                break;
              }
            } while (this._cursor.left === save);
          } else {
            this._ancestors.push(this._cursor);
            this._maxNode(this._cursor.left);
          }
        }
        return this._cursor !== null ? this._cursor.data : null;
      };
      ;
      Iterator2.prototype._minNode = function(start) {
        while (start.left !== null) {
          this._ancestors.push(start);
          start = start.left;
        }
        this._cursor = start;
      };
      ;
      Iterator2.prototype._maxNode = function(start) {
        while (start.right !== null) {
          this._ancestors.push(start);
          start = start.right;
        }
        this._cursor = start;
      };
      ;
      return Iterator2;
    }();
    exports.Iterator = Iterator;
    var Node = function() {
      function Node2(data) {
        this.data = data;
        this.left = null;
        this.right = null;
        this.red = true;
      }
      Node2.prototype.get_child = function(dir) {
        return dir ? this.right : this.left;
      };
      ;
      Node2.prototype.set_child = function(dir, val) {
        if (dir) {
          this.right = val;
        } else {
          this.left = val;
        }
      };
      ;
      return Node2;
    }();
    var RBTree = function(_super) {
      __extends(RBTree2, _super);
      function RBTree2(comparator) {
        var _this = _super.call(this) || this;
        _this._root = null;
        _this._comparator = comparator;
        _this.size = 0;
        return _this;
      }
      RBTree2.prototype.insert = function(data) {
        var ret = false;
        if (this._root === null) {
          this._root = new Node(data);
          ret = true;
          this.size++;
        } else {
          var head = new Node(void 0);
          var dir = false;
          var last = false;
          var gp = null;
          var ggp = head;
          var p = null;
          var node = this._root;
          ggp.right = this._root;
          while (true) {
            if (node === null) {
              node = new Node(data);
              p.set_child(dir, node);
              ret = true;
              this.size++;
            } else if (RBTree2.is_red(node.left) && RBTree2.is_red(node.right)) {
              node.red = true;
              node.left.red = false;
              node.right.red = false;
            }
            if (RBTree2.is_red(node) && RBTree2.is_red(p)) {
              var dir2 = ggp.right === gp;
              if (node === p.get_child(last)) {
                ggp.set_child(dir2, RBTree2.single_rotate(gp, !last));
              } else {
                ggp.set_child(dir2, RBTree2.double_rotate(gp, !last));
              }
            }
            var cmp = this._comparator(node.data, data);
            if (cmp === 0) {
              break;
            }
            last = dir;
            dir = cmp < 0;
            if (gp !== null) {
              ggp = gp;
            }
            gp = p;
            p = node;
            node = node.get_child(dir);
          }
          this._root = head.right;
        }
        this._root.red = false;
        return ret;
      };
      ;
      RBTree2.prototype.remove = function(data) {
        if (this._root === null) {
          return false;
        }
        var head = new Node(void 0);
        var node = head;
        node.right = this._root;
        var p = null;
        var gp = null;
        var found = null;
        var dir = true;
        while (node.get_child(dir) !== null) {
          var last = dir;
          gp = p;
          p = node;
          node = node.get_child(dir);
          var cmp = this._comparator(data, node.data);
          dir = cmp > 0;
          if (cmp === 0) {
            found = node;
          }
          if (!RBTree2.is_red(node) && !RBTree2.is_red(node.get_child(dir))) {
            if (RBTree2.is_red(node.get_child(!dir))) {
              var sr = RBTree2.single_rotate(node, dir);
              p.set_child(last, sr);
              p = sr;
            } else if (!RBTree2.is_red(node.get_child(!dir))) {
              var sibling = p.get_child(!last);
              if (sibling !== null) {
                if (!RBTree2.is_red(sibling.get_child(!last)) && !RBTree2.is_red(sibling.get_child(last))) {
                  p.red = false;
                  sibling.red = true;
                  node.red = true;
                } else {
                  var dir2 = gp.right === p;
                  if (RBTree2.is_red(sibling.get_child(last))) {
                    gp.set_child(dir2, RBTree2.double_rotate(p, last));
                  } else if (RBTree2.is_red(sibling.get_child(!last))) {
                    gp.set_child(dir2, RBTree2.single_rotate(p, last));
                  }
                  var gpc = gp.get_child(dir2);
                  gpc.red = true;
                  node.red = true;
                  gpc.left.red = false;
                  gpc.right.red = false;
                }
              }
            }
          }
        }
        if (found !== null) {
          found.data = node.data;
          p.set_child(p.right === node, node.get_child(node.left === null));
          this.size--;
        }
        this._root = head.right;
        if (this._root !== null) {
          this._root.red = false;
        }
        return found !== null;
      };
      ;
      RBTree2.is_red = function(node) {
        return node !== null && node.red;
      };
      RBTree2.single_rotate = function(root, dir) {
        var save = root.get_child(!dir);
        root.set_child(!dir, save.get_child(dir));
        save.set_child(dir, root);
        root.red = true;
        save.red = false;
        return save;
      };
      RBTree2.double_rotate = function(root, dir) {
        root.set_child(!dir, RBTree2.single_rotate(root.get_child(!dir), !dir));
        return RBTree2.single_rotate(root, dir);
      };
      return RBTree2;
    }(TreeBase);
    exports.RBTree = RBTree;
  });

  // node_modules/webcola/dist/src/rectangle.js
  var require_rectangle = __commonJS((exports) => {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {value: true});
    var vpsc_1 = require_vpsc();
    var rbtree_1 = require_rbtree();
    function computeGroupBounds(g) {
      g.bounds = typeof g.leaves !== "undefined" ? g.leaves.reduce(function(r, c) {
        return c.bounds.union(r);
      }, Rectangle.empty()) : Rectangle.empty();
      if (typeof g.groups !== "undefined")
        g.bounds = g.groups.reduce(function(r, c) {
          return computeGroupBounds(c).union(r);
        }, g.bounds);
      g.bounds = g.bounds.inflate(g.padding);
      return g.bounds;
    }
    exports.computeGroupBounds = computeGroupBounds;
    var Rectangle = function() {
      function Rectangle2(x, X, y, Y) {
        this.x = x;
        this.X = X;
        this.y = y;
        this.Y = Y;
      }
      Rectangle2.empty = function() {
        return new Rectangle2(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);
      };
      Rectangle2.prototype.cx = function() {
        return (this.x + this.X) / 2;
      };
      Rectangle2.prototype.cy = function() {
        return (this.y + this.Y) / 2;
      };
      Rectangle2.prototype.overlapX = function(r) {
        var ux = this.cx(), vx = r.cx();
        if (ux <= vx && r.x < this.X)
          return this.X - r.x;
        if (vx <= ux && this.x < r.X)
          return r.X - this.x;
        return 0;
      };
      Rectangle2.prototype.overlapY = function(r) {
        var uy = this.cy(), vy = r.cy();
        if (uy <= vy && r.y < this.Y)
          return this.Y - r.y;
        if (vy <= uy && this.y < r.Y)
          return r.Y - this.y;
        return 0;
      };
      Rectangle2.prototype.setXCentre = function(cx) {
        var dx = cx - this.cx();
        this.x += dx;
        this.X += dx;
      };
      Rectangle2.prototype.setYCentre = function(cy) {
        var dy = cy - this.cy();
        this.y += dy;
        this.Y += dy;
      };
      Rectangle2.prototype.width = function() {
        return this.X - this.x;
      };
      Rectangle2.prototype.height = function() {
        return this.Y - this.y;
      };
      Rectangle2.prototype.union = function(r) {
        return new Rectangle2(Math.min(this.x, r.x), Math.max(this.X, r.X), Math.min(this.y, r.y), Math.max(this.Y, r.Y));
      };
      Rectangle2.prototype.lineIntersections = function(x1, y1, x2, y2) {
        var sides = [
          [this.x, this.y, this.X, this.y],
          [this.X, this.y, this.X, this.Y],
          [this.X, this.Y, this.x, this.Y],
          [this.x, this.Y, this.x, this.y]
        ];
        var intersections = [];
        for (var i = 0; i < 4; ++i) {
          var r = Rectangle2.lineIntersection(x1, y1, x2, y2, sides[i][0], sides[i][1], sides[i][2], sides[i][3]);
          if (r !== null)
            intersections.push({x: r.x, y: r.y});
        }
        return intersections;
      };
      Rectangle2.prototype.rayIntersection = function(x2, y2) {
        var ints = this.lineIntersections(this.cx(), this.cy(), x2, y2);
        return ints.length > 0 ? ints[0] : null;
      };
      Rectangle2.prototype.vertices = function() {
        return [
          {x: this.x, y: this.y},
          {x: this.X, y: this.y},
          {x: this.X, y: this.Y},
          {x: this.x, y: this.Y}
        ];
      };
      Rectangle2.lineIntersection = function(x1, y1, x2, y2, x3, y3, x4, y4) {
        var dx12 = x2 - x1, dx34 = x4 - x3, dy12 = y2 - y1, dy34 = y4 - y3, denominator = dy34 * dx12 - dx34 * dy12;
        if (denominator == 0)
          return null;
        var dx31 = x1 - x3, dy31 = y1 - y3, numa = dx34 * dy31 - dy34 * dx31, a = numa / denominator, numb = dx12 * dy31 - dy12 * dx31, b = numb / denominator;
        if (a >= 0 && a <= 1 && b >= 0 && b <= 1) {
          return {
            x: x1 + a * dx12,
            y: y1 + a * dy12
          };
        }
        return null;
      };
      Rectangle2.prototype.inflate = function(pad) {
        return new Rectangle2(this.x - pad, this.X + pad, this.y - pad, this.Y + pad);
      };
      return Rectangle2;
    }();
    exports.Rectangle = Rectangle;
    function makeEdgeBetween(source, target, ah) {
      var si = source.rayIntersection(target.cx(), target.cy()) || {x: source.cx(), y: source.cy()}, ti = target.rayIntersection(source.cx(), source.cy()) || {x: target.cx(), y: target.cy()}, dx = ti.x - si.x, dy = ti.y - si.y, l = Math.sqrt(dx * dx + dy * dy), al = l - ah;
      return {
        sourceIntersection: si,
        targetIntersection: ti,
        arrowStart: {x: si.x + al * dx / l, y: si.y + al * dy / l}
      };
    }
    exports.makeEdgeBetween = makeEdgeBetween;
    function makeEdgeTo(s, target, ah) {
      var ti = target.rayIntersection(s.x, s.y);
      if (!ti)
        ti = {x: target.cx(), y: target.cy()};
      var dx = ti.x - s.x, dy = ti.y - s.y, l = Math.sqrt(dx * dx + dy * dy);
      return {x: ti.x - ah * dx / l, y: ti.y - ah * dy / l};
    }
    exports.makeEdgeTo = makeEdgeTo;
    var Node = function() {
      function Node2(v, r, pos) {
        this.v = v;
        this.r = r;
        this.pos = pos;
        this.prev = makeRBTree();
        this.next = makeRBTree();
      }
      return Node2;
    }();
    var Event = function() {
      function Event2(isOpen, v, pos) {
        this.isOpen = isOpen;
        this.v = v;
        this.pos = pos;
      }
      return Event2;
    }();
    function compareEvents(a, b) {
      if (a.pos > b.pos) {
        return 1;
      }
      if (a.pos < b.pos) {
        return -1;
      }
      if (a.isOpen) {
        return -1;
      }
      if (b.isOpen) {
        return 1;
      }
      return 0;
    }
    function makeRBTree() {
      return new rbtree_1.RBTree(function(a, b) {
        return a.pos - b.pos;
      });
    }
    var xRect = {
      getCentre: function(r) {
        return r.cx();
      },
      getOpen: function(r) {
        return r.y;
      },
      getClose: function(r) {
        return r.Y;
      },
      getSize: function(r) {
        return r.width();
      },
      makeRect: function(open, close, center, size) {
        return new Rectangle(center - size / 2, center + size / 2, open, close);
      },
      findNeighbours: findXNeighbours
    };
    var yRect = {
      getCentre: function(r) {
        return r.cy();
      },
      getOpen: function(r) {
        return r.x;
      },
      getClose: function(r) {
        return r.X;
      },
      getSize: function(r) {
        return r.height();
      },
      makeRect: function(open, close, center, size) {
        return new Rectangle(open, close, center - size / 2, center + size / 2);
      },
      findNeighbours: findYNeighbours
    };
    function generateGroupConstraints(root, f, minSep, isContained) {
      if (isContained === void 0) {
        isContained = false;
      }
      var padding = root.padding, gn = typeof root.groups !== "undefined" ? root.groups.length : 0, ln = typeof root.leaves !== "undefined" ? root.leaves.length : 0, childConstraints = !gn ? [] : root.groups.reduce(function(ccs, g) {
        return ccs.concat(generateGroupConstraints(g, f, minSep, true));
      }, []), n = (isContained ? 2 : 0) + ln + gn, vs = new Array(n), rs = new Array(n), i = 0, add = function(r, v) {
        rs[i] = r;
        vs[i++] = v;
      };
      if (isContained) {
        var b = root.bounds, c = f.getCentre(b), s = f.getSize(b) / 2, open = f.getOpen(b), close = f.getClose(b), min = c - s + padding / 2, max = c + s - padding / 2;
        root.minVar.desiredPosition = min;
        add(f.makeRect(open, close, min, padding), root.minVar);
        root.maxVar.desiredPosition = max;
        add(f.makeRect(open, close, max, padding), root.maxVar);
      }
      if (ln)
        root.leaves.forEach(function(l) {
          return add(l.bounds, l.variable);
        });
      if (gn)
        root.groups.forEach(function(g) {
          var b2 = g.bounds;
          add(f.makeRect(f.getOpen(b2), f.getClose(b2), f.getCentre(b2), f.getSize(b2)), g.minVar);
        });
      var cs = generateConstraints(rs, vs, f, minSep);
      if (gn) {
        vs.forEach(function(v) {
          v.cOut = [], v.cIn = [];
        });
        cs.forEach(function(c2) {
          c2.left.cOut.push(c2), c2.right.cIn.push(c2);
        });
        root.groups.forEach(function(g) {
          var gapAdjustment = (g.padding - f.getSize(g.bounds)) / 2;
          g.minVar.cIn.forEach(function(c2) {
            return c2.gap += gapAdjustment;
          });
          g.minVar.cOut.forEach(function(c2) {
            c2.left = g.maxVar;
            c2.gap += gapAdjustment;
          });
        });
      }
      return childConstraints.concat(cs);
    }
    function generateConstraints(rs, vars, rect, minSep) {
      var i, n = rs.length;
      var N = 2 * n;
      console.assert(vars.length >= n);
      var events = new Array(N);
      for (i = 0; i < n; ++i) {
        var r = rs[i];
        var v = new Node(vars[i], r, rect.getCentre(r));
        events[i] = new Event(true, v, rect.getOpen(r));
        events[i + n] = new Event(false, v, rect.getClose(r));
      }
      events.sort(compareEvents);
      var cs = new Array();
      var scanline = makeRBTree();
      for (i = 0; i < N; ++i) {
        var e = events[i];
        var v = e.v;
        if (e.isOpen) {
          scanline.insert(v);
          rect.findNeighbours(v, scanline);
        } else {
          scanline.remove(v);
          var makeConstraint = function(l, r2) {
            var sep = (rect.getSize(l.r) + rect.getSize(r2.r)) / 2 + minSep;
            cs.push(new vpsc_1.Constraint(l.v, r2.v, sep));
          };
          var visitNeighbours = function(forward, reverse, mkcon) {
            var u, it = v[forward].iterator();
            while ((u = it[forward]()) !== null) {
              mkcon(u, v);
              u[reverse].remove(v);
            }
          };
          visitNeighbours("prev", "next", function(u, v2) {
            return makeConstraint(u, v2);
          });
          visitNeighbours("next", "prev", function(u, v2) {
            return makeConstraint(v2, u);
          });
        }
      }
      console.assert(scanline.size === 0);
      return cs;
    }
    function findXNeighbours(v, scanline) {
      var f = function(forward, reverse) {
        var it = scanline.findIter(v);
        var u;
        while ((u = it[forward]()) !== null) {
          var uovervX = u.r.overlapX(v.r);
          if (uovervX <= 0 || uovervX <= u.r.overlapY(v.r)) {
            v[forward].insert(u);
            u[reverse].insert(v);
          }
          if (uovervX <= 0) {
            break;
          }
        }
      };
      f("next", "prev");
      f("prev", "next");
    }
    function findYNeighbours(v, scanline) {
      var f = function(forward, reverse) {
        var u = scanline.findIter(v)[forward]();
        if (u !== null && u.r.overlapX(v.r) > 0) {
          v[forward].insert(u);
          u[reverse].insert(v);
        }
      };
      f("next", "prev");
      f("prev", "next");
    }
    function generateXConstraints(rs, vars) {
      return generateConstraints(rs, vars, xRect, 1e-6);
    }
    exports.generateXConstraints = generateXConstraints;
    function generateYConstraints(rs, vars) {
      return generateConstraints(rs, vars, yRect, 1e-6);
    }
    exports.generateYConstraints = generateYConstraints;
    function generateXGroupConstraints(root) {
      return generateGroupConstraints(root, xRect, 1e-6);
    }
    exports.generateXGroupConstraints = generateXGroupConstraints;
    function generateYGroupConstraints(root) {
      return generateGroupConstraints(root, yRect, 1e-6);
    }
    exports.generateYGroupConstraints = generateYGroupConstraints;
    function removeOverlaps(rs) {
      var vs = rs.map(function(r) {
        return new vpsc_1.Variable(r.cx());
      });
      var cs = generateXConstraints(rs, vs);
      var solver = new vpsc_1.Solver(vs, cs);
      solver.solve();
      vs.forEach(function(v, i) {
        return rs[i].setXCentre(v.position());
      });
      vs = rs.map(function(r) {
        return new vpsc_1.Variable(r.cy());
      });
      cs = generateYConstraints(rs, vs);
      solver = new vpsc_1.Solver(vs, cs);
      solver.solve();
      vs.forEach(function(v, i) {
        return rs[i].setYCentre(v.position());
      });
    }
    exports.removeOverlaps = removeOverlaps;
    var IndexedVariable = function(_super) {
      __extends(IndexedVariable2, _super);
      function IndexedVariable2(index, w) {
        var _this = _super.call(this, 0, w) || this;
        _this.index = index;
        return _this;
      }
      return IndexedVariable2;
    }(vpsc_1.Variable);
    exports.IndexedVariable = IndexedVariable;
    var Projection = function() {
      function Projection2(nodes, groups, rootGroup, constraints, avoidOverlaps) {
        var _this = this;
        if (rootGroup === void 0) {
          rootGroup = null;
        }
        if (constraints === void 0) {
          constraints = null;
        }
        if (avoidOverlaps === void 0) {
          avoidOverlaps = false;
        }
        this.nodes = nodes;
        this.groups = groups;
        this.rootGroup = rootGroup;
        this.avoidOverlaps = avoidOverlaps;
        this.variables = nodes.map(function(v, i2) {
          return v.variable = new IndexedVariable(i2, 1);
        });
        if (constraints)
          this.createConstraints(constraints);
        if (avoidOverlaps && rootGroup && typeof rootGroup.groups !== "undefined") {
          nodes.forEach(function(v) {
            if (!v.width || !v.height) {
              v.bounds = new Rectangle(v.x, v.x, v.y, v.y);
              return;
            }
            var w2 = v.width / 2, h2 = v.height / 2;
            v.bounds = new Rectangle(v.x - w2, v.x + w2, v.y - h2, v.y + h2);
          });
          computeGroupBounds(rootGroup);
          var i = nodes.length;
          groups.forEach(function(g) {
            _this.variables[i] = g.minVar = new IndexedVariable(i++, typeof g.stiffness !== "undefined" ? g.stiffness : 0.01);
            _this.variables[i] = g.maxVar = new IndexedVariable(i++, typeof g.stiffness !== "undefined" ? g.stiffness : 0.01);
          });
        }
      }
      Projection2.prototype.createSeparation = function(c) {
        return new vpsc_1.Constraint(this.nodes[c.left].variable, this.nodes[c.right].variable, c.gap, typeof c.equality !== "undefined" ? c.equality : false);
      };
      Projection2.prototype.makeFeasible = function(c) {
        var _this = this;
        if (!this.avoidOverlaps)
          return;
        var axis = "x", dim = "width";
        if (c.axis === "x")
          axis = "y", dim = "height";
        var vs = c.offsets.map(function(o2) {
          return _this.nodes[o2.node];
        }).sort(function(a, b) {
          return a[axis] - b[axis];
        });
        var p = null;
        vs.forEach(function(v) {
          if (p) {
            var nextPos = p[axis] + p[dim];
            if (nextPos > v[axis]) {
              v[axis] = nextPos;
            }
          }
          p = v;
        });
      };
      Projection2.prototype.createAlignment = function(c) {
        var _this = this;
        var u = this.nodes[c.offsets[0].node].variable;
        this.makeFeasible(c);
        var cs = c.axis === "x" ? this.xConstraints : this.yConstraints;
        c.offsets.slice(1).forEach(function(o2) {
          var v = _this.nodes[o2.node].variable;
          cs.push(new vpsc_1.Constraint(u, v, o2.offset, true));
        });
      };
      Projection2.prototype.createConstraints = function(constraints) {
        var _this = this;
        var isSep = function(c) {
          return typeof c.type === "undefined" || c.type === "separation";
        };
        this.xConstraints = constraints.filter(function(c) {
          return c.axis === "x" && isSep(c);
        }).map(function(c) {
          return _this.createSeparation(c);
        });
        this.yConstraints = constraints.filter(function(c) {
          return c.axis === "y" && isSep(c);
        }).map(function(c) {
          return _this.createSeparation(c);
        });
        constraints.filter(function(c) {
          return c.type === "alignment";
        }).forEach(function(c) {
          return _this.createAlignment(c);
        });
      };
      Projection2.prototype.setupVariablesAndBounds = function(x0, y0, desired, getDesired) {
        this.nodes.forEach(function(v, i) {
          if (v.fixed) {
            v.variable.weight = v.fixedWeight ? v.fixedWeight : 1e3;
            desired[i] = getDesired(v);
          } else {
            v.variable.weight = 1;
          }
          var w = (v.width || 0) / 2, h = (v.height || 0) / 2;
          var ix = x0[i], iy = y0[i];
          v.bounds = new Rectangle(ix - w, ix + w, iy - h, iy + h);
        });
      };
      Projection2.prototype.xProject = function(x0, y0, x) {
        if (!this.rootGroup && !(this.avoidOverlaps || this.xConstraints))
          return;
        this.project(x0, y0, x0, x, function(v) {
          return v.px;
        }, this.xConstraints, generateXGroupConstraints, function(v) {
          return v.bounds.setXCentre(x[v.variable.index] = v.variable.position());
        }, function(g) {
          var xmin = x[g.minVar.index] = g.minVar.position();
          var xmax = x[g.maxVar.index] = g.maxVar.position();
          var p2 = g.padding / 2;
          g.bounds.x = xmin - p2;
          g.bounds.X = xmax + p2;
        });
      };
      Projection2.prototype.yProject = function(x0, y0, y) {
        if (!this.rootGroup && !this.yConstraints)
          return;
        this.project(x0, y0, y0, y, function(v) {
          return v.py;
        }, this.yConstraints, generateYGroupConstraints, function(v) {
          return v.bounds.setYCentre(y[v.variable.index] = v.variable.position());
        }, function(g) {
          var ymin = y[g.minVar.index] = g.minVar.position();
          var ymax = y[g.maxVar.index] = g.maxVar.position();
          var p2 = g.padding / 2;
          g.bounds.y = ymin - p2;
          ;
          g.bounds.Y = ymax + p2;
        });
      };
      Projection2.prototype.projectFunctions = function() {
        var _this = this;
        return [
          function(x0, y0, x) {
            return _this.xProject(x0, y0, x);
          },
          function(x0, y0, y) {
            return _this.yProject(x0, y0, y);
          }
        ];
      };
      Projection2.prototype.project = function(x0, y0, start, desired, getDesired, cs, generateConstraints2, updateNodeBounds, updateGroupBounds) {
        this.setupVariablesAndBounds(x0, y0, desired, getDesired);
        if (this.rootGroup && this.avoidOverlaps) {
          computeGroupBounds(this.rootGroup);
          cs = cs.concat(generateConstraints2(this.rootGroup));
        }
        this.solve(this.variables, cs, start, desired);
        this.nodes.forEach(updateNodeBounds);
        if (this.rootGroup && this.avoidOverlaps) {
          this.groups.forEach(updateGroupBounds);
          computeGroupBounds(this.rootGroup);
        }
      };
      Projection2.prototype.solve = function(vs, cs, starting, desired) {
        var solver = new vpsc_1.Solver(vs, cs);
        solver.setStartingPositions(starting);
        solver.setDesiredPositions(desired);
        solver.solve();
      };
      return Projection2;
    }();
    exports.Projection = Projection;
  });

  // node_modules/webcola/dist/src/pqueue.js
  var require_pqueue = __commonJS((exports) => {
    "use strict";
    Object.defineProperty(exports, "__esModule", {value: true});
    var PairingHeap = function() {
      function PairingHeap2(elem) {
        this.elem = elem;
        this.subheaps = [];
      }
      PairingHeap2.prototype.toString = function(selector) {
        var str = "", needComma = false;
        for (var i = 0; i < this.subheaps.length; ++i) {
          var subheap = this.subheaps[i];
          if (!subheap.elem) {
            needComma = false;
            continue;
          }
          if (needComma) {
            str = str + ",";
          }
          str = str + subheap.toString(selector);
          needComma = true;
        }
        if (str !== "") {
          str = "(" + str + ")";
        }
        return (this.elem ? selector(this.elem) : "") + str;
      };
      PairingHeap2.prototype.forEach = function(f) {
        if (!this.empty()) {
          f(this.elem, this);
          this.subheaps.forEach(function(s) {
            return s.forEach(f);
          });
        }
      };
      PairingHeap2.prototype.count = function() {
        return this.empty() ? 0 : 1 + this.subheaps.reduce(function(n, h) {
          return n + h.count();
        }, 0);
      };
      PairingHeap2.prototype.min = function() {
        return this.elem;
      };
      PairingHeap2.prototype.empty = function() {
        return this.elem == null;
      };
      PairingHeap2.prototype.contains = function(h) {
        if (this === h)
          return true;
        for (var i = 0; i < this.subheaps.length; i++) {
          if (this.subheaps[i].contains(h))
            return true;
        }
        return false;
      };
      PairingHeap2.prototype.isHeap = function(lessThan) {
        var _this = this;
        return this.subheaps.every(function(h) {
          return lessThan(_this.elem, h.elem) && h.isHeap(lessThan);
        });
      };
      PairingHeap2.prototype.insert = function(obj, lessThan) {
        return this.merge(new PairingHeap2(obj), lessThan);
      };
      PairingHeap2.prototype.merge = function(heap2, lessThan) {
        if (this.empty())
          return heap2;
        else if (heap2.empty())
          return this;
        else if (lessThan(this.elem, heap2.elem)) {
          this.subheaps.push(heap2);
          return this;
        } else {
          heap2.subheaps.push(this);
          return heap2;
        }
      };
      PairingHeap2.prototype.removeMin = function(lessThan) {
        if (this.empty())
          return null;
        else
          return this.mergePairs(lessThan);
      };
      PairingHeap2.prototype.mergePairs = function(lessThan) {
        if (this.subheaps.length == 0)
          return new PairingHeap2(null);
        else if (this.subheaps.length == 1) {
          return this.subheaps[0];
        } else {
          var firstPair = this.subheaps.pop().merge(this.subheaps.pop(), lessThan);
          var remaining = this.mergePairs(lessThan);
          return firstPair.merge(remaining, lessThan);
        }
      };
      PairingHeap2.prototype.decreaseKey = function(subheap, newValue, setHeapNode, lessThan) {
        var newHeap = subheap.removeMin(lessThan);
        subheap.elem = newHeap.elem;
        subheap.subheaps = newHeap.subheaps;
        if (setHeapNode !== null && newHeap.elem !== null) {
          setHeapNode(subheap.elem, subheap);
        }
        var pairingNode = new PairingHeap2(newValue);
        if (setHeapNode !== null) {
          setHeapNode(newValue, pairingNode);
        }
        return this.merge(pairingNode, lessThan);
      };
      return PairingHeap2;
    }();
    exports.PairingHeap = PairingHeap;
    var PriorityQueue = function() {
      function PriorityQueue2(lessThan) {
        this.lessThan = lessThan;
      }
      PriorityQueue2.prototype.top = function() {
        if (this.empty()) {
          return null;
        }
        return this.root.elem;
      };
      PriorityQueue2.prototype.push = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var pairingNode;
        for (var i = 0, arg; arg = args[i]; ++i) {
          pairingNode = new PairingHeap(arg);
          this.root = this.empty() ? pairingNode : this.root.merge(pairingNode, this.lessThan);
        }
        return pairingNode;
      };
      PriorityQueue2.prototype.empty = function() {
        return !this.root || !this.root.elem;
      };
      PriorityQueue2.prototype.isHeap = function() {
        return this.root.isHeap(this.lessThan);
      };
      PriorityQueue2.prototype.forEach = function(f) {
        this.root.forEach(f);
      };
      PriorityQueue2.prototype.pop = function() {
        if (this.empty()) {
          return null;
        }
        var obj = this.root.min();
        this.root = this.root.removeMin(this.lessThan);
        return obj;
      };
      PriorityQueue2.prototype.reduceKey = function(heapNode, newKey, setHeapNode) {
        if (setHeapNode === void 0) {
          setHeapNode = null;
        }
        this.root = this.root.decreaseKey(heapNode, newKey, setHeapNode, this.lessThan);
      };
      PriorityQueue2.prototype.toString = function(selector) {
        return this.root.toString(selector);
      };
      PriorityQueue2.prototype.count = function() {
        return this.root.count();
      };
      return PriorityQueue2;
    }();
    exports.PriorityQueue = PriorityQueue;
  });

  // node_modules/webcola/dist/src/shortestpaths.js
  var require_shortestpaths = __commonJS((exports) => {
    "use strict";
    Object.defineProperty(exports, "__esModule", {value: true});
    var pqueue_1 = require_pqueue();
    var Neighbour = function() {
      function Neighbour2(id, distance) {
        this.id = id;
        this.distance = distance;
      }
      return Neighbour2;
    }();
    var Node = function() {
      function Node2(id) {
        this.id = id;
        this.neighbours = [];
      }
      return Node2;
    }();
    var QueueEntry = function() {
      function QueueEntry2(node, prev, d) {
        this.node = node;
        this.prev = prev;
        this.d = d;
      }
      return QueueEntry2;
    }();
    var Calculator = function() {
      function Calculator2(n, es, getSourceIndex, getTargetIndex, getLength) {
        this.n = n;
        this.es = es;
        this.neighbours = new Array(this.n);
        var i = this.n;
        while (i--)
          this.neighbours[i] = new Node(i);
        i = this.es.length;
        while (i--) {
          var e = this.es[i];
          var u = getSourceIndex(e), v = getTargetIndex(e);
          var d = getLength(e);
          this.neighbours[u].neighbours.push(new Neighbour(v, d));
          this.neighbours[v].neighbours.push(new Neighbour(u, d));
        }
      }
      Calculator2.prototype.DistanceMatrix = function() {
        var D = new Array(this.n);
        for (var i = 0; i < this.n; ++i) {
          D[i] = this.dijkstraNeighbours(i);
        }
        return D;
      };
      Calculator2.prototype.DistancesFromNode = function(start) {
        return this.dijkstraNeighbours(start);
      };
      Calculator2.prototype.PathFromNodeToNode = function(start, end) {
        return this.dijkstraNeighbours(start, end);
      };
      Calculator2.prototype.PathFromNodeToNodeWithPrevCost = function(start, end, prevCost) {
        var q = new pqueue_1.PriorityQueue(function(a, b) {
          return a.d <= b.d;
        }), u = this.neighbours[start], qu = new QueueEntry(u, null, 0), visitedFrom = {};
        q.push(qu);
        while (!q.empty()) {
          qu = q.pop();
          u = qu.node;
          if (u.id === end) {
            break;
          }
          var i = u.neighbours.length;
          while (i--) {
            var neighbour = u.neighbours[i], v = this.neighbours[neighbour.id];
            if (qu.prev && v.id === qu.prev.node.id)
              continue;
            var viduid = v.id + "," + u.id;
            if (viduid in visitedFrom && visitedFrom[viduid] <= qu.d)
              continue;
            var cc = qu.prev ? prevCost(qu.prev.node.id, u.id, v.id) : 0, t = qu.d + neighbour.distance + cc;
            visitedFrom[viduid] = t;
            q.push(new QueueEntry(v, qu, t));
          }
        }
        var path = [];
        while (qu.prev) {
          qu = qu.prev;
          path.push(qu.node.id);
        }
        return path;
      };
      Calculator2.prototype.dijkstraNeighbours = function(start, dest) {
        if (dest === void 0) {
          dest = -1;
        }
        var q = new pqueue_1.PriorityQueue(function(a, b) {
          return a.d <= b.d;
        }), i = this.neighbours.length, d = new Array(i);
        while (i--) {
          var node = this.neighbours[i];
          node.d = i === start ? 0 : Number.POSITIVE_INFINITY;
          node.q = q.push(node);
        }
        while (!q.empty()) {
          var u = q.pop();
          d[u.id] = u.d;
          if (u.id === dest) {
            var path = [];
            var v = u;
            while (typeof v.prev !== "undefined") {
              path.push(v.prev.id);
              v = v.prev;
            }
            return path;
          }
          i = u.neighbours.length;
          while (i--) {
            var neighbour = u.neighbours[i];
            var v = this.neighbours[neighbour.id];
            var t = u.d + neighbour.distance;
            if (u.d !== Number.MAX_VALUE && v.d > t) {
              v.d = t;
              v.prev = u;
              q.reduceKey(v.q, v, function(e, q2) {
                return e.q = q2;
              });
            }
          }
        }
        return d;
      };
      return Calculator2;
    }();
    exports.Calculator = Calculator;
  });

  // node_modules/webcola/dist/src/geom.js
  var require_geom = __commonJS((exports) => {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {value: true});
    var rectangle_1 = require_rectangle();
    var Point2 = function() {
      function Point3() {
      }
      return Point3;
    }();
    exports.Point = Point2;
    var LineSegment = function() {
      function LineSegment2(x1, y1, x2, y2) {
        this.x1 = x1;
        this.y1 = y1;
        this.x2 = x2;
        this.y2 = y2;
      }
      return LineSegment2;
    }();
    exports.LineSegment = LineSegment;
    var PolyPoint = function(_super) {
      __extends(PolyPoint2, _super);
      function PolyPoint2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      return PolyPoint2;
    }(Point2);
    exports.PolyPoint = PolyPoint;
    function isLeft(P0, P1, P2) {
      return (P1.x - P0.x) * (P2.y - P0.y) - (P2.x - P0.x) * (P1.y - P0.y);
    }
    exports.isLeft = isLeft;
    function above(p, vi, vj) {
      return isLeft(p, vi, vj) > 0;
    }
    function below(p, vi, vj) {
      return isLeft(p, vi, vj) < 0;
    }
    function ConvexHull(S) {
      var P = S.slice(0).sort(function(a, b) {
        return a.x !== b.x ? b.x - a.x : b.y - a.y;
      });
      var n = S.length, i;
      var minmin = 0;
      var xmin = P[0].x;
      for (i = 1; i < n; ++i) {
        if (P[i].x !== xmin)
          break;
      }
      var minmax = i - 1;
      var H = [];
      H.push(P[minmin]);
      if (minmax === n - 1) {
        if (P[minmax].y !== P[minmin].y)
          H.push(P[minmax]);
      } else {
        var maxmin, maxmax = n - 1;
        var xmax = P[n - 1].x;
        for (i = n - 2; i >= 0; i--)
          if (P[i].x !== xmax)
            break;
        maxmin = i + 1;
        i = minmax;
        while (++i <= maxmin) {
          if (isLeft(P[minmin], P[maxmin], P[i]) >= 0 && i < maxmin)
            continue;
          while (H.length > 1) {
            if (isLeft(H[H.length - 2], H[H.length - 1], P[i]) > 0)
              break;
            else
              H.length -= 1;
          }
          if (i != minmin)
            H.push(P[i]);
        }
        if (maxmax != maxmin)
          H.push(P[maxmax]);
        var bot = H.length;
        i = maxmin;
        while (--i >= minmax) {
          if (isLeft(P[maxmax], P[minmax], P[i]) >= 0 && i > minmax)
            continue;
          while (H.length > bot) {
            if (isLeft(H[H.length - 2], H[H.length - 1], P[i]) > 0)
              break;
            else
              H.length -= 1;
          }
          if (i != minmin)
            H.push(P[i]);
        }
      }
      return H;
    }
    exports.ConvexHull = ConvexHull;
    function clockwiseRadialSweep(p, P, f) {
      P.slice(0).sort(function(a, b) {
        return Math.atan2(a.y - p.y, a.x - p.x) - Math.atan2(b.y - p.y, b.x - p.x);
      }).forEach(f);
    }
    exports.clockwiseRadialSweep = clockwiseRadialSweep;
    function tangent_PointPolyC(P, V) {
      var Vclosed = V.slice(0);
      Vclosed.push(V[0]);
      return {rtan: Rtangent_PointPolyC(P, Vclosed), ltan: Ltangent_PointPolyC(P, Vclosed)};
    }
    function Rtangent_PointPolyC(P, V) {
      var n = V.length - 1;
      var a, b, c;
      var upA, dnC;
      if (below(P, V[1], V[0]) && !above(P, V[n - 1], V[0]))
        return 0;
      for (a = 0, b = n; ; ) {
        if (b - a === 1)
          if (above(P, V[a], V[b]))
            return a;
          else
            return b;
        c = Math.floor((a + b) / 2);
        dnC = below(P, V[c + 1], V[c]);
        if (dnC && !above(P, V[c - 1], V[c]))
          return c;
        upA = above(P, V[a + 1], V[a]);
        if (upA) {
          if (dnC)
            b = c;
          else {
            if (above(P, V[a], V[c]))
              b = c;
            else
              a = c;
          }
        } else {
          if (!dnC)
            a = c;
          else {
            if (below(P, V[a], V[c]))
              b = c;
            else
              a = c;
          }
        }
      }
    }
    function Ltangent_PointPolyC(P, V) {
      var n = V.length - 1;
      var a, b, c;
      var dnA, dnC;
      if (above(P, V[n - 1], V[0]) && !below(P, V[1], V[0]))
        return 0;
      for (a = 0, b = n; ; ) {
        if (b - a === 1)
          if (below(P, V[a], V[b]))
            return a;
          else
            return b;
        c = Math.floor((a + b) / 2);
        dnC = below(P, V[c + 1], V[c]);
        if (above(P, V[c - 1], V[c]) && !dnC)
          return c;
        dnA = below(P, V[a + 1], V[a]);
        if (dnA) {
          if (!dnC)
            b = c;
          else {
            if (below(P, V[a], V[c]))
              b = c;
            else
              a = c;
          }
        } else {
          if (dnC)
            a = c;
          else {
            if (above(P, V[a], V[c]))
              b = c;
            else
              a = c;
          }
        }
      }
    }
    function tangent_PolyPolyC(V, W, t1, t2, cmp1, cmp2) {
      var ix1, ix2;
      ix1 = t1(W[0], V);
      ix2 = t2(V[ix1], W);
      var done = false;
      while (!done) {
        done = true;
        while (true) {
          if (ix1 === V.length - 1)
            ix1 = 0;
          if (cmp1(W[ix2], V[ix1], V[ix1 + 1]))
            break;
          ++ix1;
        }
        while (true) {
          if (ix2 === 0)
            ix2 = W.length - 1;
          if (cmp2(V[ix1], W[ix2], W[ix2 - 1]))
            break;
          --ix2;
          done = false;
        }
      }
      return {t1: ix1, t2: ix2};
    }
    exports.tangent_PolyPolyC = tangent_PolyPolyC;
    function LRtangent_PolyPolyC(V, W) {
      var rl = RLtangent_PolyPolyC(W, V);
      return {t1: rl.t2, t2: rl.t1};
    }
    exports.LRtangent_PolyPolyC = LRtangent_PolyPolyC;
    function RLtangent_PolyPolyC(V, W) {
      return tangent_PolyPolyC(V, W, Rtangent_PointPolyC, Ltangent_PointPolyC, above, below);
    }
    exports.RLtangent_PolyPolyC = RLtangent_PolyPolyC;
    function LLtangent_PolyPolyC(V, W) {
      return tangent_PolyPolyC(V, W, Ltangent_PointPolyC, Ltangent_PointPolyC, below, below);
    }
    exports.LLtangent_PolyPolyC = LLtangent_PolyPolyC;
    function RRtangent_PolyPolyC(V, W) {
      return tangent_PolyPolyC(V, W, Rtangent_PointPolyC, Rtangent_PointPolyC, above, above);
    }
    exports.RRtangent_PolyPolyC = RRtangent_PolyPolyC;
    var BiTangent = function() {
      function BiTangent2(t1, t2) {
        this.t1 = t1;
        this.t2 = t2;
      }
      return BiTangent2;
    }();
    exports.BiTangent = BiTangent;
    var BiTangents = function() {
      function BiTangents2() {
      }
      return BiTangents2;
    }();
    exports.BiTangents = BiTangents;
    var TVGPoint = function(_super) {
      __extends(TVGPoint2, _super);
      function TVGPoint2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      return TVGPoint2;
    }(Point2);
    exports.TVGPoint = TVGPoint;
    var VisibilityVertex = function() {
      function VisibilityVertex2(id, polyid, polyvertid, p) {
        this.id = id;
        this.polyid = polyid;
        this.polyvertid = polyvertid;
        this.p = p;
        p.vv = this;
      }
      return VisibilityVertex2;
    }();
    exports.VisibilityVertex = VisibilityVertex;
    var VisibilityEdge = function() {
      function VisibilityEdge2(source, target) {
        this.source = source;
        this.target = target;
      }
      VisibilityEdge2.prototype.length = function() {
        var dx = this.source.p.x - this.target.p.x;
        var dy = this.source.p.y - this.target.p.y;
        return Math.sqrt(dx * dx + dy * dy);
      };
      return VisibilityEdge2;
    }();
    exports.VisibilityEdge = VisibilityEdge;
    var TangentVisibilityGraph = function() {
      function TangentVisibilityGraph2(P, g0) {
        this.P = P;
        this.V = [];
        this.E = [];
        if (!g0) {
          var n = P.length;
          for (var i = 0; i < n; i++) {
            var p = P[i];
            for (var j = 0; j < p.length; ++j) {
              var pj = p[j], vv = new VisibilityVertex(this.V.length, i, j, pj);
              this.V.push(vv);
              if (j > 0)
                this.E.push(new VisibilityEdge(p[j - 1].vv, vv));
            }
            if (p.length > 1)
              this.E.push(new VisibilityEdge(p[0].vv, p[p.length - 1].vv));
          }
          for (var i = 0; i < n - 1; i++) {
            var Pi = P[i];
            for (var j = i + 1; j < n; j++) {
              var Pj = P[j], t = tangents(Pi, Pj);
              for (var q in t) {
                var c = t[q], source = Pi[c.t1], target = Pj[c.t2];
                this.addEdgeIfVisible(source, target, i, j);
              }
            }
          }
        } else {
          this.V = g0.V.slice(0);
          this.E = g0.E.slice(0);
        }
      }
      TangentVisibilityGraph2.prototype.addEdgeIfVisible = function(u, v, i1, i2) {
        if (!this.intersectsPolys(new LineSegment(u.x, u.y, v.x, v.y), i1, i2)) {
          this.E.push(new VisibilityEdge(u.vv, v.vv));
        }
      };
      TangentVisibilityGraph2.prototype.addPoint = function(p, i1) {
        var n = this.P.length;
        this.V.push(new VisibilityVertex(this.V.length, n, 0, p));
        for (var i = 0; i < n; ++i) {
          if (i === i1)
            continue;
          var poly = this.P[i], t = tangent_PointPolyC(p, poly);
          this.addEdgeIfVisible(p, poly[t.ltan], i1, i);
          this.addEdgeIfVisible(p, poly[t.rtan], i1, i);
        }
        return p.vv;
      };
      TangentVisibilityGraph2.prototype.intersectsPolys = function(l, i1, i2) {
        for (var i = 0, n = this.P.length; i < n; ++i) {
          if (i != i1 && i != i2 && intersects(l, this.P[i]).length > 0) {
            return true;
          }
        }
        return false;
      };
      return TangentVisibilityGraph2;
    }();
    exports.TangentVisibilityGraph = TangentVisibilityGraph;
    function intersects(l, P) {
      var ints = [];
      for (var i = 1, n = P.length; i < n; ++i) {
        var int = rectangle_1.Rectangle.lineIntersection(l.x1, l.y1, l.x2, l.y2, P[i - 1].x, P[i - 1].y, P[i].x, P[i].y);
        if (int)
          ints.push(int);
      }
      return ints;
    }
    function tangents(V, W) {
      var m = V.length - 1, n = W.length - 1;
      var bt = new BiTangents();
      for (var i = 0; i < m; ++i) {
        for (var j = 0; j < n; ++j) {
          var v1 = V[i == 0 ? m - 1 : i - 1];
          var v2 = V[i];
          var v3 = V[i + 1];
          var w1 = W[j == 0 ? n - 1 : j - 1];
          var w2 = W[j];
          var w3 = W[j + 1];
          var v1v2w2 = isLeft(v1, v2, w2);
          var v2w1w2 = isLeft(v2, w1, w2);
          var v2w2w3 = isLeft(v2, w2, w3);
          var w1w2v2 = isLeft(w1, w2, v2);
          var w2v1v2 = isLeft(w2, v1, v2);
          var w2v2v3 = isLeft(w2, v2, v3);
          if (v1v2w2 >= 0 && v2w1w2 >= 0 && v2w2w3 < 0 && w1w2v2 >= 0 && w2v1v2 >= 0 && w2v2v3 < 0) {
            bt.ll = new BiTangent(i, j);
          } else if (v1v2w2 <= 0 && v2w1w2 <= 0 && v2w2w3 > 0 && w1w2v2 <= 0 && w2v1v2 <= 0 && w2v2v3 > 0) {
            bt.rr = new BiTangent(i, j);
          } else if (v1v2w2 <= 0 && v2w1w2 > 0 && v2w2w3 <= 0 && w1w2v2 >= 0 && w2v1v2 < 0 && w2v2v3 >= 0) {
            bt.rl = new BiTangent(i, j);
          } else if (v1v2w2 >= 0 && v2w1w2 < 0 && v2w2w3 >= 0 && w1w2v2 <= 0 && w2v1v2 > 0 && w2v2v3 <= 0) {
            bt.lr = new BiTangent(i, j);
          }
        }
      }
      return bt;
    }
    exports.tangents = tangents;
    function isPointInsidePoly(p, poly) {
      for (var i = 1, n = poly.length; i < n; ++i)
        if (below(poly[i - 1], poly[i], p))
          return false;
      return true;
    }
    function isAnyPInQ(p, q) {
      return !p.every(function(v) {
        return !isPointInsidePoly(v, q);
      });
    }
    function polysOverlap(p, q) {
      if (isAnyPInQ(p, q))
        return true;
      if (isAnyPInQ(q, p))
        return true;
      for (var i = 1, n = p.length; i < n; ++i) {
        var v = p[i], u = p[i - 1];
        if (intersects(new LineSegment(u.x, u.y, v.x, v.y), q).length > 0)
          return true;
      }
      return false;
    }
    exports.polysOverlap = polysOverlap;
  });

  // node_modules/webcola/dist/src/handledisconnected.js
  var require_handledisconnected = __commonJS((exports) => {
    "use strict";
    Object.defineProperty(exports, "__esModule", {value: true});
    var packingOptions = {
      PADDING: 10,
      GOLDEN_SECTION: (1 + Math.sqrt(5)) / 2,
      FLOAT_EPSILON: 1e-4,
      MAX_INERATIONS: 100
    };
    function applyPacking(graphs, w, h, node_size, desired_ratio, centerGraph) {
      if (desired_ratio === void 0) {
        desired_ratio = 1;
      }
      if (centerGraph === void 0) {
        centerGraph = true;
      }
      var init_x = 0, init_y = 0, svg_width = w, svg_height = h, desired_ratio = typeof desired_ratio !== "undefined" ? desired_ratio : 1, node_size = typeof node_size !== "undefined" ? node_size : 0, real_width = 0, real_height = 0, min_width = 0, global_bottom = 0, line = [];
      if (graphs.length == 0)
        return;
      calculate_bb(graphs);
      apply(graphs, desired_ratio);
      if (centerGraph) {
        put_nodes_to_right_positions(graphs);
      }
      function calculate_bb(graphs2) {
        graphs2.forEach(function(g) {
          calculate_single_bb(g);
        });
        function calculate_single_bb(graph) {
          var min_x = Number.MAX_VALUE, min_y = Number.MAX_VALUE, max_x = 0, max_y = 0;
          graph.array.forEach(function(v) {
            var w2 = typeof v.width !== "undefined" ? v.width : node_size;
            var h2 = typeof v.height !== "undefined" ? v.height : node_size;
            w2 /= 2;
            h2 /= 2;
            max_x = Math.max(v.x + w2, max_x);
            min_x = Math.min(v.x - w2, min_x);
            max_y = Math.max(v.y + h2, max_y);
            min_y = Math.min(v.y - h2, min_y);
          });
          graph.width = max_x - min_x;
          graph.height = max_y - min_y;
        }
      }
      function put_nodes_to_right_positions(graphs2) {
        graphs2.forEach(function(g) {
          var center = {x: 0, y: 0};
          g.array.forEach(function(node) {
            center.x += node.x;
            center.y += node.y;
          });
          center.x /= g.array.length;
          center.y /= g.array.length;
          var corner = {x: center.x - g.width / 2, y: center.y - g.height / 2};
          var offset = {x: g.x - corner.x + svg_width / 2 - real_width / 2, y: g.y - corner.y + svg_height / 2 - real_height / 2};
          g.array.forEach(function(node) {
            node.x += offset.x;
            node.y += offset.y;
          });
        });
      }
      function apply(data, desired_ratio2) {
        var curr_best_f = Number.POSITIVE_INFINITY;
        var curr_best = 0;
        data.sort(function(a, b) {
          return b.height - a.height;
        });
        min_width = data.reduce(function(a, b) {
          return a.width < b.width ? a.width : b.width;
        });
        var left = x1 = min_width;
        var right = x2 = get_entire_width(data);
        var iterationCounter = 0;
        var f_x1 = Number.MAX_VALUE;
        var f_x2 = Number.MAX_VALUE;
        var flag = -1;
        var dx = Number.MAX_VALUE;
        var df = Number.MAX_VALUE;
        while (dx > min_width || df > packingOptions.FLOAT_EPSILON) {
          if (flag != 1) {
            var x1 = right - (right - left) / packingOptions.GOLDEN_SECTION;
            var f_x1 = step(data, x1);
          }
          if (flag != 0) {
            var x2 = left + (right - left) / packingOptions.GOLDEN_SECTION;
            var f_x2 = step(data, x2);
          }
          dx = Math.abs(x1 - x2);
          df = Math.abs(f_x1 - f_x2);
          if (f_x1 < curr_best_f) {
            curr_best_f = f_x1;
            curr_best = x1;
          }
          if (f_x2 < curr_best_f) {
            curr_best_f = f_x2;
            curr_best = x2;
          }
          if (f_x1 > f_x2) {
            left = x1;
            x1 = x2;
            f_x1 = f_x2;
            flag = 1;
          } else {
            right = x2;
            x2 = x1;
            f_x2 = f_x1;
            flag = 0;
          }
          if (iterationCounter++ > 100) {
            break;
          }
        }
        step(data, curr_best);
      }
      function step(data, max_width) {
        line = [];
        real_width = 0;
        real_height = 0;
        global_bottom = init_y;
        for (var i = 0; i < data.length; i++) {
          var o2 = data[i];
          put_rect(o2, max_width);
        }
        return Math.abs(get_real_ratio() - desired_ratio);
      }
      function put_rect(rect, max_width) {
        var parent = void 0;
        for (var i = 0; i < line.length; i++) {
          if (line[i].space_left >= rect.height && line[i].x + line[i].width + rect.width + packingOptions.PADDING - max_width <= packingOptions.FLOAT_EPSILON) {
            parent = line[i];
            break;
          }
        }
        line.push(rect);
        if (parent !== void 0) {
          rect.x = parent.x + parent.width + packingOptions.PADDING;
          rect.y = parent.bottom;
          rect.space_left = rect.height;
          rect.bottom = rect.y;
          parent.space_left -= rect.height + packingOptions.PADDING;
          parent.bottom += rect.height + packingOptions.PADDING;
        } else {
          rect.y = global_bottom;
          global_bottom += rect.height + packingOptions.PADDING;
          rect.x = init_x;
          rect.bottom = rect.y;
          rect.space_left = rect.height;
        }
        if (rect.y + rect.height - real_height > -packingOptions.FLOAT_EPSILON)
          real_height = rect.y + rect.height - init_y;
        if (rect.x + rect.width - real_width > -packingOptions.FLOAT_EPSILON)
          real_width = rect.x + rect.width - init_x;
      }
      ;
      function get_entire_width(data) {
        var width = 0;
        data.forEach(function(d) {
          return width += d.width + packingOptions.PADDING;
        });
        return width;
      }
      function get_real_ratio() {
        return real_width / real_height;
      }
    }
    exports.applyPacking = applyPacking;
    function separateGraphs(nodes, links) {
      var marks = {};
      var ways = {};
      var graphs = [];
      var clusters = 0;
      for (var i = 0; i < links.length; i++) {
        var link = links[i];
        var n1 = link.source;
        var n2 = link.target;
        if (ways[n1.index])
          ways[n1.index].push(n2);
        else
          ways[n1.index] = [n2];
        if (ways[n2.index])
          ways[n2.index].push(n1);
        else
          ways[n2.index] = [n1];
      }
      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        if (marks[node.index])
          continue;
        explore_node(node, true);
      }
      function explore_node(n, is_new) {
        if (marks[n.index] !== void 0)
          return;
        if (is_new) {
          clusters++;
          graphs.push({array: []});
        }
        marks[n.index] = clusters;
        graphs[clusters - 1].array.push(n);
        var adjacent = ways[n.index];
        if (!adjacent)
          return;
        for (var j = 0; j < adjacent.length; j++) {
          explore_node(adjacent[j], false);
        }
      }
      return graphs;
    }
    exports.separateGraphs = separateGraphs;
  });

  // node_modules/webcola/dist/src/layout.js
  var require_layout2 = __commonJS((exports) => {
    "use strict";
    Object.defineProperty(exports, "__esModule", {value: true});
    var powergraph = require_powergraph();
    var linklengths_1 = require_linklengths();
    var descent_1 = require_descent();
    var rectangle_1 = require_rectangle();
    var shortestpaths_1 = require_shortestpaths();
    var geom_1 = require_geom();
    var handledisconnected_1 = require_handledisconnected();
    var EventType;
    (function(EventType2) {
      EventType2[EventType2["start"] = 0] = "start";
      EventType2[EventType2["tick"] = 1] = "tick";
      EventType2[EventType2["end"] = 2] = "end";
    })(EventType = exports.EventType || (exports.EventType = {}));
    function isGroup(g) {
      return typeof g.leaves !== "undefined" || typeof g.groups !== "undefined";
    }
    var Layout2 = function() {
      function Layout3() {
        var _this = this;
        this._canvasSize = [1, 1];
        this._linkDistance = 20;
        this._defaultNodeSize = 10;
        this._linkLengthCalculator = null;
        this._linkType = null;
        this._avoidOverlaps = false;
        this._handleDisconnected = true;
        this._running = false;
        this._nodes = [];
        this._groups = [];
        this._rootGroup = null;
        this._links = [];
        this._constraints = [];
        this._distanceMatrix = null;
        this._descent = null;
        this._directedLinkConstraints = null;
        this._threshold = 0.01;
        this._visibilityGraph = null;
        this._groupCompactness = 1e-6;
        this.event = null;
        this.linkAccessor = {
          getSourceIndex: Layout3.getSourceIndex,
          getTargetIndex: Layout3.getTargetIndex,
          setLength: Layout3.setLinkLength,
          getType: function(l) {
            return typeof _this._linkType === "function" ? _this._linkType(l) : 0;
          }
        };
      }
      Layout3.prototype.on = function(e, listener) {
        if (!this.event)
          this.event = {};
        if (typeof e === "string") {
          this.event[EventType[e]] = listener;
        } else {
          this.event[e] = listener;
        }
        return this;
      };
      Layout3.prototype.trigger = function(e) {
        if (this.event && typeof this.event[e.type] !== "undefined") {
          this.event[e.type](e);
        }
      };
      Layout3.prototype.kick = function() {
        while (!this.tick())
          ;
      };
      Layout3.prototype.tick = function() {
        if (this._alpha < this._threshold) {
          this._running = false;
          this.trigger({type: EventType.end, alpha: this._alpha = 0, stress: this._lastStress});
          return true;
        }
        var n = this._nodes.length, m = this._links.length;
        var o2, i;
        this._descent.locks.clear();
        for (i = 0; i < n; ++i) {
          o2 = this._nodes[i];
          if (o2.fixed) {
            if (typeof o2.px === "undefined" || typeof o2.py === "undefined") {
              o2.px = o2.x;
              o2.py = o2.y;
            }
            var p = [o2.px, o2.py];
            this._descent.locks.add(i, p);
          }
        }
        var s1 = this._descent.rungeKutta();
        if (s1 === 0) {
          this._alpha = 0;
        } else if (typeof this._lastStress !== "undefined") {
          this._alpha = s1;
        }
        this._lastStress = s1;
        this.updateNodePositions();
        this.trigger({type: EventType.tick, alpha: this._alpha, stress: this._lastStress});
        return false;
      };
      Layout3.prototype.updateNodePositions = function() {
        var x = this._descent.x[0], y = this._descent.x[1];
        var o2, i = this._nodes.length;
        while (i--) {
          o2 = this._nodes[i];
          o2.x = x[i];
          o2.y = y[i];
        }
      };
      Layout3.prototype.nodes = function(v) {
        if (!v) {
          if (this._nodes.length === 0 && this._links.length > 0) {
            var n = 0;
            this._links.forEach(function(l) {
              n = Math.max(n, l.source, l.target);
            });
            this._nodes = new Array(++n);
            for (var i = 0; i < n; ++i) {
              this._nodes[i] = {};
            }
          }
          return this._nodes;
        }
        this._nodes = v;
        return this;
      };
      Layout3.prototype.groups = function(x) {
        var _this = this;
        if (!x)
          return this._groups;
        this._groups = x;
        this._rootGroup = {};
        this._groups.forEach(function(g) {
          if (typeof g.padding === "undefined")
            g.padding = 1;
          if (typeof g.leaves !== "undefined") {
            g.leaves.forEach(function(v, i) {
              if (typeof v === "number")
                (g.leaves[i] = _this._nodes[v]).parent = g;
            });
          }
          if (typeof g.groups !== "undefined") {
            g.groups.forEach(function(gi, i) {
              if (typeof gi === "number")
                (g.groups[i] = _this._groups[gi]).parent = g;
            });
          }
        });
        this._rootGroup.leaves = this._nodes.filter(function(v) {
          return typeof v.parent === "undefined";
        });
        this._rootGroup.groups = this._groups.filter(function(g) {
          return typeof g.parent === "undefined";
        });
        return this;
      };
      Layout3.prototype.powerGraphGroups = function(f) {
        var g = powergraph.getGroups(this._nodes, this._links, this.linkAccessor, this._rootGroup);
        this.groups(g.groups);
        f(g);
        return this;
      };
      Layout3.prototype.avoidOverlaps = function(v) {
        if (!arguments.length)
          return this._avoidOverlaps;
        this._avoidOverlaps = v;
        return this;
      };
      Layout3.prototype.handleDisconnected = function(v) {
        if (!arguments.length)
          return this._handleDisconnected;
        this._handleDisconnected = v;
        return this;
      };
      Layout3.prototype.flowLayout = function(axis, minSeparation) {
        if (!arguments.length)
          axis = "y";
        this._directedLinkConstraints = {
          axis,
          getMinSeparation: typeof minSeparation === "number" ? function() {
            return minSeparation;
          } : minSeparation
        };
        return this;
      };
      Layout3.prototype.links = function(x) {
        if (!arguments.length)
          return this._links;
        this._links = x;
        return this;
      };
      Layout3.prototype.constraints = function(c) {
        if (!arguments.length)
          return this._constraints;
        this._constraints = c;
        return this;
      };
      Layout3.prototype.distanceMatrix = function(d) {
        if (!arguments.length)
          return this._distanceMatrix;
        this._distanceMatrix = d;
        return this;
      };
      Layout3.prototype.size = function(x) {
        if (!x)
          return this._canvasSize;
        this._canvasSize = x;
        return this;
      };
      Layout3.prototype.defaultNodeSize = function(x) {
        if (!x)
          return this._defaultNodeSize;
        this._defaultNodeSize = x;
        return this;
      };
      Layout3.prototype.groupCompactness = function(x) {
        if (!x)
          return this._groupCompactness;
        this._groupCompactness = x;
        return this;
      };
      Layout3.prototype.linkDistance = function(x) {
        if (!x) {
          return this._linkDistance;
        }
        this._linkDistance = typeof x === "function" ? x : +x;
        this._linkLengthCalculator = null;
        return this;
      };
      Layout3.prototype.linkType = function(f) {
        this._linkType = f;
        return this;
      };
      Layout3.prototype.convergenceThreshold = function(x) {
        if (!x)
          return this._threshold;
        this._threshold = typeof x === "function" ? x : +x;
        return this;
      };
      Layout3.prototype.alpha = function(x) {
        if (!arguments.length)
          return this._alpha;
        else {
          x = +x;
          if (this._alpha) {
            if (x > 0)
              this._alpha = x;
            else
              this._alpha = 0;
          } else if (x > 0) {
            if (!this._running) {
              this._running = true;
              this.trigger({type: EventType.start, alpha: this._alpha = x});
              this.kick();
            }
          }
          return this;
        }
      };
      Layout3.prototype.getLinkLength = function(link) {
        return typeof this._linkDistance === "function" ? +this._linkDistance(link) : this._linkDistance;
      };
      Layout3.setLinkLength = function(link, length) {
        link.length = length;
      };
      Layout3.prototype.getLinkType = function(link) {
        return typeof this._linkType === "function" ? this._linkType(link) : 0;
      };
      Layout3.prototype.symmetricDiffLinkLengths = function(idealLength, w) {
        var _this = this;
        if (w === void 0) {
          w = 1;
        }
        this.linkDistance(function(l) {
          return idealLength * l.length;
        });
        this._linkLengthCalculator = function() {
          return linklengths_1.symmetricDiffLinkLengths(_this._links, _this.linkAccessor, w);
        };
        return this;
      };
      Layout3.prototype.jaccardLinkLengths = function(idealLength, w) {
        var _this = this;
        if (w === void 0) {
          w = 1;
        }
        this.linkDistance(function(l) {
          return idealLength * l.length;
        });
        this._linkLengthCalculator = function() {
          return linklengths_1.jaccardLinkLengths(_this._links, _this.linkAccessor, w);
        };
        return this;
      };
      Layout3.prototype.start = function(initialUnconstrainedIterations, initialUserConstraintIterations, initialAllConstraintsIterations, gridSnapIterations, keepRunning, centerGraph) {
        var _this = this;
        if (initialUnconstrainedIterations === void 0) {
          initialUnconstrainedIterations = 0;
        }
        if (initialUserConstraintIterations === void 0) {
          initialUserConstraintIterations = 0;
        }
        if (initialAllConstraintsIterations === void 0) {
          initialAllConstraintsIterations = 0;
        }
        if (gridSnapIterations === void 0) {
          gridSnapIterations = 0;
        }
        if (keepRunning === void 0) {
          keepRunning = true;
        }
        if (centerGraph === void 0) {
          centerGraph = true;
        }
        var i, j, n = this.nodes().length, N = n + 2 * this._groups.length, m = this._links.length, w = this._canvasSize[0], h = this._canvasSize[1];
        var x = new Array(N), y = new Array(N);
        var G = null;
        var ao = this._avoidOverlaps;
        this._nodes.forEach(function(v, i2) {
          v.index = i2;
          if (typeof v.x === "undefined") {
            v.x = w / 2, v.y = h / 2;
          }
          x[i2] = v.x, y[i2] = v.y;
        });
        if (this._linkLengthCalculator)
          this._linkLengthCalculator();
        var distances;
        if (this._distanceMatrix) {
          distances = this._distanceMatrix;
        } else {
          distances = new shortestpaths_1.Calculator(N, this._links, Layout3.getSourceIndex, Layout3.getTargetIndex, function(l) {
            return _this.getLinkLength(l);
          }).DistanceMatrix();
          G = descent_1.Descent.createSquareMatrix(N, function() {
            return 2;
          });
          this._links.forEach(function(l) {
            if (typeof l.source == "number")
              l.source = _this._nodes[l.source];
            if (typeof l.target == "number")
              l.target = _this._nodes[l.target];
          });
          this._links.forEach(function(e) {
            var u = Layout3.getSourceIndex(e), v = Layout3.getTargetIndex(e);
            G[u][v] = G[v][u] = e.weight || 1;
          });
        }
        var D = descent_1.Descent.createSquareMatrix(N, function(i2, j2) {
          return distances[i2][j2];
        });
        if (this._rootGroup && typeof this._rootGroup.groups !== "undefined") {
          var i = n;
          var addAttraction = function(i2, j2, strength, idealDistance) {
            G[i2][j2] = G[j2][i2] = strength;
            D[i2][j2] = D[j2][i2] = idealDistance;
          };
          this._groups.forEach(function(g) {
            addAttraction(i, i + 1, _this._groupCompactness, 0.1);
            x[i] = 0, y[i++] = 0;
            x[i] = 0, y[i++] = 0;
          });
        } else
          this._rootGroup = {leaves: this._nodes, groups: []};
        var curConstraints = this._constraints || [];
        if (this._directedLinkConstraints) {
          this.linkAccessor.getMinSeparation = this._directedLinkConstraints.getMinSeparation;
          curConstraints = curConstraints.concat(linklengths_1.generateDirectedEdgeConstraints(n, this._links, this._directedLinkConstraints.axis, this.linkAccessor));
        }
        this.avoidOverlaps(false);
        this._descent = new descent_1.Descent([x, y], D);
        this._descent.locks.clear();
        for (var i = 0; i < n; ++i) {
          var o2 = this._nodes[i];
          if (o2.fixed) {
            o2.px = o2.x;
            o2.py = o2.y;
            var p = [o2.x, o2.y];
            this._descent.locks.add(i, p);
          }
        }
        this._descent.threshold = this._threshold;
        this.initialLayout(initialUnconstrainedIterations, x, y);
        if (curConstraints.length > 0)
          this._descent.project = new rectangle_1.Projection(this._nodes, this._groups, this._rootGroup, curConstraints).projectFunctions();
        this._descent.run(initialUserConstraintIterations);
        this.separateOverlappingComponents(w, h, centerGraph);
        this.avoidOverlaps(ao);
        if (ao) {
          this._nodes.forEach(function(v, i2) {
            v.x = x[i2], v.y = y[i2];
          });
          this._descent.project = new rectangle_1.Projection(this._nodes, this._groups, this._rootGroup, curConstraints, true).projectFunctions();
          this._nodes.forEach(function(v, i2) {
            x[i2] = v.x, y[i2] = v.y;
          });
        }
        this._descent.G = G;
        this._descent.run(initialAllConstraintsIterations);
        if (gridSnapIterations) {
          this._descent.snapStrength = 1e3;
          this._descent.snapGridSize = this._nodes[0].width;
          this._descent.numGridSnapNodes = n;
          this._descent.scaleSnapByMaxH = n != N;
          var G0 = descent_1.Descent.createSquareMatrix(N, function(i2, j2) {
            if (i2 >= n || j2 >= n)
              return G[i2][j2];
            return 0;
          });
          this._descent.G = G0;
          this._descent.run(gridSnapIterations);
        }
        this.updateNodePositions();
        this.separateOverlappingComponents(w, h, centerGraph);
        return keepRunning ? this.resume() : this;
      };
      Layout3.prototype.initialLayout = function(iterations, x, y) {
        if (this._groups.length > 0 && iterations > 0) {
          var n = this._nodes.length;
          var edges = this._links.map(function(e) {
            return {source: e.source.index, target: e.target.index};
          });
          var vs = this._nodes.map(function(v) {
            return {index: v.index};
          });
          this._groups.forEach(function(g, i) {
            vs.push({index: g.index = n + i});
          });
          this._groups.forEach(function(g, i) {
            if (typeof g.leaves !== "undefined")
              g.leaves.forEach(function(v) {
                return edges.push({source: g.index, target: v.index});
              });
            if (typeof g.groups !== "undefined")
              g.groups.forEach(function(gg) {
                return edges.push({source: g.index, target: gg.index});
              });
          });
          new Layout3().size(this.size()).nodes(vs).links(edges).avoidOverlaps(false).linkDistance(this.linkDistance()).symmetricDiffLinkLengths(5).convergenceThreshold(1e-4).start(iterations, 0, 0, 0, false);
          this._nodes.forEach(function(v) {
            x[v.index] = vs[v.index].x;
            y[v.index] = vs[v.index].y;
          });
        } else {
          this._descent.run(iterations);
        }
      };
      Layout3.prototype.separateOverlappingComponents = function(width, height, centerGraph) {
        var _this = this;
        if (centerGraph === void 0) {
          centerGraph = true;
        }
        if (!this._distanceMatrix && this._handleDisconnected) {
          var x_1 = this._descent.x[0], y_1 = this._descent.x[1];
          this._nodes.forEach(function(v, i) {
            v.x = x_1[i], v.y = y_1[i];
          });
          var graphs = handledisconnected_1.separateGraphs(this._nodes, this._links);
          handledisconnected_1.applyPacking(graphs, width, height, this._defaultNodeSize, 1, centerGraph);
          this._nodes.forEach(function(v, i) {
            _this._descent.x[0][i] = v.x, _this._descent.x[1][i] = v.y;
            if (v.bounds) {
              v.bounds.setXCentre(v.x);
              v.bounds.setYCentre(v.y);
            }
          });
        }
      };
      Layout3.prototype.resume = function() {
        return this.alpha(0.1);
      };
      Layout3.prototype.stop = function() {
        return this.alpha(0);
      };
      Layout3.prototype.prepareEdgeRouting = function(nodeMargin) {
        if (nodeMargin === void 0) {
          nodeMargin = 0;
        }
        this._visibilityGraph = new geom_1.TangentVisibilityGraph(this._nodes.map(function(v) {
          return v.bounds.inflate(-nodeMargin).vertices();
        }));
      };
      Layout3.prototype.routeEdge = function(edge, ah, draw) {
        if (ah === void 0) {
          ah = 5;
        }
        var lineData = [];
        var vg2 = new geom_1.TangentVisibilityGraph(this._visibilityGraph.P, {V: this._visibilityGraph.V, E: this._visibilityGraph.E}), port1 = {x: edge.source.x, y: edge.source.y}, port2 = {x: edge.target.x, y: edge.target.y}, start = vg2.addPoint(port1, edge.source.index), end = vg2.addPoint(port2, edge.target.index);
        vg2.addEdgeIfVisible(port1, port2, edge.source.index, edge.target.index);
        if (typeof draw !== "undefined") {
          draw(vg2);
        }
        var sourceInd = function(e) {
          return e.source.id;
        }, targetInd = function(e) {
          return e.target.id;
        }, length = function(e) {
          return e.length();
        }, spCalc = new shortestpaths_1.Calculator(vg2.V.length, vg2.E, sourceInd, targetInd, length), shortestPath = spCalc.PathFromNodeToNode(start.id, end.id);
        if (shortestPath.length === 1 || shortestPath.length === vg2.V.length) {
          var route = rectangle_1.makeEdgeBetween(edge.source.innerBounds, edge.target.innerBounds, ah);
          lineData = [route.sourceIntersection, route.arrowStart];
        } else {
          var n = shortestPath.length - 2, p = vg2.V[shortestPath[n]].p, q = vg2.V[shortestPath[0]].p, lineData = [edge.source.innerBounds.rayIntersection(p.x, p.y)];
          for (var i = n; i >= 0; --i)
            lineData.push(vg2.V[shortestPath[i]].p);
          lineData.push(rectangle_1.makeEdgeTo(q, edge.target.innerBounds, ah));
        }
        return lineData;
      };
      Layout3.getSourceIndex = function(e) {
        return typeof e.source === "number" ? e.source : e.source.index;
      };
      Layout3.getTargetIndex = function(e) {
        return typeof e.target === "number" ? e.target : e.target.index;
      };
      Layout3.linkId = function(e) {
        return Layout3.getSourceIndex(e) + "-" + Layout3.getTargetIndex(e);
      };
      Layout3.dragStart = function(d) {
        if (isGroup(d)) {
          Layout3.storeOffset(d, Layout3.dragOrigin(d));
        } else {
          Layout3.stopNode(d);
          d.fixed |= 2;
        }
      };
      Layout3.stopNode = function(v) {
        v.px = v.x;
        v.py = v.y;
      };
      Layout3.storeOffset = function(d, origin) {
        if (typeof d.leaves !== "undefined") {
          d.leaves.forEach(function(v) {
            v.fixed |= 2;
            Layout3.stopNode(v);
            v._dragGroupOffsetX = v.x - origin.x;
            v._dragGroupOffsetY = v.y - origin.y;
          });
        }
        if (typeof d.groups !== "undefined") {
          d.groups.forEach(function(g) {
            return Layout3.storeOffset(g, origin);
          });
        }
      };
      Layout3.dragOrigin = function(d) {
        if (isGroup(d)) {
          return {
            x: d.bounds.cx(),
            y: d.bounds.cy()
          };
        } else {
          return d;
        }
      };
      Layout3.drag = function(d, position) {
        if (isGroup(d)) {
          if (typeof d.leaves !== "undefined") {
            d.leaves.forEach(function(v) {
              d.bounds.setXCentre(position.x);
              d.bounds.setYCentre(position.y);
              v.px = v._dragGroupOffsetX + position.x;
              v.py = v._dragGroupOffsetY + position.y;
            });
          }
          if (typeof d.groups !== "undefined") {
            d.groups.forEach(function(g) {
              return Layout3.drag(g, position);
            });
          }
        } else {
          d.px = position.x;
          d.py = position.y;
        }
      };
      Layout3.dragEnd = function(d) {
        if (isGroup(d)) {
          if (typeof d.leaves !== "undefined") {
            d.leaves.forEach(function(v) {
              Layout3.dragEnd(v);
              delete v._dragGroupOffsetX;
              delete v._dragGroupOffsetY;
            });
          }
          if (typeof d.groups !== "undefined") {
            d.groups.forEach(Layout3.dragEnd);
          }
        } else {
          d.fixed &= ~6;
        }
      };
      Layout3.mouseOver = function(d) {
        d.fixed |= 4;
        d.px = d.x, d.py = d.y;
      };
      Layout3.mouseOut = function(d) {
        d.fixed &= ~4;
      };
      return Layout3;
    }();
    exports.Layout = Layout2;
  });

  // node_modules/webcola/dist/src/adaptor.js
  var require_adaptor = __commonJS((exports) => {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {value: true});
    var layout_1 = require_layout2();
    var LayoutAdaptor = function(_super) {
      __extends(LayoutAdaptor2, _super);
      function LayoutAdaptor2(options) {
        var _this = _super.call(this) || this;
        var self2 = _this;
        var o2 = options;
        if (o2.trigger) {
          _this.trigger = o2.trigger;
        }
        if (o2.kick) {
          _this.kick = o2.kick;
        }
        if (o2.drag) {
          _this.drag = o2.drag;
        }
        if (o2.on) {
          _this.on = o2.on;
        }
        _this.dragstart = _this.dragStart = layout_1.Layout.dragStart;
        _this.dragend = _this.dragEnd = layout_1.Layout.dragEnd;
        return _this;
      }
      LayoutAdaptor2.prototype.trigger = function(e) {
      };
      ;
      LayoutAdaptor2.prototype.kick = function() {
      };
      ;
      LayoutAdaptor2.prototype.drag = function() {
      };
      ;
      LayoutAdaptor2.prototype.on = function(eventType, listener) {
        return this;
      };
      ;
      return LayoutAdaptor2;
    }(layout_1.Layout);
    exports.LayoutAdaptor = LayoutAdaptor;
    function adaptor(options) {
      return new LayoutAdaptor(options);
    }
    exports.adaptor = adaptor;
  });

  // node_modules/webcola/dist/src/d3v3adaptor.js
  var require_d3v3adaptor = __commonJS((exports) => {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {value: true});
    var layout_1 = require_layout2();
    var D3StyleLayoutAdaptor = function(_super) {
      __extends(D3StyleLayoutAdaptor2, _super);
      function D3StyleLayoutAdaptor2() {
        var _this = _super.call(this) || this;
        _this.event = d3.dispatch(layout_1.EventType[layout_1.EventType.start], layout_1.EventType[layout_1.EventType.tick], layout_1.EventType[layout_1.EventType.end]);
        var d3layout = _this;
        var drag;
        _this.drag = function() {
          if (!drag2) {
            var drag2 = d3.behavior.drag().origin(layout_1.Layout.dragOrigin).on("dragstart.d3adaptor", layout_1.Layout.dragStart).on("drag.d3adaptor", function(d) {
              layout_1.Layout.drag(d, d3.event);
              d3layout.resume();
            }).on("dragend.d3adaptor", layout_1.Layout.dragEnd);
          }
          if (!arguments.length)
            return drag2;
          this.call(drag2);
        };
        return _this;
      }
      D3StyleLayoutAdaptor2.prototype.trigger = function(e) {
        var d3event = {type: layout_1.EventType[e.type], alpha: e.alpha, stress: e.stress};
        this.event[d3event.type](d3event);
      };
      D3StyleLayoutAdaptor2.prototype.kick = function() {
        var _this = this;
        d3.timer(function() {
          return _super.prototype.tick.call(_this);
        });
      };
      D3StyleLayoutAdaptor2.prototype.on = function(eventType, listener) {
        if (typeof eventType === "string") {
          this.event.on(eventType, listener);
        } else {
          this.event.on(layout_1.EventType[eventType], listener);
        }
        return this;
      };
      return D3StyleLayoutAdaptor2;
    }(layout_1.Layout);
    exports.D3StyleLayoutAdaptor = D3StyleLayoutAdaptor;
    function d3adaptor() {
      return new D3StyleLayoutAdaptor();
    }
    exports.d3adaptor = d3adaptor;
  });

  // node_modules/webcola/dist/src/d3v4adaptor.js
  var require_d3v4adaptor = __commonJS((exports) => {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {value: true});
    var layout_1 = require_layout2();
    var D3StyleLayoutAdaptor = function(_super) {
      __extends(D3StyleLayoutAdaptor2, _super);
      function D3StyleLayoutAdaptor2(d3Context) {
        var _this = _super.call(this) || this;
        _this.d3Context = d3Context;
        _this.event = d3Context.dispatch(layout_1.EventType[layout_1.EventType.start], layout_1.EventType[layout_1.EventType.tick], layout_1.EventType[layout_1.EventType.end]);
        var d3layout = _this;
        var drag;
        _this.drag = function() {
          if (!drag2) {
            var drag2 = d3Context.drag().subject(layout_1.Layout.dragOrigin).on("start.d3adaptor", layout_1.Layout.dragStart).on("drag.d3adaptor", function(d) {
              layout_1.Layout.drag(d, d3Context.event);
              d3layout.resume();
            }).on("end.d3adaptor", layout_1.Layout.dragEnd);
          }
          if (!arguments.length)
            return drag2;
          arguments[0].call(drag2);
        };
        return _this;
      }
      D3StyleLayoutAdaptor2.prototype.trigger = function(e) {
        var d3event = {type: layout_1.EventType[e.type], alpha: e.alpha, stress: e.stress};
        this.event.call(d3event.type, d3event);
      };
      D3StyleLayoutAdaptor2.prototype.kick = function() {
        var _this = this;
        var t = this.d3Context.timer(function() {
          return _super.prototype.tick.call(_this) && t.stop();
        });
      };
      D3StyleLayoutAdaptor2.prototype.on = function(eventType, listener) {
        if (typeof eventType === "string") {
          this.event.on(eventType, listener);
        } else {
          this.event.on(layout_1.EventType[eventType], listener);
        }
        return this;
      };
      return D3StyleLayoutAdaptor2;
    }(layout_1.Layout);
    exports.D3StyleLayoutAdaptor = D3StyleLayoutAdaptor;
  });

  // node_modules/webcola/dist/src/d3adaptor.js
  var require_d3adaptor = __commonJS((exports) => {
    "use strict";
    Object.defineProperty(exports, "__esModule", {value: true});
    var d3v3 = require_d3v3adaptor();
    var d3v4 = require_d3v4adaptor();
    function d3adaptor(d3Context) {
      if (!d3Context || isD3V3(d3Context)) {
        return new d3v3.D3StyleLayoutAdaptor();
      }
      return new d3v4.D3StyleLayoutAdaptor(d3Context);
    }
    exports.d3adaptor = d3adaptor;
    function isD3V3(d3Context) {
      var v3exp = /^3\./;
      return d3Context.version && d3Context.version.match(v3exp) !== null;
    }
  });

  // node_modules/webcola/dist/src/gridrouter.js
  var require_gridrouter = __commonJS((exports) => {
    "use strict";
    Object.defineProperty(exports, "__esModule", {value: true});
    var rectangle_1 = require_rectangle();
    var vpsc_1 = require_vpsc();
    var shortestpaths_1 = require_shortestpaths();
    var NodeWrapper = function() {
      function NodeWrapper2(id, rect, children) {
        this.id = id;
        this.rect = rect;
        this.children = children;
        this.leaf = typeof children === "undefined" || children.length === 0;
      }
      return NodeWrapper2;
    }();
    exports.NodeWrapper = NodeWrapper;
    var Vert = function() {
      function Vert2(id, x, y, node, line) {
        if (node === void 0) {
          node = null;
        }
        if (line === void 0) {
          line = null;
        }
        this.id = id;
        this.x = x;
        this.y = y;
        this.node = node;
        this.line = line;
      }
      return Vert2;
    }();
    exports.Vert = Vert;
    var LongestCommonSubsequence = function() {
      function LongestCommonSubsequence2(s, t) {
        this.s = s;
        this.t = t;
        var mf = LongestCommonSubsequence2.findMatch(s, t);
        var tr = t.slice(0).reverse();
        var mr = LongestCommonSubsequence2.findMatch(s, tr);
        if (mf.length >= mr.length) {
          this.length = mf.length;
          this.si = mf.si;
          this.ti = mf.ti;
          this.reversed = false;
        } else {
          this.length = mr.length;
          this.si = mr.si;
          this.ti = t.length - mr.ti - mr.length;
          this.reversed = true;
        }
      }
      LongestCommonSubsequence2.findMatch = function(s, t) {
        var m = s.length;
        var n = t.length;
        var match = {length: 0, si: -1, ti: -1};
        var l = new Array(m);
        for (var i = 0; i < m; i++) {
          l[i] = new Array(n);
          for (var j = 0; j < n; j++)
            if (s[i] === t[j]) {
              var v = l[i][j] = i === 0 || j === 0 ? 1 : l[i - 1][j - 1] + 1;
              if (v > match.length) {
                match.length = v;
                match.si = i - v + 1;
                match.ti = j - v + 1;
              }
              ;
            } else
              l[i][j] = 0;
        }
        return match;
      };
      LongestCommonSubsequence2.prototype.getSequence = function() {
        return this.length >= 0 ? this.s.slice(this.si, this.si + this.length) : [];
      };
      return LongestCommonSubsequence2;
    }();
    exports.LongestCommonSubsequence = LongestCommonSubsequence;
    var GridRouter = function() {
      function GridRouter2(originalnodes, accessor, groupPadding) {
        var _this = this;
        if (groupPadding === void 0) {
          groupPadding = 12;
        }
        this.originalnodes = originalnodes;
        this.groupPadding = groupPadding;
        this.leaves = null;
        this.nodes = originalnodes.map(function(v, i) {
          return new NodeWrapper(i, accessor.getBounds(v), accessor.getChildren(v));
        });
        this.leaves = this.nodes.filter(function(v) {
          return v.leaf;
        });
        this.groups = this.nodes.filter(function(g) {
          return !g.leaf;
        });
        this.cols = this.getGridLines("x");
        this.rows = this.getGridLines("y");
        this.groups.forEach(function(v) {
          return v.children.forEach(function(c) {
            return _this.nodes[c].parent = v;
          });
        });
        this.root = {children: []};
        this.nodes.forEach(function(v) {
          if (typeof v.parent === "undefined") {
            v.parent = _this.root;
            _this.root.children.push(v.id);
          }
          v.ports = [];
        });
        this.backToFront = this.nodes.slice(0);
        this.backToFront.sort(function(x, y) {
          return _this.getDepth(x) - _this.getDepth(y);
        });
        var frontToBackGroups = this.backToFront.slice(0).reverse().filter(function(g) {
          return !g.leaf;
        });
        frontToBackGroups.forEach(function(v) {
          var r = rectangle_1.Rectangle.empty();
          v.children.forEach(function(c) {
            return r = r.union(_this.nodes[c].rect);
          });
          v.rect = r.inflate(_this.groupPadding);
        });
        var colMids = this.midPoints(this.cols.map(function(r) {
          return r.pos;
        }));
        var rowMids = this.midPoints(this.rows.map(function(r) {
          return r.pos;
        }));
        var rowx = colMids[0], rowX = colMids[colMids.length - 1];
        var coly = rowMids[0], colY = rowMids[rowMids.length - 1];
        var hlines = this.rows.map(function(r) {
          return {x1: rowx, x2: rowX, y1: r.pos, y2: r.pos};
        }).concat(rowMids.map(function(m) {
          return {x1: rowx, x2: rowX, y1: m, y2: m};
        }));
        var vlines = this.cols.map(function(c) {
          return {x1: c.pos, x2: c.pos, y1: coly, y2: colY};
        }).concat(colMids.map(function(m) {
          return {x1: m, x2: m, y1: coly, y2: colY};
        }));
        var lines = hlines.concat(vlines);
        lines.forEach(function(l) {
          return l.verts = [];
        });
        this.verts = [];
        this.edges = [];
        hlines.forEach(function(h) {
          return vlines.forEach(function(v) {
            var p = new Vert(_this.verts.length, v.x1, h.y1);
            h.verts.push(p);
            v.verts.push(p);
            _this.verts.push(p);
            var i = _this.backToFront.length;
            while (i-- > 0) {
              var node = _this.backToFront[i], r = node.rect;
              var dx = Math.abs(p.x - r.cx()), dy = Math.abs(p.y - r.cy());
              if (dx < r.width() / 2 && dy < r.height() / 2) {
                p.node = node;
                break;
              }
            }
          });
        });
        lines.forEach(function(l, li) {
          _this.nodes.forEach(function(v2, i2) {
            v2.rect.lineIntersections(l.x1, l.y1, l.x2, l.y2).forEach(function(intersect, j) {
              var p = new Vert(_this.verts.length, intersect.x, intersect.y, v2, l);
              _this.verts.push(p);
              l.verts.push(p);
              v2.ports.push(p);
            });
          });
          var isHoriz = Math.abs(l.y1 - l.y2) < 0.1;
          var delta = function(a, b) {
            return isHoriz ? b.x - a.x : b.y - a.y;
          };
          l.verts.sort(delta);
          for (var i = 1; i < l.verts.length; i++) {
            var u = l.verts[i - 1], v = l.verts[i];
            if (u.node && u.node === v.node && u.node.leaf)
              continue;
            _this.edges.push({source: u.id, target: v.id, length: Math.abs(delta(u, v))});
          }
        });
      }
      GridRouter2.prototype.avg = function(a) {
        return a.reduce(function(x, y) {
          return x + y;
        }) / a.length;
      };
      GridRouter2.prototype.getGridLines = function(axis) {
        var columns = [];
        var ls = this.leaves.slice(0, this.leaves.length);
        while (ls.length > 0) {
          var overlapping = ls.filter(function(v) {
            return v.rect["overlap" + axis.toUpperCase()](ls[0].rect);
          });
          var col = {
            nodes: overlapping,
            pos: this.avg(overlapping.map(function(v) {
              return v.rect["c" + axis]();
            }))
          };
          columns.push(col);
          col.nodes.forEach(function(v) {
            return ls.splice(ls.indexOf(v), 1);
          });
        }
        columns.sort(function(a, b) {
          return a.pos - b.pos;
        });
        return columns;
      };
      GridRouter2.prototype.getDepth = function(v) {
        var depth = 0;
        while (v.parent !== this.root) {
          depth++;
          v = v.parent;
        }
        return depth;
      };
      GridRouter2.prototype.midPoints = function(a) {
        var gap = a[1] - a[0];
        var mids = [a[0] - gap / 2];
        for (var i = 1; i < a.length; i++) {
          mids.push((a[i] + a[i - 1]) / 2);
        }
        mids.push(a[a.length - 1] + gap / 2);
        return mids;
      };
      GridRouter2.prototype.findLineage = function(v) {
        var lineage = [v];
        do {
          v = v.parent;
          lineage.push(v);
        } while (v !== this.root);
        return lineage.reverse();
      };
      GridRouter2.prototype.findAncestorPathBetween = function(a, b) {
        var aa = this.findLineage(a), ba = this.findLineage(b), i = 0;
        while (aa[i] === ba[i])
          i++;
        return {commonAncestor: aa[i - 1], lineages: aa.slice(i).concat(ba.slice(i))};
      };
      GridRouter2.prototype.siblingObstacles = function(a, b) {
        var _this = this;
        var path = this.findAncestorPathBetween(a, b);
        var lineageLookup = {};
        path.lineages.forEach(function(v) {
          return lineageLookup[v.id] = {};
        });
        var obstacles = path.commonAncestor.children.filter(function(v) {
          return !(v in lineageLookup);
        });
        path.lineages.filter(function(v) {
          return v.parent !== path.commonAncestor;
        }).forEach(function(v) {
          return obstacles = obstacles.concat(v.parent.children.filter(function(c) {
            return c !== v.id;
          }));
        });
        return obstacles.map(function(v) {
          return _this.nodes[v];
        });
      };
      GridRouter2.getSegmentSets = function(routes, x, y) {
        var vsegments = [];
        for (var ei = 0; ei < routes.length; ei++) {
          var route = routes[ei];
          for (var si = 0; si < route.length; si++) {
            var s = route[si];
            s.edgeid = ei;
            s.i = si;
            var sdx = s[1][x] - s[0][x];
            if (Math.abs(sdx) < 0.1) {
              vsegments.push(s);
            }
          }
        }
        vsegments.sort(function(a, b) {
          return a[0][x] - b[0][x];
        });
        var vsegmentsets = [];
        var segmentset = null;
        for (var i = 0; i < vsegments.length; i++) {
          var s = vsegments[i];
          if (!segmentset || Math.abs(s[0][x] - segmentset.pos) > 0.1) {
            segmentset = {pos: s[0][x], segments: []};
            vsegmentsets.push(segmentset);
          }
          segmentset.segments.push(s);
        }
        return vsegmentsets;
      };
      GridRouter2.nudgeSegs = function(x, y, routes, segments, leftOf, gap) {
        var n = segments.length;
        if (n <= 1)
          return;
        var vs = segments.map(function(s) {
          return new vpsc_1.Variable(s[0][x]);
        });
        var cs = [];
        for (var i = 0; i < n; i++) {
          for (var j = 0; j < n; j++) {
            if (i === j)
              continue;
            var s1 = segments[i], s2 = segments[j], e1 = s1.edgeid, e2 = s2.edgeid, lind = -1, rind = -1;
            if (x == "x") {
              if (leftOf(e1, e2)) {
                if (s1[0][y] < s1[1][y]) {
                  lind = j, rind = i;
                } else {
                  lind = i, rind = j;
                }
              }
            } else {
              if (leftOf(e1, e2)) {
                if (s1[0][y] < s1[1][y]) {
                  lind = i, rind = j;
                } else {
                  lind = j, rind = i;
                }
              }
            }
            if (lind >= 0) {
              cs.push(new vpsc_1.Constraint(vs[lind], vs[rind], gap));
            }
          }
        }
        var solver = new vpsc_1.Solver(vs, cs);
        solver.solve();
        vs.forEach(function(v, i2) {
          var s = segments[i2];
          var pos = v.position();
          s[0][x] = s[1][x] = pos;
          var route = routes[s.edgeid];
          if (s.i > 0)
            route[s.i - 1][1][x] = pos;
          if (s.i < route.length - 1)
            route[s.i + 1][0][x] = pos;
        });
      };
      GridRouter2.nudgeSegments = function(routes, x, y, leftOf, gap) {
        var vsegmentsets = GridRouter2.getSegmentSets(routes, x, y);
        for (var i = 0; i < vsegmentsets.length; i++) {
          var ss = vsegmentsets[i];
          var events = [];
          for (var j = 0; j < ss.segments.length; j++) {
            var s = ss.segments[j];
            events.push({type: 0, s, pos: Math.min(s[0][y], s[1][y])});
            events.push({type: 1, s, pos: Math.max(s[0][y], s[1][y])});
          }
          events.sort(function(a, b) {
            return a.pos - b.pos + a.type - b.type;
          });
          var open = [];
          var openCount = 0;
          events.forEach(function(e) {
            if (e.type === 0) {
              open.push(e.s);
              openCount++;
            } else {
              openCount--;
            }
            if (openCount == 0) {
              GridRouter2.nudgeSegs(x, y, routes, open, leftOf, gap);
              open = [];
            }
          });
        }
      };
      GridRouter2.prototype.routeEdges = function(edges, nudgeGap, source, target) {
        var _this = this;
        var routePaths = edges.map(function(e) {
          return _this.route(source(e), target(e));
        });
        var order = GridRouter2.orderEdges(routePaths);
        var routes = routePaths.map(function(e) {
          return GridRouter2.makeSegments(e);
        });
        GridRouter2.nudgeSegments(routes, "x", "y", order, nudgeGap);
        GridRouter2.nudgeSegments(routes, "y", "x", order, nudgeGap);
        GridRouter2.unreverseEdges(routes, routePaths);
        return routes;
      };
      GridRouter2.unreverseEdges = function(routes, routePaths) {
        routes.forEach(function(segments, i) {
          var path = routePaths[i];
          if (path.reversed) {
            segments.reverse();
            segments.forEach(function(segment) {
              segment.reverse();
            });
          }
        });
      };
      GridRouter2.angleBetween2Lines = function(line1, line2) {
        var angle1 = Math.atan2(line1[0].y - line1[1].y, line1[0].x - line1[1].x);
        var angle2 = Math.atan2(line2[0].y - line2[1].y, line2[0].x - line2[1].x);
        var diff = angle1 - angle2;
        if (diff > Math.PI || diff < -Math.PI) {
          diff = angle2 - angle1;
        }
        return diff;
      };
      GridRouter2.isLeft = function(a, b, c) {
        return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x) <= 0;
      };
      GridRouter2.getOrder = function(pairs) {
        var outgoing = {};
        for (var i = 0; i < pairs.length; i++) {
          var p = pairs[i];
          if (typeof outgoing[p.l] === "undefined")
            outgoing[p.l] = {};
          outgoing[p.l][p.r] = true;
        }
        return function(l, r) {
          return typeof outgoing[l] !== "undefined" && outgoing[l][r];
        };
      };
      GridRouter2.orderEdges = function(edges) {
        var edgeOrder = [];
        for (var i = 0; i < edges.length - 1; i++) {
          for (var j = i + 1; j < edges.length; j++) {
            var e = edges[i], f = edges[j], lcs = new LongestCommonSubsequence(e, f);
            var u, vi, vj;
            if (lcs.length === 0)
              continue;
            if (lcs.reversed) {
              f.reverse();
              f.reversed = true;
              lcs = new LongestCommonSubsequence(e, f);
            }
            if ((lcs.si <= 0 || lcs.ti <= 0) && (lcs.si + lcs.length >= e.length || lcs.ti + lcs.length >= f.length)) {
              edgeOrder.push({l: i, r: j});
              continue;
            }
            if (lcs.si + lcs.length >= e.length || lcs.ti + lcs.length >= f.length) {
              u = e[lcs.si + 1];
              vj = e[lcs.si - 1];
              vi = f[lcs.ti - 1];
            } else {
              u = e[lcs.si + lcs.length - 2];
              vi = e[lcs.si + lcs.length];
              vj = f[lcs.ti + lcs.length];
            }
            if (GridRouter2.isLeft(u, vi, vj)) {
              edgeOrder.push({l: j, r: i});
            } else {
              edgeOrder.push({l: i, r: j});
            }
          }
        }
        return GridRouter2.getOrder(edgeOrder);
      };
      GridRouter2.makeSegments = function(path) {
        function copyPoint(p) {
          return {x: p.x, y: p.y};
        }
        var isStraight = function(a2, b2, c2) {
          return Math.abs((b2.x - a2.x) * (c2.y - a2.y) - (b2.y - a2.y) * (c2.x - a2.x)) < 1e-3;
        };
        var segments = [];
        var a = copyPoint(path[0]);
        for (var i = 1; i < path.length; i++) {
          var b = copyPoint(path[i]), c = i < path.length - 1 ? path[i + 1] : null;
          if (!c || !isStraight(a, b, c)) {
            segments.push([a, b]);
            a = b;
          }
        }
        return segments;
      };
      GridRouter2.prototype.route = function(s, t) {
        var _this = this;
        var source = this.nodes[s], target = this.nodes[t];
        this.obstacles = this.siblingObstacles(source, target);
        var obstacleLookup = {};
        this.obstacles.forEach(function(o2) {
          return obstacleLookup[o2.id] = o2;
        });
        this.passableEdges = this.edges.filter(function(e) {
          var u2 = _this.verts[e.source], v2 = _this.verts[e.target];
          return !(u2.node && u2.node.id in obstacleLookup || v2.node && v2.node.id in obstacleLookup);
        });
        for (var i = 1; i < source.ports.length; i++) {
          var u = source.ports[0].id;
          var v = source.ports[i].id;
          this.passableEdges.push({
            source: u,
            target: v,
            length: 0
          });
        }
        for (var i = 1; i < target.ports.length; i++) {
          var u = target.ports[0].id;
          var v = target.ports[i].id;
          this.passableEdges.push({
            source: u,
            target: v,
            length: 0
          });
        }
        var getSource = function(e) {
          return e.source;
        }, getTarget = function(e) {
          return e.target;
        }, getLength = function(e) {
          return e.length;
        };
        var shortestPathCalculator = new shortestpaths_1.Calculator(this.verts.length, this.passableEdges, getSource, getTarget, getLength);
        var bendPenalty = function(u2, v2, w) {
          var a = _this.verts[u2], b = _this.verts[v2], c = _this.verts[w];
          var dx = Math.abs(c.x - a.x), dy = Math.abs(c.y - a.y);
          if (a.node === source && a.node === b.node || b.node === target && b.node === c.node)
            return 0;
          return dx > 1 && dy > 1 ? 1e3 : 0;
        };
        var shortestPath = shortestPathCalculator.PathFromNodeToNodeWithPrevCost(source.ports[0].id, target.ports[0].id, bendPenalty);
        var pathPoints = shortestPath.reverse().map(function(vi) {
          return _this.verts[vi];
        });
        pathPoints.push(this.nodes[target.id].ports[0]);
        return pathPoints.filter(function(v2, i2) {
          return !(i2 < pathPoints.length - 1 && pathPoints[i2 + 1].node === source && v2.node === source || i2 > 0 && v2.node === target && pathPoints[i2 - 1].node === target);
        });
      };
      GridRouter2.getRoutePath = function(route, cornerradius, arrowwidth, arrowheight) {
        var result = {
          routepath: "M " + route[0][0].x + " " + route[0][0].y + " ",
          arrowpath: ""
        };
        if (route.length > 1) {
          for (var i = 0; i < route.length; i++) {
            var li = route[i];
            var x = li[1].x, y = li[1].y;
            var dx = x - li[0].x;
            var dy = y - li[0].y;
            if (i < route.length - 1) {
              if (Math.abs(dx) > 0) {
                x -= dx / Math.abs(dx) * cornerradius;
              } else {
                y -= dy / Math.abs(dy) * cornerradius;
              }
              result.routepath += "L " + x + " " + y + " ";
              var l = route[i + 1];
              var x0 = l[0].x, y0 = l[0].y;
              var x1 = l[1].x;
              var y1 = l[1].y;
              dx = x1 - x0;
              dy = y1 - y0;
              var angle = GridRouter2.angleBetween2Lines(li, l) < 0 ? 1 : 0;
              var x2, y2;
              if (Math.abs(dx) > 0) {
                x2 = x0 + dx / Math.abs(dx) * cornerradius;
                y2 = y0;
              } else {
                x2 = x0;
                y2 = y0 + dy / Math.abs(dy) * cornerradius;
              }
              var cx = Math.abs(x2 - x);
              var cy = Math.abs(y2 - y);
              result.routepath += "A " + cx + " " + cy + " 0 0 " + angle + " " + x2 + " " + y2 + " ";
            } else {
              var arrowtip = [x, y];
              var arrowcorner1, arrowcorner2;
              if (Math.abs(dx) > 0) {
                x -= dx / Math.abs(dx) * arrowheight;
                arrowcorner1 = [x, y + arrowwidth];
                arrowcorner2 = [x, y - arrowwidth];
              } else {
                y -= dy / Math.abs(dy) * arrowheight;
                arrowcorner1 = [x + arrowwidth, y];
                arrowcorner2 = [x - arrowwidth, y];
              }
              result.routepath += "L " + x + " " + y + " ";
              if (arrowheight > 0) {
                result.arrowpath = "M " + arrowtip[0] + " " + arrowtip[1] + " L " + arrowcorner1[0] + " " + arrowcorner1[1] + " L " + arrowcorner2[0] + " " + arrowcorner2[1];
              }
            }
          }
        } else {
          var li = route[0];
          var x = li[1].x, y = li[1].y;
          var dx = x - li[0].x;
          var dy = y - li[0].y;
          var arrowtip = [x, y];
          var arrowcorner1, arrowcorner2;
          if (Math.abs(dx) > 0) {
            x -= dx / Math.abs(dx) * arrowheight;
            arrowcorner1 = [x, y + arrowwidth];
            arrowcorner2 = [x, y - arrowwidth];
          } else {
            y -= dy / Math.abs(dy) * arrowheight;
            arrowcorner1 = [x + arrowwidth, y];
            arrowcorner2 = [x - arrowwidth, y];
          }
          result.routepath += "L " + x + " " + y + " ";
          if (arrowheight > 0) {
            result.arrowpath = "M " + arrowtip[0] + " " + arrowtip[1] + " L " + arrowcorner1[0] + " " + arrowcorner1[1] + " L " + arrowcorner2[0] + " " + arrowcorner2[1];
          }
        }
        return result;
      };
      return GridRouter2;
    }();
    exports.GridRouter = GridRouter;
  });

  // node_modules/webcola/dist/src/layout3d.js
  var require_layout3d = __commonJS((exports) => {
    "use strict";
    Object.defineProperty(exports, "__esModule", {value: true});
    var shortestpaths_1 = require_shortestpaths();
    var descent_1 = require_descent();
    var rectangle_1 = require_rectangle();
    var linklengths_1 = require_linklengths();
    var Link3D = function() {
      function Link3D2(source, target) {
        this.source = source;
        this.target = target;
      }
      Link3D2.prototype.actualLength = function(x) {
        var _this = this;
        return Math.sqrt(x.reduce(function(c, v) {
          var dx = v[_this.target] - v[_this.source];
          return c + dx * dx;
        }, 0));
      };
      return Link3D2;
    }();
    exports.Link3D = Link3D;
    var Node3D = function() {
      function Node3D2(x, y, z) {
        if (x === void 0) {
          x = 0;
        }
        if (y === void 0) {
          y = 0;
        }
        if (z === void 0) {
          z = 0;
        }
        this.x = x;
        this.y = y;
        this.z = z;
      }
      return Node3D2;
    }();
    exports.Node3D = Node3D;
    var Layout3D = function() {
      function Layout3D2(nodes, links, idealLinkLength) {
        var _this = this;
        if (idealLinkLength === void 0) {
          idealLinkLength = 1;
        }
        this.nodes = nodes;
        this.links = links;
        this.idealLinkLength = idealLinkLength;
        this.constraints = null;
        this.useJaccardLinkLengths = true;
        this.result = new Array(Layout3D2.k);
        for (var i = 0; i < Layout3D2.k; ++i) {
          this.result[i] = new Array(nodes.length);
        }
        nodes.forEach(function(v, i2) {
          for (var _i = 0, _a = Layout3D2.dims; _i < _a.length; _i++) {
            var dim = _a[_i];
            if (typeof v[dim] == "undefined")
              v[dim] = Math.random();
          }
          _this.result[0][i2] = v.x;
          _this.result[1][i2] = v.y;
          _this.result[2][i2] = v.z;
        });
      }
      ;
      Layout3D2.prototype.linkLength = function(l) {
        return l.actualLength(this.result);
      };
      Layout3D2.prototype.start = function(iterations) {
        var _this = this;
        if (iterations === void 0) {
          iterations = 100;
        }
        var n = this.nodes.length;
        var linkAccessor = new LinkAccessor();
        if (this.useJaccardLinkLengths)
          linklengths_1.jaccardLinkLengths(this.links, linkAccessor, 1.5);
        this.links.forEach(function(e) {
          return e.length *= _this.idealLinkLength;
        });
        var distanceMatrix = new shortestpaths_1.Calculator(n, this.links, function(e) {
          return e.source;
        }, function(e) {
          return e.target;
        }, function(e) {
          return e.length;
        }).DistanceMatrix();
        var D = descent_1.Descent.createSquareMatrix(n, function(i2, j) {
          return distanceMatrix[i2][j];
        });
        var G = descent_1.Descent.createSquareMatrix(n, function() {
          return 2;
        });
        this.links.forEach(function(_a) {
          var source = _a.source, target = _a.target;
          return G[source][target] = G[target][source] = 1;
        });
        this.descent = new descent_1.Descent(this.result, D);
        this.descent.threshold = 1e-3;
        this.descent.G = G;
        if (this.constraints)
          this.descent.project = new rectangle_1.Projection(this.nodes, null, null, this.constraints).projectFunctions();
        for (var i = 0; i < this.nodes.length; i++) {
          var v = this.nodes[i];
          if (v.fixed) {
            this.descent.locks.add(i, [v.x, v.y, v.z]);
          }
        }
        this.descent.run(iterations);
        return this;
      };
      Layout3D2.prototype.tick = function() {
        this.descent.locks.clear();
        for (var i = 0; i < this.nodes.length; i++) {
          var v = this.nodes[i];
          if (v.fixed) {
            this.descent.locks.add(i, [v.x, v.y, v.z]);
          }
        }
        return this.descent.rungeKutta();
      };
      Layout3D2.dims = ["x", "y", "z"];
      Layout3D2.k = Layout3D2.dims.length;
      return Layout3D2;
    }();
    exports.Layout3D = Layout3D;
    var LinkAccessor = function() {
      function LinkAccessor2() {
      }
      LinkAccessor2.prototype.getSourceIndex = function(e) {
        return e.source;
      };
      LinkAccessor2.prototype.getTargetIndex = function(e) {
        return e.target;
      };
      LinkAccessor2.prototype.getLength = function(e) {
        return e.length;
      };
      LinkAccessor2.prototype.setLength = function(e, l) {
        e.length = l;
      };
      return LinkAccessor2;
    }();
  });

  // node_modules/webcola/dist/src/batch.js
  var require_batch = __commonJS((exports) => {
    "use strict";
    Object.defineProperty(exports, "__esModule", {value: true});
    var layout_1 = require_layout2();
    var gridrouter_1 = require_gridrouter();
    function gridify(pgLayout, nudgeGap, margin, groupMargin) {
      pgLayout.cola.start(0, 0, 0, 10, false);
      var gridrouter = route(pgLayout.cola.nodes(), pgLayout.cola.groups(), margin, groupMargin);
      return gridrouter.routeEdges(pgLayout.powerGraph.powerEdges, nudgeGap, function(e) {
        return e.source.routerNode.id;
      }, function(e) {
        return e.target.routerNode.id;
      });
    }
    exports.gridify = gridify;
    function route(nodes, groups, margin, groupMargin) {
      nodes.forEach(function(d) {
        d.routerNode = {
          name: d.name,
          bounds: d.bounds.inflate(-margin)
        };
      });
      groups.forEach(function(d) {
        d.routerNode = {
          bounds: d.bounds.inflate(-groupMargin),
          children: (typeof d.groups !== "undefined" ? d.groups.map(function(c) {
            return nodes.length + c.id;
          }) : []).concat(typeof d.leaves !== "undefined" ? d.leaves.map(function(c) {
            return c.index;
          }) : [])
        };
      });
      var gridRouterNodes = nodes.concat(groups).map(function(d, i) {
        d.routerNode.id = i;
        return d.routerNode;
      });
      return new gridrouter_1.GridRouter(gridRouterNodes, {
        getChildren: function(v) {
          return v.children;
        },
        getBounds: function(v) {
          return v.bounds;
        }
      }, margin - groupMargin);
    }
    function powerGraphGridLayout(graph, size, grouppadding) {
      var powerGraph;
      graph.nodes.forEach(function(v, i) {
        return v.index = i;
      });
      new layout_1.Layout().avoidOverlaps(false).nodes(graph.nodes).links(graph.links).powerGraphGroups(function(d) {
        powerGraph = d;
        powerGraph.groups.forEach(function(v) {
          return v.padding = grouppadding;
        });
      });
      var n = graph.nodes.length;
      var edges = [];
      var vs = graph.nodes.slice(0);
      vs.forEach(function(v, i) {
        return v.index = i;
      });
      powerGraph.groups.forEach(function(g) {
        var sourceInd = g.index = g.id + n;
        vs.push(g);
        if (typeof g.leaves !== "undefined")
          g.leaves.forEach(function(v) {
            return edges.push({source: sourceInd, target: v.index});
          });
        if (typeof g.groups !== "undefined")
          g.groups.forEach(function(gg) {
            return edges.push({source: sourceInd, target: gg.id + n});
          });
      });
      powerGraph.powerEdges.forEach(function(e) {
        edges.push({source: e.source.index, target: e.target.index});
      });
      new layout_1.Layout().size(size).nodes(vs).links(edges).avoidOverlaps(false).linkDistance(30).symmetricDiffLinkLengths(5).convergenceThreshold(1e-4).start(100, 0, 0, 0, false);
      return {
        cola: new layout_1.Layout().convergenceThreshold(1e-3).size(size).avoidOverlaps(true).nodes(graph.nodes).links(graph.links).groupCompactness(1e-4).linkDistance(30).symmetricDiffLinkLengths(5).powerGraphGroups(function(d) {
          powerGraph = d;
          powerGraph.groups.forEach(function(v) {
            v.padding = grouppadding;
          });
        }).start(50, 0, 100, 0, false),
        powerGraph
      };
    }
    exports.powerGraphGridLayout = powerGraphGridLayout;
  });

  // node_modules/webcola/dist/index.js
  var require_dist = __commonJS((exports) => {
    "use strict";
    function __export(m) {
      for (var p in m)
        if (!exports.hasOwnProperty(p))
          exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", {value: true});
    __export(require_adaptor());
    __export(require_d3adaptor());
    __export(require_descent());
    __export(require_geom());
    __export(require_gridrouter());
    __export(require_handledisconnected());
    __export(require_layout2());
    __export(require_layout3d());
    __export(require_linklengths());
    __export(require_powergraph());
    __export(require_pqueue());
    __export(require_rbtree());
    __export(require_rectangle());
    __export(require_shortestpaths());
    __export(require_vpsc());
    __export(require_batch());
  });

  // node_modules/cytoscape-cola/cytoscape-cola.js
  var require_cytoscape_cola = __commonJS((exports, module) => {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory(require_dist());
      else if (typeof define === "function" && define.amd)
        define(["webcola"], factory);
      else if (typeof exports === "object")
        exports["cytoscapeCola"] = factory(require_dist());
      else
        root["cytoscapeCola"] = factory(root["webcola"]);
    })(exports, function(__WEBPACK_EXTERNAL_MODULE_5__) {
      return function(modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
          if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
          }
          var module2 = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
          };
          modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
          module2.l = true;
          return module2.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.i = function(value) {
          return value;
        };
        __webpack_require__.d = function(exports2, name, getter) {
          if (!__webpack_require__.o(exports2, name)) {
            Object.defineProperty(exports2, name, {
              configurable: false,
              enumerable: true,
              get: getter
            });
          }
        };
        __webpack_require__.n = function(module2) {
          var getter = module2 && module2.__esModule ? function getDefault() {
            return module2["default"];
          } : function getModuleExports() {
            return module2;
          };
          __webpack_require__.d(getter, "a", getter);
          return getter;
        };
        __webpack_require__.o = function(object, property) {
          return Object.prototype.hasOwnProperty.call(object, property);
        };
        __webpack_require__.p = "";
        return __webpack_require__(__webpack_require__.s = 3);
      }([
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
            return typeof obj;
          } : function(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
          var assign = __webpack_require__(1);
          var defaults = __webpack_require__(2);
          var cola2 = __webpack_require__(5) || (typeof window !== "undefined" ? window.cola : null);
          var raf = __webpack_require__(4);
          var isString = function isString2(o2) {
            return (typeof o2 === "undefined" ? "undefined" : _typeof(o2)) === _typeof("");
          };
          var isNumber = function isNumber2(o2) {
            return (typeof o2 === "undefined" ? "undefined" : _typeof(o2)) === _typeof(0);
          };
          var isObject = function isObject2(o2) {
            return o2 != null && (typeof o2 === "undefined" ? "undefined" : _typeof(o2)) === _typeof({});
          };
          var isFunction = function isFunction2(o2) {
            return o2 != null && (typeof o2 === "undefined" ? "undefined" : _typeof(o2)) === _typeof(function() {
            });
          };
          var nop = function nop2() {
          };
          var getOptVal = function getOptVal2(val, ele) {
            if (isFunction(val)) {
              var fn = val;
              return fn.apply(ele, [ele]);
            } else {
              return val;
            }
          };
          function ColaLayout(options) {
            this.options = assign({}, defaults, options);
          }
          ColaLayout.prototype.run = function() {
            var layout = this;
            var options = this.options;
            layout.manuallyStopped = false;
            var cy = options.cy;
            var eles = options.eles;
            var nodes = eles.nodes();
            var edges = eles.edges();
            var ready = false;
            var isParent = function isParent2(ele) {
              return ele.isParent();
            };
            var parentNodes = nodes.filter(isParent);
            var nonparentNodes = nodes.subtract(parentNodes);
            var bb = options.boundingBox || {x1: 0, y1: 0, w: cy.width(), h: cy.height()};
            if (bb.x2 === void 0) {
              bb.x2 = bb.x1 + bb.w;
            }
            if (bb.w === void 0) {
              bb.w = bb.x2 - bb.x1;
            }
            if (bb.y2 === void 0) {
              bb.y2 = bb.y1 + bb.h;
            }
            if (bb.h === void 0) {
              bb.h = bb.y2 - bb.y1;
            }
            var updateNodePositions = function updateNodePositions2() {
              for (var i = 0; i < nodes.length; i++) {
                var node = nodes[i];
                var dimensions = node.layoutDimensions(options);
                var scratch = node.scratch("cola");
                if (!scratch.updatedDims) {
                  var padding = getOptVal(options.nodeSpacing, node);
                  scratch.width = dimensions.w + 2 * padding;
                  scratch.height = dimensions.h + 2 * padding;
                }
              }
              nodes.positions(function(node2) {
                var scratch2 = node2.scratch().cola;
                var retPos = void 0;
                if (!node2.grabbed() && nonparentNodes.contains(node2)) {
                  retPos = {
                    x: bb.x1 + scratch2.x,
                    y: bb.y1 + scratch2.y
                  };
                  if (!isNumber(retPos.x) || !isNumber(retPos.y)) {
                    retPos = void 0;
                  }
                }
                return retPos;
              });
              nodes.updateCompoundBounds();
              if (!ready) {
                onReady();
                ready = true;
              }
              if (options.fit) {
                cy.fit(options.padding);
              }
            };
            var onDone = function onDone2() {
              if (options.ungrabifyWhileSimulating) {
                grabbableNodes.grabify();
              }
              cy.off("destroy", destroyHandler);
              nodes.off("grab free position", grabHandler);
              nodes.off("lock unlock", lockHandler);
              layout.one("layoutstop", options.stop);
              layout.trigger({type: "layoutstop", layout});
            };
            var onReady = function onReady2() {
              layout.one("layoutready", options.ready);
              layout.trigger({type: "layoutready", layout});
            };
            var ticksPerFrame = options.refresh;
            if (options.refresh < 0) {
              ticksPerFrame = 1;
            } else {
              ticksPerFrame = Math.max(1, ticksPerFrame);
            }
            var adaptor = layout.adaptor = cola2.adaptor({
              trigger: function trigger(e) {
                var TICK = cola2.EventType ? cola2.EventType.tick : null;
                var END = cola2.EventType ? cola2.EventType.end : null;
                switch (e.type) {
                  case "tick":
                  case TICK:
                    if (options.animate) {
                      updateNodePositions();
                    }
                    break;
                  case "end":
                  case END:
                    updateNodePositions();
                    if (!options.infinite) {
                      onDone();
                    }
                    break;
                }
              },
              kick: function kick() {
                var firstTick = true;
                var inftick = function inftick2() {
                  if (layout.manuallyStopped) {
                    onDone();
                    return true;
                  }
                  var ret = adaptor.tick();
                  if (!options.infinite && !firstTick) {
                    adaptor.convergenceThreshold(options.convergenceThreshold);
                  }
                  firstTick = false;
                  if (ret && options.infinite) {
                    adaptor.resume();
                  }
                  return ret;
                };
                var multitick = function multitick2() {
                  var ret = void 0;
                  for (var i = 0; i < ticksPerFrame && !ret; i++) {
                    ret = ret || inftick();
                  }
                  return ret;
                };
                if (options.animate) {
                  var frame = function frame2() {
                    if (multitick()) {
                      return;
                    }
                    raf(frame2);
                  };
                  raf(frame);
                } else {
                  while (!inftick()) {
                  }
                }
              },
              on: nop,
              drag: nop
            });
            layout.adaptor = adaptor;
            var grabbableNodes = nodes.filter(":grabbable");
            if (options.ungrabifyWhileSimulating) {
              grabbableNodes.ungrabify();
            }
            var destroyHandler = void 0;
            cy.one("destroy", destroyHandler = function destroyHandler2() {
              layout.stop();
            });
            var grabHandler = void 0;
            nodes.on("grab free position", grabHandler = function grabHandler2(e) {
              var node = this;
              var scrCola = node.scratch().cola;
              var pos = node.position();
              var nodeIsTarget = e.cyTarget === node || e.target === node;
              if (!nodeIsTarget) {
                return;
              }
              switch (e.type) {
                case "grab":
                  adaptor.dragstart(scrCola);
                  break;
                case "free":
                  adaptor.dragend(scrCola);
                  break;
                case "position":
                  if (scrCola.px !== pos.x - bb.x1 || scrCola.py !== pos.y - bb.y1) {
                    scrCola.px = pos.x - bb.x1;
                    scrCola.py = pos.y - bb.y1;
                  }
                  break;
              }
            });
            var lockHandler = void 0;
            nodes.on("lock unlock", lockHandler = function lockHandler2() {
              var node = this;
              var scrCola = node.scratch().cola;
              scrCola.fixed = node.locked();
              if (node.locked()) {
                adaptor.dragstart(scrCola);
              } else {
                adaptor.dragend(scrCola);
              }
            });
            adaptor.nodes(nonparentNodes.map(function(node, i) {
              var padding = getOptVal(options.nodeSpacing, node);
              var pos = node.position();
              var dimensions = node.layoutDimensions(options);
              var struct = node.scratch().cola = {
                x: options.randomize && !node.locked() || pos.x === void 0 ? Math.round(Math.random() * bb.w) : pos.x,
                y: options.randomize && !node.locked() || pos.y === void 0 ? Math.round(Math.random() * bb.h) : pos.y,
                width: dimensions.w + 2 * padding,
                height: dimensions.h + 2 * padding,
                index: i,
                fixed: node.locked()
              };
              return struct;
            }));
            var constraints = [];
            if (options.alignment) {
              if (options.alignment.vertical) {
                var verticalAlignments = options.alignment.vertical;
                verticalAlignments.forEach(function(alignment) {
                  var offsetsX = [];
                  alignment.forEach(function(nodeData) {
                    var node = nodeData.node;
                    var scrCola = node.scratch().cola;
                    var index = scrCola.index;
                    offsetsX.push({
                      node: index,
                      offset: nodeData.offset ? nodeData.offset : 0
                    });
                  });
                  constraints.push({
                    type: "alignment",
                    axis: "x",
                    offsets: offsetsX
                  });
                });
              }
              if (options.alignment.horizontal) {
                var horizontalAlignments = options.alignment.horizontal;
                horizontalAlignments.forEach(function(alignment) {
                  var offsetsY = [];
                  alignment.forEach(function(nodeData) {
                    var node = nodeData.node;
                    var scrCola = node.scratch().cola;
                    var index = scrCola.index;
                    offsetsY.push({
                      node: index,
                      offset: nodeData.offset ? nodeData.offset : 0
                    });
                  });
                  constraints.push({
                    type: "alignment",
                    axis: "y",
                    offsets: offsetsY
                  });
                });
              }
            }
            if (options.gapInequalities) {
              options.gapInequalities.forEach(function(inequality) {
                var leftIndex = inequality.left.scratch().cola.index;
                var rightIndex = inequality.right.scratch().cola.index;
                constraints.push({
                  axis: inequality.axis,
                  left: leftIndex,
                  right: rightIndex,
                  gap: inequality.gap,
                  equality: inequality.equality
                });
              });
            }
            if (constraints.length > 0) {
              adaptor.constraints(constraints);
            }
            adaptor.groups(parentNodes.map(function(node, i) {
              var optPadding = getOptVal(options.nodeSpacing, node);
              var getPadding = function getPadding2(d) {
                return parseFloat(node.style("padding-" + d));
              };
              var pleft = getPadding("left") + optPadding;
              var pright = getPadding("right") + optPadding;
              var ptop = getPadding("top") + optPadding;
              var pbottom = getPadding("bottom") + optPadding;
              node.scratch().cola = {
                index: i,
                padding: Math.max(pleft, pright, ptop, pbottom),
                leaves: node.children().intersection(nonparentNodes).map(function(child) {
                  return child[0].scratch().cola.index;
                }),
                fixed: node.locked()
              };
              return node;
            }).map(function(node) {
              node.scratch().cola.groups = node.children().intersection(parentNodes).map(function(child) {
                return child.scratch().cola.index;
              });
              return node.scratch().cola;
            }));
            var length = void 0;
            var lengthFnName = void 0;
            if (options.edgeLength != null) {
              length = options.edgeLength;
              lengthFnName = "linkDistance";
            } else if (options.edgeSymDiffLength != null) {
              length = options.edgeSymDiffLength;
              lengthFnName = "symmetricDiffLinkLengths";
            } else if (options.edgeJaccardLength != null) {
              length = options.edgeJaccardLength;
              lengthFnName = "jaccardLinkLengths";
            } else {
              length = 100;
              lengthFnName = "linkDistance";
            }
            var lengthGetter = function lengthGetter2(link) {
              return link.calcLength;
            };
            adaptor.links(edges.stdFilter(function(edge) {
              return nonparentNodes.contains(edge.source()) && nonparentNodes.contains(edge.target());
            }).map(function(edge) {
              var c = edge.scratch().cola = {
                source: edge.source()[0].scratch().cola.index,
                target: edge.target()[0].scratch().cola.index
              };
              if (length != null) {
                c.calcLength = getOptVal(length, edge);
              }
              return c;
            }));
            adaptor.size([bb.w, bb.h]);
            if (length != null) {
              adaptor[lengthFnName](lengthGetter);
            }
            if (options.flow) {
              var flow = void 0;
              var defAxis = "y";
              var defMinSep = 50;
              if (isString(options.flow)) {
                flow = {
                  axis: options.flow,
                  minSeparation: defMinSep
                };
              } else if (isNumber(options.flow)) {
                flow = {
                  axis: defAxis,
                  minSeparation: options.flow
                };
              } else if (isObject(options.flow)) {
                flow = options.flow;
                flow.axis = flow.axis || defAxis;
                flow.minSeparation = flow.minSeparation != null ? flow.minSeparation : defMinSep;
              } else {
                flow = {
                  axis: defAxis,
                  minSeparation: defMinSep
                };
              }
              adaptor.flowLayout(flow.axis, flow.minSeparation);
            }
            layout.trigger({type: "layoutstart", layout});
            adaptor.avoidOverlaps(options.avoidOverlap).handleDisconnected(options.handleDisconnected).start(options.unconstrIter, options.userConstIter, options.allConstIter);
            if (!options.infinite) {
              setTimeout(function() {
                if (!layout.manuallyStopped) {
                  adaptor.stop();
                }
              }, options.maxSimulationTime);
            }
            return this;
          };
          ColaLayout.prototype.stop = function() {
            if (this.adaptor) {
              this.manuallyStopped = true;
              this.adaptor.stop();
            }
            return this;
          };
          module2.exports = ColaLayout;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          module2.exports = Object.assign != null ? Object.assign.bind(Object) : function(tgt) {
            for (var _len = arguments.length, srcs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              srcs[_key - 1] = arguments[_key];
            }
            srcs.filter(function(src) {
              return src != null;
            }).forEach(function(src) {
              Object.keys(src).forEach(function(k) {
                return tgt[k] = src[k];
              });
            });
            return tgt;
          };
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var defaults = {
            animate: true,
            refresh: 1,
            maxSimulationTime: 4e3,
            ungrabifyWhileSimulating: false,
            fit: true,
            padding: 30,
            boundingBox: void 0,
            nodeDimensionsIncludeLabels: false,
            ready: function ready() {
            },
            stop: function stop() {
            },
            randomize: false,
            avoidOverlap: true,
            handleDisconnected: true,
            convergenceThreshold: 0.01,
            nodeSpacing: function nodeSpacing(node) {
              return 10;
            },
            flow: void 0,
            alignment: void 0,
            gapInequalities: void 0,
            edgeLength: void 0,
            edgeSymDiffLength: void 0,
            edgeJaccardLength: void 0,
            unconstrIter: void 0,
            userConstIter: void 0,
            allConstIter: void 0,
            infinite: false
          };
          module2.exports = defaults;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var impl = __webpack_require__(0);
          var register = function register2(cytoscape3) {
            if (!cytoscape3) {
              return;
            }
            cytoscape3("layout", "cola", impl);
          };
          if (typeof cytoscape !== "undefined") {
            register(cytoscape);
          }
          module2.exports = register;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
            return typeof obj;
          } : function(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
          var raf = void 0;
          if ((typeof window === "undefined" ? "undefined" : _typeof(window)) !== (true ? "undefined" : _typeof(void 0))) {
            raf = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function(fn) {
              return setTimeout(fn, 16);
            };
          } else {
            raf = function raf2(cb) {
              cb();
            };
          }
          module2.exports = raf;
        },
        function(module2, exports2) {
          module2.exports = __WEBPACK_EXTERNAL_MODULE_5__;
        }
      ]);
    });
  });

  // node_modules/klayjs/klay.js
  var require_klay = __commonJS((exports, module) => {
    var klayregister;
    var klaycallback;
    (function() {
      var $wnd, $doc;
      if (typeof window !== "undefined") {
        $wnd = window;
        $doc = $wnd.document;
      } else {
        $wnd = {Array: function() {
        }};
      }
      function kI() {
      }
      function iI() {
      }
      function pb() {
      }
      function Ab() {
      }
      function Tt() {
      }
      function Jt() {
      }
      function Jq() {
      }
      function Vq() {
      }
      function Vs() {
      }
      function yl() {
      }
      function Yl() {
      }
      function gm() {
      }
      function Cu() {
      }
      function tJ() {
      }
      function NJ() {
      }
      function PJ() {
      }
      function PS() {
      }
      function sS() {
      }
      function yS() {
      }
      function AS() {
      }
      function MS() {
      }
      function RS() {
      }
      function TS() {
      }
      function lR() {
      }
      function HR() {
      }
      function IR() {
      }
      function KR() {
      }
      function WR() {
      }
      function AT() {
      }
      function FT() {
      }
      function HT() {
      }
      function JT() {
      }
      function LT() {
      }
      function NT() {
      }
      function sU() {
      }
      function uV() {
      }
      function xV() {
      }
      function EV() {
      }
      function HW() {
      }
      function UX() {
      }
      function XX() {
      }
      function ZX() {
      }
      function _X() {
      }
      function bY() {
      }
      function dY() {
      }
      function wY() {
      }
      function zY() {
      }
      function SY() {
      }
      function VY() {
      }
      function qZ() {
      }
      function tZ() {
      }
      function wZ() {
      }
      function AZ() {
      }
      function d$() {
      }
      function g$() {
      }
      function j$() {
      }
      function w$() {
      }
      function z$() {
      }
      function C$() {
      }
      function F$() {
      }
      function I$() {
      }
      function L$() {
      }
      function N$() {
      }
      function R$() {
      }
      function X$() {
      }
      function _$() {
      }
      function k0() {
      }
      function m0() {
      }
      function s0() {
      }
      function w0() {
      }
      function A0() {
      }
      function C0() {
      }
      function E0() {
      }
      function G0() {
      }
      function V0() {
      }
      function Z0() {
      }
      function _0() {
      }
      function _1() {
      }
      function b1() {
      }
      function e1() {
      }
      function k1() {
      }
      function q1() {
      }
      function u1() {
      }
      function R1() {
      }
      function X1() {
      }
      function Z1() {
      }
      function c2() {
      }
      function f2() {
      }
      function h2() {
      }
      function k2() {
      }
      function n2() {
      }
      function q2() {
      }
      function x2() {
      }
      function A2() {
      }
      function H2() {
      }
      function H4() {
      }
      function z4() {
      }
      function B4() {
      }
      function D4() {
      }
      function U4() {
      }
      function i3() {
      }
      function l3() {
      }
      function u3() {
      }
      function C3() {
      }
      function I3() {
      }
      function $5() {
      }
      function d7() {
      }
      function V7() {
      }
      function q8() {
      }
      function smb() {
      }
      function Wbb() {
      }
      function rcb() {
      }
      function Mcb() {
      }
      function Vdb() {
      }
      function hkb() {
      }
      function Kpb() {
      }
      function Spb() {
      }
      function aqb() {
      }
      function iqb() {
      }
      function pqb() {
      }
      function isb() {
      }
      function mvb() {
      }
      function zwb() {
      }
      function yfb(a) {
      }
      function sP(a) {
      }
      function XW(a) {
      }
      function _t() {
        Wt();
      }
      function lI() {
        GP();
      }
      function J8() {
        G8();
      }
      function m8() {
        k8();
      }
      function CQ() {
        zQ();
      }
      function CV() {
        AV();
      }
      function q0() {
        p0();
      }
      function S0() {
        J0();
      }
      function y9() {
        w9();
      }
      function Bab() {
        zab();
      }
      function Qab() {
        Hab();
      }
      function cbb() {
        abb();
      }
      function sbb() {
        rbb();
      }
      function Ycb() {
        Xcb();
      }
      function Wfb() {
        Mfb();
      }
      function ft() {
        _s(this);
      }
      function uP() {
        sP(this);
      }
      function GU() {
        tU(this);
      }
      function ZW() {
        XW(this);
      }
      function ic(a) {
        this.a = a;
      }
      function sc(a) {
        this.a = a;
      }
      function $c(a) {
        this.a = a;
      }
      function sf(a) {
        this.a = a;
      }
      function Qg(a) {
        this.a = a;
      }
      function qh(a) {
        this.a = a;
      }
      function Vj(a) {
        this.a = a;
      }
      function Nk(a) {
        this.a = a;
      }
      function km(a) {
        this.a = a;
      }
      function dm(a) {
        this.b = a;
      }
      function En(a) {
        this.a = a;
      }
      function Hn(a) {
        this.a = a;
      }
      function Yp(a) {
        this.a = a;
      }
      function bq(a) {
        this.a = a;
      }
      function eq(a) {
        this.a = a;
      }
      function tq(a) {
        this.a = a;
      }
      function wq(a) {
        this.a = a;
      }
      function ku(a) {
        this.a = a;
      }
      function uu(a) {
        this.a = a;
      }
      function Gu(a) {
        this.a = a;
      }
      function Uu(a) {
        this.a = a;
      }
      function WJ(a) {
        this.a = a;
      }
      function rP(a) {
        this.a = a;
      }
      function $V(a) {
        this.a = a;
      }
      function tW(a) {
        this.a = a;
      }
      function yW(a) {
        this.e = a;
      }
      function fY(a) {
        this.a = a;
      }
      function hY(a) {
        this.a = a;
      }
      function lY(a) {
        this.a = a;
      }
      function nY(a) {
        this.a = a;
      }
      function CY(a) {
        this.a = a;
      }
      function JY(a) {
        this.a = a;
      }
      function SZ(a) {
        this.a = a;
      }
      function Z$(a) {
        this.a = a;
      }
      function b_(a) {
        this.a = a;
      }
      function d_(a) {
        this.a = a;
      }
      function f_(a) {
        this.a = a;
      }
      function w1(a) {
        this.a = a;
      }
      function y1(a) {
        this.a = a;
      }
      function E3(a) {
        this.a = a;
      }
      function q4(a) {
        this.a = a;
      }
      function x4(a) {
        this.a = a;
      }
      function F4(a) {
        this.a = a;
      }
      function $8(a) {
        this.a = a;
      }
      function a9(a) {
        this.a = a;
      }
      function l9(a) {
        this.a = a;
      }
      function C9(a) {
        this.a = a;
      }
      function k9(a) {
        this.c = a;
      }
      function wlb(a) {
        this.a = a;
      }
      function nxb(a) {
        this.a = a;
      }
      function wcb(a) {
        this.a = a;
      }
      function tdb(a) {
        this.a = a;
      }
      function ydb(a) {
        this.a = a;
      }
      function Ddb(a) {
        this.a = a;
      }
      function lkb(a) {
        this.a = a;
      }
      function klb(a) {
        this.a = a;
      }
      function llb(a) {
        this.a = a;
      }
      function inb(a) {
        this.a = a;
      }
      function wnb(a) {
        this.d = a;
      }
      function Snb(a) {
        this.a = a;
      }
      function Ynb(a) {
        this.a = a;
      }
      function aob(a) {
        this.a = a;
      }
      function fob(a) {
        this.a = a;
      }
      function Bob(a) {
        this.b = a;
      }
      function Gob(a) {
        this.a = a;
      }
      function Mob(a) {
        this.a = a;
      }
      function Tob(a) {
        this.c = a;
      }
      function opb(a) {
        this.a = a;
      }
      function Ipb(a) {
        this.a = a;
      }
      function rqb(a) {
        this.a = a;
      }
      function zqb(a) {
        this.b = a;
      }
      function Nqb(a) {
        this.b = a;
      }
      function mrb(a) {
        this.c = a;
      }
      function Trb(a) {
        this.a = a;
      }
      function Xrb(a) {
        this.a = a;
      }
      function Fsb(a) {
        this.a = a;
      }
      function ju() {
        this.a = [];
      }
      function ytb(a) {
        this.a = a;
      }
      function Lub(a) {
        this.a = a;
      }
      function u5(a) {
        a.b = a.a;
      }
      function vg(a) {
        a.c = a.d.d;
      }
      function sX(a, b) {
        a.g = b;
      }
      function bfb(a, b) {
        a.k = b;
      }
      function qfb(a, b) {
        a.a = b;
      }
      function rfb(a, b) {
        a.b = b;
      }
      function qW(a, b) {
        a.e.k = b;
      }
      function qu(a) {
        return a.a;
      }
      function yu(a) {
        return a.a;
      }
      function Mu(a) {
        return a.a;
      }
      function $u(a) {
        return a.a;
      }
      function rv(a) {
        return a.a;
      }
      function jv() {
        return null;
      }
      function Fu() {
        return null;
      }
      function Rh() {
        this.c = this;
      }
      function tkb() {
        _s(this);
      }
      function ntb() {
        Ymb(this);
      }
      function b5(a) {
        a5(this, a);
      }
      function GO(a) {
        IO();
        $O(a);
      }
      function mI(a) {
        a.a = new aJ();
      }
      function IZ(a, b) {
        a.a = b - a.a;
      }
      function KZ(a, b) {
        a.b = b - a.b;
      }
      function Dq() {
        Dq = iI;
        new Jq();
      }
      function nW() {
        nW = iI;
        new HW();
      }
      function ni() {
        throw new Hmb();
      }
      function ii() {
        throw new Hmb();
      }
      function ji() {
        throw new Hmb();
      }
      function li() {
        throw new Hmb();
      }
      function mi() {
        throw new Hmb();
      }
      function dd() {
        throw new Hmb();
      }
      function pj() {
        throw new Hmb();
      }
      function Wn() {
        throw new Hmb();
      }
      function $n() {
        throw new Hmb();
      }
      function qT() {
        this.a = new GU();
      }
      function fU() {
        this.a = new GU();
      }
      function cV() {
        this.a = new GU();
      }
      function pV() {
        this.a = new GU();
      }
      function l7() {
        this.a = new GU();
      }
      function k7() {
        this.a = new d7();
      }
      function A7() {
        this.a = new n7();
      }
      function t8() {
        this.b = new GU();
      }
      function jJ() {
        aJ.call(this);
      }
      function ZN() {
        UN.call(this);
      }
      function AP() {
        uP.call(this);
      }
      function DP() {
        uP.call(this);
      }
      function q7() {
        GU.call(this);
      }
      function alb() {
        ft.call(this);
      }
      function rlb() {
        ft.call(this);
      }
      function nkb() {
        ft.call(this);
      }
      function qkb() {
        ft.call(this);
      }
      function tlb() {
        ft.call(this);
      }
      function Vlb() {
        ft.call(this);
      }
      function Hmb() {
        ft.call(this);
      }
      function Wab() {
        this.f = new GU();
      }
      function Ybb() {
        this.d = new GU();
      }
      function jV() {
        this.a = new vtb();
      }
      function vqb() {
        throw new Hmb();
      }
      function wqb() {
        throw new Hmb();
      }
      function xqb() {
        throw new Hmb();
      }
      function yqb() {
        throw new Hmb();
      }
      function Mqb() {
        throw new Hmb();
      }
      function Uvb() {
        this.a = new GU();
      }
      function it() {
        it = iI;
        ht = new pb();
      }
      function bmb() {
        bmb = iI;
        new smb();
      }
      function zb() {
        zb = iI;
        yb = new Ab();
      }
      function Tq() {
        Tq = iI;
        Sq = new Vq();
      }
      function dr() {
        dr = iI;
        cr = new er();
      }
      function Gt() {
        Gt = iI;
        Ft = new Jt();
      }
      function Bu() {
        Bu = iI;
        Au = new Cu();
      }
      function fR() {
        fR = iI;
        eR = new lR();
      }
      function VR() {
        VR = iI;
        UR = new WR();
      }
      function jS(a) {
        dS(a);
        return a;
      }
      function jl(a) {
        Gi();
        this.a = a;
      }
      function vi(a) {
        hi();
        this.a = a;
      }
      function Uk(a) {
        hi();
        this.a = a;
      }
      function Zk(a) {
        hi();
        this.a = a;
      }
      function ds(a, b) {
        a.i = b;
        b.f = a;
      }
      function ycb(a, b) {
        stb(a.b, b);
      }
      function nsb() {
        ft.call(this);
      }
      function osb() {
        ft.call(this);
      }
      function nvb() {
        ft.call(this);
      }
      function Ccb() {
        Bcb.call(this);
      }
      function Jcb() {
        Bcb.call(this);
      }
      function pkb() {
        nkb.call(this);
      }
      function Xlb() {
        rlb.call(this);
      }
      function gt(a) {
        et.call(this, a);
      }
      function Vd(a) {
        Md.call(this, a);
      }
      function uh(a) {
        Md.call(this, a);
      }
      function Bk(a) {
        Hj.call(this, a);
      }
      function Jk(a) {
        dk.call(this, a);
      }
      function Lm(a) {
        Em.call(this, a);
      }
      function nq(a) {
        vm.call(this, a);
      }
      function ap(a) {
        Ro.call(this, a);
      }
      function ir(a) {
        Hj.call(this, a);
      }
      function Op(a, b) {
        a.a.W().nb(b);
      }
      function emb(a, b) {
        return a === b;
      }
      function Zr(a) {
        return !a ? 0 : a.a;
      }
      function Rs(a) {
        return !a ? 0 : a.d;
      }
      function Ts(a) {
        return !a ? 0 : a.j;
      }
      function zu(a) {
        gt.call(this, a);
      }
      function $J(a) {
        gt.call(this, a);
      }
      function _J(a) {
        gt.call(this, a);
      }
      function EQ(a) {
        _J.call(this, a);
      }
      function Tu() {
        Uu.call(this, {});
      }
      function y5(a) {
        b5.call(this, a);
      }
      function H5(a) {
        b5.call(this, a);
      }
      function WP(a, b, c) {
        XP(a, b.b, c);
      }
      function a7(a, b, c) {
        f6(a.c, b, c);
      }
      function qV(a, b, c) {
        a.b.Fc(b, c);
      }
      function M9(a) {
        $8.call(this, a);
      }
      function P9(a) {
        $8.call(this, a);
      }
      function YY() {
        this.a = (sK(), qK);
      }
      function cZ() {
        this.a = (sK(), qK);
      }
      function vtb() {
        this.a = new ntb();
      }
      function Vwb() {
        this.a = new iwb();
      }
      function vT() {
        vT = iI;
        uT = new AT();
      }
      function AV() {
        AV = iI;
        zV = new EV();
      }
      function p0() {
        p0 = iI;
        o0 = new s0();
      }
      function Ckb(a) {
        xkb();
        return a;
      }
      function Ixb(a) {
        Dxb(a);
        return a;
      }
      function ikb(a) {
        et.call(this, a);
      }
      function okb(a) {
        gt.call(this, a);
      }
      function slb(a) {
        gt.call(this, a);
      }
      function Kb(a) {
        this.c = $v(_b(a));
      }
      function FI() {
        this.a = 0;
        this.b = 0;
      }
      function aJ() {
        OI(this);
        _I(this);
      }
      function cI() {
        aI == null && (aI = []);
      }
      function Vvb(a) {
        a.b = null;
        a.c = 0;
      }
      function mS(a, b) {
        a.b = b;
        return a;
      }
      function nS(a, b) {
        a.c = b;
        return a;
      }
      function oS(a, b) {
        a.f = b;
        return a;
      }
      function pS(a, b) {
        a.g = b;
        return a;
      }
      function S7(a, b) {
        a.a = b;
        return a;
      }
      function T7(a, b) {
        a.f = b;
        return a;
      }
      function U7(a, b) {
        a.k = b;
        return a;
      }
      function xc(a, b) {
        return a.e - b.e;
      }
      function H3(a, b) {
        return a.d - b.d;
      }
      function Klb(a) {
        return a < 0 ? -a : a;
      }
      function hlb(a) {
        return isNaN(a);
      }
      function gv(a) {
        return new Gu(a);
      }
      function iv(a) {
        return new lv(a);
      }
      function rkb(a) {
        gt.call(this, a);
      }
      function ulb(a) {
        gt.call(this, a);
      }
      function Ulb(a) {
        gt.call(this, a);
      }
      function Wlb(a) {
        gt.call(this, a);
      }
      function Imb(a) {
        gt.call(this, a);
      }
      function et(a) {
        this.f = a;
        _s(this);
      }
      function _2() {
        this.b = 0;
        this.a = 0;
      }
      function Ws() {
        Ws = iI;
        Math.log(2);
      }
      function Ytb() {
        Ytb = iI;
        Xtb = $tb();
      }
      function Vtb(c, a, b) {
        c.set(a, b);
      }
      function Wtb(c, a, b) {
        c.set(a, b);
      }
      function Ot(a, b) {
        Nt();
        Mt.dc(a, b);
      }
      function tv(a, b) {
        return Skb(a, b);
      }
      function zm(a, b) {
        return a.a.B(b);
      }
      function aP(a, b) {
        return a.g[b.e];
      }
      function bP(a, b) {
        return a.i[b.e];
      }
      function cP(a, b) {
        return a.j[b.e];
      }
      function dP(a, b) {
        return a.n[b.e];
      }
      function eP(a, b) {
        return a.o[b.e];
      }
      function Ou(b, a) {
        return a in b.a;
      }
      function Tab(a, b) {
        return a.b - b.b;
      }
      function ndb(a, b) {
        return a.d - b.d;
      }
      function jgb(a, b) {
        return a.i - b.i;
      }
      function Nlb(a, b) {
        return a > b ? a : b;
      }
      function Olb(a, b) {
        return a > b ? a : b;
      }
      function Plb(a, b) {
        return a > b ? a : b;
      }
      function Qlb(a, b) {
        return a < b ? a : b;
      }
      function Rlb(a, b) {
        return a < b ? a : b;
      }
      function Slb(a, b) {
        return a < b ? a : b;
      }
      function awb(a) {
        return !!a && a.b;
      }
      function $ob(a) {
        _ob(a, a.length);
      }
      function bpb(a) {
        apb(a, a.length);
      }
      function dpb(a) {
        cpb(a, a.length);
      }
      function Cmb(a) {
        okb.call(this, a);
      }
      function Bmb(a) {
        lkb.call(this, a);
      }
      function oxb(a) {
        nxb.call(this, a);
      }
      function Ylb(a) {
        slb.call(this, a);
      }
      function Frb(a) {
        zqb.call(this, a);
      }
      function Nrb(a) {
        Frb.call(this, a);
      }
      function csb(a) {
        Rqb.call(this, a);
      }
      function zmb() {
        lkb.call(this, "");
      }
      function Amb() {
        lkb.call(this, "");
      }
      function Ikb(a) {
        Gkb(a);
        return a.n;
      }
      function Jkb(a) {
        Gkb(a);
        return a.j;
      }
      function Hkb(a) {
        return a.e && a.e();
      }
      function Lk(a, b) {
        return a.a.sb(b);
      }
      function Sb(a, b) {
        return a ? a : _b(b);
      }
      function vW(a, b) {
        return rJ(a.a, b);
      }
      function w4(a, b) {
        return t4(a.a, b);
      }
      function VH(a, b) {
        return RH(a, b) < 0;
      }
      function Dlb(a) {
        return bmb(), "" + a;
      }
      function qe(a) {
        return !a ? null : a.d;
      }
      function Gr(a) {
        hi();
        this.a = _b(a);
      }
      function I9() {
        F9();
        this.g = new Um();
      }
      function J0() {
        J0 = iI;
        I0 = (kP(), hP);
      }
      function Et() {
        ut != 0 && (ut = 0);
        wt = -1;
      }
      function bS(a) {
        cS(a, a.d);
        return a;
      }
      function i7(a, b) {
        a.a.d = b;
        return a;
      }
      function g7(a, b) {
        a.a.a = b;
        return a;
      }
      function h7(a, b) {
        a.a.c = b;
        return a;
      }
      function j7(a, b) {
        a.a.f = b;
        return a;
      }
      function z7(a, b) {
        a.a.f = b;
        return a;
      }
      function y7(a, b) {
        a.a.b = b;
        return a;
      }
      function hxb(a, b, c) {
        a.splice(b, c);
      }
      function oqb(a, b) {
        return Akb(b, a);
      }
      function Drb(a, b) {
        return a.b.t(b);
      }
      function jrb(a, b) {
        return a.c.t(b);
      }
      function ttb(a, b) {
        return a.a.R(b);
      }
      function Ttb(b, a) {
        return b.get(a);
      }
      function Utb(b, a) {
        return b.get(a);
      }
      function elb(a, b) {
        return a.test(b);
      }
      function Jlb(a) {
        return a <= 0 ? 0 - a : a;
      }
      function ilb(a) {
        return bmb(), "" + a;
      }
      function qlb(a) {
        return bmb(), "" + a;
      }
      function wtb(a) {
        this.a = new otb(a);
      }
      function Wwb(a) {
        this.a = new jwb(a);
      }
      function nc(a) {
        this.a = Wv(_b(a), 19);
      }
      function Bf(a) {
        this.b = Wv(_b(a), 57);
      }
      function Ch(a) {
        this.d = Wv(_b(a), 56);
      }
      function Ac(a, b) {
        this.d = a;
        this.e = b;
      }
      function Ie(a, b) {
        this.b = a;
        this.a = b;
      }
      function tm(a, b) {
        this.b = a;
        this.a = b;
      }
      function Pf(a, b) {
        this.b = a;
        this.c = b;
      }
      function Fk(a, b) {
        this.a = a;
        this.b = b;
      }
      function Bn(a, b) {
        this.a = a;
        this.b = b;
      }
      function Sn(a, b) {
        this.a = a;
        this.f = b;
      }
      function Mc(a, b) {
        Ac.call(this, a, b);
      }
      function Hh(a, b) {
        Ac.call(this, a, b);
      }
      function yp(a, b) {
        Ac.call(this, a, b);
      }
      function bp(a, b) {
        this.b = a;
        this.c = b;
      }
      function Oq(a, b) {
        this.e = a;
        this.c = b;
      }
      function Yq(a, b) {
        this.a = a;
        this.b = b;
      }
      function fs(a, b) {
        this.a = a;
        this.b = b;
      }
      function rs(a, b) {
        Ac.call(this, a, b);
      }
      function _u(a, b) {
        this.a = a;
        this.b = b;
      }
      function Mo(a) {
        this.a = Wv(_b(a), 20);
      }
      function Ro(a) {
        this.a = Wv(_b(a), 20);
      }
      function Fp(a) {
        this.a = Wv(_b(a), 57);
      }
      function vm(a) {
        this.b = Wv(_b(a), 35);
      }
      function HI(a, b) {
        this.a = a;
        this.b = b;
      }
      function RJ(a, b) {
        this.a = a;
        this.b = b;
      }
      function jK(a, b) {
        Ac.call(this, a, b);
      }
      function Qm(a, b) {
        return Qmb(a.b, b);
      }
      function fv(a) {
        return tu(), a ? su : ru;
      }
      function tK(a) {
        return a == oK || a == pK;
      }
      function uK(a) {
        return a == rK || a == nK;
      }
      function RI(a, b) {
        TI(a, b, a.a, a.a.a);
      }
      function SI(a, b) {
        TI(a, b, a.c.b, a.c);
      }
      function wK(a, b) {
        Ac.call(this, a, b);
      }
      function FK(a, b) {
        Ac.call(this, a, b);
      }
      function OK(a, b) {
        Ac.call(this, a, b);
      }
      function ZK(a, b) {
        Ac.call(this, a, b);
      }
      function fL(a, b) {
        Ac.call(this, a, b);
      }
      function pM(a, b) {
        Ac.call(this, a, b);
      }
      function AM(a, b) {
        Ac.call(this, a, b);
      }
      function NM(a, b) {
        Ac.call(this, a, b);
      }
      function VM(a, b) {
        Ac.call(this, a, b);
      }
      function uN(a, b) {
        Ac.call(this, a, b);
      }
      function EN(a, b) {
        Ac.call(this, a, b);
      }
      function NN(a, b) {
        Ac.call(this, a, b);
      }
      function EO(a, b) {
        Ac.call(this, a, b);
      }
      function lP(a, b) {
        Ac.call(this, a, b);
      }
      function OS(a, b) {
        this.b = a;
        this.a = b;
      }
      function VS(a, b) {
        this.c = a;
        this.d = b;
      }
      function wW(a, b) {
        this.a = a;
        this.c = b;
      }
      function BW(a, b) {
        this.e = a;
        this.c = b;
      }
      function FW(a, b) {
        this.e = a;
        this.d = b;
      }
      function fT(a, b) {
        Ac.call(this, a, b);
      }
      function DX(a, b) {
        Ac.call(this, a, b);
      }
      function MY(a, b) {
        this.a = a;
        this.b = b;
      }
      function PY(a, b) {
        this.a = a;
        this.b = b;
      }
      function YZ(a, b) {
        Ac.call(this, a, b);
      }
      function f0(a, b) {
        Ac.call(this, a, b);
      }
      function J1(a, b) {
        Ac.call(this, a, b);
      }
      function Y3(a, b) {
        Ac.call(this, a, b);
      }
      function h4(a, b) {
        Ac.call(this, a, b);
      }
      function $7(a, b) {
        Ac.call(this, a, b);
      }
      function y8(a, b) {
        Ac.call(this, a, b);
      }
      function q9(a, b) {
        Ac.call(this, a, b);
      }
      function MR(a, b) {
        return Zsb(a.c, b);
      }
      function Bnb(a) {
        return a.b < a.d.Y();
      }
      function Zmb(a) {
        return a.d.c + a.e.c;
      }
      function hrb(a, b) {
        return a.c.ab(b);
      }
      function Brb(a, b) {
        return a.b.kb(b);
      }
      function Crb(a, b) {
        return a.b.lb(b);
      }
      function Erb(a, b) {
        return a.b.pb(b);
      }
      function Irb(a, b) {
        return a.b.kb(b);
      }
      function Jrb(a, b) {
        return a.b.lb(b);
      }
      function dT(a) {
        return a == $S || a == bT;
      }
      function eT(a) {
        return a == $S || a == _S;
      }
      function MM(a) {
        return a != IM && a != JM;
      }
      function lg(a) {
        return Yf(a), a.d.Y();
      }
      function jtb(a) {
        this.c = a;
        gtb(this);
      }
      function otb(a) {
        $mb.call(this, a, 0);
      }
      function iwb() {
        jwb.call(this, null);
      }
      function xk() {
        uh.call(this, new ntb());
      }
      function Ap() {
        yp.call(this, "KEY", 0);
      }
      function lr(a) {
        kr();
        dk.call(this, a);
      }
      function Dt(a) {
        $wnd.clearTimeout(a);
      }
      function um(a) {
        return a.Vb(a.b.H());
      }
      function Pp(a) {
        this.a = Wv(_b(a), 144);
      }
      function Um() {
        this.b = (mp(), new ntb());
      }
      function hsb() {
        hsb = iI;
        gsb = new isb();
      }
      function Rpb() {
        Rpb = iI;
        Qpb = new Spb();
      }
      function nqb() {
        nqb = iI;
        mqb = new pqb();
      }
      function hc() {
        hc = iI;
        gc = new Kb(",");
      }
      function nJ() {
        nJ = iI;
        Math.pow(2, -65);
      }
      function UN() {
        VN.call(this, 0, 0, 0, 0);
      }
      function wab(a, b) {
        Ac.call(this, a, b);
      }
      function lbb(a, b) {
        Ac.call(this, a, b);
      }
      function Hbb(a, b) {
        Ac.call(this, a, b);
      }
      function Mbb(a, b) {
        Ac.call(this, a, b);
      }
      function xQ(a) {
        wJ();
        CJ.call(this, a);
      }
      function mcb(a, b) {
        Ac.call(this, a, b);
      }
      function gab(a, b) {
        this.c = a;
        this.b = b;
      }
      function Qbb(a, b) {
        this.a = a;
        this.b = b;
      }
      function Fcb(a, b) {
        this.b = a;
        this.d = b;
      }
      function ggb(a, b) {
        Ac.call(this, a, b);
      }
      function Agb(a, b) {
        Ac.call(this, a, b);
      }
      function Igb(a, b) {
        Ac.call(this, a, b);
      }
      function Rgb(a, b) {
        Ac.call(this, a, b);
      }
      function ahb(a, b) {
        Ac.call(this, a, b);
      }
      function phb(a, b) {
        Ac.call(this, a, b);
      }
      function Ihb(a, b) {
        Ac.call(this, a, b);
      }
      function Nhb(a, b) {
        Ac.call(this, a, b);
      }
      function Yib(a, b) {
        Ac.call(this, a, b);
      }
      function ejb(a, b) {
        Ac.call(this, a, b);
      }
      function Rjb(a, b) {
        Ac.call(this, a, b);
      }
      function dkb(a, b) {
        Ac.call(this, a, b);
      }
      function fxb(a, b, c) {
        a.splice(b, 0, c);
      }
      function Yjb(a, b, c) {
        a.g[b.e][b.e] = c;
      }
      function D6(a, b) {
        a.a = b;
        a.g = 0;
        a.f = 0;
      }
      function BI(a) {
        a.a = 0;
        a.b = 0;
        return a;
      }
      function rY(a) {
        return zU(a.b.c, a, 0);
      }
      function Llb(a) {
        return Math.ceil(a);
      }
      function Tlb(a) {
        return Math.sqrt(a);
      }
      function cub(a, b) {
        return Utb(a.a, b);
      }
      function vob(a, b) {
        return !!Wvb(a, b);
      }
      function Yob(a, b) {
        Zob(a, a.length, b);
      }
      function Gwb(a, b) {
        Ac.call(this, a, b);
      }
      function Psb(a, b) {
        this.b = a;
        this.a = b;
      }
      function qob(a, b) {
        this.d = a;
        this.e = b;
      }
      function dcb() {
        $bb();
        this.c = new vtb();
      }
      function Rdb() {
        Ndb();
        this.a = new vtb();
      }
      function aub() {
        Ytb();
        return new Xtb();
      }
      function Xb(a) {
        if (!a) {
          throw new rlb();
        }
      }
      function dc(a) {
        if (!a) {
          throw new tlb();
        }
      }
      function Vm(a) {
        if (!a) {
          throw new nvb();
        }
      }
      function SV() {
        this.b = (mp(), new ntb());
      }
      function Q4() {
        this.b = (mp(), new ntb());
      }
      function II(a) {
        this.a = a.a;
        this.b = a.b;
      }
      function gw(a) {
        return a == null ? null : a;
      }
      function re(a) {
        return !a ? null : a.zb();
      }
      function $i(a, b) {
        return a.Nb().sb(b);
      }
      function aq(a, b) {
        return a.a.a.a.U(b);
      }
      function nl(a, b) {
        return Ll(a.mb(), b);
      }
      function B3(a, b) {
        return glb(b.b, a.b);
      }
      function h3(a, b) {
        return glb(b.k, a.k);
      }
      function Mlb(a) {
        return Math.floor(a);
      }
      function vmb(a, b) {
        return a.a += "" + b, a;
      }
      function xmb(a, b) {
        a.a += "" + b;
        return a;
      }
      function ymb(a, b) {
        a.a += "" + b;
        return a;
      }
      function iw(a) {
        Hxb(a == null);
        return a;
      }
      function T2(a) {
        a.d && Z2(a);
        return a.a;
      }
      function U2(a) {
        a.d && Z2(a);
        return a.b;
      }
      function V2(a) {
        a.d && Z2(a);
        return a.c;
      }
      function Tvb(a, b) {
        vU(a.a, b);
        return b;
      }
      function ptb(a) {
        Ymb(this);
        he(this, a);
      }
      function _4(a) {
        this.c = a;
        this.e = false;
      }
      function Jh() {
        Hh.call(this, "OPEN", 0);
      }
      function ts() {
        rs.call(this, "SIZE", 0);
      }
      function qxb() {
        nxb.call(this, "UTF-8");
      }
      function Nxb() {
        Nxb = iI;
        Kxb = {};
        Mxb = {};
      }
      function IO() {
        IO = iI;
        HO = new DJ(yzb, 0);
      }
      function Sh(a) {
        _b(a);
        return new Vh(a);
      }
      function pmb(a) {
        bmb();
        return a.length;
      }
      function Jmb(a, b) {
        return cmb(a.a, b.a);
      }
      function vlb(a, b) {
        return xlb(a.a, b.a);
      }
      function Ys(a, b) {
        return a == b ? 0 : a ? 1 : -1;
      }
      function Cs(a) {
        return Rs(a.e) - Rs(a.g);
      }
      function xI(a) {
        return new HI(a.a, a.b);
      }
      function RN(a) {
        return new HI(a.d, a.e);
      }
      function tU(a) {
        a.c = xv(UF, syb, 1, 0, 4, 1);
      }
      function Cp() {
        yp.call(this, "VALUE", 1);
      }
      function dX(a) {
        cX.call(this);
        this.a = a;
      }
      function Q2(a) {
        this.a = new $2();
        this.b = a;
      }
      function Vh(a) {
        this.a = a;
        Rh.call(this);
      }
      function vl(a) {
        this.a = a;
        Rh.call(this);
      }
      function U8() {
        P8();
        this.d = (ckb(), bkb);
      }
      function zxb(a) {
        if (!a) {
          throw new qkb();
        }
      }
      function uxb(a) {
        if (!a) {
          throw new tlb();
        }
      }
      function vxb(a) {
        if (!a) {
          throw new rlb();
        }
      }
      function Hxb(a) {
        if (!a) {
          throw new alb();
        }
      }
      function Bxb(a) {
        if (!a) {
          throw new nvb();
        }
      }
      function Wub() {
        ytb.call(this, new wub());
      }
      function Kh() {
        Hh.call(this, "CLOSED", 1);
      }
      function Im(a) {
        Em.call(this, new Lm(a));
      }
      function p7(a, b) {
        ++a.d;
        return BU(a, b);
      }
      function kkb(a, b) {
        return gmb(a.a, 0, b);
      }
      function jlb(a, b) {
        return glb(a.a, b.a);
      }
      function Al(a) {
        return Pl(a.b.mb(), a.a);
      }
      function Dl(a) {
        return Wl(a.a.mb(), a.b);
      }
      function q6(a, b) {
        return b == a.c ? a.d : a.c;
      }
      function Zs(a, b) {
        return a < b ? -1 : a > b ? 1 : 0;
      }
      function xlb(a, b) {
        return a < b ? -1 : a > b ? 1 : 0;
      }
      function pvb(a) {
        return a != null ? vb(a) : 0;
      }
      function Ntb(a) {
        this.a = aub();
        this.b = a;
      }
      function fub(a) {
        this.a = aub();
        this.b = a;
      }
      function Cg(a) {
        this.a = a;
        xg.call(this, a);
      }
      function o4() {
        n4();
        this.b = new q4(this);
      }
      function Oh() {
        Oh = iI;
        Nh = Jb(new Kb(", "));
      }
      function Gh() {
        Gh = iI;
        Fh = new Jh();
        Eh = new Kh();
      }
      function Il() {
        Il = iI;
        Gl = new Yl();
        Hl = new gm();
      }
      function xp() {
        xp = iI;
        vp = new Ap();
        wp = new Cp();
      }
      function qs() {
        qs = iI;
        ps = new ts();
        os = new ws();
      }
      function wJ() {
        wJ = iI;
        uJ = new NJ();
        vJ = new PJ();
      }
      function Teb(a) {
        a.g = new GU();
        a.b = new GU();
      }
      function OI(a) {
        a.a = new mvb();
        a.c = new mvb();
      }
      function n4() {
        n4 = iI;
        m4 = new U4();
        l4 = new u4();
      }
      function Uc() {
        Mc.call(this, "IS_NULL", 2);
      }
      function Kwb() {
        Gwb.call(this, "Head", 1);
      }
      function Pwb() {
        Gwb.call(this, "Tail", 3);
      }
      function pR(a, b) {
        qR.call(this, a, b, null);
      }
      function lpb(a, b) {
        ipb(a, 0, a.length, b);
      }
      function x7(a, b) {
        vU(b.a, a.a);
        return a.a;
      }
      function CI(a, b) {
        a.a *= b;
        a.b *= b;
        return a;
      }
      function gl(a, b) {
        Gi();
        this.a = a;
        this.b = b;
      }
      function i9(a, b) {
        return a.a[b.d.k][b.k];
      }
      function W9(a, b) {
        return a.a[b.d.k][b.k];
      }
      function xJ(a, b) {
        return kmb(a.b, b.mc());
      }
      function Swb(a, b) {
        return qe(Xvb(a.a, b));
      }
      function Twb(a, b) {
        return qe(Yvb(a.a, b));
      }
      function $T(a, b) {
        return Wv(Dd(a.a, b), 20);
      }
      function aw(a, b) {
        return a != null && Vv(a, b);
      }
      function Qob(a) {
        return a.a < a.c.c.length;
      }
      function htb(a) {
        return a.a < a.c.a.length;
      }
      function y$(a, b) {
        return glb(a.i.a, b.i.a);
      }
      function S$(a, b) {
        return a.i.b = (Dxb(b), b);
      }
      function T$(a, b) {
        return a.i.b = (Dxb(b), b);
      }
      function utb(a, b) {
        return a.a.eb(b) != null;
      }
      function Vjb(a, b, c) {
        return a.g[b.e][c.e];
      }
      function Bkb(a) {
        xkb();
        return bmb(), "" + a;
      }
      function Mwb() {
        Gwb.call(this, "Range", 2);
      }
      function ws() {
        rs.call(this, "DISTINCT", 1);
      }
      function Xc() {
        Mc.call(this, "NOT_NULL", 3);
      }
      function mp() {
        mp = iI;
        lp = new Rb((Oh(), Nh));
      }
      function Hj(a) {
        this.d = (ypb(), new mrb(a));
      }
      function Hb(a, b) {
        return Gb(a, new zmb(), b).a;
      }
      function Mb(a, b) {
        return b == null ? a.b : Ib(b);
      }
      function mt(a) {
        return a == null ? null : a.name;
      }
      function cw(a) {
        return typeof a === "number";
      }
      function ew(a) {
        return typeof a === "string";
      }
      function Hi(a, b) {
        return new Mk(a, a.Y(), b);
      }
      function An(a, b) {
        return new no(a.a, a.b, b);
      }
      function Jb(a) {
        _b(Wxb);
        return new Nb(a, a);
      }
      function Do(a) {
        Mh(a, Vyb);
        return new HU(a);
      }
      function Am(a, b) {
        this.a = b;
        vm.call(this, a);
      }
      function tp(a, b) {
        this.a = b;
        vm.call(this, a);
      }
      function If(a, b) {
        this.a = a;
        Bf.call(this, b);
      }
      function ks(a) {
        this.c = a;
        this.a = Qr(this.c);
      }
      function MZ(a) {
        var b;
        b = a.a;
        a.a = a.b;
        a.b = b;
      }
      function pW(a, b) {
        a.e.j.a = b.a;
        a.e.j.b = b.b;
      }
      function xvb(a, b, c) {
        a.a = b ^ 1502;
        a.b = c ^ _Ab;
      }
      function uI(a, b, c) {
        a.a += b;
        a.b += c;
        return a;
      }
      function DI(a, b, c) {
        a.a -= b;
        a.b -= c;
        return a;
      }
      function zI(a) {
        a.a = -a.a;
        a.b = -a.b;
        return a;
      }
      function UI(a) {
        Bxb(a.b != 0);
        return a.a.a.c;
      }
      function VI(a) {
        Bxb(a.b != 0);
        return a.c.b.c;
      }
      function uub(a, b) {
        if (a.a) {
          Hub(b);
          Gub(b);
        }
      }
      function rn(a, b, c) {
        var d;
        d = a.ub(b);
        d.J(c);
      }
      function Iq(a, b) {
        return Zs(b.Yb(), a.Yb());
      }
      function o5(a) {
        return Wv(yU(a.a, a.b), 128);
      }
      function EU(a) {
        return cxb(a.c, a.c.length);
      }
      function Fv(a) {
        return a.l + a.m * czb + a.h * dzb;
      }
      function LM(a) {
        return a == EM || a == GM || a == FM;
      }
      function UH(a) {
        return typeof a === "number";
      }
      function Zsb(a, b) {
        return !!b && a.b[b.e] == b;
      }
      function lsb(a, b) {
        var c;
        c = a[WAb];
        b[WAb] = c;
      }
      function FQ(a, b) {
        _J.call(this, a);
        this.b = b;
      }
      function Rqb(a) {
        zqb.call(this, a);
        this.a = a;
      }
      function arb(a) {
        Nqb.call(this, a);
        this.a = a;
      }
      function dsb(a) {
        Frb.call(this, a);
        this.a = a;
      }
      function Xub(a) {
        ytb.call(this, new xub(a));
      }
      function wwb(a) {
        this.a = a;
        Bob.call(this, a);
      }
      function v5(a) {
        this.c = a;
        this.a = 1;
        this.b = 1;
      }
      function Rb(a) {
        this.a = a;
        this.b = $v(_b("="));
      }
      function B5() {
        this.a = new aJ();
        this.e = new aJ();
      }
      function tV() {
        this.a = new fU();
        this.c = new uV();
      }
      function cX() {
        this.i = new FI();
        this.j = new FI();
      }
      function Md(a) {
        Xb(a.d.c + a.e.c == 0);
        this.b = a;
      }
      function _s(a) {
        a.g = null;
        Ot(a, a.f);
        return a;
      }
      function Nl(a) {
        Il();
        _b(a);
        return new om(a);
      }
      function St(a) {
        Nt();
        return parseInt(a) || -1;
      }
      function Uwb(a, b) {
        return cwb(a.a, b) != null;
      }
      function ok(a, b) {
        return !rk(a, b) && !qk(a, b);
      }
      function txb(a) {
        return a.$H || (a.$H = ++sxb);
      }
      function yc(a) {
        return a.d != null ? a.d : "" + a.e;
      }
      function zc(a) {
        return a.d != null ? a.d : "" + a.e;
      }
      function pwb(a) {
        return a.b = Wv(Cnb(a.a), 21);
      }
      function bw(a) {
        return typeof a === "boolean";
      }
      function pub(a) {
        a.b = new Iub(a);
        a.c = new ntb();
      }
      function oab() {
        this.a = new GU();
        this.d = new GU();
      }
      function Iub(a) {
        Jub.call(this, a, null, null);
      }
      function ug(a, b, c, d) {
        mg.call(this, a, b, c, d);
      }
      function BP(a, b, c, d) {
        vP.call(this, a, b, c, d);
      }
      function EP(a, b, c, d) {
        vP.call(this, a, b, c, d);
      }
      function Kg(a, b, c) {
        _f.call(this, a, b, c, null);
      }
      function Lg(a, b, c) {
        _f.call(this, a, b, c, null);
      }
      function es(a, b, c) {
        a.i = b;
        b.f = a;
        b.i = c;
        c.f = b;
      }
      function tI(a, b) {
        mI(this);
        this.e = a;
        this.f = b;
      }
      function yg(a, b) {
        this.d = a;
        vg(this);
        this.b = b;
      }
      function kJ(a) {
        OI(this);
        _I(this);
        Ue(this, a);
      }
      function Xv(a) {
        Hxb(a == null || bw(a));
        return a;
      }
      function Yv(a) {
        Hxb(a == null || cw(a));
        return a;
      }
      function $v(a) {
        Hxb(a == null || ew(a));
        return a;
      }
      function vI(a, b) {
        a.a += b.a;
        a.b += b.b;
        return a;
      }
      function EI(a, b) {
        a.a -= b.a;
        a.b -= b.b;
        return a;
      }
      function U$(a, b) {
        return a.i.a = (Dxb(b), b) + 10;
      }
      function V$(a, b) {
        return a.i.a = (Dxb(b), b) + 10;
      }
      function h6(a, b) {
        return Wv(Smb(a.k, b), 24).a;
      }
      function Bj(a, b) {
        return Lh(a, b), new zr(a, b);
      }
      function Web(a, b) {
        return Wv(a.b.sb(b), 92).a;
      }
      function WX(a) {
        return Wv(a, 7).b.c.length != 0;
      }
      function TX(a) {
        return Wv(a, 7).e.c.length != 0;
      }
      function jX(a) {
        return !a.d ? -1 : zU(a.d.a, a, 0);
      }
      function lt(a) {
        return a == null ? null : a.message;
      }
      function Gkb(a) {
        if (a.n != null) {
          return;
        }
        Wkb(a);
      }
      function wmb(a, b, c, d) {
        jkb(a, b, c, d);
        return a;
      }
      function mmb(a, b) {
        bmb();
        return a.indexOf(b);
      }
      function QX(a, b) {
        if (!b) {
          throw new Vlb();
        }
        a.g = b;
      }
      function Mn(a) {
        if (a.e.c != a.b) {
          throw new nsb();
        }
      }
      function Xn(a) {
        if (a.f.c != a.b) {
          throw new nsb();
        }
      }
      function Uq(a, b) {
        _b(a);
        _b(b);
        return Akb(a, b);
      }
      function U6(a, b) {
        this.a = a;
        this.c = b;
        this.b = 2;
      }
      function sI() {
        mI(this);
        this.e = -1;
        this.f = true;
      }
      function Dh() {
        Vd.call(this, new ntb());
        this.a = 3;
      }
      function CP(a) {
        vP.call(this, a.d, a.b, a.a, a.c);
      }
      function FP(a) {
        vP.call(this, a.d, a.b, a.a, a.c);
      }
      function r6(a) {
        k6.call(this, a);
        this.c = new GU();
      }
      function Oc() {
        Mc.call(this, "ALWAYS_TRUE", 0);
      }
      function Rc() {
        Mc.call(this, "ALWAYS_FALSE", 1);
      }
      function _T(a) {
        XT();
        this.a = new Dh();
        YT(this, a);
      }
      function Y9(a) {
        !a.e && (a.e = new GU());
        return a.e;
      }
      function W7(a) {
        var b;
        b = new V7();
        b.e = a;
        return b;
      }
      function msb(a) {
        var b;
        b = a[WAb] | 0;
        a[WAb] = b + 1;
      }
      function Anb(a, b) {
        a.a.rb(a.b, b);
        ++a.b;
        a.c = -1;
      }
      function Enb(a, b) {
        uxb(a.c != -1);
        a.a.wb(a.c, b);
      }
      function zkb(a, b) {
        xkb();
        return a == b ? 0 : a ? 1 : -1;
      }
      function Wjb(a, b, c) {
        return a.g[b.e][c.e] * a.d;
      }
      function xt(a, b, c) {
        return a.apply(b, c);
        var d;
      }
      function ssb(a, b, c) {
        return rsb(a, Wv(b, 17), c);
      }
      function m5(a, b) {
        return b == (sN(), rN) ? a.c : a.d;
      }
      function Zi(a, b) {
        return b != null && a.Nb().kb(b);
      }
      function skb(a, b) {
        this.e = b;
        this.f = a;
        _s(this);
      }
      function om(a) {
        this.b = a;
        this.a = (Il(), Il(), Hl);
      }
      function dk(a) {
        hi();
        this.a = (ypb(), new Frb(a));
      }
      function hi() {
        hi = iI;
        new vi((ypb(), ypb(), vpb));
      }
      function e8() {
        e8 = iI;
        d8 = PQ(new WQ(), (d0(), X_));
      }
      function rwb(a) {
        swb.call(this, a, (Fwb(), Bwb));
      }
      function IU(a) {
        tU(this);
        gxb(this.c, 0, a.ob());
      }
      function tr(a, b, c) {
        this.b = a;
        this.a = b;
        this.c = c;
      }
      function WS(a, b, c) {
        VS.call(this, a, b);
        this.b = c;
      }
      function XV(a, b, c) {
        this.b = a;
        this.a = b;
        this.c = c;
      }
      function job(a, b) {
        var c;
        c = a.e;
        a.e = b;
        return c;
      }
      function qub(a) {
        Ymb(a.c);
        a.b.b = a.b;
        a.b.a = a.b;
      }
      function Vf(a) {
        a.b ? Vf(a.b) : Umb(a.f.b, a.e, a.d);
      }
      function YI(a) {
        Bxb(a.b != 0);
        return $I(a, a.a.a);
      }
      function ZI(a) {
        Bxb(a.b != 0);
        return $I(a, a.c.b);
      }
      function Wl(a, b) {
        Il();
        _b(b);
        return new Am(a, b);
      }
      function np(a, b) {
        mp();
        return new tp(a.mb(), b);
      }
      function jmb(a, b) {
        bmb();
        return a.charCodeAt(b);
      }
      function imb(a, b, c) {
        bmb();
        return a.substr(b, c);
      }
      function qmb(a) {
        bmb();
        return a == null ? Wxb : xb(a);
      }
      function Xjb(a, b, c) {
        return Vjb(a, b.g, c.g) * a.d;
      }
      function Ev(a, b, c) {
        return {l: a, m: b, h: c};
      }
      function YU(a, b) {
        return ZU(a, new VS(b.a, b.b));
      }
      function SN(a, b, c, d, e) {
        a.d = b;
        a.e = c;
        a.c = d;
        a.b = e;
      }
      function wS(a, b, c, d, e) {
        a.b = b;
        a.c = c;
        a.d = d;
        a.a = e;
      }
      function QI(a, b) {
        TI(a, b, a.c.b, a.c);
        return true;
      }
      function vU(a, b) {
        a.c[a.c.length] = b;
        return true;
      }
      function DJ(a, b) {
        wJ();
        CJ.call(this, a);
        this.a = b;
      }
      function g8() {
        e8();
        this.e = new aJ();
        this.d = new aJ();
      }
      function Fmb() {
        Fmb = iI;
        Dmb = new hkb();
        Emb = new hkb();
      }
      function zab() {
        zab = iI;
        yab = VQ(new WQ(), (d0(), v_));
      }
      function abb() {
        abb = iI;
        _ab = VQ(new WQ(), (d0(), v_));
      }
      function rbb() {
        rbb = iI;
        qbb = VQ(new WQ(), (d0(), v_));
      }
      function $bb() {
        $bb = iI;
        Zbb = VQ(new WQ(), (d0(), v_));
      }
      function Wt() {
        Wt = iI;
        Error.stackTraceLimit = 64;
      }
      function xS() {
        wS(this, false, false, false, false);
      }
      function Bo(a) {
        var b;
        b = new GU();
        Jl(b, a);
        return b;
      }
      function Eo(a) {
        var b;
        b = new aJ();
        ml(b, a);
        return b;
      }
      function XQ(a) {
        var b;
        b = new WQ();
        QQ(b, a);
        return b;
      }
      function Ocb(a) {
        var b;
        b = new Mcb();
        b.a = a;
        return b;
      }
      function Wv(a, b) {
        Hxb(a == null || Vv(a, b));
        return a;
      }
      function Dvb(a, b) {
        if (a < 0 || a >= b) {
          throw new pkb();
        }
      }
      function pl(a, b) {
        _b(a);
        _b(b);
        return new Bl(a, b);
      }
      function ul(a, b) {
        _b(a);
        _b(b);
        return new El(a, b);
      }
      function nmb(a, b) {
        bmb();
        return a.lastIndexOf(b);
      }
      function rgb(a, b, c) {
        return a < b ? c <= a : a <= c || a == b;
      }
      function cvb(a, b, c) {
        this.d = a;
        this.b = c;
        this.a = b;
      }
      function atb(a, b, c) {
        this.a = a;
        this.b = b;
        this.c = c;
      }
      function lub(a, b, c) {
        this.a = a;
        this.b = b;
        this.c = c;
      }
      function Nb(a, b) {
        this.a = a;
        this.b = Wxb;
        this.c = b.c;
      }
      function z3(a) {
        this.c = a.c;
        this.a = a.e;
        this.b = a.b;
      }
      function xg(a) {
        this.d = a;
        vg(this);
        this.b = Ed(a.d);
      }
      function u4() {
        FS.call(this);
        this.a = new x4(this);
      }
      function FS() {
        this.c = new PS();
        this.d = new KS(this);
      }
      function qr(a) {
        var b;
        b = new vtb();
        Jl(b, a);
        return b;
      }
      function qwb(a) {
        vnb(a.a);
        dwb(a.c, a.b);
        a.b = null;
      }
      function n5(a) {
        return a.c - Wv(yU(a.a, a.b), 128).b;
      }
      function t5(a, b) {
        return a.c < b.c ? -1 : a.c == b.c ? 0 : 1;
      }
      function t4(a, b) {
        return tK(a.b.d) ? b.xc() : b.wc();
      }
      function gmb(a, b, c) {
        return bmb(), a.substr(b, c - b);
      }
      function gxb(a, b, c) {
        dxb(c, 0, a, b, c.length, false);
      }
      function Jub(a, b, c) {
        this.c = a;
        qob.call(this, b, c);
      }
      function Bl(a, b) {
        this.b = a;
        this.a = b;
        Rh.call(this);
      }
      function El(a, b) {
        this.a = a;
        this.b = b;
        Rh.call(this);
      }
      function Lq(a, b) {
        this.b = a;
        this.a = b;
        Mh(b, "count");
      }
      function dl(a) {
        this.b = a;
        this.a = nj(this.b.a).Kb();
      }
      function CJ(a) {
        wJ();
        this.c = uJ;
        this.d = vJ;
        this.b = a;
      }
      function iab(a, b, c) {
        gab.call(this, a, b);
        this.a = c;
      }
      function mab(a, b, c) {
        gab.call(this, a, b);
        this.a = c;
      }
      function yU(a, b) {
        Cxb(b, a.c.length);
        return a.c[b];
      }
      function PQ(a, b) {
        Wv(yU(a.a, 5), 18).ib(b);
        return a;
      }
      function RQ(a, b) {
        Wv(yU(a.a, 0), 18).ib(b);
        return a;
      }
      function SQ(a, b) {
        Wv(yU(a.a, 1), 18).ib(b);
        return a;
      }
      function TQ(a, b) {
        Wv(yU(a.a, 2), 18).ib(b);
        return a;
      }
      function UQ(a, b) {
        Wv(yU(a.a, 3), 18).ib(b);
        return a;
      }
      function VQ(a, b) {
        Wv(yU(a.a, 4), 18).ib(b);
        return a;
      }
      function iS(a) {
        gS(a, (sK(), oK));
        a.e = true;
        return a;
      }
      function Pt(a) {
        Nt();
        var b;
        b = Mt.ec(a);
        return Qt(b);
      }
      function Pkb(a, b) {
        var c;
        c = Mkb(a, b);
        c.g = 2;
        return c;
      }
      function _ob(a, b) {
        var c;
        for (c = 0; c < b; ++c) {
          a[c] = 0;
        }
      }
      function YW(a, b) {
        a.b = b.b;
        a.c = b.c;
        a.d = b.d;
        a.a = b.a;
      }
      function Hub(a) {
        a.a.b = a.b;
        a.b.a = a.a;
        a.a = a.b = null;
      }
      function NX(a) {
        return a.b.c.length + a.e.c.length;
      }
      function zv(a) {
        return Array.isArray(a) && a.ad === kI;
      }
      function ol(a, b) {
        return Il(), Tl(new Tob(a), b) != -1;
      }
      function vv(a, b, c, d, e, f) {
        return wv(a, b, c, d, e, 0, f);
      }
      function BJ(a, b, c) {
        wJ();
        FJ.call(this, a.b, b, c, a.d);
      }
      function AJ(a, b) {
        wJ();
        FJ.call(this, a.b, b, a.c, a.d);
      }
      function uU(a, b, c) {
        Fxb(b, a.c.length);
        fxb(a.c, b, c);
      }
      function mpb(a, b) {
        Cxb(b, a.a.length);
        return a.a[b];
      }
      function kpb(c) {
        c.sort(function(a, b) {
          return a - b;
        });
      }
      function _b(a) {
        if (a == null) {
          throw new Vlb();
        }
        return a;
      }
      function lv(a) {
        if (a == null) {
          throw new Vlb();
        }
        this.a = a;
      }
      function Us(a, b, c) {
        if (a.a != b) {
          throw new nsb();
        }
        a.a = c;
      }
      function wxb(a, b) {
        if (!a) {
          throw new slb((bmb(), b));
        }
      }
      function Axb(a, b) {
        if (!a) {
          throw new rkb((bmb(), b));
        }
      }
      function Dxb(a) {
        if (a == null) {
          throw new Vlb();
        }
        return a;
      }
      function Yub(a) {
        ytb.call(this, new wub());
        Ue(this, a);
      }
      function xtb(a) {
        this.a = new otb(a.Y());
        Ue(this, a);
      }
      function Lsb(a) {
        this.c = a;
        this.a = new jtb(this.c.a);
      }
      function Er(a) {
        Gi();
        this.a = (ypb(), new rqb(_b(a)));
      }
      function xkb() {
        xkb = iI;
        vkb = (xkb(), false);
        wkb = true;
      }
      function Glb() {
        Glb = iI;
        Flb = xv(PF, Txb, 24, 256, 0, 1);
      }
      function k8() {
        k8 = iI;
        j8 = PQ(RQ(new WQ(), (d0(), z_)), X_);
      }
      function aS() {
        aS = iI;
        ZR = new yS();
        _R = new FS();
        $R = new AS();
      }
      function dw(a) {
        return a != null && fw(a) && !(a.ad === kI);
      }
      function _v(a) {
        return !Array.isArray(a) && a.ad === kI;
      }
      function Wmb(a, b) {
        return ew(b) ? Xmb(a, b) : Mtb(a.d, b);
      }
      function Ysb(a, b) {
        return aw(b, 17) && Zsb(a, Wv(b, 17));
      }
      function $sb(a, b) {
        return aw(b, 17) && _sb(a, Wv(b, 17));
      }
      function bub(a, b) {
        return !(Utb(a.a, b) === void 0);
      }
      function Vsb(a, b) {
        var c;
        c = Usb(a);
        zpb(c, b);
        return c;
      }
      function Kt(a, b) {
        !a && (a = []);
        a[a.length] = b;
        return a;
      }
      function rsb(a, b, c) {
        Wsb(a.a, b);
        return usb(a, b.e, c);
      }
      function omb(a, b, c) {
        bmb();
        return a.lastIndexOf(b, c);
      }
      function xxb(a, b, c) {
        if (!a) {
          throw new slb(Jxb(b, c));
        }
      }
      function Zob(a, b, c) {
        var d;
        for (d = 0; d < b; ++d) {
          a[d] = c;
        }
      }
      function Qo(a, b) {
        var c;
        c = a.a.Y();
        bc(b, c);
        return c - b;
      }
      function ud(a) {
        var b;
        b = a.i;
        return !b ? a.i = a.T() : b;
      }
      function Ae(a) {
        var b;
        b = a.c;
        return !b ? a.c = a.gb() : b;
      }
      function ki(a) {
        var b;
        b = a.c;
        return !b ? a.c = a.Jb() : b;
      }
      function nj(a) {
        if (a.e) {
          return a.e;
        }
        return a.e = a.Ob();
      }
      function oj(a) {
        if (a.f) {
          return a.f;
        }
        return a.f = a.Pb();
      }
      function Hv(a, b) {
        return Ev(a.l & b.l, a.m & b.m, a.h & b.h);
      }
      function flb(a, b) {
        return glb((Dxb(a), a), (Dxb(b), b));
      }
      function Ed(a) {
        return aw(a, 20) ? Wv(a, 20).tb() : a.mb();
      }
      function Ml(a) {
        Il();
        _b(a);
        while (a.G()) {
          a.H();
          a.I();
        }
      }
      function Uab(a) {
        var b;
        b = a;
        while (b.g) {
          b = b.g;
        }
        return b;
      }
      function LY(a) {
        a.b.i.a += a.a.f * (a.a.a - 1);
        return null;
      }
      function Sob(a) {
        uxb(a.b != -1);
        a.c.vb(a.a = a.b);
        a.b = -1;
      }
      function Dnb(a) {
        Bxb(a.b > 0);
        return a.a.sb(a.c = --a.b);
      }
      function $f(a) {
        a.b ? $f(a.b) : a.d.V() && Wmb(a.f.b, a.e);
      }
      function wg(a) {
        Yf(a.d);
        if (a.d.d != a.c) {
          throw new nsb();
        }
      }
      function ksb(a, b) {
        if (b[WAb] != a[WAb]) {
          throw new nsb();
        }
      }
      function Pl(a, b) {
        Il();
        _b(a);
        _b(b);
        return new tm(a, b);
      }
      function Zq(a, b) {
        Gi();
        Yq.call(this, a, Yi(new opb(b)));
      }
      function mg(a, b, c, d) {
        this.a = a;
        _f.call(this, a, b, c, d);
      }
      function GI(a) {
        this.a = Math.cos(a);
        this.b = Math.sin(a);
      }
      function GQ(a, b, c) {
        _J.call(this, a);
        this.b = b;
        this.a = c;
      }
      function NR(a) {
        this.b = new GU();
        this.a = new GU();
        this.c = a;
      }
      function sY(a) {
        this.c = new FI();
        this.a = new GU();
        this.b = a;
      }
      function tu() {
        tu = iI;
        ru = new uu(false);
        su = new uu(true);
      }
      function o7(a, b) {
        ++a.d;
        return a.c[a.c.length] = b, true;
      }
      function $ub(a, b) {
        TI(a.d, b, a.b.b, a.b);
        ++a.a;
        a.c = null;
      }
      function stb(a, b) {
        var c;
        c = a.a.db(b, a);
        return c == null;
      }
      function cxb(a, b) {
        var c;
        c = a.slice(0, b);
        return Cv(c, a);
      }
      function exb(a, b) {
        var c;
        c = new Array(b);
        return Cv(c, a);
      }
      function usb(a, b, c) {
        var d;
        d = a.b[b];
        a.b[b] = c;
        return d;
      }
      function apb(a, b) {
        var c;
        for (c = 0; c < b; ++c) {
          a[c] = null;
        }
      }
      function cpb(a, b) {
        var c;
        for (c = 0; c < b; ++c) {
          a[c] = false;
        }
      }
      function r1(a, b) {
        return xkb(), Wv(b.b, 24).a < a ? wkb : vkb;
      }
      function s1(a, b) {
        return xkb(), Wv(b.a, 24).a < a ? wkb : vkb;
      }
      function Tk(a, b) {
        return Wv(ki(nj(a.a)).sb(b), 21).yb();
      }
      function dq(a) {
        return mp(), Wl(Rm(a.a).mb(), (xp(), vp));
      }
      function Uh(a) {
        return Il(), new Im(Dl(ul(a.a, new yl())));
      }
      function fw(a) {
        return typeof a === Sxb || typeof a === Zxb;
      }
      function Ct(a) {
        $wnd.setTimeout(function() {
          throw a;
        }, 0);
      }
      function oI(a, b) {
        return a > 0 ? new tI(a - 1, b) : new tI(a, b);
      }
      function Ib(a) {
        _b(a);
        return aw(a, 345) ? Wv(a, 345) : xb(a);
      }
      function Rwb(a, b) {
        return bwb(a.a, b, (xkb(), vkb)) == null;
      }
      function Po(a, b) {
        var c;
        c = a.a.Y();
        $b(b, c);
        return c - 1 - b;
      }
      function hu(a, b, c) {
        var d;
        d = gu(a, b);
        iu(a, b, c);
        return d;
      }
      function Nkb(a, b, c) {
        var d;
        d = Mkb(a, b);
        $kb(c, d);
        return d;
      }
      function Mkb(a, b) {
        var c;
        c = new Kkb();
        c.i = a;
        c.d = b;
        return c;
      }
      function Mk(a, b, c) {
        this.a = a;
        bc(c, b);
        this.c = b;
        this.b = c;
      }
      function Av(a, b, c) {
        zxb(c == null || sv(a, c));
        return a[b] = c;
      }
      function Pm(a) {
        a.a = null;
        a.e = null;
        Ymb(a.b);
        a.d = 0;
        ++a.c;
      }
      function Pmb(a) {
        slb.call(this, (bmb(), a == null ? Wxb : a));
      }
      function Omb(a) {
        slb.call(this, (bmb(), a == null ? Wxb : a));
      }
      function Om(a) {
        var b;
        return b = a.f, !b ? a.f = new Pp(a) : b;
      }
      function Jd(a) {
        var b;
        return b = a.k, !b ? a.k = new Qg(a) : b;
      }
      function Be(a) {
        var b;
        b = a.e;
        return !b ? a.e = new Fp(a) : b;
      }
      function Vg(a) {
        var b;
        b = a.e;
        !b && (a.e = b = a.gb());
        return b;
      }
      function d6(a) {
        var b, c;
        b = a.c.f.d;
        c = a.d.f.d;
        return b == c;
      }
      function Gfb(a, b) {
        var c;
        c = new Dfb(a);
        Afb(c, b);
        return c;
      }
      function umb(a, b) {
        a.a += String.fromCharCode(b);
        return a;
      }
      function hX(a) {
        if (!a.a && !!a.d) {
          return a.d.b;
        }
        return a.a;
      }
      function _H(a) {
        if (UH(a)) {
          return a | 0;
        }
        return a.l | a.m << 22;
      }
      function xo(a) {
        Mh(a, Uyb);
        return $s(PH(PH(5, a), a / 10 | 0));
      }
      function Smb(a, b) {
        return ew(b) ? Tmb(a, b) : re(Ktb(a.d, b));
      }
      function tl(a) {
        return aw(a, 19) ? Wv(a, 19).Y() : Ul(a.mb());
      }
      function pr(a) {
        return a ? new xtb((Oh(), a)) : qr(null.mb());
      }
      function Tb(a, b) {
        return gw(a) === gw(b) || a != null && rb(a, b);
      }
      function zT(a, b) {
        return vT(), glb(Ixb(Yv(a)), Ixb(Yv(b)));
      }
      function Ep(a) {
        return mp(), Wl(a.a.bb().mb(), (xp(), wp));
      }
      function Gi() {
        Gi = iI;
        hi();
        Fi = new gr((ypb(), ypb(), vpb));
      }
      function kr() {
        kr = iI;
        hi();
        jr = new lr((ypb(), ypb(), xpb));
      }
      function Exb(a, b) {
        if (a == null) {
          throw new Wlb((bmb(), b));
        }
      }
      function Zfb(a, b) {
        Mfb();
        return (a - b <= 0 ? 0 - (a - b) : a - b) < 0.2;
      }
      function U0(a, b) {
        return a.i.b < b.i.b ? -1 : a.i.b == b.i.b ? 0 : 1;
      }
      function Zjb(a, b, c, d) {
        a.g[b.e][c.e] = d;
        a.g[c.e][b.e] = d;
      }
      function vnb(a) {
        uxb(a.c != -1);
        a.d.vb(a.c);
        a.b = a.c;
        a.c = -1;
      }
      function Sub(a) {
        this.c = a;
        this.b = a.a.b.a;
        lsb(a.a.c, this);
      }
      function ufb(a) {
        efb.call(this, new opb(a));
        this.a = new FI();
      }
      function er() {
        Bk.call(this, new ir(new ntb()));
        this.a = this;
      }
      function OQ() {
        JQ();
        this.b = (mp(), new ntb());
        this.a = new ntb();
      }
      function zp() {
        xp();
        return Bv(tv(jy, 1), uyb, 188, 0, [vp, wp]);
      }
      function Ih() {
        Gh();
        return Bv(tv(dx, 1), uyb, 159, 0, [Fh, Eh]);
      }
      function ss() {
        qs();
        return Bv(tv(Ty, 1), uyb, 205, 0, [ps, os]);
      }
      function psb(a) {
        We(a.a);
        a.b = xv(UF, syb, 1, a.b.length, 4, 1);
      }
      function krb(a) {
        !a.b && (a.b = new Frb(a.c.W()));
        return a.b;
      }
      function cwb(a, b) {
        var c;
        c = new zwb();
        ewb(a, b, c);
        return c.d;
      }
      function Qkb(a, b) {
        var c;
        c = Mkb("", a);
        c.k = b;
        c.g = 1;
        return c;
      }
      function We(a) {
        var b;
        for (b = a.mb(); b.G(); ) {
          b.H();
          b.I();
        }
      }
      function yJ(a, b) {
        return aw(b, 79) && emb(a.b, Wv(b, 79).mc());
      }
      function Z3() {
        X3();
        return Bv(tv(iD, 1), uyb, 175, 0, [V3, W3]);
      }
      function a8() {
        Z7();
        return Bv(tv(WD, 1), uyb, 193, 0, [X7, Y7]);
      }
      function s9() {
        p9();
        return Bv(tv(hE, 1), uyb, 192, 0, [o9, n9]);
      }
      function Umb(a, b, c) {
        return ew(b) ? Vmb(a, b, c) : Ltb(a.d, b, c);
      }
      function h5(a, b, c) {
        a.i = 0;
        a.e = 0;
        if (b == c) {
          return;
        }
        d5(a, b, c);
      }
      function g5(a, b, c) {
        a.i = 0;
        a.e = 0;
        if (b == c) {
          return;
        }
        c5(a, b, c);
      }
      function t6(a, b, c, d) {
        this.d = a;
        this.b = b;
        this.a = c;
        this.c = d;
      }
      function VN(a, b, c, d) {
        this.d = a;
        this.e = b;
        this.c = c;
        this.b = d;
      }
      function E5(a, b, c, d) {
        this.a = a;
        this.c = b;
        this.b = c;
        this.d = d;
      }
      function vO(a, b, c, d) {
        Ac.call(this, a, b);
        this.a = c;
        this.b = d;
      }
      function Jtb(a, b) {
        var c;
        c = Ttb(a.a, b);
        return c == null ? [] : c;
      }
      function kmb(a, b) {
        bmb();
        if (a == b) {
          return 0;
        }
        return a < b ? -1 : 1;
      }
      function CR(a, b) {
        var c;
        c = hR(a.f, b);
        return vI(zI(c), a.f.d);
      }
      function qsb(a, b) {
        return Ysb(a.a, b) ? a.b[Wv(b, 17).e] : null;
      }
      function ovb(a, b) {
        return gw(a) === gw(b) || a != null && rb(a, b);
      }
      function Pu(a, b) {
        if (b == null) {
          throw new Vlb();
        }
        return Qu(a, b);
      }
      function Zv(a) {
        Hxb(a == null || fw(a) && !(a.ad === kI));
        return a;
      }
      function irb(a) {
        !a.a && (a.a = new Nrb(a.c.bb()));
        return a.a;
      }
      function lrb(a) {
        !a.d && (a.d = new zqb(a.c.fb()));
        return a.d;
      }
      function _I(a) {
        a.a.a = a.c;
        a.c.b = a.a;
        a.a.b = a.c.a = null;
        a.b = 0;
      }
      function Cnb(a) {
        return Bxb(a.b < a.d.Y()), a.d.sb(a.c = a.b++);
      }
      function Xmb(a, b) {
        return b == null ? Mtb(a.d, null) : eub(a.e, b);
      }
      function $9(a, b) {
        this.g = a;
        this.d = Bv(tv(qB, 1), Nzb, 9, 0, [b]);
      }
      function KS(a) {
        this.c = a;
        this.b = new Wwb(Wv(_b(new MS()), 56));
      }
      function hW() {
        this.a = new jJ();
        this.b = (Mh(3, Vyb), new HU(3));
      }
      function Dg(a, b) {
        this.a = a;
        yg.call(this, a, Wv(a.d, 20).ub(b));
      }
      function rab(a, b, c, d) {
        this.a = a;
        this.c = b;
        this.b = c;
        this.d = d;
      }
      function Zlb(a, b, c) {
        this.a = Yxb;
        this.d = a;
        this.b = b;
        this.c = c;
      }
      function $W() {
        XW(this);
        this.d = 0;
        this.b = 0;
        this.a = 0;
        this.c = 0;
      }
      function Bcb() {
        this.b = new vtb();
        this.d = new aJ();
        this.e = new Uvb();
      }
      function ypb() {
        ypb = iI;
        vpb = new Kpb();
        wpb = new aqb();
        xpb = new iqb();
      }
      function Lc() {
        Lc = iI;
        Ic = new Oc();
        Hc = new Rc();
        Jc = new Uc();
        Kc = new Xc();
      }
      function Z7() {
        Z7 = iI;
        X7 = new $7("GREEDY", 0);
        Y7 = new $7(zAb, 1);
      }
      function zQ() {
        zQ = iI;
        yQ = new AJ((eM(), EL), (xkb(), xkb(), wkb));
      }
      function w9() {
        w9 = iI;
        v9 = PQ(UQ(TQ(new WQ(), (d0(), N_)), B_), M_);
      }
      function N6(a, b) {
        var c;
        c = M6(b);
        return Wv(Smb(a.c, c), 24).a;
      }
      function PR(a, b) {
        var c;
        c = utb(a.a, b);
        c && (b.f = null);
        return c;
      }
      function Krb(a) {
        var b;
        b = a.b.ob();
        Mrb(b, b.length);
        return b;
      }
      function NP(a) {
        if (a < 0) {
          return -1;
        }
        if (a > 0) {
          return 1;
        }
        return 0;
      }
      function mP() {
        kP();
        return Bv(tv(Rz, 1), uyb, 171, 0, [jP, gP, hP]);
      }
      function gL() {
        eL();
        return Bv(tv(Fz, 1), uyb, 166, 0, [cL, bL, dL]);
      }
      function WM() {
        UM();
        return Bv(tv(Jz, 1), uyb, 149, 0, [TM, SM, RM]);
      }
      function FO() {
        DO();
        return Bv(tv(Pz, 1), uyb, 225, 0, [BO, AO, CO]);
      }
      function ZZ() {
        XZ();
        return Bv(tv(VB, 1), uyb, 221, 0, [VZ, WZ, UZ]);
      }
      function A8() {
        x8();
        return Bv(tv(_D, 1), uyb, 173, 0, [w8, v8, u8]);
      }
      function QH(a, b) {
        return SH(Hv(UH(a) ? YH(a) : a, UH(b) ? YH(b) : b));
      }
      function XI(a) {
        return a.b == 0 ? null : (Bxb(a.b != 0), $I(a, a.a.a));
      }
      function zfb(a) {
        a.d = a.d - 15;
        a.b = a.b - 15;
        a.c = a.c + 15;
        a.a = a.a + 15;
      }
      function Rn(a) {
        this.b = a;
        this.c = a;
        a.e = null;
        a.c = null;
        this.a = 1;
      }
      function nZ(a, b, c) {
        this.d = a;
        this.b = new GU();
        this.c = b;
        this.a = c;
      }
      function sfb(a, b) {
        qfb(this, new HI(a.a, a.b));
        rfb(this, Eo(b));
      }
      function Xf(a, b) {
        if (b === a) {
          return true;
        }
        Yf(a);
        return a.d.t(b);
      }
      function Oeb(a) {
        if (a == neb || a == keb) {
          return true;
        }
        return false;
      }
      function VO(a) {
        if (!Qob(new Tob(zW(a.e)))) {
          return;
        }
        OO(a);
        QO(a);
      }
      function Y2(a, b) {
        var c;
        c = Wv(vub(a.e, b), 116);
        !!c && (a.d = true);
      }
      function Lrb(a, b) {
        var c;
        c = a.b.pb(b);
        Mrb(c, a.b.Y());
        return c;
      }
      function a6(a) {
        var b;
        b = e6(a, (sN(), rN));
        b += e6(a, ZM);
        return b;
      }
      function f6(a, b, c) {
        j6(a, b, c, (sN(), ZM), a.f);
        j6(a, b, c, rN, a.n);
      }
      function PX(a, b) {
        !!a.f && BU(a.f.f, a);
        a.f = b;
        !!a.f && vU(a.f.f, a);
      }
      function rX(a, b) {
        !!a.d && BU(a.d.a, a);
        a.d = b;
        !!a.d && vU(a.d.a, a);
      }
      function eW(a, b) {
        !!a.d && BU(a.d.b, a);
        a.d = b;
        !!a.d && vU(a.d.b, a);
      }
      function dW(a, b) {
        !!a.c && BU(a.c.e, a);
        a.c = b;
        !!a.c && vU(a.c.e, a);
      }
      function Zdb(a) {
        var b;
        b = Eo(a.b);
        Ue(b, a.c);
        Ue(b, a.i);
        return b;
      }
      function Qxb() {
        if (Lxb == 256) {
          Kxb = Mxb;
          Mxb = {};
          Lxb = 0;
        }
        ++Lxb;
      }
      function Gbb() {
        Gbb = iI;
        Fbb = new Hbb(pzb, 0);
        Ebb = new Hbb(ozb, 1);
      }
      function fgb() {
        fgb = iI;
        dgb = new ggb(ozb, 0);
        egb = new ggb(pzb, 1);
      }
      function hgb() {
        fgb();
        return Bv(tv(fF, 1), uyb, 223, 0, [dgb, egb]);
      }
      function xab() {
        vab();
        return Bv(tv(rE, 1), uyb, 242, 0, [uab, tab]);
      }
      function Ibb() {
        Gbb();
        return Bv(tv(BE, 1), uyb, 248, 0, [Fbb, Ebb]);
      }
      function Nbb() {
        Lbb();
        return Bv(tv(CE, 1), uyb, 247, 0, [Jbb, Kbb]);
      }
      function ncb() {
        lcb();
        return Bv(tv(JE, 1), uyb, 194, 0, [jcb, kcb]);
      }
      function Ohb() {
        Mhb();
        return Bv(tv(pF, 1), uyb, 174, 0, [Khb, Lhb]);
      }
      function Hpb(a) {
        ypb();
        return aw(a, 63) ? new csb(a) : new Rqb(a);
      }
      function Rm(a) {
        var b;
        return b = a.g, Wv(!b ? a.g = new En(a) : b, 20);
      }
      function Ktb(a, b) {
        return Itb(a, b, Jtb(a, b == null ? 0 : a.b.Vc(b)));
      }
      function tX(a) {
        var b;
        return b = lX(a), "n_" + (b == null ? Dlb(a.k) : b);
      }
      function ob(a) {
        return Ikb(tb(a)) + "@" + (vb(a) >>> 0).toString(16);
      }
      function ykb(a, b) {
        return zkb(Ckb((Dxb(a), a)), Ckb((Dxb(b), b)));
      }
      function Tmb(a, b) {
        return b == null ? re(Ktb(a.d, null)) : cub(a.e, b);
      }
      function Rr(a, b, c) {
        return new Ur(a.c, pk(a.b, wk(a.d, b, c)), a.a);
      }
      function hw(a) {
        return Math.max(Math.min(a, $xb), -2147483648) | 0;
      }
      function Ptb(a) {
        this.e = a;
        this.b = this.e.a.entries();
        this.a = [];
      }
      function xf(a) {
        this.c = a;
        this.b = new rnb(new inb(this.c.a).a);
      }
      function Em(a) {
        this.b = (Il(), Il(), Il(), Gl);
        this.a = Wv(_b(a), 35);
      }
      function EJ(a, b, c) {
        wJ();
        DJ.call(this, a, b);
        c != null && (this.c = c);
      }
      function cc(a, b, c) {
        if (a < 0 || b < a || b > c) {
          throw new okb(Wb(a, b, c));
        }
      }
      function $b(a, b) {
        if (a < 0 || a >= b) {
          throw new okb(Ub(a, b));
        }
        return a;
      }
      function ac(a, b) {
        if (a == null) {
          throw new Wlb((bmb(), b));
        }
        return a;
      }
      function Dm(a) {
        if (!Cm(a)) {
          throw new nvb();
        }
        a.c = a.b;
        return a.b.H();
      }
      function jI(a) {
        function b() {
        }
        ;
        b.prototype = a || {};
        return new b();
      }
      function rr(a) {
        var b;
        b = new wtb(op(a.length));
        zpb(b, a);
        return b;
      }
      function Gub(a) {
        var b;
        b = a.c.b.b;
        a.b = b;
        a.a = a.c.b;
        b.a = a.c.b.b = a;
      }
      function jwb(a) {
        this.b = null;
        !a && (a = (hsb(), hsb(), gsb));
        this.a = a;
      }
      function W6(a) {
        this.b = a;
        this.a = new Fnb(this.b, this.b.c.length);
      }
      function Li(a) {
        Gi();
        _b(a);
        return a ? Ki(a) : Ki(Bo(new Tob(null)));
      }
      function rt(a, b) {
        var c = qt[a.charCodeAt(0)];
        return c == null ? a : c;
      }
      function Skb(a, b) {
        var c = a.a = a.a || [];
        return c[b] || (c[b] = a.Oc(b));
      }
      function CU(a, b, c) {
        var d;
        Gxb(b, c, a.c.length);
        d = c - b;
        hxb(a.c, b, d);
      }
      function Ur(a, b, c) {
        Ch.call(this, b.a);
        this.c = a;
        this.b = b;
        this.a = c;
      }
      function ko(a) {
        Vm(a.c);
        a.e = a.a = a.c;
        a.c = a.c.c;
        ++a.d;
        return a.a.f;
      }
      function lo(a) {
        Vm(a.e);
        a.c = a.a = a.e;
        a.e = a.e.e;
        --a.d;
        return a.a.f;
      }
      function MX(a) {
        return MI(Bv(tv(qz, 1), Fzb, 10, 0, [a.f.i, a.i, a.a]));
      }
      function GK() {
        EK();
        return Bv(tv(Cz, 1), uyb, 107, 0, [DK, AK, BK, CK]);
      }
      function PK() {
        NK();
        return Bv(tv(Dz, 1), uyb, 122, 0, [MK, KK, JK, LK]);
      }
      function ON() {
        MN();
        return Bv(tv(Mz, 1), uyb, 139, 0, [KN, LN, JN, IN]);
      }
      function FN() {
        DN();
        return Bv(tv(Lz, 1), uyb, 150, 0, [BN, CN, AN, zN]);
      }
      function Nc() {
        Lc();
        return Bv(tv(Bw, 1), uyb, 136, 0, [Ic, Hc, Jc, Kc]);
      }
      function iT() {
        cT();
        return Bv(tv(yA, 1), uyb, 201, 0, [$S, bT, _S, aT]);
      }
      function wN() {
        sN();
        return Bv(tv(Kz, 1), uyb, 32, 0, [qN, $M, ZM, pN, rN]);
      }
      function xK() {
        sK();
        return Bv(tv(Bz, 1), uyb, 59, 0, [qK, pK, oK, nK, rK]);
      }
      function c8() {
        c8 = iI;
        b8 = Cc((Z7(), Bv(tv(WD, 1), uyb, 193, 0, [X7, Y7])));
      }
      function _3() {
        _3 = iI;
        $3 = Cc((X3(), Bv(tv(iD, 1), uyb, 175, 0, [V3, W3])));
      }
      function u9() {
        u9 = iI;
        t9 = Cc((p9(), Bv(tv(hE, 1), uyb, 192, 0, [o9, n9])));
      }
      function Jhb() {
        Hhb();
        return Bv(tv(oF, 1), uyb, 140, 0, [Fhb, Ghb, Ehb]);
      }
      function Jgb() {
        Hgb();
        return Bv(tv(jF, 1), uyb, 218, 0, [Fgb, Egb, Ggb]);
      }
      function fjb() {
        djb();
        return Bv(tv(rF, 1), uyb, 219, 0, [cjb, ajb, bjb]);
      }
      function Sjb() {
        Qjb();
        return Bv(tv(sF, 1), uyb, 153, 0, [Njb, Pjb, Ojb]);
      }
      function ekb() {
        ckb();
        return Bv(tv(uF, 1), uyb, 172, 0, [_jb, akb, bkb]);
      }
      function Vmb(a, b, c) {
        return b == null ? Ltb(a.d, null, c) : dub(a.e, b, c);
      }
      function wk(a, b, c) {
        return new sk(a, false, null, (Gh(), Fh), true, b, c);
      }
      function tsb(a, b) {
        return $sb(a.a, b) ? usb(a, Wv(b, 17).e, null) : null;
      }
      function ql(a) {
        _b(a);
        return Ql((Il(), new Im(Dl(ul(a.a, new yl())))));
      }
      function Epb(a) {
        ypb();
        if (!a) {
          return nqb(), mqb;
        }
        return new Ipb(a);
      }
      function Oo(a, b) {
        var c, d;
        d = Qo(a, b);
        c = a.a.ub(d);
        return new bp(a, c);
      }
      function Cpb(a, b) {
        var c, d;
        d = a.Y();
        for (c = 0; c < d; c++) {
          a.wb(c, b[c]);
        }
      }
      function Xbb(a, b, c) {
        var d;
        d = new Wbb();
        d.b = b;
        d.a = c;
        ++b.b;
        vU(a.d, d);
      }
      function fW(a, b, c) {
        !!a.d && BU(a.d.b, a);
        a.d = b;
        !!a.d && uU(a.d.b, c, a);
      }
      function Mnb(a, b, c) {
        Gxb(b, c, a.Y());
        this.c = a;
        this.a = b;
        this.b = c - b;
      }
      function vP(a, b, c, d) {
        sP(this);
        this.d = a;
        this.b = b;
        this.a = c;
        this.c = d;
      }
      function zr(a, b) {
        Bk.call(this, Fpb(_b(a), _b(b)));
        this.b = a;
        this.c = b;
      }
      function Fnb(a, b) {
        this.a = a;
        wnb.call(this, a);
        Fxb(b, a.Y());
        this.b = b;
      }
      function FJ(a, b, c, d) {
        wJ();
        EJ.call(this, a, b, c);
        d != null && (this.d = d);
      }
      function e5(a, b, c) {
        a.i = 0;
        a.e = 0;
        if (b == c) {
          return;
        }
        d5(a, b, c);
        c5(a, b, c);
      }
      function Rob(a) {
        Bxb(a.a < a.c.c.length);
        a.b = a.a++;
        return a.c.c[a.b];
      }
      function avb(a) {
        Bxb(a.b.b != a.d.a);
        a.c = a.b = a.b.b;
        --a.a;
        return a.c.c;
      }
      function gwb(a, b) {
        var c;
        c = 1 - b;
        a.a[c] = hwb(a.a[c], c);
        return hwb(a, b);
      }
      function S2(a) {
        var b;
        b = (Ieb(), Ieb(), heb);
        a.d && Z2(a);
        ni();
        return b;
      }
      function ZH(a) {
        var b;
        if (UH(a)) {
          b = a;
          return b == -0 ? 0 : b;
        }
        return Nv(a);
      }
      function Ii(a) {
        var b;
        b = (_b(a), new IU((Oh(), a)));
        Dpb(b);
        return Yi(b);
      }
      function Rl(a) {
        Il();
        var b;
        while (true) {
          b = a.H();
          if (!a.G()) {
            return b;
          }
        }
      }
      function Yn(a) {
        Xn(a);
        Vm(a.c);
        a.e = a.a = a.c;
        a.c = a.c.b;
        ++a.d;
        return a.a;
      }
      function Zn(a) {
        Xn(a);
        Vm(a.e);
        a.c = a.a = a.e;
        a.e = a.e.d;
        --a.d;
        return a.a;
      }
      function Wf(a) {
        var b;
        b = a.Y();
        if (b == 0) {
          return;
        }
        a.d.Q();
        a.f.c -= b;
        $f(a);
      }
      function At(a, b, c) {
        var d;
        d = yt();
        try {
          return xt(a, b, c);
        } finally {
          Bt(d);
        }
      }
      function zt(b) {
        return function() {
          return At(b, this, arguments);
          var a;
        };
      }
      function sl(a) {
        if (aw(a, 19)) {
          return Wv(a, 19).V();
        }
        return !a.mb().G();
      }
      function gr(a) {
        Gi();
        this.a = (ypb(), aw(a, 63) ? new csb(a) : new Rqb(a));
      }
      function Mhb() {
        Mhb = iI;
        Khb = new Nhb(qzb, 0);
        Lhb = new Nhb("TOP_LEFT", 1);
      }
      function Lbb() {
        Lbb = iI;
        Jbb = new Mbb("DOWN", 0);
        Kbb = new Mbb("UP", 1);
      }
      function p9() {
        p9 = iI;
        o9 = new q9("LAYER_SWEEP", 0);
        n9 = new q9(zAb, 1);
      }
      function vab() {
        vab = iI;
        uab = new wab("UPPER", 0);
        tab = new wab("LOWER", 1);
      }
      function yxb(a) {
        if (a < 0) {
          throw new Ulb("Negative array size: " + a);
        }
      }
      function hnb(a, b) {
        if (aw(b, 21)) {
          return ee(a.a, Wv(b, 21));
        }
        return false;
      }
      function Esb(a, b) {
        if (aw(b, 21)) {
          return ee(a.a, Wv(b, 21));
        }
        return false;
      }
      function Kub(a, b) {
        if (aw(b, 21)) {
          return ee(a.a, Wv(b, 21));
        }
        return false;
      }
      function IV(a) {
        var b;
        b = new hW();
        qJ(b, a);
        sJ(b, (eM(), CL), null);
        return b;
      }
      function je(a, b) {
        return b === a ? "(this Map)" : (bmb(), b == null ? Wxb : xb(b));
      }
      function Ld(a, b, c, d) {
        return aw(c, 63) ? new ug(a, b, c, d) : new mg(a, b, c, d);
      }
      function BM() {
        zM();
        return Bv(tv(Hz, 1), uyb, 100, 0, [yM, xM, uM, vM, wM]);
      }
      function OM() {
        KM();
        return Bv(tv(Iz, 1), uyb, 28, 0, [JM, IM, HM, EM, GM, FM]);
      }
      function kK() {
        iK();
        return Bv(tv(Az, 1), uyb, 103, 0, [cK, fK, gK, hK, dK, eK]);
      }
      function $K() {
        YK();
        return Bv(tv(Ez, 1), uyb, 133, 0, [WK, UK, XK, SK, VK, TK]);
      }
      function YM() {
        YM = iI;
        XM = Cc((UM(), Bv(tv(Jz, 1), uyb, 149, 0, [TM, SM, RM])));
      }
      function iL() {
        iL = iI;
        hL = Cc((eL(), Bv(tv(Fz, 1), uyb, 166, 0, [cL, bL, dL])));
      }
      function C8() {
        C8 = iI;
        B8 = Cc((x8(), Bv(tv(_D, 1), uyb, 173, 0, [w8, v8, u8])));
      }
      function EX() {
        CX();
        return Bv(tv(pB, 1), uyb, 132, 0, [AX, zX, xX, BX, yX, wX]);
      }
      function i4() {
        g4();
        return Bv(tv(jD, 1), uyb, 125, 0, [e4, b4, f4, d4, c4, a4]);
      }
      function Vl(a) {
        Il();
        return umb(Gb((Oh(), Nh), umb(new zmb(), 91), a), 93).a;
      }
      function Gpb(a, b) {
        ypb();
        var c;
        c = a.ob();
        ipb(c, 0, c.length, b);
        Cpb(a, c);
      }
      function G3(a, b, c, d, e) {
        this.c = a;
        this.e = b;
        this.d = c;
        this.b = d;
        this.a = e;
      }
      function Peb(a, b, c, d, e) {
        Ac.call(this, a, b);
        this.a = c;
        this.b = d;
        this.c = e;
      }
      function Ahb(a, b, c, d, e) {
        Ac.call(this, a, b);
        this.a = c;
        this.b = d;
        this.c = e;
      }
      function QT(a, b, c) {
        this.a = b;
        this.c = a;
        this.b = (_b(c), new IU((Oh(), c)));
      }
      function $U() {
        tU(this);
        this.b = new HI(Uzb, Uzb);
        this.a = new HI(Vzb, Vzb);
      }
      function X3() {
        X3 = iI;
        V3 = new Y3("QUADRATIC", 0);
        W3 = new Y3("SCANLINE", 1);
      }
      function Te() {
        throw new Imb("Add not supported on this collection");
      }
      function pq(a) {
        var b, c;
        c = qmb(a.Zb());
        b = a.Yb();
        return b == 1 ? c : c + " x " + b;
      }
      function _ub(a) {
        Bxb(a.b != a.d.c);
        a.c = a.b;
        a.b = a.b.a;
        ++a.a;
        return a.c.c;
      }
      function Ukb(a) {
        if (a.Tc()) {
          return null;
        }
        var b = a.k;
        var c = fI[b];
        return c;
      }
      function bc(a, b) {
        if (a < 0 || a > b) {
          throw new okb(Vb(a, b, "index"));
        }
        return a;
      }
      function Zf(a, b) {
        var c;
        Yf(a);
        c = a.d.nb(b);
        if (c) {
          --a.f.c;
          $f(a);
        }
        return c;
      }
      function RT(a, b, c) {
        var d;
        d = (_b(a), new IU((Oh(), a)));
        PT(new QT(d, b, c));
      }
      function cmb(a, b) {
        return kmb((bmb(), a.toLowerCase()), b.toLowerCase());
      }
      function rmb(a, b) {
        return kmb((bmb(), a.toLowerCase()), b.toLowerCase());
      }
      function Jwb() {
        Fwb();
        return Bv(tv(DH, 1), uyb, 138, 0, [Bwb, Cwb, Dwb, Ewb]);
      }
      function bxb(a, b, c, d) {
        Array.prototype.splice.apply(a, [b, c].concat(d));
      }
      function TI(a, b, c, d) {
        var e;
        e = new mvb();
        e.c = b;
        e.b = c;
        e.a = d;
        d.b = c.a = e;
        ++a.b;
      }
      function Sm(a, b) {
        var c;
        c = Hpb(Bo(new mo(a, b)));
        Ml(new mo(a, b));
        return c;
      }
      function Su(d, a, b) {
        if (b) {
          var c = b.gc();
          d.a[a] = c(b);
        } else {
          delete d.a[a];
        }
      }
      function iu(d, a, b) {
        if (b) {
          var c = b.gc();
          b = c(b);
        } else {
          b = void 0;
        }
        d.a[a] = b;
      }
      function Dfb(a) {
        yfb(this);
        this.d = a.d;
        this.c = a.c;
        this.a = a.a;
        this.b = a.b;
      }
      function n7() {
        this.g = new q7();
        this.c = new q7();
        this.a = new GU();
        this.k = new GU();
      }
      function dR() {
        this.d = new OQ();
        this.a = new tV();
        this.c = new SV();
        this.b = new CV();
      }
      function oR() {
        this.i = new GU();
        this.g = new FI();
        this.n = new xS();
        this.q = new xS();
      }
      function _Y(a, b, c, d) {
        this.e = a;
        this.b = new GU();
        this.d = b;
        this.a = c;
        this.c = d;
      }
      function oT() {
        oT = iI;
        lT = new FT();
        mT = new HT();
        jT = new JT();
        kT = new LT();
        nT = new NT();
      }
      function DO() {
        DO = iI;
        BO = new EO(ozb, 0);
        AO = new EO(qzb, 1);
        CO = new EO(pzb, 2);
      }
      function IK() {
        IK = iI;
        HK = Cc((EK(), Bv(tv(Cz, 1), uyb, 107, 0, [DK, AK, BK, CK])));
      }
      function RK() {
        RK = iI;
        QK = Cc((NK(), Bv(tv(Dz, 1), uyb, 122, 0, [MK, KK, JK, LK])));
      }
      function QN() {
        QN = iI;
        PN = Cc((MN(), Bv(tv(Mz, 1), uyb, 139, 0, [KN, LN, JN, IN])));
      }
      function HN() {
        HN = iI;
        GN = Cc((DN(), Bv(tv(Lz, 1), uyb, 150, 0, [BN, CN, AN, zN])));
      }
      function pcb() {
        pcb = iI;
        ocb = Cc((lcb(), Bv(tv(JE, 1), uyb, 194, 0, [jcb, kcb])));
      }
      function Qhb() {
        Qhb = iI;
        Phb = Cc((Mhb(), Bv(tv(pF, 1), uyb, 174, 0, [Khb, Lhb])));
      }
      function Ao(a) {
        _b(a);
        return aw(a, 19) ? new IU((Oh(), Wv(a, 19))) : Bo(a.mb());
      }
      function yY(a) {
        return Ckb(Ixb(Xv(rJ(a, (Rib(), Vhb))))) && rJ(a, uib) != null;
      }
      function UY(a) {
        return Ckb(Ixb(Xv(rJ(a, (Rib(), Vhb))))) && rJ(a, uib) != null;
      }
      function jkb(a, b, c, d) {
        b == null && (b = Wxb);
        a.a += "" + (bmb(), b.substr(c, d - c));
      }
      function Mrb(a, b) {
        var c;
        for (c = 0; c < b; ++c) {
          Av(a, c, new Xrb(Wv(a[c], 21)));
        }
      }
      function Hd(a, b) {
        var c, d;
        c = Wv(sp(a.b, b), 19);
        if (c) {
          d = c.Y();
          c.Q();
          a.c -= d;
        }
      }
      function DU(a, b, c) {
        var d;
        d = (Cxb(b, a.c.length), a.c[b]);
        a.c[b] = c;
        return d;
      }
      function itb(a) {
        Bxb(a.a < a.c.a.length);
        a.b = a.a;
        gtb(a);
        return a.c.b[a.b];
      }
      function Ul(a) {
        Il();
        var b;
        b = 0;
        while (a.G()) {
          a.H();
          b = PH(b, 1);
        }
        return $s(b);
      }
      function hub(a) {
        this.d = a;
        this.b = this.d.a.entries();
        this.a = this.b.next();
      }
      function DT(a) {
        this.g = a;
        this.f = new GU();
        this.a = Qlb(this.g.c.c, this.g.d.c);
      }
      function kt(a) {
        it();
        this.e = null;
        this.f = null;
        this.a = "";
        this.b = a;
        this.a = "";
      }
      function wub() {
        ntb.call(this);
        pub(this);
        this.b.b = this.b;
        this.b.a = this.b;
      }
      function Bt(a) {
        a && It((Gt(), Ft));
        --ut;
        if (a) {
          if (wt != -1) {
            Dt(wt);
            wt = -1;
          }
        }
      }
      function bW(a) {
        if (!a.c || !a.d) {
          return false;
        }
        return !!a.c.f && a.c.f == a.d.f;
      }
      function pt() {
        if (Date.now) {
          return Date.now();
        }
        return new Date().getTime();
      }
      function lX(a) {
        if (a.c.c.length != 0) {
          return Wv(yU(a.c, 0), 33).a;
        }
        return null;
      }
      function OX(a) {
        if (a.c.c.length != 0) {
          return Wv(yU(a.c, 0), 33).a;
        }
        return null;
      }
      function qd(a) {
        a.d = 3;
        a.c = sm(a);
        if (a.d != 2) {
          a.d = 0;
          return true;
        }
        return false;
      }
      function bgb(a, b, c) {
        this.a = a;
        this.b = b;
        this.c = c;
        vU(a.j, this);
        vU(b.d, this);
      }
      function VP(a, b, c, d) {
        var e;
        a.c ? e = new Gu(hw(d)) : e = new Gu(d);
        Ru(b, c, e);
      }
      function Co(a) {
        var b, c;
        _b(a);
        b = xo(a.length);
        c = new HU(b);
        zpb(c, a);
        return c;
      }
      function Dv(a) {
        var b, c, d;
        b = a & azb;
        c = a >> 22 & azb;
        d = a < 0 ? bzb : 0;
        return Ev(b, c, d);
      }
      function nbb() {
        kbb();
        return Bv(tv(zE, 1), uyb, 141, 0, [jbb, gbb, hbb, fbb, ibb]);
      }
      function Sgb() {
        Pgb();
        return Bv(tv(kF, 1), uyb, 115, 0, [Lgb, Kgb, Ngb, Mgb, Ogb]);
      }
      function Zib() {
        Xib();
        return Bv(tv(qF, 1), uyb, 85, 0, [Wib, Sib, Tib, Uib, Vib]);
      }
      function zK() {
        zK = iI;
        yK = Cc((sK(), Bv(tv(Bz, 1), uyb, 59, 0, [qK, pK, oK, nK, rK])));
      }
      function yN() {
        yN = iI;
        xN = Cc((sN(), Bv(tv(Kz, 1), uyb, 32, 0, [qN, $M, ZM, pN, rN])));
      }
      function DM() {
        DM = iI;
        CM = Cc((zM(), Bv(tv(Hz, 1), uyb, 100, 0, [yM, xM, uM, vM, wM])));
      }
      function F9() {
        F9 = iI;
        E9 = PQ(UQ(UQ(UQ(TQ(new WQ(), (d0(), N_)), U_), r_), B_), M_);
      }
      function TT(a, b) {
        var c, d;
        for (d = b.mb(); d.G(); ) {
          c = Wv(d.H(), 55);
          ST(a, c, 0, 0);
        }
      }
      function VT(a, b, c) {
        var d, e;
        for (e = a.mb(); e.G(); ) {
          d = Wv(e.H(), 55);
          UT(d, b, c);
        }
      }
      function X8(a, b, c) {
        var d, e;
        d = 0;
        for (e = 0; e < b.length; e++) {
          d += a.Hc(b[e], d, c);
        }
      }
      function AU(a, b) {
        var c;
        c = (Cxb(b, a.c.length), a.c[b]);
        hxb(a.c, b, 1);
        return c;
      }
      function Kl(a) {
        var b;
        _b(a);
        Yb(true);
        for (b = 0; b < 0 && Cm(a); b++) {
          Dm(a);
        }
        return b;
      }
      function Ymb(a) {
        var b;
        a.d = new Ntb(a);
        a.e = new fub(a);
        b = a[WAb] | 0;
        a[WAb] = b + 1;
      }
      function igb(a) {
        a.g = new vtb();
        a.o = new vtb();
        a.c = new vtb();
        a.j = new GU();
        a.d = new GU();
      }
      function Fxb(a, b) {
        if (a < 0 || a > b) {
          throw new okb("Index: " + a + ", Size: " + b);
        }
      }
      function Cxb(a, b) {
        if (a < 0 || a >= b) {
          throw new okb("Index: " + a + ", Size: " + b);
        }
      }
      function uob(a, b) {
        var c, d;
        c = b.yb();
        d = Wvb(a, c);
        return !!d && ovb(d.e, b.zb());
      }
      function zbb(a, b) {
        var c;
        c = a.d;
        if (b > 0) {
          return Wv(yU(c.a, b - 1), 9);
        }
        return null;
      }
      function xv(a, b, c, d, e, f) {
        var g;
        g = yv(e, d);
        e != 9 && Bv(tv(a, f), b, c, e, g);
        return g;
      }
      function pd(a) {
        var b;
        if (!od(a)) {
          throw new nvb();
        }
        a.d = 1;
        b = a.c;
        a.c = null;
        return b;
      }
      function _f(a, b, c, d) {
        this.f = a;
        this.e = b;
        this.d = c;
        this.b = d;
        this.c = !d ? null : d.d;
      }
      function MH(b, c) {
        if (b && typeof b == Sxb) {
          try {
            b.__gwt$exception = c;
          } catch (a) {
          }
        }
      }
      function wT(a, b) {
        if (a.a.$b(b.d, a.b) > 0) {
          vU(a.c, new WS(b.c, b.d, a.d));
          a.b = b.d;
        }
      }
      function W4(a, b) {
        var c;
        c = glb(a.j, b.j);
        if (c == 0) {
          return glb(a.k, b.k);
        }
        return c;
      }
      function C6(a) {
        var b, c;
        c = Wv(yU(a.f, 0), 7);
        b = Wv(rJ(c, (Rib(), uib)), 7);
        return b;
      }
      function M6(a) {
        var b, c;
        c = Wv(yU(a.f, 0), 7);
        b = Wv(rJ(c, (Rib(), uib)), 7);
        return b;
      }
      function B$(a, b) {
        return glb(Ixb(Yv(rJ(a, (Rib(), Cib)))), Ixb(Yv(rJ(b, Cib))));
      }
      function Ujb() {
        Ujb = iI;
        Tjb = Cc((Qjb(), Bv(tv(sF, 1), uyb, 153, 0, [Njb, Pjb, Ojb])));
      }
      function gkb() {
        gkb = iI;
        fkb = Cc((ckb(), Bv(tv(uF, 1), uyb, 172, 0, [_jb, akb, bkb])));
      }
      function mK() {
        mK = iI;
        lK = Cc((iK(), Bv(tv(Az, 1), uyb, 103, 0, [cK, fK, gK, hK, dK, eK])));
      }
      function aL() {
        aL = iI;
        _K = Cc((YK(), Bv(tv(Ez, 1), uyb, 133, 0, [WK, UK, XK, SK, VK, TK])));
      }
      function QM() {
        QM = iI;
        PM = Cc((KM(), Bv(tv(Iz, 1), uyb, 28, 0, [JM, IM, HM, EM, GM, FM])));
      }
      function k4() {
        k4 = iI;
        j4 = Cc((g4(), Bv(tv(jD, 1), uyb, 125, 0, [e4, b4, f4, d4, c4, a4])));
      }
      function K1() {
        I1();
        return Bv(tv(GC, 1), uyb, 109, 0, [G1, B1, E1, C1, D1, A1, F1, H1]);
      }
      function qM() {
        oM();
        return Bv(tv(Gz, 1), uyb, 41, 0, [gM, fM, iM, nM, mM, lM, jM, kM, hM]);
      }
      function Bgb() {
        zgb();
        return Bv(tv(iF, 1), uyb, 123, 0, [ygb, xgb, wgb, ugb, tgb, vgb]);
      }
      function bhb() {
        _gb();
        return Bv(tv(lF, 1), uyb, 124, 0, [Ygb, Xgb, $gb, Wgb, Zgb, Vgb]);
      }
      function bK() {
        bK = iI;
        aK = new DJ("de.cau.cs.kieler.labels.labelManager", null);
      }
      function ixb() {
        if (Date.now) {
          return Date.now();
        }
        return new Date().getTime();
      }
      function Xsb(a) {
        var b;
        b = Wv(cxb(a.b, a.b.length), 11);
        return new atb(a.a, b, a.c);
      }
      function dmb(a, b) {
        var c;
        c = (bmb(), b.length);
        return emb(imb(a, a.length - c, c), b);
      }
      function dwb(a, b) {
        var c;
        c = new zwb();
        c.c = true;
        c.d = b.zb();
        return ewb(a, b.yb(), c);
      }
      function He(a, b) {
        var c;
        c = b.yb();
        return mp(), new Fk(c, Kd(a.b, c, Wv(b.zb(), 19)));
      }
      function BU(a, b) {
        var c;
        c = zU(a, b, 0);
        if (c == -1) {
          return false;
        }
        a.vb(c);
        return true;
      }
      function Cv(a, b) {
        uv(b) != 9 && Bv(tb(b), b._c, b.__elementTypeId$, uv(b), a);
        return a;
      }
      function Rub(a) {
        ksb(a.c.a.c, a);
        Bxb(a.b != a.c.a.b);
        a.a = a.b;
        a.b = a.b.a;
        return a.a;
      }
      function qnb(a) {
        uxb(!!a.c);
        ksb(a.e, a);
        a.c.I();
        a.c = null;
        a.b = onb(a);
        lsb(a.e, a);
      }
      function Acb(a, b, c) {
        a.a = b;
        a.c = c;
        a.b.a.Q();
        _I(a.d);
        a.e.a.c = xv(UF, syb, 1, 0, 4, 1);
      }
      function Ar(a, b, c) {
        Bk.call(this, Fpb(_b(a), _b(b)));
        this.b = a;
        this.c = b;
        this.a = c;
      }
      function j9(a, b, c, d) {
        this.b = new l9(this);
        this.a = a;
        this.c = b;
        this.e = c;
        this.d = d;
      }
      function xub(a) {
        $mb.call(this, a, 0);
        pub(this);
        this.b.b = this.b;
        this.b.a = this.b;
      }
      function ywb(a, b) {
        qob.call(this, a, b);
        this.a = xv(yH, syb, 183, 2, 0, 1);
        this.b = true;
      }
      function Qmb(a, b) {
        return ew(b) ? b == null ? !!Ktb(a.d, null) : bub(a.e, b) : !!Ktb(a.d, b);
      }
      function RR(a, b) {
        return Ws(), (a - b > 0 ? a - b : -(a - b)) <= $yb || a == b || isNaN(a) && isNaN(b);
      }
      function Xs(a, b) {
        Ws();
        return (a - b > 0 ? a - b : -(a - b)) <= $yb || a == b || isNaN(a) && isNaN(b);
      }
      function Z5(a) {
        var b, c;
        b = true;
        do {
          b ? c = W5(a) : c = U5(a);
          b = !b;
        } while (c);
        S5(a, a.d);
      }
      function Ru(a, b, c) {
        var d;
        if (b == null) {
          throw new Vlb();
        }
        d = Pu(a, b);
        Su(a, b, c);
        return d;
      }
      function sJ(a, b, c) {
        !a.n && (a.n = new ntb());
        c == null ? Wmb(a.n, b) : Umb(a.n, b, c);
        return a;
      }
      function zU(a, b, c) {
        for (; c < a.c.length; ++c) {
          if (ovb(b, a.c[c])) {
            return c;
          }
        }
        return -1;
      }
      function b2(a, b) {
        while (b >= a.a.c.length) {
          vU(a.a, new aJ());
        }
        return Wv(yU(a.a, b), 20);
      }
      function Fe(a, b) {
        var c;
        c = Wv(rp(a.a, b), 19);
        if (!c) {
          return null;
        }
        return Kd(a.b, b, c);
      }
      function XP(a, b, c) {
        var d;
        d = Pu(a, Gzb);
        if (!d) {
          d = new Tu();
          Ru(a, Gzb, d);
        }
        Ru(d.kc(), b, c);
      }
      function Okb(a, b, c, d, e) {
        var f;
        f = Mkb(a, b);
        $kb(c, f);
        f.g = e ? 8 : 0;
        f.f = d;
        f.e = e;
        return f;
      }
      function mo(a, b) {
        var c;
        this.f = a;
        this.b = b;
        c = Wv(Smb(a.b, b), 126);
        this.c = !c ? null : c.b;
      }
      function fJ(a, b) {
        var c, d, e;
        for (d = 0, e = b.length; d < e; ++d) {
          c = b[d];
          TI(a, c, a.c.b, a.c);
        }
      }
      function GV(a, b, c, d, e, f) {
        var g;
        g = IV(d);
        dW(g, e);
        eW(g, f);
        Fd(a.a, d, new XV(g, b, c.f));
      }
      function bab(a, b, c) {
        var d;
        d = 0;
        a.c[c] > 0 && (d += dab(b));
        a.b[c] && (d += eab(b));
        return d;
      }
      function vub(a, b) {
        var c;
        c = Wv(Wmb(a.c, b), 176);
        if (c) {
          Hub(c);
          return c.e;
        }
        return null;
      }
      function $s(a) {
        if (RH(a, $xb) > 0) {
          return $xb;
        }
        if (RH(a, eyb) < 0) {
          return eyb;
        }
        return _H(a);
      }
      function Ph(a) {
        Oh();
        Mh(a, "size");
        return _H(VH(WH(a, 8), Nyb) ? WH(a, 8) : Nyb), new Amb();
      }
      function ukb(a) {
        skb.call(this, (bmb(), a == null ? Wxb : xb(a)), aw(a, 46) ? Wv(a, 46) : null);
      }
      function HU(a) {
        tU(this);
        wxb(a >= 0, "Initial capacity must not be negative");
      }
      function JQ() {
        JQ = iI;
        HQ = VQ(UQ(UQ(new WQ(), (d0(), O_)), C_), J_);
        IQ = TQ(new WQ(), G_);
      }
      function LX() {
        LX = iI;
        IX = new UX();
        GX = new XX();
        HX = new ZX();
        FX = new _X();
        JX = new bY();
        KX = new dY();
      }
      function Fwb() {
        Fwb = iI;
        Bwb = new Gwb("All", 0);
        Cwb = new Kwb();
        Dwb = new Mwb();
        Ewb = new Pwb();
      }
      function x8() {
        x8 = iI;
        w8 = new y8(DAb, 0);
        v8 = new y8("LONGEST_PATH", 1);
        u8 = new y8(zAb, 2);
      }
      function Rv() {
        Rv = iI;
        Ov = Ev(azb, azb, 524287);
        Pv = Ev(0, 0, 524288);
        Dv(1);
        Dv(2);
        Qv = Dv(0);
      }
      function M1() {
        M1 = iI;
        L1 = Cc((I1(), Bv(tv(GC, 1), uyb, 109, 0, [G1, B1, E1, C1, D1, A1, F1, H1])));
      }
      function pbb() {
        pbb = iI;
        obb = Cc((kbb(), Bv(tv(zE, 1), uyb, 141, 0, [jbb, gbb, hbb, fbb, ibb])));
      }
      function Ugb() {
        Ugb = iI;
        Tgb = Cc((Pgb(), Bv(tv(kF, 1), uyb, 115, 0, [Lgb, Kgb, Ngb, Mgb, Ogb])));
      }
      function _ib() {
        _ib = iI;
        $ib = Cc((Xib(), Bv(tv(qF, 1), uyb, 85, 0, [Wib, Sib, Tib, Uib, Vib])));
      }
      function zvb(a) {
        tvb();
        xvb(this, _H(QH(SH(Lv(UH(a) ? YH(a) : a, 24)), bBb)), _H(QH(a, bBb)));
      }
      function tb(a) {
        return ew(a) ? $F : cw(a) ? HF : bw(a) ? EF : _v(a) ? a.$c : zv(a) ? a.$c : a.$c || $y;
      }
      function uv(a) {
        return a.__elementTypeCategory$ == null ? 9 : a.__elementTypeCategory$;
      }
      function Ht(a) {
        var b, c;
        if (a.a) {
          c = null;
          do {
            b = a.a;
            a.a = null;
            c = Lt(b, c);
          } while (a.a);
          a.a = c;
        }
      }
      function It(a) {
        var b, c;
        if (a.b) {
          c = null;
          do {
            b = a.b;
            a.b = null;
            c = Lt(b, c);
          } while (a.b);
          a.b = c;
        }
      }
      function oJ(a) {
        nJ();
        var b, c;
        c = jzb;
        for (b = 0; b < a.length; b++) {
          a[b] > c && (c = a[b]);
        }
        return c;
      }
      function KQ(a, b) {
        var c;
        c = Wv(Smb(a.b, b), 106);
        if (!c) {
          c = b.rc();
          Umb(a.b, b, c);
        }
        return c;
      }
      function rub(a, b) {
        var c;
        c = Wv(Smb(a.c, b), 176);
        if (c) {
          uub(a, c);
          return c.e;
        }
        return null;
      }
      function R2(a, b, c, d) {
        var e;
        e = Wv(rub(a.e, b), 116);
        e.b += c;
        e.a += d;
        tub(a.e, b, e);
        a.d = true;
      }
      function gtb(a) {
        var b;
        ++a.a;
        for (b = a.c.a.length; a.a < b; ++a.a) {
          if (a.c.b[a.a]) {
            return;
          }
        }
      }
      function bt(a) {
        var b, c, d;
        for (b = (a.g == null && (a.g = Pt(a)), a.g), c = 0, d = b.length; c < d; ++c)
          ;
      }
      function Tf(a, b) {
        var c, d;
        Yf(a);
        d = a.d.V();
        c = a.d.ib(b);
        if (c) {
          ++a.f.c;
          d && Vf(a);
        }
        return c;
      }
      function Mh(a, b) {
        if (a < 0) {
          throw new slb(b + " cannot be negative but was: " + a);
        }
        return a;
      }
      function Yb(a) {
        if (!a) {
          throw new slb((bmb(), "numberToAdvance must be nonnegative"));
        }
      }
      function nm(a) {
        if (!a.a.G()) {
          a.a = a.b.mb();
          if (!a.a.G()) {
            throw new nvb();
          }
        }
        return a.a.H();
      }
      function Xl(a) {
        Il();
        var b;
        _b(a);
        if (aw(a, 108)) {
          b = Wv(a, 108);
          return b;
        }
        return new km(a);
      }
      function gu(d, a) {
        var b = d.a[a];
        var c = (ev(), dv)[typeof b];
        return c ? c(b) : kv(typeof b);
      }
      function K2(a, b) {
        var c, d;
        for (d = new Tob(a); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 7);
          J2(c, b);
        }
      }
      function Z9(a, b) {
        var c, d, e, f;
        for (d = a.d, e = 0, f = d.length; e < f; ++e) {
          c = d[e];
          W9(a.g, c).a = b;
        }
      }
      function hR(a, b) {
        var c;
        c = EI(xI(Wv(Smb(a.g, b), 10)), RN(Wv(Smb(a.f, b), 198).b));
        return c;
      }
      function sr(a) {
        var b;
        return !od(Pl((b = new Snb(a.b.a).a.bb().mb(), new Ynb(b)), a.a));
      }
      function bvb(a) {
        var b;
        uxb(!!a.c);
        b = a.c.a;
        $I(a.d, a.c);
        a.b == a.c ? a.b = b : --a.a;
        a.c = null;
      }
      function gW(a) {
        return !!a.c && !!a.d ? a.c.f + "(" + a.c + ")->" + a.d.f + "(" + a.d + ")" : "e_" + txb(a);
      }
      function gT(a, b) {
        cT();
        return a == $S && b == bT || a == bT && b == $S || a == aT && b == _S || a == _S && b == aT;
      }
      function hT(a, b) {
        cT();
        return a == $S && b == _S || a == $S && b == aT || a == bT && b == aT || a == bT && b == _S;
      }
      function Bhb() {
        zhb();
        return Bv(tv(nF, 1), uyb, 110, 0, [shb, whb, thb, xhb, uhb, yhb, vhb, rhb]);
      }
      function sM() {
        sM = iI;
        rM = Cc((oM(), Bv(tv(Gz, 1), uyb, 41, 0, [gM, fM, iM, nM, mM, lM, jM, kM, hM])));
      }
      function UM() {
        UM = iI;
        TM = new VM("OUTSIDE", 0);
        SM = new VM("INSIDE", 1);
        RM = new VM("FIXED", 2);
      }
      function Hhb() {
        Hhb = iI;
        Fhb = new Ihb(tzb, 0);
        Ghb = new Ihb("TOP", 1);
        Ehb = new Ihb("BOTTOM", 2);
      }
      function mxb() {
        mxb = iI;
        lxb = new qxb();
        kxb = new oxb("ISO-LATIN-1");
        jxb = new oxb("ISO-8859-1");
      }
      function lcb() {
        lcb = iI;
        jcb = new mcb("CLASSIC", 0);
        kcb = new mcb("IMPROVE_STRAIGHTNESS", 1);
      }
      function kW() {
        this.e = new FI();
        this.a = new $W();
        this.d = new FI();
        this.b = new GU();
        this.c = new GU();
      }
      function kdb(a, b, c) {
        this.b = b;
        this.a = a;
        this.c = c;
        vU(this.a.e, this);
        vU(this.b.b, this);
      }
      function Afb(a, b) {
        a.d = Qlb(a.d, b.d);
        a.c = Nlb(a.c, b.c);
        a.a = Nlb(a.a, b.a);
        a.b = Qlb(a.b, b.b);
      }
      function $I(a, b) {
        var c;
        c = b.c;
        b.a.b = b.b;
        b.b.a = b.a;
        b.a = b.b = null;
        b.c = null;
        --a.b;
        return c;
      }
      function Jl(a, b) {
        Il();
        var c;
        _b(a);
        _b(b);
        c = false;
        while (b.G()) {
          c = c | a.ib(b.H());
        }
        return c;
      }
      function pnb(a) {
        var b;
        ksb(a.e, a);
        Bxb(a.b);
        a.c = a.a;
        b = Wv(a.a.H(), 21);
        a.b = onb(a);
        return b;
      }
      function sm(a) {
        var b;
        while (a.b.G()) {
          b = a.b.H();
          if (a.a.D(b)) {
            return b;
          }
        }
        return a.d = 2, null;
      }
      function _sb(a, b) {
        if (!!b && a.b[b.e] == b) {
          Av(a.b, b.e, null);
          --a.c;
          return true;
        }
        return false;
      }
      function TH(a) {
        if (ezb < a && a < dzb) {
          return a < 0 ? Math.ceil(a) : Math.floor(a);
        }
        return SH(Jv(a));
      }
      function rl(a) {
        if (a) {
          if (a.V()) {
            throw new nvb();
          }
          return a.sb(a.Y() - 1);
        }
        return Rl(null.mb());
      }
      function ybb(a, b) {
        var c;
        c = a.d;
        if (b < c.a.c.length - 1) {
          return Wv(yU(c.a, b + 1), 9);
        }
        return null;
      }
      function $kb(a, b) {
        var c;
        if (!a) {
          return;
        }
        b.k = a;
        var d = Ukb(b);
        if (!d) {
          fI[a] = [b];
          return;
        }
        d.$c = b;
      }
      function O5(a, b) {
        var c, d;
        d = false;
        do {
          a.i ? c = V5(a, b) : c = X5(a, b);
          d = d | c;
        } while (c);
        return d;
      }
      function Bbb(a, b, c) {
        var d, e;
        d = b;
        do {
          e = Ixb(a.n[d.k]) + c;
          a.n[d.k] = e;
          d = a.a[d.k];
        } while (d != b);
      }
      function M4(a) {
        var b, c;
        for (c = new Tob(a.a.b); c.a < c.c.c.length; ) {
          b = Wv(Rob(c), 25);
          b.vc();
        }
      }
      function bI() {
        cI();
        var a = aI;
        for (var b = 0; b < arguments.length; b++) {
          a.push(arguments[b]);
        }
      }
      function dn(a, b) {
        var c, d;
        for (c = 0, d = a.Y(); c < d; ++c) {
          if (ovb(b, a.sb(c))) {
            return c;
          }
        }
        return -1;
      }
      function or(a, b) {
        var c;
        ac(a, "set1");
        ac(b, "set2");
        c = (hc(), new nc(b));
        return new tr(a, c, b);
      }
      function Rt(a) {
        var b = /function(?:\s+([\w$]+))?\s*\(/;
        var c = b.exec(a);
        return c && c[1] || Xxb;
      }
      function YQ(a, b, c) {
        nI(c, Tzb, 3);
        NV(a.c, b, rI(c, 1));
        aR(a, b, rI(c, 1));
        BV(b, rI(c, 1));
        pI(c);
      }
      function Dgb() {
        Dgb = iI;
        Cgb = Cc((zgb(), Bv(tv(iF, 1), uyb, 123, 0, [ygb, xgb, wgb, ugb, tgb, vgb])));
      }
      function dhb() {
        dhb = iI;
        chb = Cc((_gb(), Bv(tv(lF, 1), uyb, 124, 0, [Ygb, Xgb, $gb, Wgb, Zgb, Vgb])));
      }
      function Ilb() {
        Ilb = iI;
        Hlb = Bv(tv(mw, 1), Yyb, 26, 12, [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]);
      }
      function djb() {
        djb = iI;
        cjb = new ejb(szb, 0);
        ajb = new ejb("INPUT", 1);
        bjb = new ejb("OUTPUT", 2);
      }
      function de(a) {
        this.c = a;
        this.b = new rnb(new inb(a.b).a);
        this.a = null;
        this.d = (Il(), Il(), Hl);
      }
      function Nn(a) {
        this.e = a;
        this.d = new wtb(op(ud(this.e).Y()));
        this.c = this.e.a;
        this.b = this.e.c;
      }
      function qR(a, b, c) {
        this.c = a;
        oR.call(this);
        this.b = b;
        this.j = new VN(b.d, b.e, b.c, b.b);
        this.a = c;
      }
      function qI(a, b) {
        if (a.j > 0 && a.c < a.j) {
          a.c += b;
          !!a.g && a.g.d > 0 && a.e != 0 && qI(a.g, b / a.j * a.g.d);
        }
      }
      function WV(a) {
        if (a.b.d.f.g == (CX(), xX)) {
          return Wv(rJ(a.b.d.f, (Rib(), uib)), 7);
        }
        return a.b.d;
      }
      function VV(a) {
        if (a.b.c.f.g == (CX(), xX)) {
          return Wv(rJ(a.b.c.f, (Rib(), uib)), 7);
        }
        return a.b.c;
      }
      function od(a) {
        dc(a.d != 3);
        switch (a.d) {
          case 2:
            return false;
          case 0:
            return true;
        }
        return qd(a);
      }
      function CZ(a) {
        switch (a.e) {
          case 2:
            return sN(), rN;
          case 4:
            return sN(), ZM;
          default:
            return a;
        }
      }
      function DZ(a) {
        switch (a.e) {
          case 1:
            return sN(), pN;
          case 3:
            return sN(), $M;
          default:
            return a;
        }
      }
      function Km(a) {
        var b;
        if (aw(a, 90)) {
          b = Wv(a, 90);
          return new Lm(b.a);
        } else {
          return Il(), new dm(a);
        }
      }
      function Fpb(a, b) {
        ypb();
        var c;
        c = new otb(1);
        ew(a) ? Vmb(c, a, b) : Ltb(c.d, a, b);
        return new mrb(c);
      }
      function Is(a, b) {
        if (!a.g) {
          return a.e;
        } else {
          a.g = Is(a.g, b);
          --a.a;
          a.j = XH(a.j, b.c);
          return Gs(a);
        }
      }
      function Js(a, b) {
        if (!a.e) {
          return a.g;
        } else {
          a.e = Js(a.e, b);
          --a.a;
          a.j = XH(a.j, b.c);
          return Gs(a);
        }
      }
      function Ue(a, b) {
        var c, d, e;
        Dxb(b);
        c = false;
        for (e = b.mb(); e.G(); ) {
          d = e.H();
          c = c | a.ib(d);
        }
        return c;
      }
      function nr(a) {
        var b, c, d;
        b = 0;
        for (d = a.mb(); d.G(); ) {
          c = d.H();
          b += c != null ? vb(c) : 0;
          b = ~~b;
        }
        return b;
      }
      function BY(a) {
        var b, c, d, e;
        for (c = a.a, d = 0, e = c.length; d < e; ++d) {
          b = c[d];
          b.B(null);
        }
        return null;
      }
      function Xeb(a) {
        var b, c, d;
        d = new jJ();
        for (c = a.b.mb(); c.G(); ) {
          b = Wv(c.H(), 92);
          QI(d, b.a);
        }
        return d;
      }
      function mfb(a) {
        var b, c, d;
        b = 0;
        for (d = a.mb(); d.G(); ) {
          c = Yv(d.H());
          b += (Dxb(c), c);
        }
        return b / a.Y();
      }
      function Rbb(a, b) {
        var c;
        c = Wv(Smb(a.c, b), 200);
        if (!c) {
          c = new Ybb();
          c.c = b;
          Umb(a.c, c.c, c);
        }
        return c;
      }
      function Wsb(a, b) {
        var c;
        Dxb(b);
        c = b.e;
        if (!a.b[c]) {
          Av(a.b, c, b);
          ++a.c;
          return true;
        }
        return false;
      }
      function hwb(a, b) {
        var c, d;
        c = 1 - b;
        d = a.a[c];
        a.a[c] = d.a[b];
        d.a[b] = a;
        a.b = true;
        d.b = false;
        return d;
      }
      function yI(a, b) {
        var c;
        if (aw(b, 10)) {
          c = Wv(b, 10);
          return a.a == c.a && a.b == c.b;
        } else {
          return false;
        }
      }
      function Bs(a, b, c) {
        a.g = new Os(b, c);
        es(a, a.g, a.i);
        a.d = Plb(2, a.d);
        ++a.a;
        a.j = PH(a.j, c);
        return a;
      }
      function As(a, b, c) {
        a.e = new Os(b, c);
        es(a.f, a.e, a);
        a.d = Plb(2, a.d);
        ++a.a;
        a.j = PH(a.j, c);
        return a;
      }
      function Nu(e, a) {
        var b = e.a;
        var c = 0;
        for (var d in b) {
          b.hasOwnProperty(d) && (a[c++] = d);
        }
        return a;
      }
      function he(a, b) {
        var c, d;
        Dxb(b);
        for (d = b.bb().mb(); d.G(); ) {
          c = Wv(d.H(), 21);
          a.db(c.yb(), c.zb());
        }
      }
      function vcb(a, b, c) {
        var d;
        d = a.a.e[Wv(b.a, 9).k] - a.a.e[Wv(c.a, 9).k];
        return hw(d > 0 ? 1 : d < 0 ? -1 : 0);
      }
      function r5(a, b, c) {
        this.g = a;
        this.d = b;
        this.e = c;
        this.a = new GU();
        p5(this);
        ypb();
        Gpb(this.a, null);
      }
      function Os(a, b) {
        Xb(b > 0);
        this.b = a;
        this.c = b;
        this.j = b;
        this.a = 1;
        this.d = 1;
        this.e = null;
        this.g = null;
      }
      function qcb(a) {
        a.a = null;
        a.e = null;
        a.b.c = xv(UF, syb, 1, 0, 4, 1);
        a.f.c = xv(UF, syb, 1, 0, 4, 1);
        a.c = null;
      }
      function qhb() {
        ohb();
        return Bv(tv(mF, 1), uyb, 113, 0, [fhb, hhb, ihb, jhb, khb, lhb, nhb, ehb, ghb, mhb]);
      }
      function uvb(a) {
        return wvb(a, 26) * 14901161193847656e-24 + wvb(a, 27) * 11102230246251565e-32;
      }
      function Fo(a) {
        return aw(a, 87) ? Ii(Wv(a, 87)) : aw(a, 88) ? Wv(a, 88).a : aw(a, 63) ? new ap(a) : new Ro(a);
      }
      function Udb(a) {
        var b;
        b = Wv(rJ(a, (Rib(), hib)), 32);
        return a.g == (CX(), xX) && (b == (sN(), rN) || b == ZM);
      }
      function YT(a, b) {
        if (ZT(a, b)) {
          Fd(a.a, Wv(rJ(b, (Rib(), fib)), 18), b);
          return true;
        } else {
          return false;
        }
      }
      function QQ(a, b) {
        var c;
        if (b) {
          for (c = 0; c < 6; c++) {
            Wv(yU(a.a, c), 18).jb(Wv(yU(b.a, c), 19));
          }
        }
        return a;
      }
      function rI(a, b) {
        var c;
        if (a.b) {
          return null;
        } else {
          c = oI(a.e, a.f);
          QI(a.a, c);
          c.g = a;
          a.d = b;
          return c;
        }
      }
      function hJ(a, b) {
        var c, d;
        for (d = WI(a, 0); d.b != d.d.c; ) {
          c = Wv(_ub(d), 10);
          c.a += b.a;
          c.b += b.b;
        }
        return a;
      }
      function J9(a, b) {
        var c, d;
        for (c = 0; c < b.length; c++) {
          for (d = 0; d < b[c].length; d++) {
            b[c][d] = a[c][d];
          }
        }
      }
      function P2(a) {
        var b, c;
        for (c = new Tob(a.b.f); c.a < c.c.c.length; ) {
          b = Wv(Rob(c), 7);
          Y2(a.a, Reb(b.g));
        }
      }
      function cT() {
        cT = iI;
        $S = new fT("Q1", 0);
        bT = new fT("Q4", 1);
        _S = new fT("Q2", 2);
        aT = new fT("Q3", 3);
      }
      function EK() {
        EK = iI;
        DK = new FK(szb, 0);
        AK = new FK(qzb, 1);
        BK = new FK("HEAD", 2);
        CK = new FK("TAIL", 3);
      }
      function ckb() {
        ckb = iI;
        _jb = new dkb("AGGRESSIVE", 0);
        akb = new dkb("CAREFUL", 1);
        bkb = new dkb("OFF", 2);
      }
      function Dhb() {
        Dhb = iI;
        Chb = Cc((zhb(), Bv(tv(nF, 1), uyb, 110, 0, [shb, whb, thb, xhb, uhb, yhb, vhb, rhb])));
      }
      function Akb(a, b) {
        xkb();
        return ew(a) ? kmb(a, $v(b)) : cw(a) ? flb(a, Yv(b)) : bw(a) ? ykb(a, Xv(b)) : a.F(b);
      }
      function Es(a, b, c) {
        var d;
        d = b.$b(c, a.b);
        return d < 0 ? !a.e ? 0 : Es(a.e, b, c) : d > 0 ? !a.g ? 0 : Es(a.g, b, c) : a.c;
      }
      function rk(a, b) {
        var c, d;
        if (!a.b) {
          return false;
        }
        d = a.e;
        c = a.a.$b(b, d);
        return c < 0 | c == 0 & a.d == (Gh(), Fh);
      }
      function qk(a, b) {
        var c, d;
        if (!a.c) {
          return false;
        }
        d = a.g;
        c = a.a.$b(b, d);
        return c > 0 | c == 0 & a.f == (Gh(), Fh);
      }
      function SH(a) {
        var b;
        b = a.h;
        if (b == 0) {
          return a.l + a.m * czb;
        }
        if (b == bzb) {
          return a.l + a.m * czb - dzb;
        }
        return a;
      }
      function MI(a) {
        var b, c, d, e;
        b = new FI();
        for (d = 0, e = a.length; d < e; ++d) {
          c = a[d];
          b.a += c.a;
          b.b += c.b;
        }
        return b;
      }
      function J6(a) {
        var b, c, d, e;
        for (c = a.a, d = 0, e = c.length; d < e; ++d) {
          b = c[d];
          Q6(a, b, (sN(), pN));
          Q6(a, b, $M);
        }
      }
      function zo(a) {
        var b, c, d;
        b = 1;
        for (d = a.mb(); d.G(); ) {
          c = d.H();
          b = 31 * b + (c == null ? 0 : vb(c));
          b = ~~b;
        }
        return b;
      }
      function Tsb(a) {
        var b, c;
        b = Wv(a.e && a.e(), 11);
        c = Wv(cxb(b, b.length), 11);
        return new atb(b, c, b.length);
      }
      function R6(a) {
        this.e = gw(rJ(hX(a[0]), (eM(), uL))) === gw((NK(), JK));
        this.a = a;
        this.c = new ntb();
        J6(this);
      }
      function kR(a) {
        fR();
        this.g = (mp(), new ntb());
        this.f = new ntb();
        this.b = new ntb();
        this.c = new xk();
        this.i = a;
      }
      function odb(a) {
        this.o = a;
        this.g = new GU();
        this.j = new aJ();
        this.n = new aJ();
        this.e = new GU();
        this.b = new GU();
      }
      function OR(a, b) {
        stb(a.a, b);
        if (b.f) {
          throw new gt("CNode belongs to another CGroup.");
        }
        b.f = a;
      }
      function eI(a, b) {
        typeof window === Sxb && typeof window["$gwt"] === Sxb && (window["$gwt"][a] = b);
      }
      function K5(a, b, c, d) {
        var e, f;
        e = I5(a, b, c, d);
        e < 0 && (e = -e - 1);
        for (f = c - 1; f >= e; f--) {
          a[f + 1] = a[f];
        }
        a[e] = d;
      }
      function kab(a, b, c, d) {
        var e, f;
        e = jab(a, b, c, d);
        e < 0 && (e = -e - 1);
        for (f = c - 1; f >= e; f--) {
          a[f + 1] = a[f];
        }
        a[e] = d;
      }
      function Xe(a, b) {
        var c, d;
        Dxb(b);
        for (d = b.mb(); d.G(); ) {
          c = d.H();
          if (!a.kb(c)) {
            return false;
          }
        }
        return true;
      }
      function Ll(a, b) {
        Il();
        var c;
        _b(b);
        while (a.G()) {
          c = a.H();
          if (!Udb(Wv(c, 9))) {
            return false;
          }
        }
        return true;
      }
      function wV(a, b) {
        var c, d, e;
        c = b.k - a.k;
        if (c == 0) {
          d = a.e.a * a.e.b;
          e = b.e.a * b.e.b;
          return glb(d, e);
        }
        return c;
      }
      function YH(a) {
        var b, c, d, e;
        e = a;
        d = 0;
        if (e < 0) {
          e += dzb;
          d = bzb;
        }
        c = hw(e / czb);
        b = hw(e - c * czb);
        return Ev(b, c, d);
      }
      function n6(a, b) {
        a.c.c = xv(UF, syb, 1, 0, 4, 1);
        o6(a, a.e, b);
        o6(a, a.a, b);
        ypb();
        Gpb(a.c, null);
        return p6(a);
      }
      function c5(a, b, c) {
        a.g = i5(a, b, (sN(), ZM), a.b);
        a.d = i5(a, c, ZM, a.b);
        if (a.g.c == 0 || a.d.c == 0) {
          return;
        }
        f5(a);
      }
      function d5(a, b, c) {
        a.g = i5(a, b, (sN(), rN), a.j);
        a.d = i5(a, c, rN, a.j);
        if (a.g.c == 0 || a.d.c == 0) {
          return;
        }
        f5(a);
      }
      function pU(a, b, c) {
        return new VN(Qlb(a.a, b.a) - c / 2, Qlb(a.b, b.b) - c / 2, Jlb(a.a - b.a) + c, Jlb(a.b - b.b) + c);
      }
      function onb(a) {
        if (a.a.G()) {
          return true;
        }
        if (a.a != a.d) {
          return false;
        }
        a.a = new Ptb(a.e.d);
        return a.a.G();
      }
      function xU(a, b) {
        var c, d;
        c = b.ob();
        d = c.length;
        if (d == 0) {
          return false;
        }
        gxb(a.c, a.c.length, c);
        return true;
      }
      function S5(a, b) {
        var c, d;
        for (c = 0; c < a.a.length; c++) {
          for (d = 0; d < a.a[c].length; d++) {
            a.a[c][d] = b[c][d];
          }
        }
      }
      function zpb(a, b) {
        ypb();
        var c, d, e, f;
        f = false;
        for (d = 0, e = b.length; d < e; ++d) {
          c = b[d];
          f = f | a.ib(c);
        }
        return f;
      }
      function op(a) {
        mp();
        if (a < 3) {
          Mh(a, "expectedSize");
          return a + 1;
        }
        if (a < Nyb) {
          return hw(a / 0.75 + 1);
        }
        return $xb;
      }
      function ml(a, b) {
        var c;
        if (aw(b, 19)) {
          c = (Oh(), Wv(b, 19));
          return a.jb(c);
        }
        return Jl(a, Wv(_b(b), 22).mb());
      }
      function Ufb(a, b) {
        var c, d;
        d = a.d.f;
        if (d.g == (CX(), AX)) {
          return;
        }
        c = Uh(mX(d));
        Cm(c) && Umb(b, a, Wv(Dm(c), 12));
      }
      function Xob(a, b) {
        var c, d;
        yxb(b);
        return c = epb(a, 0, b), d = xv(mw, Yyb, 26, b, 12, 1), dxb(a, 0, d, 0, c, true), d;
      }
      function swb(a, b) {
        var c;
        this.c = a;
        c = new GU();
        Zvb(a, c, b, a.b, null, false, null, false);
        this.a = new Fnb(c, 0);
      }
      function is(a) {
        if (!a.a) {
          return false;
        } else if (qk(a.c.b, a.a.b)) {
          a.a = null;
          return false;
        } else {
          return true;
        }
      }
      function ec(a) {
        if (!a) {
          throw new ulb((bmb(), "no calls to next() since the last call to remove()"));
        }
      }
      function ev() {
        ev = iI;
        dv = {boolean: fv, number: gv, string: iv, object: hv, function: hv, undefined: jv};
      }
      function xR() {
        xR = iI;
        vR = rr(Bv(tv(Bz, 1), uyb, 59, 0, [(sK(), oK), pK]));
        wR = rr(Bv(tv(Bz, 1), uyb, 59, 0, [rK, nK]));
      }
      function Apb(a) {
        ypb();
        var b, c, d;
        d = 0;
        for (c = a.mb(); c.G(); ) {
          b = c.H();
          d = d + (b != null ? vb(b) : 0);
          d = d | 0;
        }
        return d;
      }
      function Hq(a) {
        Dq();
        var b, c, d;
        d = 0;
        for (c = Vg(a).mb(); c.G(); ) {
          b = Wv(c.H(), 83);
          d = PH(d, b.Yb());
        }
        return $s(d);
      }
      function dS(a) {
        var b, c;
        for (c = new Tob(a.a.b); c.a < c.c.c.length; ) {
          b = Wv(Rob(c), 25);
          b.i.Q();
        }
        a.c.Dc(a);
        eS(a);
      }
      function eub(a, b) {
        var c;
        c = Utb(a.a, b);
        if (c === void 0) {
          ++a.d;
        } else {
          a.a[$Ab](b);
          --a.c;
          msb(a.b);
        }
        return c;
      }
      function X5(a, b) {
        var c, d, e, f;
        c = false;
        d = a.d[b].length;
        for (e = d - 1; e > 0; e--) {
          f = e - 1;
          c = c | Y5(a, b, f, e);
        }
        return c;
      }
      function V5(a, b) {
        var c, d, e, f;
        c = false;
        d = a.d[b].length;
        for (f = 0; f < d - 1; f++) {
          e = f + 1;
          c = c | Y5(a, b, f, e);
        }
        return c;
      }
      function Gv(a, b) {
        var c, d, e;
        c = a.l + b.l;
        d = a.m + b.m + (c >> 22);
        e = a.h + b.h + (d >> 22);
        return Ev(c & azb, d & azb, e & bzb);
      }
      function Mv(a, b) {
        var c, d, e;
        c = a.l - b.l;
        d = a.m - b.m + (c >> 22);
        e = a.h - b.h + (d >> 22);
        return Ev(c & azb, d & azb, e & bzb);
      }
      function LI(a, b) {
        var c;
        for (c = 0; c < (bmb(), b.length); c++) {
          if (a == b.charCodeAt(c)) {
            return true;
          }
        }
        return false;
      }
      function yP(a, b) {
        var c;
        for (c = 0; c < (bmb(), b.length); c++) {
          if (a == b.charCodeAt(c)) {
            return true;
          }
        }
        return false;
      }
      function rJ(a, b) {
        var c, d;
        if (a.n) {
          d = Smb(a.n, b);
          if (d != null) {
            return d;
          }
        }
        c = zJ(b);
        aw(c, 5) && sJ(a, b, c);
        return c;
      }
      function lJ(a) {
        var b, c, d;
        b = new jJ();
        for (d = WI(a, 0); d.b != d.d.c; ) {
          c = Wv(_ub(d), 10);
          rn(b, 0, new II(c));
        }
        return b;
      }
      function Q6(a, b, c) {
        var d, e, f, g;
        g = new U6(b, c);
        f = 0;
        for (e = T6(g); e.G(); ) {
          d = Wv(e.H(), 7);
          Umb(a.c, d, Elb(f++));
        }
      }
      function Fb(a, b, c) {
        _b(b);
        if (c.G()) {
          vmb(b, a.C(c.H()));
          while (c.G()) {
            vmb(b, a.c);
            vmb(b, a.C(c.H()));
          }
        }
        return b;
      }
      function g9(a, b, c, d, e) {
        if (d) {
          h9(a, b);
        } else {
          d9(a, b, e);
          e9(a, b, c);
        }
        if (b.c.length > 1) {
          Gpb(b, a.b);
          V9(a.c, b);
        }
      }
      function Bv(a, b, c, d, e) {
        e.$c = a;
        e._c = b;
        e.ad = kI;
        e.__elementTypeId$ = c;
        e.__elementTypeCategory$ = d;
        return e;
      }
      function vS(a, b, c) {
        switch (c.e) {
          case 2:
            a.b = b;
            break;
          case 1:
            a.c = b;
            break;
          case 4:
            a.d = b;
            break;
          case 3:
            a.a = b;
        }
      }
      function B6(a, b, c) {
        var d, e;
        e = C6(c).g;
        d = w6(a, b, e).a;
        return d - Klb(Wv(Smb(a.c, b), 24).a - Wv(Smb(a.c, c), 24).a);
      }
      function glb(a, b) {
        if (a < b) {
          return -1;
        }
        if (a > b) {
          return 1;
        }
        if (a == b) {
          return 0;
        }
        return isNaN(a) ? isNaN(b) ? 0 : 1 : -1;
      }
      function Yi(a) {
        switch (a.Y()) {
          case 0:
            return Fi;
          case 1:
            return new Er(a.mb().H());
          default:
            return new gr(a);
        }
      }
      function Nt() {
        Nt = iI;
        var a, b;
        b = !(!!Error.stackTraceLimit || "stack" in new Error());
        a = new _t();
        Mt = b ? new Tt() : a;
      }
      function RP() {
        RP = iI;
        OP = new DJ("intCoordinates", (xkb(), xkb(), vkb));
        PP = new CJ("jsonObject");
        QP = new HI(0, 0);
      }
      function XZ() {
        XZ = iI;
        VZ = new YZ("MIRROR_X", 0);
        WZ = new YZ("TRANSPOSE", 1);
        UZ = new YZ("MIRROR_AND_TRANSPOSE", 2);
      }
      function Hgb() {
        Hgb = iI;
        Fgb = new Igb(tzb, 0);
        Egb = new Igb("INCOMING_ONLY", 1);
        Ggb = new Igb("OUTGOING_ONLY", 2);
      }
      function Seb() {
        Ieb();
        return Bv(tv(_E, 1), uyb, 60, 0, [meb, jeb, ieb, peb, oeb, Heb, Geb, neb, keb, leb, qeb, Eeb, Feb]);
      }
      function b3() {
        b3 = iI;
        var a, b, c, d;
        a3 = new vsb(_E);
        for (b = Seb(), c = 0, d = b.length; c < d; ++c) {
          a = b[c];
          ssb(a3, a, null);
        }
      }
      function Bpb(a) {
        ypb();
        var b, c, d;
        d = 1;
        for (c = a.mb(); c.G(); ) {
          b = c.H();
          d = 31 * d + (b != null ? vb(b) : 0);
          d = d | 0;
        }
        return d;
      }
      function Tl(a, b) {
        Il();
        var c, d;
        ac(b, "predicate");
        for (d = 0; a.G(); d++) {
          c = a.H();
          if (b.D(c)) {
            return d;
          }
        }
        return -1;
      }
      function Or(a, b) {
        var c, d;
        c = a.c.a;
        d = b.ac(c);
        a.b.b && (d = XH(d, Nr(a, b, c)));
        a.b.c && (d = XH(d, Mr(a, b, c)));
        return d;
      }
      function bwb(a, b, c) {
        var d, e;
        d = new ywb(b, c);
        e = new zwb();
        a.b = _vb(a, a.b, d, e);
        e.b || ++a.c;
        a.b.b = false;
        return e.d;
      }
      function gJ(a, b, c) {
        var d, e, f;
        d = new aJ();
        for (f = WI(c, 0); f.b != f.d.c; ) {
          e = Wv(_ub(f), 10);
          QI(d, new II(e));
        }
        sn(a, b, d);
      }
      function Mp(a, b) {
        var c;
        if (b === a) {
          return true;
        }
        if (aw(b, 144)) {
          c = Wv(b, 144);
          return a.P().t(c.P());
        }
        return false;
      }
      function Svb(a) {
        var b;
        b = a.a.c.length;
        if (b > 0) {
          return Dvb(b - 1, a.a.c.length), AU(a.a, b - 1);
        } else {
          throw new osb();
        }
      }
      function p2(a) {
        if (a.b.c.length - a.e.c.length < 0) {
          QX(a, (sN(), ZM));
          a.a.a = a.j.a;
        } else {
          QX(a, (sN(), rN));
          a.a.a = 0;
        }
      }
      function $mb(a, b) {
        wxb(a >= 0, "Negative initial capacity");
        wxb(b >= 0, "Non-positive load factor");
        Ymb(this);
      }
      function rnb(a) {
        var b;
        this.e = a;
        this.d = new hub(this.e.e);
        this.a = this.d;
        this.b = onb(this);
        b = a[WAb];
        this[WAb] = b;
      }
      function Kkb() {
        ++Fkb;
        this.n = null;
        this.j = null;
        this.i = null;
        this.d = null;
        this.b = null;
        this.k = null;
        this.a = null;
      }
      function fpb(a) {
        var b, c, d, e;
        e = 1;
        for (c = 0, d = a.length; c < d; ++c) {
          b = a[c];
          e = 31 * e + (b != null ? vb(b) : 0);
          e = e | 0;
        }
        return e;
      }
      function Cc(a) {
        var b, c, d, e;
        b = {};
        for (d = 0, e = a.length; d < e; ++d) {
          c = a[d];
          b[":" + (c.d != null ? c.d : "" + c.e)] = c;
        }
        return b;
      }
      function wO(a) {
        uO();
        var b, c, d, e;
        for (c = xO(), d = 0, e = c.length; d < e; ++d) {
          b = c[d];
          if (Zi(b.a, a)) {
            return b;
          }
        }
        return tO;
      }
      function Itb(a, b, c) {
        var d, e, f;
        for (e = 0, f = c.length; e < f; ++e) {
          d = c[e];
          if (a.b.Uc(b, d.yb())) {
            return d;
          }
        }
        return null;
      }
      function Rmb(a, b, c) {
        var d, e;
        for (e = c.mb(); e.G(); ) {
          d = Wv(e.H(), 21);
          if (a.Uc(b, d.zb())) {
            return true;
          }
        }
        return false;
      }
      function Wvb(a, b) {
        var c, d, e;
        e = a.b;
        while (e) {
          c = a.a.$b(b, e.d);
          if (c == 0) {
            return e;
          }
          d = c < 0 ? 0 : 1;
          e = e.a[d];
        }
        return null;
      }
      function Ge(a, b) {
        var c, d;
        c = Wv(Wmb(a.a, b), 19);
        if (!c) {
          return null;
        }
        d = a.b.Z();
        d.jb(c);
        a.b.c -= c.Y();
        c.Q();
        return d;
      }
      function y0(a, b, c) {
        var d;
        d = Wv(b.B(a), 9);
        while (d.g == (CX(), zX)) {
          !d.n && (d.n = new ntb());
          Wmb(d.n, c);
          d = Wv(b.B(d), 9);
        }
      }
      function RH(a, b) {
        var c;
        if (UH(a) && UH(b)) {
          c = a - b;
          if (!isNaN(c)) {
            return c;
          }
        }
        return Iv(UH(a) ? YH(a) : a, UH(b) ? YH(b) : b);
      }
      function OH(a) {
        var b;
        if (aw(a, 46)) {
          return a;
        }
        b = a && a.__gwt$exception;
        if (!b) {
          b = new kt(a);
          Ot(b, a);
          MH(a, b);
        }
        return b;
      }
      function p6(a) {
        var b, c, d;
        b = 0;
        for (d = new Tob(a.c); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 226);
          b += b6(a, c.a, c.b);
        }
        return b;
      }
      function pT(a) {
        var b;
        b = new DT(a);
        RT(a.a, nT, new opb(Bv(tv(JA, 1), syb, 160, 0, [b])));
        !!b.d && vU(b.f, b.d);
        return b.f;
      }
      function w6(a, b, c) {
        switch (c.e) {
          case 1:
            return Wv(Smb(a.d, b), 24);
          case 3:
            return Wv(Smb(a.j, b), 24);
        }
        return Elb(0);
      }
      function M5(a, b, c) {
        if (!a.d[b.k][c.k]) {
          L5(a, b, c);
          a.d[b.k][c.k] = true;
          a.d[c.k][b.k] = true;
        }
        return a.a[b.k][c.k];
      }
      function Ds(a, b, c) {
        var d;
        d = b.$b(c, a.b);
        return d < 0 ? !a.e ? a : Wv(Sb(Ds(a.e, b, c), a), 206) : d == 0 ? a : !a.g ? null : Ds(a.g, b, c);
      }
      function rb(a, b) {
        return ew(a) ? emb(a, b) : cw(a) ? (Dxb(a), a === b) : bw(a) ? (Dxb(a), a === b) : _v(a) ? a.t(b) : zv(a) ? a === b : a === b;
      }
      function vQ(a, b) {
        return emb(a.b, b) || dmb(a.b, b) && ((bmb(), b.length) == pmb(a.b) || jmb(a.b, pmb(a.b) - b.length - 1) == 46);
      }
      function L6(a, b) {
        var c, d, e;
        c = 0;
        for (e = nX(a, b).mb(); e.G(); ) {
          d = Wv(e.H(), 7);
          c += rJ(d, (Rib(), Bib)) != null ? 1 : 0;
        }
        return c;
      }
      function Xvb(a, b) {
        var c, d, e;
        d = null;
        e = a.b;
        while (e) {
          c = a.a.$b(b, e.d);
          if (c >= 0) {
            e = e.a[1];
          } else {
            d = e;
            e = e.a[0];
          }
        }
        return d;
      }
      function Yvb(a, b) {
        var c, d, e;
        d = null;
        e = a.b;
        while (e) {
          c = a.a.$b(b, e.d);
          if (c <= 0) {
            e = e.a[0];
          } else {
            d = e;
            e = e.a[1];
          }
        }
        return d;
      }
      function u0(a, b, c, d) {
        var e, f;
        for (f = a.mb(); f.G(); ) {
          e = Wv(f.H(), 33);
          e.i.a = b.a + (d.a - e.j.a) / 2;
          e.i.b = b.b;
          b.b += e.j.b + c;
        }
      }
      function o$(a, b) {
        var c;
        if (a.c.length == 0) {
          return;
        }
        c = Wv(FU(a, xv(qB, Nzb, 9, a.c.length, 0, 1)), 51);
        lpb(c, new z$());
        l$(c, b);
      }
      function t$(a, b) {
        var c;
        if (a.c.length == 0) {
          return;
        }
        c = Wv(FU(a, xv(qB, Nzb, 9, a.c.length, 0, 1)), 51);
        lpb(c, new C$());
        l$(c, b);
      }
      function _Z(a) {
        var b, c;
        b = a.g;
        if (b == (CX(), xX)) {
          c = Wv(rJ(a, (Rib(), hib)), 32);
          return c == (sN(), $M) || c == pN;
        }
        return false;
      }
      function Gc(a, b) {
        var c;
        Dxb(b);
        c = a[":" + b];
        xxb(!!c, "Enum constant undefined: %s", Bv(tv(UF, 1), syb, 1, 4, [b]));
        return c;
      }
      function Zb(a, b, c) {
        if (!a) {
          throw new slb(fc("lowerEndpoint (%s) > upperEndpoint (%s)", Bv(tv(UF, 1), syb, 1, 4, [b, c])));
        }
      }
      function kv(a) {
        ev();
        throw new zu("Unexpected typeof result '" + a + "'; please report this bug to the GWT team");
      }
      function tN(a) {
        switch (a.e) {
          case 1:
            return pN;
          case 2:
            return rN;
          case 3:
            return $M;
          case 4:
            return ZM;
          default:
            return qN;
        }
      }
      function vK(a) {
        switch (a.e) {
          case 2:
            return pK;
          case 1:
            return oK;
          case 4:
            return nK;
          case 3:
            return rK;
          default:
            return qK;
        }
      }
      function Dkb(a) {
        if (a >= 48 && a < 58) {
          return a - 48;
        }
        if (a >= 97 && a < 97) {
          return a - 97 + 10;
        }
        if (a >= 65 && a < 65) {
          return a - 65 + 10;
        }
        return -1;
      }
      function td(a, b) {
        var c, d;
        for (d = Ep(Be(a.P())); d.b.G(); ) {
          c = Wv(zm(d, d.b.H()), 19);
          if (c.kb(b)) {
            return true;
          }
        }
        return false;
      }
      function js(a) {
        var b;
        if (!is(a)) {
          throw new nvb();
        }
        b = new fs(a.c, a.a);
        a.b = b;
        a.a.i == a.c.a ? a.a = null : a.a = a.a.i;
        return b;
      }
      function pp(a, b) {
        mp();
        var c;
        if (a === b) {
          return true;
        } else if (aw(b, 57)) {
          c = Wv(b, 57);
          return mr(nj(a), c.bb());
        }
        return false;
      }
      function Gq(a, b, c, d) {
        Dq();
        Mh(c, "oldCount");
        Mh(d, "newCount");
        if (a.Cb(b) == c) {
          a.Gb(b, d);
          return true;
        } else {
          return false;
        }
      }
      function Bh(a, b, c, d, e) {
        _b(c);
        _b(e);
        return Rr(new Ur(a.c, pk(a.b, new sk(a.d, true, b, c, false, null, (Gh(), Fh))), a.a), d, e);
      }
      function ck(a) {
        hi();
        switch (a.Y()) {
          case 0:
            return kr(), jr;
          case 1:
            return new Gr(a.mb().H());
          default:
            return new lr(a);
        }
      }
      function PH(a, b) {
        var c;
        if (UH(a) && UH(b)) {
          c = a + b;
          if (ezb < c && c < dzb) {
            return c;
          }
        }
        return SH(Gv(UH(a) ? YH(a) : a, UH(b) ? YH(b) : b));
      }
      function WH(a, b) {
        var c;
        if (UH(a) && UH(b)) {
          c = a * b;
          if (ezb < c && c < dzb) {
            return c;
          }
        }
        return SH(Kv(UH(a) ? YH(a) : a, UH(b) ? YH(b) : b));
      }
      function XH(a, b) {
        var c;
        if (UH(a) && UH(b)) {
          c = a - b;
          if (ezb < c && c < dzb) {
            return c;
          }
        }
        return SH(Mv(UH(a) ? YH(a) : a, UH(b) ? YH(b) : b));
      }
      function sK() {
        sK = iI;
        qK = new wK(szb, 0);
        pK = new wK(pzb, 1);
        oK = new wK(ozb, 2);
        nK = new wK("DOWN", 3);
        rK = new wK("UP", 4);
      }
      function NK() {
        NK = iI;
        MK = new OK(szb, 0);
        KK = new OK("POLYLINE", 1);
        JK = new OK("ORTHOGONAL", 2);
        LK = new OK("SPLINES", 3);
      }
      function eL() {
        eL = iI;
        cL = new fL("INHERIT", 0);
        bL = new fL("INCLUDE_CHILDREN", 1);
        dL = new fL("SEPARATE_CHILDREN", 2);
      }
      function G8() {
        G8 = iI;
        D8 = TQ(RQ(new WQ(), (d0(), p_)), I_);
        E8 = PQ(TQ(SQ(new WQ(), j_), h_), i_);
        F8 = PQ(UQ(new WQ(), k_), i_);
      }
      function P8() {
        P8 = iI;
        M8 = TQ(RQ(new WQ(), (d0(), p_)), I_);
        N8 = PQ(TQ(SQ(new WQ(), j_), h_), i_);
        O8 = PQ(UQ(new WQ(), k_), i_);
      }
      function deb(a) {
        this.a = new Wub();
        this.d = new Wub();
        this.b = new Wub();
        this.c = new Wub();
        this.g = new Wub();
        this.i = new Wub();
        this.f = a;
      }
      function UV(a, b, c, d, e, f) {
        this.e = new GU();
        this.f = (djb(), cjb);
        vU(this.e, a);
        this.d = b;
        this.a = c;
        this.b = d;
        this.f = e;
        this.c = f;
      }
      function hpb(a, b, c, d, e, f, g, h) {
        var i;
        i = c;
        while (f < g) {
          i >= d || b < c && h.$b(a[b], a[i]) <= 0 ? Av(e, f++, a[b++]) : Av(e, f++, a[i++]);
        }
      }
      function v0(a, b, c, d, e) {
        var f, g;
        for (g = a.mb(); g.G(); ) {
          f = Wv(g.H(), 33);
          f.i.a = b.a;
          f.i.b = e ? b.b : b.b + d.b - f.j.b;
          b.a += f.j.a + c;
        }
      }
      function gcb(a, b) {
        $bb();
        var c, d;
        for (d = Uh(gX(a)); Cm(d); ) {
          c = Wv(Dm(d), 12);
          if (c.d.f == b || c.c.f == b) {
            return c;
          }
        }
        return null;
      }
      function fdb(a, b, c) {
        var d, e, f;
        d = 0;
        for (f = WI(a, 0); f.b != f.d.c; ) {
          e = Ixb(Yv(_ub(f)));
          if (e > c) {
            break;
          } else
            e >= b && ++d;
        }
        return d;
      }
      function sn(a, b, c) {
        var d, e, f, g;
        Dxb(c);
        g = false;
        f = WI(a, b);
        for (e = WI(c, 0); e.b != e.d.c; ) {
          d = _ub(e);
          $ub(f, d);
          g = true;
        }
        return g;
      }
      function Uf(a, b) {
        var c, d, e;
        if (b.V()) {
          return false;
        }
        e = a.Y();
        c = a.d.jb(b);
        if (c) {
          d = a.d.Y();
          a.f.c += d - e;
          e == 0 && Vf(a);
        }
        return c;
      }
      function qJ(a, b) {
        var c;
        if (!b) {
          return a;
        }
        c = !b.n ? (ypb(), ypb(), wpb) : b.n;
        c.V() || (!a.n ? a.n = new ptb(c) : he(a.n, c));
        return a;
      }
      function Gb(b, c, d) {
        var e;
        try {
          Fb(b, c, d);
        } catch (a) {
          a = OH(a);
          if (aw(a, 181)) {
            e = a;
            throw new ukb(e);
          } else
            throw NH(a);
        }
        return c;
      }
      function Qb(b, c, d) {
        var e;
        try {
          Pb(b, c, d);
        } catch (a) {
          a = OH(a);
          if (aw(a, 181)) {
            e = a;
            throw new ukb(e);
          } else
            throw NH(a);
        }
        return c;
      }
      function NH(a) {
        var b;
        if (aw(a, 164)) {
          b = Wv(a, 164);
          if (gw(b.b) !== gw((it(), ht))) {
            return gw(b.b) === gw(ht) ? null : b.b;
          }
        }
        return a;
      }
      function SW(a, b) {
        var c;
        c = Wv(rJ(hX(a), (Rib(), zib)), 9);
        while (c) {
          if (c == b) {
            return true;
          }
          c = Wv(rJ(hX(c), zib), 9);
        }
        return false;
      }
      function EZ(a) {
        switch (Wv(rJ(a, (Rib(), mib)), 140).e) {
          case 1:
            sJ(a, mib, (Hhb(), Ehb));
            break;
          case 2:
            sJ(a, mib, (Hhb(), Ghb));
        }
      }
      function Kk(a) {
        hi();
        switch (a.c) {
          case 0:
            return kr(), jr;
          case 1:
            return new Gr(Sl(new jtb(a)));
          default:
            return new Jk(a);
        }
      }
      function Ti(a) {
        Gi();
        var b, c;
        for (b = 0, c = a.length; b < c; b++) {
          if (a[b] == null) {
            throw new Wlb("at index " + b);
          }
        }
        return new opb(a);
      }
      function $4(a, b, c) {
        if (b.length == 0 || c.length == 0) {
          return 0;
        }
        a.e ? a.b = new y5(a.c) : a.b = new H5(a.c);
        return a.b.Gc(b, c);
      }
      function pI(a) {
        if (a.i == null) {
          throw new ulb("The task has not begun yet.");
        }
        if (!a.b) {
          a.c < a.j && qI(a, a.j - a.c);
          a.b = true;
        }
      }
      function DR(a, b) {
        var c, d;
        for (d = new Tob(b); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 27);
          BU(a.b.b, c.b);
          PR(Wv(c.a, 78), Wv(c.b, 25));
        }
      }
      function aU(a, b) {
        var c, d;
        for (d = new Tob(a.a); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 222);
          if (YT(c, b)) {
            return;
          }
        }
        vU(a.a, new _T(b));
      }
      function aV(a) {
        var b, c, d;
        b = new GU();
        for (d = new Tob(a.b); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 251);
          xU(b, Wv(c.Ac(), 19));
        }
        return b;
      }
      function Q0(a, b) {
        var c, d, e;
        e = new GU();
        for (d = nX(a, b).mb(); d.G(); ) {
          c = Wv(d.H(), 7);
          e.c[e.c.length] = c;
        }
        Gpb(e, new V0());
        return e;
      }
      function iX(a) {
        var b, c, d;
        b = new GU();
        for (d = new Tob(a.f); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 7);
          vU(b, c.b);
        }
        return _b(b), new Vh(b);
      }
      function mX(a) {
        var b, c, d;
        b = new GU();
        for (d = new Tob(a.f); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 7);
          vU(b, c.e);
        }
        return _b(b), new Vh(b);
      }
      function Elb(a) {
        var b, c;
        if (a > -129 && a < 128) {
          b = a + 128;
          c = (Glb(), Flb)[b];
          !c && (c = Flb[b] = new wlb(a));
          return c;
        }
        return new wlb(a);
      }
      function R5(a) {
        var b, c;
        b = Z4(a.b, a.d);
        c = $xb;
        while (c > b) {
          S5(a, a.d);
          if (b == 0) {
            c = 0;
            break;
          }
          W5(a);
          U5(a);
          c = b;
          b = Z4(a.b, a.d);
        }
        a.c = c;
      }
      function yvb() {
        tvb();
        var a, b, c;
        c = svb++ + ixb();
        a = hw(Math.floor(c * FAb)) & bBb;
        b = hw(c - a * aBb);
        this.a = a ^ 1502;
        this.b = b ^ _Ab;
      }
      function vb(a) {
        return ew(a) ? Pxb(a) : cw(a) ? hw((Dxb(a), a)) : bw(a) ? Ckb((Dxb(a), a)) ? 1231 : 1237 : _v(a) ? a.v() : zv(a) ? txb(a) : txb(a);
      }
      function AQ(a, b, c) {
        var d, e, f;
        e = new jQ();
        e.d = c;
        d = UP(e, b);
        f = new dR();
        Ckb(Ixb(Xv(rJ(d, yQ)))) ? YQ(f, d, new sI()) : BQ(a, f, d);
        ZP(e, d);
      }
      function E6(a, b, c, d) {
        var e, f, g, h;
        h = new U6(b, d);
        g = 0;
        for (f = T6(h); f.G(); ) {
          e = Wv(f.H(), 7);
          Umb(a.i, e, Elb(g++));
        }
        Umb(c, b, Elb(g));
      }
      function c6(a, b) {
        var c, d, e, f, g;
        c = 0;
        g = 0;
        for (e = 0, f = b.length; e < f; ++e) {
          d = b[e];
          c = i6(a, c, d, (sN(), ZM), a.f);
          g = i6(a, g, d, rN, a.n);
        }
      }
      function pJ(a, b) {
        var c, d, e, f;
        if (!a.n) {
          return;
        }
        for (d = 0, e = b.length; d < e; ++d) {
          c = b[d];
          f = Smb(a.n, c);
          if (f != null) {
            c.nc();
            c.oc();
          }
        }
      }
      function L2(a, b) {
        var c, d, e;
        for (d = new Tob(b); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 75);
          e = X2(a.a);
          R2(a.a, e, c.k, c.j);
          aeb(c, e, true);
        }
      }
      function M2(a, b) {
        var c, d, e;
        for (d = new Tob(b); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 75);
          e = W2(a.a);
          R2(a.a, e, c.k, c.j);
          aeb(c, e, true);
        }
      }
      function PW(a) {
        var b, c;
        c = Wv(rJ(a, (eM(), sL)), 59);
        if (c == (sK(), qK)) {
          b = Wv(rJ(a, (Rib(), Rhb)), 15).a;
          return b >= 1 ? pK : nK;
        }
        return c;
      }
      function Cm(a) {
        _b(a.b);
        if (a.b.G()) {
          return true;
        }
        while (a.a.G()) {
          _b(a.b = a.Wb(a.a.H()));
          if (a.b.G()) {
            return true;
          }
        }
        return false;
      }
      function m7(a) {
        if (a.d != a.c.d || a.i != a.g.d) {
          a.a.c = xv(UF, syb, 1, 0, 4, 1);
          xU(a.a, a.c);
          xU(a.a, a.g);
          a.d = a.c.d;
          a.i = a.g.d;
        }
        return a.a;
      }
      function Yf(a) {
        var b;
        if (a.b) {
          Yf(a.b);
          if (a.b.d != a.c) {
            throw new nsb();
          }
        } else if (a.d.V()) {
          b = Wv(Smb(a.f.b, a.e), 19);
          !!b && (a.d = b);
        }
      }
      function H9(a, b, c, d, e) {
        var f, g, h, i;
        i = Co(a);
        g9(b, i, d, e, c);
        f = 0;
        for (h = new Tob(i); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 9);
          a[f++] = g;
        }
      }
      function oP(a) {
        var b, c, d;
        d = Wv(vW(a.a, (eM(), DL)), 15).a;
        for (c = new Tob(uW(a.a)); c.a < c.c.c.length; ) {
          b = Wv(Rob(c), 626);
          qP(a, b, d);
        }
      }
      function WQ() {
        var a, b;
        this.a = new HU(6);
        for (b = 0; b < 6; b++) {
          vU(this.a, (a = Wv(Hkb(mC), 11), new atb(a, Wv(exb(a, a.length), 11), 0)));
        }
      }
      function W5(a) {
        var b, c, d;
        d = false;
        for (c = 0; c < a.d.length; c++) {
          a.j = (b = new N5(a.e, a.d, c, 0), new b7(c, a.d, b));
          d = d | O5(a, c);
        }
        return d;
      }
      function H8(a, b, c) {
        var d, e;
        e = a.a.c;
        for (d = e.c.length; d < c; d++) {
          uU(e, 0, new sY(a.a));
        }
        rX(b, Wv(yU(e, e.c.length - c), 16));
        a.b[b.k] = c;
      }
      function hdb(a, b) {
        var c, d;
        c = WI(a, 0);
        while (c.b != c.d.c) {
          d = Ixb(Yv(_ub(c)));
          if (d == b) {
            return;
          } else if (d > b) {
            avb(c);
            break;
          }
        }
        $ub(c, b);
      }
      function dub(a, b, c) {
        var d;
        d = Utb(a.a, b);
        Wtb(a.a, b, c === void 0 ? null : c);
        if (d === void 0) {
          ++a.c;
          msb(a.b);
        } else {
          ++a.d;
        }
        return d;
      }
      function qgb(a, b, c) {
        if ((b - a <= 0 ? 0 - (b - a) : b - a) < uAb || (c - a <= 0 ? 0 - (c - a) : c - a) < uAb) {
          return true;
        }
        return b - a > uAb ? a - c > uAb : c - a > uAb;
      }
      function Qgb(a) {
        switch (a.e) {
          case 0:
            return Kgb;
          case 1:
            return Lgb;
          case 2:
            return Mgb;
          case 3:
            return Ngb;
          default:
            return Ogb;
        }
      }
      function uS(a, b) {
        switch (b.e) {
          case 2:
            return a.b;
          case 1:
            return a.c;
          case 4:
            return a.d;
          case 3:
            return a.a;
          default:
            return false;
        }
      }
      function vN(a) {
        sN();
        switch (a.e) {
          case 4:
            return $M;
          case 1:
            return ZM;
          case 3:
            return pN;
          case 2:
            return rN;
          default:
            return qN;
        }
      }
      function c7(a, b) {
        if (b == a.c) {
          return a.d;
        } else if (b == a.d) {
          return a.c;
        } else {
          throw new slb("Node " + b + " not part of edge " + a);
        }
      }
      function zO(a, b) {
        var c;
        if (Zsb(a.a, b)) {
          return Wv(Zsb(a.a, b) ? a.b[b.e] : null, 62);
        } else {
          c = new ZN();
          Wsb(a.a, b);
          usb(a, b.e, c);
          return c;
        }
      }
      function Zeb(a, b) {
        var c, d, e, f;
        f = a.g.tb();
        c = 0;
        while (f.G()) {
          d = Ixb(Yv(f.H()));
          e = d - b;
          if (e > RAb) {
            return c;
          } else
            e > SAb && ++c;
        }
        return c;
      }
      function Usb(a) {
        var b, c, d, e;
        c = (b = Wv(Hkb((d = a.$c, e = d.f, e == IF ? d : e)), 11), new atb(b, Wv(exb(b, b.length), 11), 0));
        Wsb(c, a);
        return c;
      }
      function yR(a, b) {
        var c, d;
        for (d = new Tob(b); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 27);
          vU(a.b.b, Wv(c.b, 25));
          OR(Wv(c.a, 78), Wv(c.b, 25));
        }
      }
      function gpb(a, b, c, d) {
        var e, f, g;
        for (e = b + 1; e < c; ++e) {
          for (f = e; f > b && d.$b(a[f - 1], a[f]) > 0; --f) {
            g = a[f];
            Av(a, f, a[f - 1]);
            Av(a, f - 1, g);
          }
        }
      }
      function k3(a) {
        var b, c;
        if (!MM(Wv(rJ(a, (eM(), TL)), 28))) {
          for (c = new Tob(a.f); c.a < c.c.c.length; ) {
            b = Wv(Rob(c), 7);
            QX(b, (sN(), qN));
          }
        }
      }
      function oX(a, b) {
        switch (b.e) {
          case 1:
            return pl(a.f, (LX(), GX));
          case 2:
            return pl(a.f, (LX(), IX));
          default:
            return ypb(), ypb(), vpb;
        }
      }
      function oW(a, b) {
        if (yJ(b, (eM(), cM))) {
          return rJ(a.e, (Rib(), Jib));
        } else if (yJ(b, LL)) {
          return rJ(a.e, (Rib(), tib));
        }
        return rJ(a.e, b);
      }
      function I5(a, b, c, d) {
        var e, f, g;
        f = b;
        e = c - 1;
        while (f <= e) {
          g = (f + e) / 2 | 0;
          if (a[g] == d) {
            return g;
          } else
            a[g] < d ? f = g + 1 : e = g - 1;
        }
        return -f - 1;
      }
      function Ve(a, b, c) {
        var d, e;
        for (e = a.mb(); e.G(); ) {
          d = e.H();
          if (gw(b) === gw(d) || b != null && rb(b, d)) {
            c && e.I();
            return true;
          }
        }
        return false;
      }
      function epb(a, b, c) {
        var d;
        xxb(b <= c, "%s > %s", Bv(tv(UF, 1), syb, 1, 4, [Elb(b), Elb(c)]));
        d = a.length;
        c = c < d ? c : d;
        Gxb(b, c, d);
        return c - b;
      }
      function aW(a, b) {
        var c, d, e;
        c = a;
        e = 0;
        do {
          if (c == b) {
            return e;
          }
          d = Wv(rJ(c, (Rib(), zib)), 9);
          if (!d) {
            throw new rlb();
          }
          c = hX(d);
          ++e;
        } while (true);
      }
      function U5(a) {
        var b, c, d;
        d = false;
        for (c = a.d.length - 1; c >= 0; c--) {
          a.j = (b = new N5(a.e, a.d, c, 1), new b7(c, a.d, b));
          d = d | O5(a, c);
        }
        return d;
      }
      function k6(a) {
        this.f = (mp(), new ntb());
        this.n = new ntb();
        this.k = new ntb();
        this.g = new vtb();
        this.i = new Vr((Tq(), Sq));
        this.j = a;
        c6(this, a);
      }
      function vsb(a) {
        var b;
        this.a = (b = Wv(a.e && a.e(), 11), new atb(b, Wv(exb(b, b.length), 11), 0));
        this.b = xv(UF, syb, 1, this.a.a.length, 4, 1);
      }
      function jf(a, b) {
        var c;
        if (b === a) {
          return true;
        }
        if (!aw(b, 18)) {
          return false;
        }
        c = Wv(b, 18);
        if (c.Y() != a.Y()) {
          return false;
        }
        return a.lb(c);
      }
      function Reb(a) {
        Ieb();
        switch (a.e) {
          case 1:
            return meb;
          case 2:
            return ieb;
          case 3:
            return oeb;
          case 4:
            return Geb;
          default:
            return Feb;
        }
      }
      function pgb(a, b) {
        switch (b.e) {
          case 1:
            return a.e.d;
          case 2:
            return a.e.c;
          case 3:
            return a.e.a;
          case 4:
            return a.e.b;
          default:
            return 0;
        }
      }
      function xO() {
        uO();
        return Bv(tv(Oz, 1), uyb, 67, 0, [rO, qO, sO, iO, hO, jO, mO, lO, kO, pO, oO, nO, fO, eO, gO, cO, bO, dO, _N, $N, aO, tO]);
      }
      function zM() {
        zM = iI;
        yM = new AM(szb, 0);
        xM = new AM("JUSTIFIED", 1);
        uM = new AM("BEGIN", 2);
        vM = new AM(qzb, 3);
        wM = new AM("END", 4);
      }
      function DN() {
        DN = iI;
        BN = new EN("PORTS", 0);
        CN = new EN("PORT_LABELS", 1);
        AN = new EN("NODE_LABELS", 2);
        zN = new EN("MINIMUM_SIZE", 3);
      }
      function kP() {
        kP = iI;
        jP = new lP("UNKNOWN", 0);
        gP = new lP("ABOVE", 1);
        hP = new lP("BELOW", 2);
        iP = new DJ("de.cau.cs.kieler.labelSide", jP);
      }
      function Qjb() {
        Qjb = iI;
        Njb = new Rjb("EQUALLY_DISTRIBUTED", 0);
        Pjb = new Rjb("NORTH_STACKED", 1);
        Ojb = new Rjb("NORTH_SEQUENCE", 2);
      }
      function gI() {
        fI = {};
        !Array.isArray && (Array.isArray = function(a) {
          return Object.prototype.toString.call(a) === "[object Array]";
        });
      }
      function SR(a, b) {
        return Ws(), Ws(), ((a - b > 0 ? a - b : -(a - b)) <= $yb || a == b || isNaN(a) && isNaN(b) ? 0 : a < b ? -1 : a > b ? 1 : Ys(isNaN(a), isNaN(b))) > 0;
      }
      function TR(a, b) {
        return Ws(), Ws(), ((a - b > 0 ? a - b : -(a - b)) <= $yb || a == b || isNaN(a) && isNaN(b) ? 0 : a < b ? -1 : a > b ? 1 : Ys(isNaN(a), isNaN(b))) < 0;
      }
      function Veb(a) {
        var b, c;
        a.d || cfb(a);
        c = new jJ();
        b = a.b.mb();
        b.H();
        while (b.G()) {
          QI(c, Wv(b.H(), 92).a);
        }
        Bxb(c.b != 0);
        $I(c, c.c.b);
        return c;
      }
      function $db(a) {
        var b, c, d, e;
        e = new Wub();
        b = new IU(a.c);
        Dpb(b);
        for (d = new Tob(b); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 7);
          e.a.db(c, e);
        }
        return e;
      }
      function Np(a, b) {
        var c, d, e;
        _b(b);
        for (d = (e = a.g, Wv(!e ? a.g = new En(a) : e, 20)).mb(); d.G(); ) {
          c = Wv(d.H(), 21);
          Fd(b, c.zb(), c.yb());
        }
        return b;
      }
      function mf(a, b) {
        var c, d, e;
        if (aw(b, 21)) {
          c = Wv(b, 21);
          d = c.yb();
          e = rp(a.qb(), d);
          return Tb(e, c.zb()) && (e != null || a.qb().R(d));
        }
        return false;
      }
      function Yeb(a, b) {
        var c, d, e;
        e = a.g.tb();
        while (e.G()) {
          c = Ixb(Yv(e.H()));
          d = c - b <= 0 ? 0 - (c - b) : c - b;
          if (d < RAb) {
            return e.L() - 1;
          }
        }
        return a.g.Y();
      }
      function Vfb(a) {
        var b, c;
        for (c = new Tob(a.a); c.a < c.c.c.length; ) {
          b = Wv(Rob(c), 9);
          if (b.g == (CX(), AX) || b.g == wX) {
            return false;
          }
        }
        return true;
      }
      function nI(a, b, c) {
        if (a.b) {
          throw new ulb("The task is already done.");
        } else if (a.i != null) {
          return false;
        } else {
          a.i = b;
          a.j = c;
          return true;
        }
      }
      function A5(a, b) {
        if (a.f < b.f) {
          return -1;
        } else if (a.f > b.f) {
          return 1;
        } else if (a.g < b.g) {
          return -1;
        } else if (a.g > b.g) {
          return 1;
        }
        return a.b - b.b;
      }
      function S8(a, b) {
        if (b.c == a) {
          return b.d;
        } else if (b.d == a) {
          return b.c;
        }
        throw new slb("Input edge is not connected to the input port.");
      }
      function q5(a) {
        var b;
        if (a.c == 0) {
          return;
        }
        b = Wv(yU(a.a, a.b), 128);
        b.b == 1 ? (++a.b, a.b < a.a.c.length && u5(Wv(yU(a.a, a.b), 128))) : --b.b;
        --a.c;
      }
      function ZU(a, b) {
        a.b.a = Qlb(a.b.a, b.c);
        a.b.b = Qlb(a.b.b, b.d);
        a.a.a = Nlb(a.a.a, b.c);
        a.a.b = Nlb(a.a.b, b.d);
        return a.c[a.c.length] = b, true;
      }
      function vbb(a, b, c) {
        var d, e;
        d = Ixb(a.n[b.f.k]) + Ixb(a.d[b.f.k]) + b.i.b + b.a.b;
        e = Ixb(a.n[c.f.k]) + Ixb(a.d[c.f.k]) + c.i.b + c.a.b;
        return e - d;
      }
      function Y5(a, b, c, d) {
        var e, f, g;
        e = false;
        if ($6(a.j, c, d)) {
          a7(a.j, a.d[b][c], a.d[b][d]);
          f = a.d[b];
          g = f[d];
          f[d] = f[c];
          f[c] = g;
          e = true;
        }
        return e;
      }
      function fX(a, b, c) {
        var d, e, f, g, h;
        h = hX(a);
        e = h.a;
        d = Wv(rJ(h, (Rib(), Xhb)), 15).a;
        f = h.d;
        g = a.i;
        b && (g.a = g.a - e.b - d - f.a);
        c && (g.b = g.b - e.d - d - f.b);
      }
      function Q$(a, b) {
        var c, d, e;
        for (d = Uh(gX(a)); Cm(d); ) {
          c = Wv(Dm(d), 12);
          e = Wv(b.B(c), 9);
          return new $c(_b(e.i.b + e.j.b / 2));
        }
        return zb(), zb(), yb;
      }
      function ifb(a) {
        var b, c, d, e, f;
        d = gfb(a);
        b = rAb;
        f = 0;
        e = 0;
        while (b > 0.5 && f < 50) {
          e = ofb(d);
          c = $eb(d, e, true);
          b = Jlb(c.b);
          ++f;
        }
        return $eb(a, e, false);
      }
      function jfb(a) {
        var b, c, d, e, f;
        d = gfb(a);
        b = rAb;
        f = 0;
        e = 0;
        while (b > 0.5 && f < 50) {
          e = nfb(d);
          c = $eb(d, e, true);
          b = Jlb(c.a);
          ++f;
        }
        return $eb(a, e, false);
      }
      function QR(a) {
        var b, c, d;
        this.a = new Wub();
        this.e = new vtb();
        this.f = 0;
        for (c = 0, d = a.length; c < d; ++c) {
          b = a[c];
          !this.g && (this.g = b);
          OR(this, b);
        }
      }
      function dfb(a) {
        Teb(this);
        this.c = a.c;
        this.f = a.f;
        this.e = a.e;
        this.k = a.k;
        this.d = a.d;
        this.g = Eo(a.g);
        this.j = a.j;
        this.i = a.i;
        this.b = Eo(a.b);
      }
      function oU(a) {
        switch (a.e) {
          case 1:
            return sK(), rK;
          case 4:
            return sK(), oK;
          case 2:
            return sK(), pK;
          case 3:
            return sK(), nK;
        }
        return sK(), qK;
      }
      function Xdb(a, b) {
        if (_db(a, b)) {
          stb(a.g, b);
          return true;
        }
        b.g != (sN(), qN) && stb(a.i, b);
        b.e.c.length == 0 ? stb(a.c, b) : stb(a.b, b);
        return false;
      }
      function wU(a, b) {
        var c, d;
        Fxb(0, a.c.length);
        c = Ye(b, xv(UF, syb, 1, b.a.Y(), 4, 1));
        d = c.length;
        if (d == 0) {
          return false;
        }
        gxb(a.c, 0, c);
        return true;
      }
      function Zkb(a, b) {
        var c = 0;
        while (!b[c] || b[c] == "") {
          c++;
        }
        var d = b[c++];
        for (; c < b.length; c++) {
          if (!b[c] || b[c] == "") {
            continue;
          }
          d += a + b[c];
        }
        return d;
      }
      function yt() {
        var a;
        if (ut != 0) {
          a = pt();
          if (a - vt > 2e3) {
            vt = a;
            wt = $wnd.setTimeout(Et, 10);
          }
        }
        if (ut++ == 0) {
          Ht((Gt(), Ft));
          return true;
        }
        return false;
      }
      function kS(a) {
        var b, c;
        for (c = new Tob(a.a.b); c.a < c.c.c.length; ) {
          b = Wv(Rob(c), 25);
          b.j.d = -b.j.d - b.j.c;
          !!b.o && (b.g.a = -b.g.a + b.o.j.c);
        }
        fS(a);
      }
      function D2(a, b) {
        var c;
        c = a;
        while (b.b < b.d.Y() && c == a) {
          c = (Bxb(b.b < b.d.Y()), Wv(b.d.sb(b.c = b.b++), 7)).g;
        }
        c == a || (Bxb(b.b > 0), b.a.sb(b.c = --b.b));
      }
      function a$(a) {
        var b;
        if (!LM(Wv(rJ(a, (eM(), TL)), 28))) {
          return;
        }
        b = a.c;
        b$((Cxb(0, b.c.length), Wv(b.c[0], 16)));
        b$(Wv(yU(b, b.c.length - 1), 16));
      }
      function NV(a, b, c) {
        nI(c, "Compound graph preprocessor", 1);
        a.a = new xk();
        RV(a, b, null);
        MV(a, b);
        sJ(b, (Rib(), bib), a.a);
        a.a = null;
        Ymb(a.b);
        pI(c);
      }
      function P0(a) {
        var b, c;
        b = Wv(Dm(Uh(iX(a))), 12);
        c = Wv(Dm(Uh(mX(a))), 12);
        return !Ckb(Ixb(Xv(rJ(b, (Rib(), Iib))))) || !Ckb(Ixb(Xv(rJ(c, Iib))));
      }
      function O6(a, b, c) {
        if (b.g == (CX(), AX) && c.g == zX) {
          a.d = L6(b, (sN(), pN));
          a.b = L6(b, $M);
        }
        if (c.g == AX && b.g == zX) {
          a.d = L6(c, (sN(), $M));
          a.b = L6(c, pN);
        }
      }
      function _8(a, b, c) {
        var d, e, f, g;
        f = b.g;
        g = c.g;
        if (f != g) {
          return f.e - g.e;
        } else {
          d = a.a[b.k];
          e = a.a[c.k];
          return !d && !e ? 0 : !d ? -1 : !e ? 1 : glb(d.a, e.a);
        }
      }
      function jab(a, b, c, d) {
        var e, f, g, h;
        f = b;
        e = c - 1;
        while (f <= e) {
          g = f + e >>> 1;
          h = a[g];
          if (h < d) {
            f = g + 1;
          } else if (h > d) {
            e = g - 1;
          } else {
            return g;
          }
        }
        return -(f + 1);
      }
      function Id(a) {
        return aw(a, 137) ? (ypb(), new dsb(Wv(a, 137))) : aw(a, 18) ? (ypb(), new Frb(Wv(a, 18))) : aw(a, 20) ? Hpb(Wv(a, 20)) : (ypb(), new zqb(a));
      }
      function Kd(a, b, c) {
        return aw(c, 137) ? new Lg(a, b, Wv(c, 137)) : aw(c, 18) ? new Kg(a, b, Wv(c, 18)) : aw(c, 20) ? Ld(a, b, Wv(c, 20), null) : new _f(a, b, c, null);
      }
      function tn(b, c) {
        var d;
        d = b.ub(c);
        try {
          return d.H();
        } catch (a) {
          a = OH(a);
          if (aw(a, 74)) {
            throw new okb("Can't get element " + c);
          } else
            throw NH(a);
        }
      }
      function rp(b, c) {
        mp();
        _b(b);
        try {
          return b.cb(c);
        } catch (a) {
          a = OH(a);
          if (aw(a, 119)) {
            return null;
          } else if (aw(a, 76)) {
            return null;
          } else
            throw NH(a);
        }
      }
      function Qu(f, a) {
        var b = f.a;
        var c;
        a = String(a);
        b.hasOwnProperty(a) && (c = b[a]);
        var d = (ev(), dv)[typeof c];
        var e = d ? d(c) : kv(typeof c);
        return e;
      }
      function kgb(a, b, c, d) {
        if (b < c) {
          a.b = 0.5 * (b + c);
          a.p = UAb * a.b + 0.9 * b;
          a.a = UAb * a.b + 0.9 * c;
        } else {
          a.b = 0.5 * (b + d);
          a.p = UAb * a.b + 0.9 * d;
          a.a = UAb * a.b + 0.9 * b;
        }
      }
      function Vr(a) {
        Ch.call(this, a);
        this.b = new sk(a, false, null, (Gh(), Fh), false, null, Fh);
        this.a = new Os(null, 1);
        ds(this.a, this.a);
        this.c = new Vs();
      }
      function xT(a) {
        vT();
        this.c = new GU();
        this.d = a;
        switch (a.e) {
          case 0:
          case 2:
            this.a = Epb(uT);
            this.b = Uzb;
            break;
          case 3:
          case 1:
            this.a = uT;
            this.b = Vzb;
        }
      }
      function iK() {
        iK = iI;
        cK = new jK("AUTOMATIC", 0);
        fK = new jK(ozb, 1);
        gK = new jK(pzb, 2);
        hK = new jK("TOP", 3);
        dK = new jK("BOTTOM", 4);
        eK = new jK(qzb, 5);
      }
      function Pxb(a) {
        Nxb();
        var b, c, d;
        c = ":" + a;
        d = Mxb[c];
        if (!(d === void 0)) {
          return d;
        }
        d = Kxb[c];
        b = d === void 0 ? Oxb(a) : d;
        Qxb();
        Mxb[c] = b;
        return b;
      }
      function bk(a, b, c, d, e, f, g) {
        hi();
        var h, i;
        i = g.length + 6;
        h = new HU(i);
        zpb(h, Bv(tv(UF, 1), syb, 1, 4, [a, b, c, d, e, f]));
        zpb(h, g);
        return Yj(new Tob(h));
      }
      function GZ(a) {
        var b;
        b = Wv(rJ(a, (eM(), JL)), 18);
        if (b.V()) {
          return;
        }
        if (b.kb((oM(), gM))) {
          b.nb(gM);
          b.ib(iM);
        } else if (b.kb(iM)) {
          b.nb(iM);
          b.ib(gM);
        }
      }
      function HZ(a) {
        var b;
        b = Wv(rJ(a, (eM(), JL)), 18);
        if (b.V()) {
          return;
        }
        if (b.kb((oM(), nM))) {
          b.nb(nM);
          b.ib(lM);
        } else if (b.kb(lM)) {
          b.nb(lM);
          b.ib(nM);
        }
      }
      function f$(a, b) {
        var c, d, e, f;
        e = a.g;
        c = Ixb(Yv(rJ(a, (Rib(), Cib))));
        f = b.g;
        d = Ixb(Yv(rJ(b, Cib)));
        return f != (CX(), xX) ? -1 : e != xX ? 1 : c == d ? 0 : c < d ? -1 : 1;
      }
      function g6(a, b, c) {
        var d, e;
        d = Slb(h6(a, b.d), h6(a, b.c));
        e = Plb(h6(a, b.d), h6(a, b.c));
        return $s(Or(Bh(c, Elb(d), (Gh(), Fh), Elb(e), Fh), (qs(), ps)));
      }
      function qp(b, c) {
        mp();
        _b(b);
        try {
          return b.R(c);
        } catch (a) {
          a = OH(a);
          if (aw(a, 119)) {
            return false;
          } else if (aw(a, 76)) {
            return false;
          } else
            throw NH(a);
        }
      }
      function Qh(b, c) {
        Oh();
        _b(b);
        try {
          return hnb(b, c);
        } catch (a) {
          a = OH(a);
          if (aw(a, 119)) {
            return false;
          } else if (aw(a, 76)) {
            return false;
          } else
            throw NH(a);
        }
      }
      function nab(a, b) {
        if (a.e < b.e) {
          return -1;
        } else if (a.e > b.e) {
          return 1;
        } else if (a.f < b.f) {
          return -1;
        } else if (a.f > b.f) {
          return 1;
        }
        return txb(a) - txb(b);
      }
      function QZ(a) {
        switch (a.e) {
          case 1:
            return sN(), rN;
          case 4:
            return sN(), $M;
          case 3:
            return sN(), ZM;
          case 2:
            return sN(), pN;
          default:
            return sN(), qN;
        }
      }
      function Ki(a) {
        var b, c;
        b = cxb(a.c, a.c.length);
        switch (b.length) {
          case 0:
            return Fi;
          case 1:
            c = new Er(b[0]);
            return c;
          default:
            return new gr(Ti(b));
        }
      }
      function EY(a) {
        var b, c, d, e;
        d = xv(ow, syb, 64, a.c.length, 0, 1);
        e = 0;
        for (c = new Tob(a); c.a < c.c.c.length; ) {
          b = Wv(Rob(c), 64);
          d[e++] = b;
        }
        return new CY(d);
      }
      function sW(a) {
        var b, c;
        if (!a.b) {
          a.b = Do(a.a.b.c.length);
          for (c = new Tob(a.a.b); c.a < c.c.c.length; ) {
            b = Wv(Rob(c), 33);
            vU(a.b, new yW(b));
          }
        }
        return a.b;
      }
      function K6(a, b) {
        var c, d, e;
        if (a.e) {
          return 1;
        }
        c = 0;
        for (e = new Tob(b.f); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 7);
          c += d.b.c.length + d.e.c.length;
        }
        return c;
      }
      function I6(a) {
        var b, c, d, e;
        b = false;
        e = false;
        for (d = new Tob(a.f); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 7);
          b = b | c.g == (sN(), ZM);
          e = e | c.g == rN;
        }
        return b && e;
      }
      function bV(a) {
        var b, c;
        this.b = new GU();
        this.c = a;
        this.a = false;
        for (c = new Tob(a.b); c.a < c.c.c.length; ) {
          b = Wv(Rob(c), 9);
          this.a = this.a | b.g == (CX(), AX);
        }
      }
      function uX(a) {
        cX.call(this);
        this.g = (CX(), AX);
        this.f = (Mh(6, Vyb), new HU(6));
        this.c = (Mh(2, Vyb), new HU(2));
        this.e = new ZW();
        this.b = new ZW();
        this.a = a;
      }
      function ffb(a, b, c, d, e, f) {
        Teb(this);
        this.e = a;
        this.f = b;
        this.d = c;
        this.c = d;
        this.g = e;
        this.b = f;
        this.j = Ixb(Yv(e.mb().H()));
        this.i = Ixb(Yv(rl(e)));
      }
      function Lh(a, b) {
        if (a == null) {
          throw new Wlb("null key in entry: null=" + b);
        } else if (b == null) {
          throw new Wlb("null value in entry: " + a + "=null");
        }
      }
      function Hab() {
        Hab = iI;
        Eab = VQ(new WQ(), (d0(), v_));
        Fab = new DJ("linearSegments.inputPrio", Elb(0));
        Gab = new DJ("linearSegments.outputPrio", Elb(0));
      }
      function Cd(a) {
        var b, c, d, e;
        for (c = (e = new aob(a.b).a.bb().mb(), new fob(e)); c.a.G(); ) {
          b = (d = Wv(c.a.H(), 21), Wv(d.zb(), 19));
          b.Q();
        }
        Ymb(a.b);
        a.c = 0;
      }
      function WI(a, b) {
        var c, d;
        Fxb(b, a.b);
        if (b >= a.b >> 1) {
          d = a.c;
          for (c = a.b; c > b; --c) {
            d = d.b;
          }
        } else {
          d = a.a.a;
          for (c = 0; c < b; ++c) {
            d = d.a;
          }
        }
        return new cvb(a, b, d);
      }
      function cU(a, b) {
        var c, d, e;
        e = new FI();
        for (d = a.mb(); d.G(); ) {
          c = Wv(d.H(), 55);
          UT(c, e.a, 0);
          e.a += c.e.a + b;
          e.b = Nlb(e.b, c.e.b);
        }
        e.b > 0 && (e.b += b);
        return e;
      }
      function eU(a, b) {
        var c, d, e;
        e = new FI();
        for (d = a.mb(); d.G(); ) {
          c = Wv(d.H(), 55);
          UT(c, 0, e.b);
          e.b += c.e.b + b;
          e.a = Nlb(e.a, c.e.a);
        }
        e.a > 0 && (e.a += b);
        return e;
      }
      function tub(a, b, c) {
        var d, e, f;
        e = Wv(Smb(a.c, b), 176);
        if (!e) {
          d = new Jub(a, b, c);
          Umb(a.c, b, d);
          Gub(d);
          return null;
        } else {
          f = job(e, c);
          uub(a, e);
          return f;
        }
      }
      function y3(a, b) {
        if (!Keb(a.b).kb(b.c)) {
          return false;
        }
        return Oeb(a.b) ? !(rgb(b.d, a.c, a.a) && rgb(b.a, a.c, a.a)) : rgb(b.d, a.c, a.a) && rgb(b.a, a.c, a.a);
      }
      function s6(a, b) {
        return a.c < b.c || a.c == b.c && d6(a.a) && d6(b.a) && h6(a.d, q6(a.a, a.b)) > h6(a.d, q6(b.a, b.b)) ? -1 : a.c == b.c && q6(a.a, a.b) == q6(a.a, a.b) ? 0 : 1;
      }
      function L5(a, b, c) {
        if (a.e) {
          switch (a.b) {
            case 1:
              g5(a.c, b, c);
              break;
            case 0:
              h5(a.c, b, c);
          }
        } else {
          e5(a.c, b, c);
        }
        a.a[b.k][c.k] = a.c.i;
        a.a[c.k][b.k] = a.c.e;
      }
      function LW(a, b, c) {
        switch (c.e) {
          case 1:
            a.a = b.a / 2;
            a.b = 0;
            break;
          case 2:
            a.a = b.a;
            a.b = b.b / 2;
            break;
          case 3:
            a.a = b.a / 2;
            a.b = b.b;
            break;
          case 4:
            a.a = 0;
            a.b = b.b / 2;
        }
      }
      function Jeb(a) {
        switch (a.e) {
          case 8:
            return sN(), $M;
          case 9:
            return sN(), pN;
          case 10:
            return sN(), ZM;
          case 11:
            return sN(), rN;
          default:
            return sN(), qN;
        }
      }
      function Qt(a) {
        var b, c, d;
        b = "Ot";
        d = Slb(a.length, 5);
        for (c = 0; c < d; c++) {
          if (emb(a[c].d, b)) {
            a.length >= c + 1 && (a.splice(0, c + 1), void 0);
            break;
          }
        }
        return a;
      }
      function Vv(a, b) {
        if (ew(a)) {
          return !!Uv[b];
        } else if (a._c) {
          return !!a._c[b];
        } else if (cw(a)) {
          return !!Tv[b];
        } else if (bw(a)) {
          return !!Sv[b];
        }
        return false;
      }
      function jQ() {
        RP();
        this.i = (mp(), new ntb());
        this.a = new ntb();
        this.k = new ntb();
        this.j = new ntb();
        this.b = new ntb();
        this.n = new ntb();
        this.f = new ntb();
        this.e = new ntb();
      }
      function r$(a, b) {
        var c, d;
        if (b.a.R(a)) {
          return;
        } else {
          d = Wv(rJ(a, (Rib(), hib)), 32);
          c = Wv(yU(a.f, 0), 7);
          d == (sN(), $M) ? QX(c, pN) : d == pN && QX(c, $M);
          b.a.db(a, b);
        }
      }
      function bbb(a) {
        var b, c;
        c = Plb(1, Wv(rJ(a, (Rib(), Eib)), 24).a);
        a.c.f.g == (CX(), AX) && a.d.f.g == AX ? b = 1 : a.c.f.g == AX || a.d.f.g == AX ? b = 2 : b = 8;
        return c * b;
      }
      function P1(a) {
        var b, c, d, e, f;
        f = Wv(rJ(a, (Rib(), uib)), 7);
        b = Wv(FU(a.b, xv(dB, gAb, 12, a.b.c.length, 0, 1)), 47);
        for (d = 0, e = b.length; d < e; ++d) {
          c = b[d];
          eW(c, f);
        }
      }
      function Q1(a) {
        var b, c, d, e, f;
        c = Wv(rJ(a, (Rib(), uib)), 7);
        b = Wv(FU(a.e, xv(dB, gAb, 12, a.e.c.length, 0, 1)), 47);
        for (e = 0, f = b.length; e < f; ++e) {
          d = b[e];
          dW(d, c);
        }
      }
      function Cfb(a) {
        var b, c;
        yfb(this);
        c = a.i;
        b = vI(new HI(c.a, c.b), a.j);
        this.d = Qlb(c.b, b.b);
        this.a = Nlb(c.b, b.b);
        this.b = Qlb(c.a, b.a);
        this.c = Nlb(c.a, b.a);
      }
      function ipb(a, b, c, d) {
        var e, f, g, h;
        !d && (d = (hsb(), hsb(), gsb));
        e = (f = epb(a, b, c), g = (h = new Array(c - b), Cv(h, a)), dxb(a, b, g, 0, f, true), g);
        jpb(e, a, b, c, -b, d);
      }
      function FU(a, b) {
        var c, d, e;
        e = a.c.length;
        b.length < e && (b = (d = new Array(e), Cv(d, b)));
        for (c = 0; c < e; ++c) {
          Av(b, c, a.c[c]);
        }
        b.length > e && Av(b, e, null);
        return b;
      }
      function npb(a, b) {
        var c, d, e;
        e = a.a.length;
        b.length < e && (b = (d = new Array(e), Cv(d, b)));
        for (c = 0; c < e; ++c) {
          Av(b, c, a.a[c]);
        }
        b.length > e && Av(b, e, null);
        return b;
      }
      function xb(a) {
        return ew(a) ? a : cw(a) ? ilb((Dxb(a), a)) : bw(a) ? Bkb(Ckb((Dxb(a), a))) : _v(a) ? a.w() : zv(a) ? ob(a) : a.toString ? a.toString() : "[JavaScriptObject]";
      }
      function A6(a) {
        var b, c, d, e, f;
        f = 0;
        for (c = a.b, d = 0, e = c.length; d < e; ++d) {
          b = c[d];
          b.g == (CX(), zX) || Umb(a.c, b, Elb(f++));
          E6(a, b, a.d, (sN(), $M));
          E6(a, b, a.j, pN);
        }
      }
      function kbb() {
        kbb = iI;
        jbb = new lbb("SIMPLE", 0);
        gbb = new lbb(zAb, 1);
        hbb = new lbb("LINEAR_SEGMENTS", 2);
        fbb = new lbb("BRANDES_KOEPF", 3);
        ibb = new lbb(DAb, 4);
      }
      function Xib() {
        Xib = iI;
        Wib = new Yib(tzb, 0);
        Sib = new Yib("FIRST", 1);
        Tib = new Yib("FIRST_SEPARATE", 2);
        Uib = new Yib("LAST", 3);
        Vib = new Yib("LAST_SEPARATE", 4);
      }
      function Ndb() {
        Ndb = iI;
        Mdb = new Vdb();
        Kdb = TQ(new WQ(), (d0(), A_));
        Ldb = PQ(TQ(new WQ(), R_), Q_);
        Idb = PQ(UQ(TQ(SQ(new WQ(), D_), F_), H_), E_);
        Jdb = PQ(UQ(new WQ(), H_), q_);
      }
      function ceb(a) {
        var b, c, d, e;
        for (c = (e = new Snb(a.d.a).a.bb().mb(), new Ynb(e)); c.a.G(); ) {
          b = (d = Wv(c.a.H(), 21), Wv(d.yb(), 12));
          vU(b.c.e, b);
          vU(b.d.b, b);
        }
      }
      function vvb(a, b) {
        var c, d;
        vxb(b > 0);
        if ((b & -b) == b) {
          return hw(b * wvb(a, 31) * 4656612873077393e-25);
        }
        do {
          c = wvb(a, 31);
          d = c % b;
        } while (c - d + (b - 1) < 0);
        return hw(d);
      }
      function zcb(a, b) {
        if (a.c.f == b) {
          return a.d.f;
        } else if (a.d.f == b) {
          return a.c.f;
        } else {
          throw new slb("Node " + b + " is neither source nor target of edge " + a);
        }
      }
      function Ekb(a, b, c) {
        vxb(a >= 0 && a <= 1114111);
        if (a >= ayb) {
          b[c++] = 55296 + (a - ayb >> 10 & 1023) & byb;
          b[c] = 56320 + (a - ayb & 1023) & byb;
          return 2;
        } else {
          b[c] = a & byb;
          return 1;
        }
      }
      function Ol(a, b) {
        Il();
        var c, d;
        while (a.G()) {
          if (!b.G()) {
            return false;
          }
          c = a.H();
          d = b.H();
          if (!(gw(c) === gw(d) || c != null && rb(c, d))) {
            return false;
          }
        }
        return !b.G();
      }
      function JS(a) {
        var b, c, d;
        Vvb(a.b.a);
        a.a = xv(kA, syb, 25, a.c.b.a.b.c.length, 0, 1);
        b = 0;
        for (d = new Tob(a.c.b.a.b); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 25);
          c.k = b++;
        }
      }
      function PT(a) {
        var b, c, d, e;
        Gpb(a.c, a.a);
        for (e = new Tob(a.c); e.a < e.c.c.length; ) {
          d = Rob(e);
          for (c = new Tob(a.b); c.a < c.c.c.length; ) {
            b = Wv(Rob(c), 160);
            b.Ec(d);
          }
        }
      }
      function zW(a) {
        var b, c;
        if (!a.a) {
          a.a = Do(Wv(a.e, 9).c.c.length);
          for (c = new Tob(Wv(a.e, 9).c); c.a < c.c.c.length; ) {
            b = Wv(Rob(c), 33);
            vU(a.a, new yW(b));
          }
        }
        return a.a;
      }
      function DW(a) {
        var b, c;
        if (!a.b) {
          a.b = Do(Wv(a.e, 7).c.c.length);
          for (c = new Tob(Wv(a.e, 7).c); c.a < c.c.c.length; ) {
            b = Wv(Rob(c), 33);
            vU(a.b, new yW(b));
          }
        }
        return a.b;
      }
      function F6(a) {
        this.b = a;
        this.c = (mp(), new ntb());
        this.i = new ntb();
        this.d = new ntb();
        this.j = new ntb();
        this.k = gw(rJ(hX(a[0]), (eM(), uL))) === gw((NK(), JK));
        A6(this);
      }
      function sgb(a) {
        switch (a.e) {
          case 1:
            return 4.71238898038469;
          default:
          case 2:
            return 0;
          case 3:
            return 1.5707963267948966;
          case 4:
            return 3.141592653589793;
        }
      }
      function Ql(a) {
        Il();
        var b;
        b = Kl(a);
        if (!Cm(a)) {
          throw new okb("position (0) must be less than the number of elements that remained (" + b + ")");
        }
        return Dm(a);
      }
      function un(b, c) {
        var d, e;
        d = b.ub(c);
        try {
          e = d.H();
          d.I();
          return e;
        } catch (a) {
          a = OH(a);
          if (aw(a, 74)) {
            throw new okb("Can't remove element " + c);
          } else
            throw NH(a);
        }
      }
      function Ye(a, b) {
        var c, d, e, f;
        f = a.Y();
        b.length < f && (b = (e = new Array(f), Cv(e, b)));
        d = a.mb();
        for (c = 0; c < f; ++c) {
          Av(b, c, d.H());
        }
        b.length > f && Av(b, f, null);
        return b;
      }
      function qX(a, b, c) {
        if (!!c && (b < 0 || b > c.a.c.length)) {
          throw new slb("index must be >= 0 and <= layer node count");
        }
        !!a.d && BU(a.d.a, a);
        a.d = c;
        !!c && uU(c.a, b, a);
      }
      function Zvb(a, b, c, d, e, f, g, h) {
        var i, j;
        if (!d) {
          return;
        }
        i = d.a[0];
        !!i && Zvb(a, b, c, i, e, f, g, h);
        $vb(a, c, d.d, e, f, g, h) && b.ib(d);
        j = d.a[1];
        !!j && Zvb(a, b, c, j, e, f, g, h);
      }
      function Gxb(a, b, c) {
        if (a < 0) {
          throw new okb(jyb + a + " < 0");
        }
        if (b > c) {
          throw new okb("toIndex: " + b + " > size " + c);
        }
        if (a > b) {
          throw new slb(jyb + a + " > toIndex: " + b);
        }
      }
      function ee(a, b) {
        var c, d, e;
        c = b.yb();
        e = b.zb();
        d = a.cb(c);
        if (!(gw(e) === gw(d) || e != null && rb(e, d))) {
          return false;
        }
        if (d == null && !a.R(c)) {
          return false;
        }
        return true;
      }
      function h1(a, b, c) {
        var d;
        d = b.c.f;
        if (d.g == (CX(), zX)) {
          sJ(a, (Rib(), qib), Wv(rJ(d, qib), 7));
          sJ(a, rib, Wv(rJ(d, rib), 7));
        } else {
          sJ(a, (Rib(), qib), b.c);
          sJ(a, rib, c.d);
        }
      }
      function w2(a, b, c) {
        var d;
        d = b.c.f;
        if (d.g == (CX(), zX)) {
          sJ(a, (Rib(), qib), Wv(rJ(d, qib), 7));
          sJ(a, rib, Wv(rJ(d, rib), 7));
        } else {
          sJ(a, (Rib(), qib), b.c);
          sJ(a, rib, c.d);
        }
      }
      function at(a, b, c) {
        var d, e, f, g, h;
        bt(a);
        for (e = (a.i == null && (a.i = xv(_F, Txb, 46, 0, 0, 1)), a.i), f = 0, g = e.length; f < g; ++f) {
          d = e[f];
          at(d, b, "	" + c);
        }
        h = a.e;
        !!h && at(h, b, c);
      }
      function yv(a, b) {
        var c = new Array(b);
        var d;
        switch (a) {
          case 11:
          case 12:
            d = 0;
            break;
          case 13:
            d = false;
            break;
          default:
            return c;
        }
        for (var e = 0; e < b; ++e) {
          c[e] = d;
        }
        return c;
      }
      function P5(a) {
        var b, c, d, e;
        e = xv(qB, Txb, 51, a.a.length, 0, 2);
        for (c = 0; c < e.length; c++) {
          d = a.a[c].length;
          b = xv(qB, Nzb, 9, d, 0, 1);
          Gmb(a.a[c], 0, b, 0, d);
          e[c] = b;
        }
        return e;
      }
      function AW(a) {
        var b, c;
        if (!a.b) {
          a.b = Do(Wv(a.e, 9).f.c.length);
          for (c = new Tob(Wv(a.e, 9).f); c.a < c.c.c.length; ) {
            b = Wv(Rob(c), 7);
            vU(a.b, new FW(b, a.c));
          }
        }
        return a.b;
      }
      function sp(b, c) {
        mp();
        _b(b);
        try {
          return ew(c) ? Xmb(b, c) : Mtb(b.d, c);
        } catch (a) {
          a = OH(a);
          if (aw(a, 119)) {
            return null;
          } else if (aw(a, 76)) {
            return null;
          } else
            throw NH(a);
        }
      }
      function Blb(a) {
        var b;
        b = (Ilb(), Hlb);
        return b[a >>> 28] | b[a >> 24 & 15] << 4 | b[a >> 20 & 15] << 8 | b[a >> 16 & 15] << 12 | b[a >> 12 & 15] << 16 | b[a >> 8 & 15] << 20 | b[a >> 4 & 15] << 24 | b[a & 15] << 28;
      }
      function ZV(a, b, c) {
        var d, e;
        if (b.c == (djb(), bjb) && c.c == ajb) {
          return -1;
        } else if (b.c == ajb && c.c == bjb) {
          return 1;
        }
        d = aW(b.a, a.a);
        e = aW(c.a, a.a);
        return b.c == bjb ? e - d : d - e;
      }
      function L7(a) {
        var b, c, d, e, f;
        e = $xb;
        f = null;
        for (d = new Tob(a.d); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 89);
          if (c.c.j ^ c.d.j) {
            b = c.d.e - c.c.e - c.a;
            if (b < e) {
              e = b;
              f = c;
            }
          }
        }
        return f;
      }
      function $vb(a, b, c, d, e, f, g) {
        var h, i;
        if (b.Xc() && (i = a.a.$b(c, d), i < 0 || !e && i == 0)) {
          return false;
        }
        if (b.Yc() && (h = a.a.$b(c, f), h > 0 || !g && h == 0)) {
          return false;
        }
        return true;
      }
      function Yj(a) {
        hi();
        var b, c;
        if (!a.G()) {
          return kr(), jr;
        }
        c = a.H();
        if (!a.G()) {
          return new Gr(c);
        }
        b = new Wub();
        stb(b, _b(c));
        do {
          stb(b, _b(a.H()));
        } while (a.G());
        return ck(b);
      }
      function m6(a, b, c) {
        a.e = b;
        a.a = c;
        a.d = n6(a, (sN(), ZM));
        a.d += n6(a, rN);
        j6(a, b, c, ZM, a.f);
        j6(a, b, c, rN, a.n);
        a.b = n6(a, ZM);
        a.b += n6(a, rN);
        j6(a, c, b, ZM, a.f);
        j6(a, c, b, rN, a.n);
      }
      function hmb(a) {
        var b, c, d;
        c = (bmb(), a.length);
        d = 0;
        while (d < c && a.charCodeAt(d) <= 32) {
          ++d;
        }
        b = c;
        while (b > d && a.charCodeAt(b - 1) <= 32) {
          --b;
        }
        return d > 0 || b < c ? a.substr(d, b - d) : a;
      }
      function dxb(a, b, c, d, e, f) {
        var g, h, i;
        if (gw(a) === gw(c)) {
          a = a.slice(b, b + e);
          b = 0;
        }
        for (h = b, i = b + e; h < i; ) {
          g = h + 1e4 < i ? h + 1e4 : i;
          e = g - h;
          bxb(c, d, f ? e : 0, a.slice(h, g));
          h = g;
          d += e;
        }
      }
      function Nv(a) {
        var b, c, d;
        if (Iv(a, (Rv(), Qv)) < 0) {
          return -Fv((b = ~a.l + 1 & azb, c = ~a.m + (b == 0 ? 1 : 0) & azb, d = ~a.h + (b == 0 && c == 0 ? 1 : 0) & bzb, Ev(b, c, d)));
        }
        return a.l + a.m * czb + a.h * dzb;
      }
      function JW(a, b) {
        var c;
        c = a.f;
        switch (b.e) {
          case 1:
            return -(a.i.b + a.j.b);
          case 2:
            return a.i.a - c.j.a;
          case 3:
            return a.i.b - c.j.b;
          case 4:
            return -(a.i.a + a.j.a);
        }
        return 0;
      }
      function KM() {
        KM = iI;
        JM = new NM(szb, 0);
        IM = new NM("FREE", 1);
        HM = new NM("FIXED_SIDE", 2);
        EM = new NM("FIXED_ORDER", 3);
        GM = new NM("FIXED_RATIO", 4);
        FM = new NM("FIXED_POS", 5);
      }
      function ZT(a, b) {
        var c, d, e, f;
        c = Wv(rJ(b, (Rib(), fib)), 18);
        f = Wv(Dd(WT, c), 18);
        for (e = f.mb(); e.G(); ) {
          d = Wv(e.H(), 18);
          if (!Wv(Dd(a.a, d), 20).V()) {
            return false;
          }
        }
        return true;
      }
      function HY(a, b, c) {
        this.b = new Dh();
        this.i = new GU();
        this.d = new JY(this);
        this.g = a;
        this.a = b.c.length;
        this.c = b;
        this.e = Wv(yU(this.c, this.c.c.length - 1), 9);
        this.f = c;
        FY(this);
      }
      function Pgb() {
        Pgb = iI;
        Lgb = new Rgb("ALWAYS_UP", 0);
        Kgb = new Rgb("ALWAYS_DOWN", 1);
        Ngb = new Rgb("DIRECTION_UP", 2);
        Mgb = new Rgb("DIRECTION_DOWN", 3);
        Ogb = new Rgb("SMART", 4);
      }
      function Iv(a, b) {
        var c, d, e, f, g, h, i, j;
        i = a.h >> 19;
        j = b.h >> 19;
        if (i != j) {
          return j - i;
        }
        e = a.h;
        h = b.h;
        if (e != h) {
          return e - h;
        }
        d = a.m;
        g = b.m;
        if (d != g) {
          return d - g;
        }
        c = a.l;
        f = b.l;
        return c - f;
      }
      function K7(a) {
        var b, c, d, e;
        for (c = (e = new Snb(a.p.a).a.bb().mb(), new Ynb(e)); c.a.G(); ) {
          b = (d = Wv(c.a.H(), 21), Wv(d.yb(), 89));
          if (b.e && a.b[b.b] < 0) {
            return b;
          }
        }
        return null;
      }
      function TN(a, b) {
        var c, d, e, f, g;
        d = Qlb(a.d, b.d);
        f = Qlb(a.e, b.e);
        e = Nlb(a.d + a.c, b.d + b.c);
        g = Nlb(a.e + a.b, b.e + b.b);
        if (e < d) {
          c = d;
          d = e;
          e = c;
        }
        if (g < f) {
          c = f;
          f = g;
          g = c;
        }
        SN(a, d, f, e - d, g - f);
      }
      function hQ(a, b) {
        var c;
        if (Gzb in a.a) {
          c = Pu(a, Gzb);
          if (!c.kc()) {
            throw new GQ("The 'properties' property of a graph element must be an object.", c, a);
          }
          iQ(c.kc(), b, true);
        }
      }
      function HS(a, b) {
        var c, d, e;
        d = a.b.j.e;
        a.a || (d += a.b.j.b);
        e = b.b.j.e;
        b.a || (e += b.b.j.b);
        c = glb(d, e);
        if (c == 0) {
          if (!a.a && b.a) {
            return -1;
          } else if (!b.a && a.a) {
            return 1;
          }
        }
        return c;
      }
      function kX(a) {
        var b, c;
        switch (Wv(rJ(hX(a), (Mjb(), ujb)), 174).e) {
          case 0:
            b = a.i;
            c = a.j;
            return new HI(b.a + c.a / 2, b.b + c.b / 2);
          case 1:
            return new II(a.i);
          default:
            return null;
        }
      }
      function RX() {
        LX();
        cX.call(this);
        this.g = (sN(), qN);
        this.a = new FI();
        this.d = new ZW();
        this.c = (Mh(2, Vyb), new HU(2));
        this.b = (Mh(4, Vyb), new HU(4));
        this.e = (Mh(4, Vyb), new HU(4));
      }
      function G6(a, b, c) {
        a.d = 0;
        a.b = 0;
        P6(a, b, c);
        b.g == (CX(), BX) && c.g == zX ? M6(b).g == (sN(), $M) ? a.d = 1 : a.b = 1 : c.g == BX && b.g == zX && (M6(c).g == (sN(), $M) ? a.b = 1 : a.d = 1);
        O6(a, b, c);
      }
      function h9(a, b) {
        var c, d;
        for (d = new Tob(b); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 9);
          a.a[c.d.k][c.k].a = uvb(a.e);
          a.a[c.d.k][c.k].d = Ixb(a.a[c.d.k][c.k].a);
          a.a[c.d.k][c.k].b = 1;
        }
      }
      function d9(a, b, c) {
        var d, e, f;
        for (f = new Tob(b); f.a < f.c.c.length; ) {
          d = Wv(Rob(f), 9);
          a.a[d.d.k][d.k].e = false;
        }
        for (e = new Tob(b); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 9);
          c9(a, d, c);
        }
      }
      function Ydb(a, b) {
        var c, d, e, f;
        c = 0;
        d = 0;
        for (f = new Tob(b.b); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 33);
          c = Nlb(c, e.j.a);
          d += e.j.b;
        }
        sJ(b, (Rib(), Lib), new HI(c, d));
        a.k < c && (a.k = c);
        a.j += d;
      }
      function Vbb(a, b) {
        this.c = (mp(), new ntb());
        this.a = a;
        this.b = b;
        this.d = Wv(rJ(a, (Rib(), Kib)), 134);
        gw(rJ(a, (Mjb(), hjb))) === gw((lcb(), kcb)) ? this.e = new Jcb() : this.e = new Ccb();
      }
      function Z4(a, b) {
        var c, d, e, f;
        e = 0;
        for (d = 0; d < b.length; d++) {
          c = b[d];
          if (d < b.length - 1) {
            f = b[d + 1];
            e += $4(a, c, f);
          }
          e += (a.d = new F6(c), x6(a.d));
          e += (a.a = new k6(c), a6(a.a));
        }
        return e;
      }
      function S6(a) {
        switch (a.c.e) {
          case 1:
            return LX(), HX;
          case 2:
            return LX(), FX;
          case 3:
            return LX(), JX;
          case 4:
            return LX(), KX;
        }
        throw new Imb("Can't filter on undefined side");
      }
      function Pr(b, c) {
        var d;
        try {
          d = b.c.a;
          if (!ok(b.b, c) || !d) {
            return 0;
          }
          return Es(d, b.d, c);
        } catch (a) {
          a = OH(a);
          if (aw(a, 119)) {
            return 0;
          } else if (aw(a, 76)) {
            return 0;
          } else
            throw NH(a);
        }
      }
      function J4(a) {
        var b, c, d, e, f;
        for (d = new rnb(new inb(a.b).a); d.b; ) {
          c = pnb(d);
          b = Wv(c.yb(), 9);
          f = Wv(Wv(c.zb(), 27).a, 9);
          e = Wv(Wv(c.zb(), 27).b, 10);
          vI(BI(b.i), vI(xI(f.i), e));
        }
      }
      function B9(a, b, c) {
        var d, e, f;
        d = glb(a.a[b.k], a.a[c.k]);
        if (d == 0) {
          e = Wv(rJ(b, (Rib(), oib)), 20);
          f = Wv(rJ(c, oib), 20);
          if (e.kb(c)) {
            return -1;
          } else if (f.kb(b)) {
            return 1;
          }
        }
        return d;
      }
      function ogb(a, b) {
        var c, d;
        d = vI(xI(a.i), a.a);
        c = a.f.j;
        switch (b.e) {
          case 1:
            return -d.b;
          case 2:
            return -d.a + c.a;
          case 3:
            return -d.b + c.b;
          case 4:
            return -d.a;
          default:
            return 0;
        }
      }
      function Z8(a, b) {
        var c, d, e, f;
        for (e = 0; e < b.length; e++) {
          e + 1 < b.length && X8(a, b[e + 1], (djb(), ajb));
          f = b[e];
          c = 0;
          for (d = 0; d < f.length; d++) {
            Y8(a, f[d]);
            c += a.Hc(f[d], c, (djb(), bjb));
          }
        }
      }
      function Mfb() {
        Mfb = iI;
        Lfb = UQ(UQ(RQ(new WQ(), (d0(), __)), $_), a0);
        Hfb = PQ(UQ(TQ(SQ(new WQ(), D_), F_), H_), E_);
        Jfb = TQ(new WQ(), A_);
        Kfb = PQ(TQ(new WQ(), R_), Q_);
        Ifb = PQ(UQ(new WQ(), H_), q_);
      }
      function dI(b, c, d, e) {
        cI();
        var f = aI;
        $moduleName = c;
        $moduleBase = d;
        LH = e;
        function g() {
          for (var a = 0; a < f.length; a++) {
            f[a]();
          }
        }
        if (b) {
          try {
            Rxb(g)();
          } catch (a) {
            b(c, a);
          }
        } else {
          Rxb(g)();
        }
      }
      function clb(a) {
        blb == null && (blb = /^\s*[+-]?(NaN|Infinity|((\d+\.?\d*)|(\.\d+))([eE][+-]?\d+)?[dDfF]?)\s*$/);
        if (!elb(blb, a)) {
          throw new Ylb(dyb + a + '"');
        }
        return parseFloat(a);
      }
      function _gb() {
        _gb = iI;
        Ygb = new ahb(tzb, 0);
        Xgb = new ahb("LEFTUP", 1);
        $gb = new ahb("RIGHTUP", 2);
        Wgb = new ahb("LEFTDOWN", 3);
        Zgb = new ahb("RIGHTDOWN", 4);
        Vgb = new ahb("BALANCED", 5);
      }
      function zgb() {
        zgb = iI;
        ygb = new Agb("V_TOP", 0);
        xgb = new Agb("V_CENTER", 1);
        wgb = new Agb("V_BOTTOM", 2);
        ugb = new Agb("H_LEFT", 3);
        tgb = new Agb("H_CENTER", 4);
        vgb = new Agb("H_RIGHT", 5);
      }
      function YK() {
        YK = iI;
        WK = new ZK(tzb, 0);
        UK = new ZK("DIRECTED", 1);
        XK = new ZK("UNDIRECTED", 2);
        SK = new ZK("ASSOCIATION", 3);
        VK = new ZK("GENERALIZATION", 4);
        TK = new ZK("DEPENDENCY", 5);
      }
      function CX() {
        CX = iI;
        AX = new DX("NORMAL", 0);
        zX = new DX("LONG_EDGE", 1);
        xX = new DX("EXTERNAL_PORT", 2);
        BX = new DX("NORTH_SOUTH_PORT", 3);
        yX = new DX("LABEL", 4);
        wX = new DX("BIG_NODE", 5);
      }
      function wv(a, b, c, d, e, f, g) {
        var h, i, j, k, l;
        k = e[f];
        j = f == g - 1;
        h = j ? d : 0;
        l = yv(h, k);
        d != 9 && Bv(tv(a, g - f), b[f], c[f], h, l);
        if (!j) {
          ++f;
          for (i = 0; i < k; ++i) {
            l[i] = wv(a, b, c, d, e, f, g);
          }
        }
        return l;
      }
      function gX(a) {
        var b, c, d;
        b = new GU();
        for (d = new Tob(a.f); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 7);
          vU(b, Sh((Gi(), new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [c.b, c.e]))))));
        }
        return _b(b), new Vh(b);
      }
      function b7(a, b, c) {
        this.a = c;
        if (a >= b.length) {
          throw new okb("Greedy SwitchDecider: Free layer layer not in graph.");
        }
        this.b = b[a];
        this.c = new r6(this.b);
        this.d = new R6(this.b);
      }
      function _n(a, b) {
        var c;
        this.f = a;
        this.b = this.f.c;
        c = a.d;
        bc(b, c);
        if (b >= (c / 2 | 0)) {
          this.e = a.e;
          this.d = c;
          while (b++ < c) {
            Zn(this);
          }
        } else {
          this.c = a.a;
          while (b-- > 0) {
            Yn(this);
          }
        }
        this.a = null;
      }
      function qS(a) {
        var b, c, d;
        for (c = new Tob(a.a.b); c.a < c.c.c.length; ) {
          b = Wv(Rob(c), 25);
          d = b.j.d;
          b.j.d = b.j.e;
          b.j.e = d;
          d = b.j.c;
          b.j.c = b.j.b;
          b.j.b = d;
          d = b.g.a;
          b.g.a = b.g.b;
          b.g.b = d;
        }
        fS(a);
      }
      function f1(a, b) {
        var c, d, e;
        d = new Fnb(a.b, 0);
        while (d.b < d.d.Y()) {
          c = (Bxb(d.b < d.d.Y()), Wv(d.d.sb(d.c = d.b++), 33));
          e = Wv(rJ(c, (eM(), tL)), 107);
          if (e == (EK(), BK)) {
            vnb(d);
            vU(b.b, c);
          }
        }
      }
      function Vab(a, b, c) {
        var d, e, f, g;
        g = zU(a.f, b, 0);
        f = new Wab();
        f.b = c;
        d = new Fnb(a.f, g);
        while (d.b < d.d.Y()) {
          e = (Bxb(d.b < d.d.Y()), Wv(d.d.sb(d.c = d.b++), 9));
          e.k = c;
          vU(f.f, e);
          vnb(d);
        }
        return f;
      }
      function Eq(a, b) {
        Dq();
        var c, d, e;
        if (b.V()) {
          return false;
        }
        if (aw(b, 207)) {
          e = Wv(b, 207);
          for (d = e.bb().mb(); d.G(); ) {
            c = Wv(d.H(), 83);
            a.Bb(c.Zb(), c.Yb());
          }
        } else {
          Jl(a, b.mb());
        }
        return true;
      }
      function MN() {
        MN = iI;
        KN = new NN("DEFAULT_MINIMUM_SIZE", 0);
        LN = new NN("MINIMUM_SIZE_ACCOUNTS_FOR_INSETS", 1);
        JN = new NN("COMPUTE_INSETS", 2);
        IN = new NN("APPLY_ADDITIONAL_INSETS", 3);
      }
      function MP(a) {
        var b, c, d, e;
        c = a.a.b + 2;
        e = xv(qz, Fzb, 10, c, 0, 1);
        e[0] = xI(MX(a.c));
        d = WI(a.a, 0);
        while (d.b != d.d.c) {
          b = Wv(_ub(d), 10);
          e[d.a] = new HI(b.a, b.b);
        }
        e[c - 1] = xI(MX(a.d));
        return e;
      }
      function ge(a, b, c) {
        var d, e, f;
        for (e = a.bb().mb(); e.G(); ) {
          d = Wv(e.H(), 21);
          f = d.yb();
          if (gw(b) === gw(f) || b != null && rb(b, f)) {
            if (c) {
              d = new qob(d.yb(), d.zb());
              e.I();
            }
            return d;
          }
        }
        return null;
      }
      function f9(a, b, c) {
        var d, e;
        d = a.a[b.d.k][b.k];
        e = a.a[c.d.k][c.k];
        if (d.a != null && e.a != null) {
          return flb(d.a, e.a);
        } else if (d.a != null) {
          return -1;
        } else if (e.a != null) {
          return 1;
        }
        return 0;
      }
      function beb(a, b, c) {
        var d, e, f;
        e = b.c;
        f = b.d;
        d = c;
        if (stb(a.a, b)) {
          Xdb(a, e) && (d = true);
          Xdb(a, f) && (d = true);
          if (d) {
            BU(b.c.e, b);
            BU(b.d.b, b);
            stb(a.d, b);
          }
          Ydb(a, b);
          return true;
        }
        return false;
      }
      function $eb(a, b, c) {
        var d, e;
        e = Zeb(a, b);
        if (e == a.c) {
          return Web(a, Yeb(a, b));
        }
        if (c) {
          _eb(a, b, a.c - e);
          return Web(a, Yeb(a, b));
        } else {
          d = new dfb(a);
          _eb(d, b, a.c - e);
          return Web(d, Yeb(d, b));
        }
      }
      function $tb() {
        function b() {
          try {
            return new Map().entries().next().done;
          } catch (a) {
            return false;
          }
        }
        if (typeof Map === Zxb && Map.prototype.entries && b()) {
          return Map;
        } else {
          return _tb();
        }
      }
      function Dd(a, b) {
        var c;
        c = Wv(Smb(a.b, b), 19);
        !c && (c = a.Z());
        return aw(c, 137) ? new Lg(a, b, Wv(c, 137)) : aw(c, 18) ? new Kg(a, b, Wv(c, 18)) : aw(c, 20) ? Ld(a, b, Wv(c, 20), null) : new _f(a, b, c, null);
      }
      function Gs(a) {
        switch (Rs(a.e) - Rs(a.g)) {
          case -2:
            Cs(a.g) > 0 && (a.g = Ls(a.g));
            return Ks(a);
          case 2:
            Cs(a.e) < 0 && (a.e = Ks(a.e));
            return Ls(a);
          default:
            a.d = 1 + Plb(Rs(a.e), Rs(a.g));
            return a;
        }
      }
      function k5(a, b) {
        this.f = (mp(), new ntb());
        this.b = new ntb();
        this.j = new ntb();
        this.a = a;
        this.c = b;
        this.c > 0 && j5(this, this.c - 1, (sN(), ZM));
        this.c < this.a.length - 1 && j5(this, this.c + 1, (sN(), rN));
      }
      function jt(a) {
        var b;
        if (a.c == null) {
          b = gw(a.b) === gw(ht) ? null : a.b;
          a.d = b == null ? Wxb : dw(b) ? mt(Zv(b)) : ew(b) ? "String" : Ikb(tb(b));
          a.a = a.a + ": " + (dw(b) ? lt(Zv(b)) : b + "");
          a.c = "(" + a.d + ") " + a.a;
        }
      }
      function IY(a) {
        var b, c, d, e;
        for (c = new Tob(a.a.c); c.a < c.c.c.length; ) {
          b = Wv(Rob(c), 9);
          for (e = WI(Eo(b.c), 0); e.b != e.d.c; ) {
            d = Wv(_ub(e), 33);
            rJ(d, (Rib(), uib)) == null && BU(b.c, d);
          }
        }
        return null;
      }
      function e3(a, b) {
        var c, d, e, f, g;
        g = new GU();
        for (d = Wv(qsb(a3, a), 20).mb(); d.G(); ) {
          c = Wv(d.H(), 75);
          xU(g, c.b);
        }
        Dpb(g);
        K2(g, a.a);
        for (f = new Tob(g); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 7);
          Anb(b, e);
        }
      }
      function P7(a) {
        var b, c, d, e;
        while (a.o.a.c.length != 0) {
          c = Wv(Svb(a.o), 27);
          d = Wv(c.a, 61);
          b = Wv(c.b, 89);
          e = c7(b, d);
          if (b.d == d) {
            o7(e.g, b);
            d.e = e.e + b.a;
          } else {
            o7(e.c, b);
            d.e = e.e - b.a;
          }
          vU(a.e.a, d);
        }
      }
      function Tr(a, b, c) {
        var d, e, f;
        Mh(c, "count");
        if (!ok(a.b, b)) {
          Xb(c == 0);
          return 0;
        }
        f = a.c.a;
        if (!f) {
          c > 0 && Lr(a, b, c);
          return 0;
        }
        e = xv(mw, Yyb, 26, 1, 12, 1);
        d = Ns(f, a.d, b, c, e);
        Us(a.c, f, d);
        return e[0];
      }
      function l$(a, b) {
        var c, d, e, f, g;
        e = Wv(rJ(b, (Rib(), Jib)), 15).a * Wv(rJ(b, (Mjb(), qjb)), 15).a;
        g = a[0].i.a + a[0].j.a;
        for (f = 1; f < a.length; f++) {
          c = a[f].i;
          d = a[f].j;
          c.a <= g + e && (c.a = g + e);
          g = c.a + d.a;
        }
      }
      function tvb() {
        tvb = iI;
        var a, b, c, d;
        qvb = xv(kw, hyb, 26, 25, 12, 1);
        rvb = xv(kw, hyb, 26, 33, 12, 1);
        d = 152587890625e-16;
        for (b = 32; b >= 0; b--) {
          rvb[b] = d;
          d *= 0.5;
        }
        c = 1;
        for (a = 24; a >= 0; a--) {
          qvb[a] = c;
          c *= 0.5;
        }
      }
      function f5(a) {
        while (a.g.c != 0 && a.d.c != 0) {
          if (o5(a.g).c > o5(a.d).c) {
            a.i += a.g.c;
            q5(a.d);
          } else if (o5(a.d).c > o5(a.g).c) {
            a.e += a.d.c;
            q5(a.g);
          } else {
            a.i += n5(a.g);
            a.e += n5(a.d);
            q5(a.g);
            q5(a.d);
          }
        }
      }
      function TP(a) {
        if (!a) {
          throw new EQ("An element is null. The origin of an edge could not be determined, this might be due to an inconsistency within the internal element mappings.");
        }
      }
      function UP(a, b) {
        var c, d;
        Ymb(a.i);
        Ymb(a.a);
        Ymb(a.k);
        Ymb(a.j);
        Ymb(a.b);
        Ymb(a.n);
        Ymb(a.f);
        Ymb(a.e);
        if (a.d) {
          d = Pu(a.d, OP.b);
          !!d && !!d.ic() && (a.c = d.ic().a);
        }
        c = fQ(a, b, null);
        bQ(a, b);
        return c;
      }
      function kfb(a) {
        var b, c, d, e, f, g;
        d = hfb(gfb(a));
        b = rAb;
        f = 0;
        e = 0;
        while (b > 0.5 && f < 50) {
          e = ofb(d);
          c = $eb(d, e, true);
          b = Jlb(c.b);
          ++f;
        }
        g = Yv(tn(Eo(a.g), Eo(a.g).b - 1));
        return $eb(a, (Dxb(g), g) - e, false);
      }
      function lfb(a) {
        var b, c, d, e, f, g;
        d = hfb(gfb(a));
        b = rAb;
        f = 0;
        e = 0;
        while (b > 0.5 && f < 50) {
          e = nfb(d);
          c = $eb(d, e, true);
          b = Jlb(c.a);
          ++f;
        }
        g = Yv(tn(Eo(a.g), Eo(a.g).b - 1));
        return $eb(a, (Dxb(g), g) - e, false);
      }
      function Ze(a) {
        var b, c, d, e;
        e = new Bmb("[");
        b = false;
        for (d = a.mb(); d.G(); ) {
          c = d.H();
          b ? (e.a += ", ", e) : b = true;
          ymb(e, c === a ? "(this Collection)" : (bmb(), c == null ? Wxb : xb(c)));
        }
        e.a += "]";
        return e.a;
      }
      function ie(a) {
        var b, c, d, e;
        e = new Bmb("{");
        b = false;
        for (d = a.bb().mb(); d.G(); ) {
          c = Wv(d.H(), 21);
          b ? (e.a += ", ", e) : b = true;
          ymb(e, je(a, c.yb()));
          e.a += "=";
          ymb(e, je(a, c.zb()));
        }
        e.a += "}";
        return e.a;
      }
      function Ks(a) {
        var b;
        dc(!!a.g);
        b = a.g;
        a.g = b.e;
        b.e = a;
        b.j = a.j;
        b.a = a.a;
        a.a = 1 + Zr(a.e) + Zr(a.g);
        a.j = PH(PH(a.c, Ts(a.e)), Ts(a.g));
        a.d = 1 + Plb(Rs(a.e), Rs(a.g));
        b.d = 1 + Plb(Rs(b.e), Rs(b.g));
        return b;
      }
      function Ls(a) {
        var b;
        dc(!!a.e);
        b = a.e;
        a.e = b.g;
        b.g = a;
        b.j = a.j;
        b.a = a.a;
        a.a = 1 + Zr(a.e) + Zr(a.g);
        a.j = PH(PH(a.c, Ts(a.e)), Ts(a.g));
        a.d = 1 + Plb(Rs(a.e), Rs(a.g));
        b.d = 1 + Plb(Rs(b.e), Rs(b.g));
        return b;
      }
      function ZO(a) {
        var b;
        if (!Qob(new Tob(AW(a.e)))) {
          return;
        }
        b = Wv(oW(a.e, (eM(), TL)), 28);
        b == (KM(), FM) ? SO(a.e) : b == GM ? TO(a.e) : Ckb(Ixb(Xv(oW(a.e, AL)))) || a.e.e.j.a == 0 && a.e.e.j.b == 0 ? UO(a.e) : WO(a);
      }
      function s3(a, b, c) {
        var d, e, f;
        e = new Tob(a);
        if (e.a < e.c.c.length) {
          f = Wv(Rob(e), 33);
          d = r3(f, b, c);
          while (e.a < e.c.c.length) {
            f = Wv(Rob(e), 33);
            Afb(d, r3(f, b, c));
          }
          return new Dfb(d);
        } else {
          return null;
        }
      }
      function u2(a, b) {
        var c, d, e, f, g, h;
        e = 0;
        for (d = new Tob(b.c); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 16);
          for (g = new Tob(c.a); g.a < g.c.c.length; ) {
            f = Wv(Rob(g), 9);
            h = f.j.a + f.e.c + f.e.b + a.b;
            e = e > h ? e : h;
          }
        }
        return e;
      }
      function sT(a, b) {
        oT();
        var c;
        if (a.c == b.c) {
          if (a.b == b.b || gT(a.b, b.b)) {
            c = dT(a.b) ? 1 : -1;
            if (a.a && !b.a) {
              return c;
            } else if (!a.a && b.a) {
              return -c;
            }
          }
          return xlb(a.b.e, b.b.e);
        } else {
          return glb(a.c, b.c);
        }
      }
      function nU(a) {
        var b, c;
        c = xI(MI(Bv(tv(qz, 1), Fzb, 10, 0, [a.f.i, a.i, a.a])));
        b = a.f.e;
        switch (a.g.e) {
          case 1:
            c.b -= b.d;
            break;
          case 2:
            c.a += b.c;
            break;
          case 3:
            c.b += b.a;
            break;
          case 4:
            c.a -= b.b;
        }
        return c;
      }
      function z6(a, b) {
        var c;
        c = 0;
        if (b.g == (CX(), BX)) {
          if (C6(b).f != a.a) {
            D6(a, C6(b).f);
            a.e = true;
          }
          a.e ? ++a.g : c += a.f;
        } else if (b.g == zX) {
          a.e ? c += a.g : ++a.f;
        } else if (b.g == AX) {
          D6(a, b);
          a.e = false;
        }
        return c;
      }
      function HV(a, b, c, d, e) {
        var f, g, h, i;
        i = null;
        for (h = new Tob(d); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 187);
          if (g != c && zU(g.e, e, 0) != -1) {
            i = g;
            break;
          }
        }
        f = IV(e);
        dW(f, c.b);
        eW(f, i.b);
        Fd(a.a, e, new XV(f, b, c.f));
      }
      function FZ(a) {
        switch (Wv(rJ(a, (Mjb(), vjb)), 85).e) {
          case 1:
            sJ(a, vjb, (Xib(), Uib));
            break;
          case 2:
            sJ(a, vjb, (Xib(), Vib));
            break;
          case 3:
            sJ(a, vjb, (Xib(), Sib));
            break;
          case 4:
            sJ(a, vjb, (Xib(), Tib));
        }
      }
      function iQ(a, b, c) {
        var d, e, f, g;
        if (a) {
          for (e = (f = Nu(a, xv($F, Txb, 2, 0, 5, 1)), new wnb(new opb(new _u(a, f).b))); e.b < e.d.Y(); ) {
            d = (Bxb(e.b < e.d.Y()), $v(e.d.sb(e.c = e.b++)));
            g = Pu(a, d);
            wQ(b, d, g, c);
          }
        }
      }
      function G5(a, b, c) {
        var d, e, f, g, h, i;
        e = 1;
        while (e < a) {
          e *= 2;
        }
        i = 2 * e - 1;
        e -= 1;
        h = xv(mw, Yyb, 26, i, 12, 1);
        d = 0;
        for (g = 0; g < b; g++) {
          f = c[g] + e;
          ++h[f];
          while (f > 0) {
            f % 2 > 0 && (d += h[f + 1]);
            f = (f - 1) / 2 | 0;
            ++h[f];
          }
        }
        return d;
      }
      function aeb(a, b, c) {
        var d, e, f, g;
        a.e = b;
        if (c) {
          for (e = (g = new Snb(a.a.a).a.bb().mb(), new Ynb(g)); e.a.G(); ) {
            d = (f = Wv(e.a.H(), 21), Wv(f.yb(), 12));
            sJ(d, (Rib(), Mib), a.e);
            QX(d.c, b.a);
            QX(d.d, b.b);
          }
        }
      }
      function g4() {
        g4 = iI;
        e4 = new h4(tzb, 0);
        b4 = new h4(ozb, 1);
        f4 = new h4(pzb, 2);
        d4 = new h4("LEFT_RIGHT_CONSTRAINT_LOCKING", 3);
        c4 = new h4("LEFT_RIGHT_CONNECTION_LOCKING", 4);
        a4 = new h4("EDGE_LENGTH", 5);
      }
      function N5(a, b, c, d) {
        var e;
        this.b = d;
        this.e = a.a;
        e = b[c];
        this.d = vv(KH, [Txb, xAb], [227, 26], 13, [e.length, e.length], 2);
        this.a = vv(mw, [Txb, Yyb], [52, 26], 12, [e.length, e.length], 2);
        this.c = new k5(b, c);
      }
      function fwb(a, b, c, d) {
        var e, f;
        f = b;
        e = f.d == null || a.a.$b(c.d, f.d) > 0 ? 1 : 0;
        while (f.a[e] != c) {
          f = f.a[e];
          e = a.a.$b(c.d, f.d) > 0 ? 1 : 0;
        }
        f.a[e] = d;
        d.b = c.b;
        d.a[0] = c.a[0];
        d.a[1] = c.a[1];
        c.a[0] = null;
        c.a[1] = null;
      }
      function ZQ(a, b, c) {
        var d, e, f, g;
        nI(c, Tzb, 1);
        NQ(a.d, b);
        g = sV(a.a, b);
        if (g.Y() == 1) {
          _Q(Wv(g.sb(0), 55), c);
        } else {
          f = 1 / g.Y();
          for (e = g.mb(); e.G(); ) {
            d = Wv(e.H(), 55);
            _Q(d, rI(c, f));
          }
        }
        qV(a.a, g, b);
        bR(b);
        pI(c);
      }
      function o6(a, b, c) {
        var d, e, f, g, h;
        h = new U6(b, c);
        for (g = T6(h); g.G(); ) {
          f = Wv(g.H(), 7);
          for (e = Uh(Sh((Gi(), new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [f.b, f.e])))))); Cm(e); ) {
            d = Wv(Dm(e), 12);
            bW(d) || l6(a, b, f, d);
          }
        }
      }
      function _6(a, b) {
        var c, d, e;
        e = nX(a, b);
        for (d = e.mb(); d.G(); ) {
          c = Wv(d.H(), 7);
          if (rJ(c, (Rib(), Bib)) != null || Cm(Uh(Sh((Gi(), new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [c.b, c.e])))))))) {
            return true;
          }
        }
        return false;
      }
      function Efb(a) {
        var b, c;
        if (sl(a)) {
          throw new slb(TAb);
        }
        for (c = WI(a, 0); c.b != c.d.c; ) {
          b = Wv(_ub(c), 10);
          this.d = Qlb(this.d, b.b);
          this.c = Nlb(this.c, b.a);
          this.a = Nlb(this.a, b.b);
          this.b = Qlb(this.b, b.a);
        }
      }
      function wI(a, b, c) {
        if (b < 0 || c < 0) {
          throw new slb("The highx must be bigger then lowx and the highy must be bigger then lowy");
        }
        a.a < 0 ? a.a = 0 : a.a > b && (a.a = b);
        a.b < 0 ? a.b = 0 : a.b > c && (a.b = c);
        return a;
      }
      function nX(a, b) {
        switch (b.e) {
          case 1:
            return pl(a.f, (LX(), HX));
          case 2:
            return pl(a.f, (LX(), FX));
          case 3:
            return pl(a.f, (LX(), JX));
          case 4:
            return pl(a.f, (LX(), KX));
          default:
            return ypb(), ypb(), vpb;
        }
      }
      function K0(a) {
        var b, c, d, e;
        for (e = (Il(), new Im(Dl(ul(a.a, new yl())))); Cm(e); ) {
          d = Wv(Dm(e), 9);
          d.g == (CX(), yX) && sJ(d, (Rib(), pib), (kP(), hP));
          for (c = Uh(mX(d)); Cm(c); ) {
            b = Wv(Dm(c), 12);
            M0(b, (kP(), hP));
          }
        }
      }
      function L0(a) {
        var b, c, d, e;
        for (e = (Il(), new Im(Dl(ul(a.a, new yl())))); Cm(e); ) {
          d = Wv(Dm(e), 9);
          d.g == (CX(), yX) && sJ(d, (Rib(), pib), (kP(), gP));
          for (c = Uh(mX(d)); Cm(c); ) {
            b = Wv(Dm(c), 12);
            M0(b, (kP(), gP));
          }
        }
      }
      function cdb(a, b) {
        this.b = new vtb();
        switch (a) {
          case 0:
            this.d = new Ddb(this);
            break;
          case 1:
            this.d = new tdb(this);
            break;
          case 2:
            this.d = new ydb(this);
            break;
          default:
            throw new rlb();
        }
        this.c = b;
        this.a = 0.2 * b;
      }
      function uW(a) {
        var b, c, d, e;
        if (!a.b) {
          a.b = new GU();
          for (c = new Tob(a.a.c); c.a < c.c.c.length; ) {
            b = Wv(Rob(c), 16);
            for (e = new Tob(b.a); e.a < e.c.c.length; ) {
              d = Wv(Rob(e), 9);
              vU(a.b, new BW(d, a.c));
            }
          }
        }
        return a.b;
      }
      function l5(a, b) {
        var c, d, e;
        c = m5(b, a.e);
        d = Wv(Smb(a.g.f, c), 24).a;
        e = a.a.c.length - 1;
        if (a.a.c.length != 0 && Wv(yU(a.a, e), 128).c == d) {
          ++Wv(yU(a.a, e), 128).a;
          ++Wv(yU(a.a, e), 128).b;
        } else {
          vU(a.a, new v5(d));
        }
      }
      function lmb(a) {
        bmb();
        var b, c;
        if (a >= ayb) {
          b = 55296 + (a - ayb >> 10 & 1023) & byb;
          c = 56320 + (a - ayb & 1023) & byb;
          return String.fromCharCode(b) + ("" + String.fromCharCode(c));
        } else {
          return String.fromCharCode(a & byb);
        }
      }
      function KV(a, b, c, d) {
        var e, f, g;
        e = hX(c);
        f = PW(e);
        g = new RX();
        PX(g, c);
        switch (d.e) {
          case 1:
            QX(g, tN(vN(f)));
            break;
          case 2:
            QX(g, vN(f));
        }
        sJ(g, (Rib(), tib), Wv(rJ(b, tib), 15));
        sJ(b, uib, g);
        Umb(a.b, g, b);
        return g;
      }
      function l6(a, b, c, d) {
        var e;
        vU(a.c, new t6(a, c, d, Wv(Smb(a.k, c), 24).a));
        if (d6(d) && (b == a.e ? d.d.f != a.a && d.c.f != a.a : d.d.f != a.e && d.c.f != a.e)) {
          e = c == d.c ? d.d : d.c;
          vU(a.c, new t6(a, e, d, Wv(Smb(a.k, e), 24).a));
        }
      }
      function fe(a, b) {
        var c, d, e;
        if (b === a) {
          return true;
        }
        if (!aw(b, 57)) {
          return false;
        }
        e = Wv(b, 57);
        if (a.Y() != e.Y()) {
          return false;
        }
        for (d = e.bb().mb(); d.G(); ) {
          c = Wv(d.H(), 21);
          if (!a._(c)) {
            return false;
          }
        }
        return true;
      }
      function $Z(a, b) {
        var c, d, e;
        d = new uX(a);
        qJ(d, b);
        sJ(d, (Rib(), gib), b);
        sJ(d, (eM(), TL), (KM(), FM));
        sJ(d, lL, (iK(), eK));
        sX(d, (CX(), xX));
        c = new RX();
        PX(c, d);
        QX(c, (sN(), rN));
        e = new RX();
        PX(e, d);
        QX(e, ZM);
        return d;
      }
      function O7(a, b) {
        var c, d, e;
        e = $xb;
        for (d = new Tob(m7(b)); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 89);
          if (c.e && !a.c[c.b]) {
            a.c[c.b] = true;
            e = Slb(e, O7(a, c7(c, b)));
          }
        }
        a.i[b.b] = a.j;
        a.g[b.b] = Slb(e, a.j++);
        return a.g[b.b];
      }
      function _eb(a, b, c) {
        var d, e, f, g;
        g = a.g.tb();
        if (a.e) {
          for (e = 0; e < a.c; e++) {
            g.H();
          }
        } else {
          for (e = 0; e < a.c - 1; e++) {
            g.H();
          }
        }
        f = a.b.tb();
        d = Ixb(Yv(g.H()));
        while (d - b < RAb) {
          d = Ixb(Yv(g.H()));
          f.H();
        }
        g.M();
        afb(a, c, b, f, g);
      }
      function Lt(b, c) {
        var d, e, f, g;
        for (e = 0, f = b.length; e < f; e++) {
          g = b[e];
          try {
            g[1] ? g[0].bd() && (c = Kt(c, g)) : g[0].bd();
          } catch (a) {
            a = OH(a);
            if (aw(a, 46)) {
              d = a;
              Ct(aw(d, 164) ? Wv(d, 164).cc() : d);
            } else
              throw NH(a);
          }
        }
        return c;
      }
      function Qr(a) {
        var b, c, d;
        d = a.c.a;
        if (!d) {
          return null;
        }
        if (a.b.b) {
          b = a.b.e;
          c = Ds(a.c.a, a.d, b);
          if (!c) {
            return null;
          }
          a.b.d == (Gh(), Fh) && a.d.$b(b, c.b) == 0 && (c = c.i);
        } else {
          c = a.a.i;
        }
        return c == a.a || !ok(a.b, c.b) ? null : c;
      }
      function t2(a, b) {
        var c, d, e, f, g, h;
        f = 0;
        for (d = new Tob(b.c); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 16);
          e = 0;
          for (h = new Tob(c.a); h.a < h.c.c.length; ) {
            g = Wv(Rob(h), 9);
            e += g.j.b + g.e.a + g.e.d + a.a;
          }
          e -= a.a;
          f = f > e ? f : e;
        }
        return f;
      }
      function M7(a) {
        var b, c, d, e, f;
        f = $xb;
        e = $xb;
        for (d = new Tob(m7(a)); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 89);
          b = c.d.e - c.c.e;
          c.d == a && b < e ? e = b : b < f && (f = b);
        }
        e == $xb && (e = -1);
        f == $xb && (f = -1);
        return new RJ(Elb(e), Elb(f));
      }
      function l8(a, b, c) {
        var d, e, f, g, h;
        b.k = -1;
        for (h = oX(b, (djb(), bjb)).mb(); h.G(); ) {
          g = Wv(h.H(), 7);
          for (e = new Tob(g.e); e.a < e.c.c.length; ) {
            d = Wv(Rob(e), 12);
            f = d.d.f;
            b != f && (f.k < 0 ? c.ib(d) : f.k > 0 && l8(a, f, c));
          }
        }
        b.k = 0;
      }
      function Bfb(a, b) {
        yfb(this);
        if (0 > b) {
          throw new slb("Top must be smaller or equal to bottom.");
        } else if (0 > a) {
          throw new slb("Left must be smaller or equal to right.");
        }
        this.d = 0;
        this.c = a;
        this.a = b;
        this.b = 0;
      }
      function Ffb(a) {
        var b, c, d;
        yfb(this);
        if (a.length == 0) {
          throw new slb(TAb);
        }
        for (c = 0, d = a.length; c < d; ++c) {
          b = a[c];
          this.d = Qlb(this.d, b.b);
          this.c = Nlb(this.c, b.a);
          this.a = Nlb(this.a, b.b);
          this.b = Qlb(this.b, b.a);
        }
      }
      function g0() {
        d0();
        return Bv(tv(mC, 1), uyb, 37, 0, [L_, o_, c0, m_, p_, __, z_, T_, j_, D_, S_, P_, I_, s_, h_, N_, W_, F_, G_, A_, Z_, V_, R_, r_, U_, $_, Y_, B_, x_, H_, k_, C_, a0, O_, t_, v_, J_, i_, l_, y_, u_, M_, Q_, E_, w_, X_, K_, n_, b0, q_]);
      }
      function a5(a, b) {
        var c, d, e, f, g, h, i, j, k;
        k = 0;
        for (d = 0, e = b.length; d < e; ++d) {
          c = b[d];
          for (g = 0, h = c.length; g < h; ++g) {
            f = c[g];
            for (j = new Tob(f.f); j.a < j.c.c.length; ) {
              i = Wv(Rob(j), 7);
              i.k = k++;
            }
          }
        }
        a.a = xv(mw, Yyb, 26, k, 12, 1);
      }
      function Sl(a) {
        Il();
        var b, c, d;
        b = a.H();
        if (!a.G()) {
          return b;
        }
        d = new zmb();
        d.a += "expected one element but was: <" + b;
        for (c = 0; c < 4 && a.G(); c++) {
          ymb(d, ", " + a.H());
        }
        a.G() && (d.a += ", ...", d);
        d.a += ">";
        throw new slb(d.a);
      }
      function x6(a) {
        var b, c, d, e, f;
        b = 0;
        for (d = a.b, e = 0, f = d.length; e < f; ++e) {
          c = d[e];
          b += z6(a, c);
          if (LM(Wv(rJ(c, (eM(), TL)), 28))) {
            nX(c, (sN(), $M)).mb().G() && (b += y6(a, c, $M));
            nX(c, pN).mb().G() && (b += y6(a, c, pN));
          }
        }
        return b;
      }
      function i5(a, b, c, d) {
        var e, f, g, h, i;
        if (d.d.c + d.e.c == 0) {
          for (g = a.a[a.c], h = 0, i = g.length; h < i; ++h) {
            f = g[h];
            Umb(d, f, new r5(a, f, c));
          }
        }
        e = Wv(re(Ktb(d.d, b)), 284);
        e.b = 0;
        e.c = e.f;
        e.c == 0 || u5(Wv(yU(e.a, e.b), 128));
        return e;
      }
      function Dpb(a) {
        var h;
        ypb();
        var b, c, d, e, f, g;
        if (aw(a, 63)) {
          for (e = 0, d = a.Y() - 1; e < d; ++e, --d) {
            h = a.sb(e);
            a.wb(e, a.sb(d));
            a.wb(d, h);
          }
        } else {
          b = a.tb();
          f = a.ub(a.Y());
          while (b.L() < f.N()) {
            c = b.H();
            g = f.M();
            b.O(g);
            f.O(c);
          }
        }
      }
      function Wb(a, b, c) {
        if (a < 0 || a > c) {
          return Vb(a, c, "start index");
        }
        if (b < 0 || b > c) {
          return Vb(b, c, "end index");
        }
        return fc("end index (%s) must not be less than start index (%s)", Bv(tv(UF, 1), syb, 1, 4, [Elb(b), Elb(a)]));
      }
      function SP(a) {
        if (!("id" in a.a)) {
          throw new FQ("Every graph element must specify an 'id' property.", a);
        }
        if (!Pu(a, "id").lc()) {
          throw new FQ("Invalid format for 'id'. Must be a string, was " + Pu(a, "id").$c, a);
        }
      }
      function f3(a, b) {
        var c, d, e, f, g, h, i;
        i = a.b;
        for (d = Wv(qsb(a3, a), 20).mb(); d.G(); ) {
          c = Wv(d.H(), 75);
          for (h = (f = new Snb(c.c.a).a.bb().mb(), new Ynb(f)); h.a.G(); ) {
            g = (e = Wv(h.a.H(), 21), Wv(e.yb(), 7));
            Anb(b, g);
            J2(g, i);
          }
        }
      }
      function _db(a, b) {
        var c, d, e;
        for (e = new Tob(b.e); e.a < e.c.c.length; ) {
          c = Wv(Rob(e), 12);
          if (c.d.f != a.f) {
            return true;
          }
        }
        for (d = new Tob(b.b); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 12);
          if (c.c.f != a.f) {
            return true;
          }
        }
        return false;
      }
      function Z2(a) {
        var b, c, d, e;
        We(a.c);
        We(a.b);
        We(a.a);
        for (e = (c = new Snb(a.e).a.bb().mb(), new Ynb(c)); e.a.G(); ) {
          d = (b = Wv(e.a.H(), 21), Wv(b.yb(), 60));
          if (d.c != 2) {
            Wsb(a.a, d);
            d.c == 0 && Wsb(a.c, d);
          }
          Wsb(a.b, d);
        }
        a.d = false;
      }
      function mr(b, c) {
        var d;
        if (b === c) {
          return true;
        }
        if (aw(c, 18)) {
          d = Wv(c, 18);
          try {
            return b.Y() == d.Y() && b.lb(d);
          } catch (a) {
            a = OH(a);
            if (aw(a, 76)) {
              return false;
            } else if (aw(a, 119)) {
              return false;
            } else
              throw NH(a);
          }
        }
        return false;
      }
      function Ltb(a, b, c) {
        var d, e, f, g;
        g = b == null ? 0 : a.b.Vc(b);
        e = (d = Ttb(a.a, g), d == null ? [] : d);
        if (e.length == 0) {
          Vtb(a.a, g, e);
        } else {
          f = Itb(a, b, e);
          if (f) {
            return f.Ab(c);
          }
        }
        Av(e, e.length, new qob(b, c));
        ++a.c;
        msb(a.b);
        return null;
      }
      function Vb(a, b, c) {
        if (a < 0) {
          return fc(ryb, Bv(tv(UF, 1), syb, 1, 4, [c, Elb(a)]));
        } else if (b < 0) {
          throw new slb(tyb + b);
        } else {
          return fc("%s (%s) must not be greater than size (%s)", Bv(tv(UF, 1), syb, 1, 4, [c, Elb(a), Elb(b)]));
        }
      }
      function Ub(a, b) {
        if (a < 0) {
          return fc(ryb, Bv(tv(UF, 1), syb, 1, 4, ["index", Elb(a)]));
        } else if (b < 0) {
          throw new slb(tyb + b);
        } else {
          return fc("%s (%s) must be less than size (%s)", Bv(tv(UF, 1), syb, 1, 4, ["index", Elb(a), Elb(b)]));
        }
      }
      function jW(a) {
        var b, c, d, e;
        e = xv(qB, Txb, 51, a.c.c.length, 0, 2);
        d = new Fnb(a.c, 0);
        while (d.b < d.d.Y()) {
          b = (Bxb(d.b < d.d.Y()), Wv(d.d.sb(d.c = d.b++), 16));
          c = d.b - 1;
          e[c] = Wv(FU(b.a, xv(qB, Nzb, 9, b.a.c.length, 0, 1)), 51);
        }
        return e;
      }
      function w3(a, b, c, d, e) {
        this.c = e;
        this.d = b;
        this.a = c;
        switch (e.e) {
          case 4:
            this.b = Jlb(a.b);
            break;
          case 1:
            this.b = Jlb(a.d);
            break;
          case 2:
            this.b = Jlb(a.c - d.j.a);
            break;
          case 3:
            this.b = Jlb(a.a - d.j.b);
            break;
          default:
            this.b = 0;
        }
      }
      function adb(a, b, c, d, e) {
        var f, g, h, i, j;
        if (b) {
          for (h = b.mb(); h.G(); ) {
            g = Wv(h.H(), 9);
            for (j = pX(g, (djb(), bjb), c).mb(); j.G(); ) {
              i = Wv(j.H(), 7);
              f = Wv(re(Ktb(e.d, i)), 80);
              if (!f) {
                f = new odb(a);
                d.c[d.c.length] = f;
                mdb(f, i, e);
              }
            }
          }
        }
      }
      function Ofb(a, b) {
        var c, d, e;
        c = a.c;
        if (c.a.Y() > 1) {
          throw new slb("In straight hyperEdges there may be only one edge.");
        }
        QI((e = new Snb(c.a).a.bb().mb(), d = Wv(new Ynb(e).a.H(), 21), Wv(d.yb(), 12)).a, new HI(b, a.b));
      }
      function no(a, b, c) {
        var d, e;
        this.f = a;
        d = Wv(Smb(a.b, b), 126);
        e = !d ? 0 : d.a;
        bc(c, e);
        if (c >= (e / 2 | 0)) {
          this.e = !d ? null : d.c;
          this.d = e;
          while (c++ < e) {
            lo(this);
          }
        } else {
          this.c = !d ? null : d.b;
          while (c-- > 0) {
            ko(this);
          }
        }
        this.b = b;
        this.a = null;
      }
      function HP(a, b) {
        if (typeof klaycallback === Zxb) {
          klaycallback(b);
        } else {
          typeof document !== Czb ? Rxb(a(b)) : typeof module === Sxb && module.exports && Rxb(a(b));
          typeof document === Czb && typeof self !== Czb && self.postMessage(b);
        }
      }
      function _P(a, b) {
        var c, d, e, f;
        if ("x" in a.a) {
          e = Wv(Pu(a, "x"), 104);
          b.i.a = e.a;
        }
        if ("y" in a.a) {
          f = Wv(Pu(a, "y"), 104);
          b.i.b = f.a;
        }
        if (Jzb in a.a) {
          d = Wv(Pu(a, Jzb), 104);
          b.j.a = d.a;
        }
        if (Kzb in a.a) {
          c = Wv(Pu(a, Kzb), 104);
          b.j.b = c.a;
        }
      }
      function lgb(a, b, c) {
        var d, e;
        igb(this);
        b == (fgb(), dgb) ? stb(this.g, a.c) : stb(this.o, a.c);
        c == dgb ? stb(this.g, a.d) : stb(this.o, a.d);
        stb(this.c, a);
        d = MX(a.c).b;
        e = MX(a.d).b;
        kgb(this, d, e, e);
        this.f = Zfb(MX(a.c).b, MX(a.d).b);
      }
      function p5(a) {
        var b, c, d, e, f, g;
        g = new U6(a.d, a.e);
        for (f = T6(g); f.G(); ) {
          e = Wv(f.H(), 7);
          d = a.e == (sN(), rN) ? e.b : e.e;
          for (c = new Tob(d); c.a < c.c.c.length; ) {
            b = Wv(Rob(c), 12);
            if (!bW(b) && b.c.f.d != b.d.f.d) {
              l5(a, b);
              ++a.f;
              ++a.c;
            }
          }
        }
      }
      function LQ(a, b, c) {
        var d, e, f, g, h;
        g = (ypb(), new Frb(Wv(yU(b.a, c), 18)));
        h = new HU(g.b.Y());
        for (e = new Nqb(g.b.mb()); e.b.G(); ) {
          d = Wv(e.b.H(), 37);
          f = Wv(Smb(a.a, d), 31);
          if (!f) {
            f = e0(d);
            Umb(a.a, d, f);
          }
          h.c[h.c.length] = f;
        }
        return h;
      }
      function T5(a, b) {
        var c, d, e, f;
        d = new Fnb(a.f.c, 0);
        while (d.b < d.d.Y()) {
          c = (Bxb(d.b < d.d.Y()), Wv(d.d.sb(d.c = d.b++), 16));
          f = b[d.b - 1];
          e = new Fnb(c.a, 0);
          while (e.b < e.d.Y()) {
            Bxb(e.b < e.d.Y());
            e.d.sb(e.c = e.b++);
            Enb(e, f[e.b - 1]);
          }
        }
      }
      function m2(a) {
        var b, c;
        if (MM(Wv(rJ(a, (eM(), TL)), 28))) {
          for (c = new Tob(a.f); c.a < c.c.c.length; ) {
            b = Wv(Rob(c), 7);
            b.g == (sN(), qN) && p2(b);
          }
        } else {
          for (c = new Tob(a.f); c.a < c.c.c.length; ) {
            b = Wv(Rob(c), 7);
            p2(b);
          }
          sJ(a, TL, (KM(), HM));
        }
      }
      function jpb(a, b, c, d, e, f) {
        var g, h, i, j;
        g = d - c;
        if (g < 7) {
          gpb(b, c, d, f);
          return;
        }
        i = c + e;
        h = d + e;
        j = i + (h - i >> 1);
        jpb(b, a, i, j, -e, f);
        jpb(b, a, j, h, -e, f);
        if (f.$b(a[j - 1], a[j]) <= 0) {
          while (c < d) {
            Av(b, c++, a[i++]);
          }
          return;
        }
        hpb(a, i, j, h, b, c, d, f);
      }
      function hv(a) {
        if (!a) {
          return Bu(), Au;
        }
        var b = a.valueOf ? a.valueOf() : a;
        if (b !== a) {
          var c = dv[typeof b];
          return c ? c(b) : kv(typeof b);
        } else if (a instanceof Array || a instanceof $wnd.Array) {
          return new ku(a);
        } else {
          return new Uu(a);
        }
      }
      function I7(a, b, c) {
        var d, e;
        d = c.c;
        e = c.d;
        if (a.g[d.b] <= a.i[b.b] && a.i[b.b] <= a.i[d.b] && a.g[e.b] <= a.i[b.b] && a.i[b.b] <= a.i[e.b]) {
          if (a.i[d.b] < a.i[e.b]) {
            return false;
          }
          return true;
        }
        if (a.i[d.b] < a.i[e.b]) {
          return true;
        }
        return false;
      }
      function j5(a, b, c) {
        var d, e, f, g, h, i, j, k;
        j = 0;
        for (e = a.a[b], f = 0, g = e.length; f < g; ++f) {
          d = e[f];
          k = new U6(d, c);
          for (i = T6(k); i.G(); ) {
            h = Wv(i.H(), 7);
            Umb(a.f, h, Elb(j));
            LM(Wv(rJ(d, (eM(), TL)), 28)) && ++j;
          }
          LM(Wv(rJ(d, (eM(), TL)), 28)) || ++j;
        }
      }
      function Pb(a, b, c) {
        var d, e;
        _b(b);
        if (c.G()) {
          e = Wv(c.H(), 21);
          vmb(b, Mb(a.a, e.yb()));
          vmb(b, a.b);
          vmb(b, Mb(a.a, e.zb()));
          while (c.G()) {
            vmb(b, a.a.c);
            d = Wv(c.H(), 21);
            vmb(b, Mb(a.a, d.yb()));
            vmb(b, a.b);
            vmb(b, Mb(a.a, d.zb()));
          }
        }
        return b;
      }
      function Gd(a, b) {
        var c, d;
        c = Wv(Wmb(a.b, b), 19);
        if (!c) {
          return a.$();
        }
        d = a.Z();
        d.jb(c);
        a.c -= c.Y();
        c.Q();
        return aw(d, 137) ? (ypb(), new dsb(Wv(d, 137))) : aw(d, 18) ? (ypb(), new Frb(Wv(d, 18))) : aw(d, 20) ? Hpb(Wv(d, 20)) : (ypb(), new zqb(d));
      }
      function Tm(a, b) {
        var c;
        b.d ? b.d.b = b.b : a.a = b.b;
        b.b ? b.b.d = b.d : a.e = b.d;
        if (!b.e && !b.c) {
          c = Wv(Wmb(a.b, b.a), 126);
          c.a = 0;
          ++a.c;
        } else {
          c = Wv(Smb(a.b, b.a), 126);
          --c.a;
          !b.e ? c.b = b.c : b.e.c = b.c;
          !b.c ? c.c = b.e : b.c.e = b.e;
        }
        --a.d;
      }
      function mU(a, b, c) {
        switch (c.e) {
          case 1:
            return new HI(b.a, Qlb(a.d.b, b.b));
          case 2:
            return new HI(Nlb(a.c.a, b.a), b.b);
          case 3:
            return new HI(b.a, Nlb(a.c.b, b.b));
          case 4:
            return new HI(Qlb(b.a, a.d.a), b.b);
        }
        return new HI(b.a, b.b);
      }
      function Oxb(a) {
        var b, c, d, e;
        b = 0;
        d = (bmb(), a.length);
        e = d - 4;
        c = 0;
        while (c < e) {
          b = a.charCodeAt(c + 3) + 31 * (a.charCodeAt(c + 2) + 31 * (a.charCodeAt(c + 1) + 31 * (a.charCodeAt(c) + 31 * b)));
          b = b | 0;
          c += 4;
        }
        while (c < d) {
          b = b * 31 + jmb(a, c++);
        }
        b = b | 0;
        return b;
      }
      function X9(a, b) {
        var c, d, e;
        this.a = a;
        this.c = b;
        this.b = xv(nE, Txb, 673, a.length, 0, 2);
        for (c = 0; c < a.length; ++c) {
          e = a[c].length;
          this.b[c] = xv(nE, {673: 1, 3: 1, 5: 1, 6: 1}, 102, e, 0, 1);
          for (d = 0; d < e; ++d) {
            this.b[c][d] = new $9(this, a[c][d].c);
          }
        }
      }
      function sk(a, b, c, d, e, f, g) {
        var h;
        this.a = Wv(_b(a), 56);
        this.b = b;
        this.c = e;
        this.e = c;
        this.d = Wv(_b(d), 159);
        this.g = f;
        this.f = Wv(_b(g), 159);
        b && a.$b(c, c);
        e && a.$b(f, f);
        if (b && e) {
          h = a.$b(c, f);
          Zb(h <= 0, c, f);
          h == 0 && Xb(d != (Gh(), Fh) | g != Fh);
        }
      }
      function eV(a) {
        this.a = a;
        if (a.c.f.g == (CX(), xX)) {
          this.c = a.c;
          this.d = Wv(rJ(a.c.f, (Rib(), hib)), 32);
        } else if (a.d.f.g == xX) {
          this.c = a.d;
          this.d = Wv(rJ(a.d.f, (Rib(), hib)), 32);
        } else {
          throw new slb("Edge " + a + " is not an external edge.");
        }
      }
      function Xcb() {
        Xcb = iI;
        Scb = UQ(new WQ(), (d0(), x_));
        Ucb = TQ(new WQ(), A_);
        Vcb = PQ(TQ(new WQ(), R_), Q_);
        Rcb = PQ(UQ(TQ(new WQ(), s_), t_), u_);
        Wcb = TQ(new WQ(), Z_);
        Tcb = PQ(new WQ(), y_);
        Pcb = PQ(UQ(TQ(SQ(new WQ(), D_), F_), H_), E_);
        Qcb = PQ(UQ(new WQ(), H_), q_);
      }
      function Lr(a, b, c) {
        var d, e, f, g;
        Mh(c, Xyb);
        if (c == 0) {
          return Pr(a, b);
        }
        Xb(ok(a.b, b));
        g = a.c.a;
        if (!g) {
          a.d.$b(b, b);
          e = new Os(b, c);
          es(a.a, e, a.a);
          Us(a.c, null, e);
          return 0;
        }
        f = xv(mw, Yyb, 26, 1, 12, 1);
        d = zs(g, a.d, b, c, f);
        Us(a.c, g, d);
        return f[0];
      }
      function i$(a, b, c) {
        var d, e, f, g, h, i;
        d = 0;
        i = c;
        if (!b) {
          d = c * (a.c.length - 1);
          i *= -1;
        }
        for (f = new Tob(a); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 9);
          sJ(e, (eM(), lL), (iK(), eK));
          e.j.a = d;
          for (h = nX(e, (sN(), ZM)).mb(); h.G(); ) {
            g = Wv(h.H(), 7);
            g.i.a = d;
          }
          d += i;
        }
      }
      function Fd(a, b, c) {
        var d;
        d = Wv(Smb(a.b, b), 19);
        if (!d) {
          d = a.Z();
          if (d.ib(c)) {
            ++a.c;
            Umb(a.b, b, d);
            return true;
          } else {
            throw new ukb("New Collection violated the Collection spec");
          }
        } else if (d.ib(c)) {
          ++a.c;
          return true;
        } else {
          return false;
        }
      }
      function ES(a, b, c) {
        var d, e, f;
        CS(a, b, c);
        f = new GU();
        for (e = new Tob(a.b.a.b); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 25);
          if (b.D(d)) {
            vU(f, new OS(d, true));
            vU(f, new OS(d, false));
          }
        }
        JS(a.d);
        RT(f, a.c, new opb(Bv(tv(JA, 1), syb, 160, 0, [a.d])));
        DS(a, b, c);
      }
      function R8(a, b) {
        var c, d, e, f, g;
        a.c[b.k] = true;
        vU(a.a, b);
        for (g = new Tob(b.f); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 7);
          for (d = Uh(Sh((Gi(), new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [f.b, f.e])))))); Cm(d); ) {
            c = Wv(Dm(d), 12);
            e = S8(f, c).f;
            a.c[e.k] || R8(a, e);
          }
        }
      }
      function dQ(a, b, c, d) {
        var e, f, g;
        if ("labels" in b.a) {
          g = Pu(b, "labels");
          if (!g.hc()) {
            throw new GQ("The 'labels' property of a node must be an array.", g, b);
          }
          f = g.hc();
          for (e = 0; e < f.a.length; ++e) {
            aw(gu(f, e), 69) && cQ(a, Wv(gu(f, e), 69), c, d);
          }
        }
      }
      function j0(a, b, c) {
        var d, e, f, g, h, i;
        f = Wv(yU(b.b, 0), 12).c;
        d = f.f;
        e = d.g;
        i = Wv(yU(c.e, 0), 12).d;
        g = i.f;
        h = g.g;
        e == (CX(), zX) ? sJ(a, (Rib(), qib), Wv(rJ(d, qib), 7)) : sJ(a, (Rib(), qib), f);
        h == zX ? sJ(a, (Rib(), rib), Wv(rJ(g, rib), 7)) : sJ(a, (Rib(), rib), i);
      }
      function oM() {
        oM = iI;
        gM = new pM("H_LEFT", 0);
        fM = new pM("H_CENTER", 1);
        iM = new pM("H_RIGHT", 2);
        nM = new pM("V_TOP", 3);
        mM = new pM("V_CENTER", 4);
        lM = new pM("V_BOTTOM", 5);
        jM = new pM("INSIDE", 6);
        kM = new pM("OUTSIDE", 7);
        hM = new pM("H_PRIORITY", 8);
      }
      function rS(a) {
        aS();
        var b, c, d;
        this.b = ZR;
        this.c = _R;
        this.d = (sK(), qK);
        this.g = (VR(), UR);
        this.a = a;
        oS(this, new sS());
        fS(this);
        for (d = new Tob(a.b); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 25);
          if (!c.f) {
            b = new QR(Bv(tv(kA, 1), syb, 25, 0, [c]));
            vU(a.a, b);
          }
        }
      }
      function R7(a, b) {
        var c, d, e, f;
        e = 1;
        b.j = true;
        for (d = new Tob(m7(b)); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 89);
          if (!a.c[c.b]) {
            a.c[c.b] = true;
            f = c7(c, b);
            if (c.e) {
              e += R7(a, f);
            } else if (!f.j && c.a == c.d.e - c.c.e) {
              c.e = true;
              stb(a.p, c);
              e += R7(a, f);
            }
          }
        }
        return e;
      }
      function Abb(a) {
        var b, c, d, e, f, g, h, i;
        e = Uzb;
        d = Vzb;
        for (c = new Tob(a.e.c); c.a < c.c.c.length; ) {
          b = Wv(Rob(c), 16);
          for (g = new Tob(b.a); g.a < g.c.c.length; ) {
            f = Wv(Rob(g), 9);
            i = Ixb(a.n[f.k]);
            h = i + Ixb(a.b[a.f[f.k].k]);
            e = e < i ? e : i;
            d = d > h ? d : h;
          }
        }
        return d - e;
      }
      function DQ(a) {
        var b;
        b = new Tu();
        Ru(b, "type", new lv((Gkb($z), $z.n)));
        Ru(b, Dzb, new lv(a.f));
        !!a.b && Ru(b, "value", a.b);
        !!a.a && Ru(b, "context", a.a);
        Ru(b, Ezb, new lv(Hb(new Kb("\n"), new wnb(new opb((a.g == null && (a.g = Pt(a)), a.g))))));
        return b;
      }
      function D5(a, b) {
        if (a.c < b.c) {
          return -1;
        } else if (a.c > b.c) {
          return 1;
        } else if (a.b < b.b) {
          return -1;
        } else if (a.b > b.b) {
          return 1;
        } else if (a.a != b.a) {
          return a.a.b - b.a.b;
        } else if (a.d == 0 && b.d == 1) {
          return -1;
        } else if (a.d == 1 && b.d == 0) {
          return 1;
        }
        return 0;
      }
      function cn(a, b) {
        var c, d, e, f, g;
        if (b === a) {
          return true;
        }
        if (!aw(b, 20)) {
          return false;
        }
        g = Wv(b, 20);
        if (a.Y() != g.Y()) {
          return false;
        }
        f = g.mb();
        for (d = a.mb(); d.G(); ) {
          c = d.H();
          e = f.H();
          if (!(gw(c) === gw(e) || c != null && rb(c, e))) {
            return false;
          }
        }
        return true;
      }
      function st(b) {
        var c = (!qt && (qt = tt()), qt);
        var d = b.replace(/[\x00-\x1f\xad\u0600-\u0603\u06dd\u070f\u17b4\u17b5\u200b-\u200f\u2028-\u202e\u2060-\u2064\u206a-\u206f\ufeff\ufff9-\ufffb"\\]/g, function(a) {
          return rt(a, c);
        });
        return '"' + d + '"';
      }
      function ER(a, b) {
        var c, d, e, f, g, h, i;
        e = b == 1 ? wR : vR;
        for (d = (g = new Snb(e.a).a.bb().mb(), new Ynb(g)); d.a.G(); ) {
          c = (f = Wv(d.a.H(), 21), Wv(f.yb(), 59));
          for (i = Wv(Dd(a.f.c, c), 18).mb(); i.G(); ) {
            h = Wv(i.H(), 27);
            BU(a.b.b, h.b);
            BU(a.b.a, Wv(h.b, 25).f);
          }
        }
      }
      function aR(a, b, c) {
        var d, e, f, g;
        nI(c, "Recursive layout", 2);
        if (b.b.c.length != 0) {
          g = 1 / b.b.c.length;
          for (f = new Tob(b.b); f.a < f.c.c.length; ) {
            e = Wv(Rob(f), 9);
            d = Wv(rJ(e, (Rib(), sib)), 55);
            if (d) {
              aR(a, d, rI(c, g));
              $Q(e, d);
            }
          }
          NQ(a.d, b);
          _Q(b, c);
        }
        bR(b);
        pI(c);
      }
      function L3(a, b) {
        oR.call(this);
        this.d = new vtb();
        this.b = Wv(rJ(b, (Rib(), Jib)), 15).a * Wv(rJ(b, (Mjb(), qjb)), 15).a;
        this.e = this.b * Wv(rJ(b, Ejb), 15).a;
        this.a = new jJ();
        this.c = new jJ();
        this.j = new VN(a.j, a.k, 0, a.n - a.k);
        this.o = a.g;
        this.g.a = a.i;
        K3(this, a);
      }
      function Mtb(a, b) {
        var c, d, e, f, g;
        f = b == null ? 0 : a.b.Vc(b);
        d = (c = Ttb(a.a, f), c == null ? [] : c);
        for (g = 0; g < d.length; g++) {
          e = d[g];
          if (a.b.Uc(b, e.yb())) {
            if (d.length == 1) {
              d.length = 0;
              a.a[$Ab](f);
            } else {
              d.splice(g, 1);
            }
            --a.c;
            msb(a.b);
            return e.zb();
          }
        }
        return null;
      }
      function hU(a, b, c) {
        var d;
        d = null;
        !!b && (d = b.e);
        ZU(a, new VS(b.i.a - d.b + c.a, b.i.b - d.d + c.b));
        ZU(a, new VS(b.i.a - d.b + c.a, b.i.b + b.j.b + d.a + c.b));
        ZU(a, new VS(b.i.a + b.j.a + d.c + c.a, b.i.b - d.d + c.b));
        ZU(a, new VS(b.i.a + b.j.a + d.c + c.a, b.i.b + b.j.b + d.a + c.b));
      }
      function J2(a, b) {
        switch (b.e) {
          case 2:
            QX(a, (sN(), ZM));
            a.a.a = a.j.a;
            a.a.b = a.j.b / 2;
            break;
          case 4:
            QX(a, (sN(), rN));
            a.a.a = 0;
            a.a.b = a.j.b / 2;
            break;
          case 1:
            QX(a, (sN(), $M));
            a.a.a = a.j.a / 2;
            a.a.b = 0;
            break;
          case 3:
            QX(a, (sN(), pN));
            a.a.a = a.j.a / 2;
            a.a.b = a.j.b;
        }
      }
      function Fq(a, b) {
        Dq();
        var c, d, e;
        if (b === a) {
          return true;
        }
        if (aw(b, 207)) {
          e = Wv(b, 207);
          if (a.Y() != e.Y() || Vg(a).Y() != e.bb().Y()) {
            return false;
          }
          for (d = e.bb().mb(); d.G(); ) {
            c = Wv(d.H(), 83);
            if (a.Cb(c.Zb()) != c.Yb()) {
              return false;
            }
          }
          return true;
        }
        return false;
      }
      function wvb(a, b) {
        var c, d, e, f, g, h;
        f = a.a * _Ab + a.b * 1502;
        h = a.b * _Ab + 11;
        c = Math.floor(h * FAb);
        f += c;
        h -= c * aBb;
        f %= aBb;
        a.a = f;
        a.b = h;
        if (b <= 24) {
          return Mlb(a.a * qvb[b]);
        } else {
          e = a.a * (1 << b - 24);
          g = Mlb(a.b * rvb[b]);
          d = e + g;
          d >= 2147483648 && (d -= 4294967296);
          return d;
        }
      }
      function MW(a, b, c) {
        var d, e, f;
        if (b == c) {
          return;
        }
        d = b;
        do {
          vI(a, d.d);
          f = Wv(rJ(d, (Rib(), zib)), 9);
          if (f) {
            e = d.a;
            uI(a, e.b, e.d);
            vI(a, f.i);
            d = hX(f);
          }
        } while (f);
        d = c;
        do {
          EI(a, d.d);
          f = Wv(rJ(d, (Rib(), zib)), 9);
          if (f) {
            e = d.a;
            DI(a, e.b, e.d);
            EI(a, f.i);
            d = hX(f);
          }
        } while (f);
      }
      function n3(a, b) {
        var c, d, e, f, g, h;
        c = new GU();
        h = new Um();
        for (e = (g = new Snb(a.a).a.bb().mb(), new Ynb(g)); e.a.G(); ) {
          d = (f = Wv(e.a.H(), 21), Wv(f.yb(), 12));
          Nm(h, d.c, d, null);
          Nm(h, d.d, d, null);
        }
        while (h.a) {
          vU(c, m3(h, b, LM(Wv(rJ(b, (eM(), TL)), 28))));
        }
        return c;
      }
      function B7(a, b) {
        var c, d, e, f, g;
        for (f = new Tob(a.e.a); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 61);
          if (e.c.c.length == e.g.c.length) {
            d = e.e;
            g = M7(e);
            for (c = e.e - Wv(g.a, 24).a + 1; c < e.e + Wv(g.b, 24).a; c++) {
              b[c] < b[d] && (d = c);
            }
            if (b[d] < b[e.e]) {
              --b[e.e];
              ++b[d];
              e.e = d;
            }
          }
        }
      }
      function zR(a, b) {
        var c, d, e, f, g, h, i;
        e = b == 1 ? wR : vR;
        for (d = (g = new Snb(e.a).a.bb().mb(), new Ynb(g)); d.a.G(); ) {
          c = (f = Wv(d.a.H(), 21), Wv(f.yb(), 59));
          for (i = Wv(Dd(a.f.c, c), 18).mb(); i.G(); ) {
            h = Wv(i.H(), 27);
            vU(a.b.b, Wv(h.b, 25));
            vU(a.b.a, Wv(h.b, 25).f);
          }
        }
      }
      function ecb(a) {
        $bb();
        var b, c, d, e, f, g, h;
        c = (mp(), new wub());
        for (e = new Tob(a.e.c); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 16);
          for (g = new Tob(d.a); g.a < g.c.c.length; ) {
            f = Wv(Rob(g), 9);
            h = a.f[f.k];
            b = Wv(rub(c, h), 20);
            if (!b) {
              b = new GU();
              tub(c, h, b);
            }
            b.ib(f);
          }
        }
        return c;
      }
      function cS(a, b) {
        var c, d, e, f;
        for (d = new Tob(a.a.a); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 78);
          c.i = true;
        }
        for (f = new Tob(a.a.b); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 25);
          e.p = Ckb(Ixb(Xv(a.f.B(new RJ(e, b)))));
          e.f.i = e.f.i & Ckb(Ixb(Xv(a.f.B(new RJ(e, b)))));
        }
        return a;
      }
      function RY(a, b) {
        var c, d, e, f;
        e = Eo(mX(b));
        for (d = WI(e, 0); d.b != d.d.c; ) {
          c = Wv(_ub(d), 12);
          f = c.d.f;
          if (f.g == (CX(), wX) && !(Ckb(Ixb(Xv(rJ(f, (Rib(), Vhb))))) && rJ(f, uib) != null)) {
            BU(f.d.a, f);
            PX(c.c, null);
            PX(c.d, null);
            return RY(a, f);
          } else {
            return b;
          }
        }
        return b;
      }
      function D7(a, b) {
        var c, d, e, f, g, h, i;
        if (!b.e) {
          throw new slb("The input edge is not a tree edge.");
        }
        f = null;
        e = $xb;
        for (d = new Tob(a.d); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 89);
          h = c.c;
          i = c.d;
          if (I7(a, h, b) && !I7(a, i, b)) {
            g = i.e - h.e - c.a;
            if (g < e) {
              e = g;
              f = c;
            }
          }
        }
        return f;
      }
      function Icb(a, b) {
        var c, d, e, f, g;
        f = b.a;
        f.c.f == b.b ? g = f.d : g = f.c;
        f.c.f == b.b ? d = f.c : d = f.d;
        e = vbb(a.a, g, d);
        if (e > 0 && e < rAb) {
          c = wbb(a.a, d.f, e);
          Bbb(a.a, d.f, -c);
          return c > 0;
        } else if (e < 0 && -e < rAb) {
          c = xbb(a.a, d.f, -e);
          Bbb(a.a, d.f, c);
          return c > 0;
        }
        return false;
      }
      function Odb(a, b, c, d, e) {
        var f, g;
        if (!yI(MI(Bv(tv(qz, 1), Fzb, 10, 0, [e.f.i, e.i, e.a])), c)) {
          b.c == e ? rn(b.a, 0, new II(c)) : QI(b.a, new II(c));
          if (d && !ttb(a.a, c)) {
            g = Wv(rJ(b, (eM(), CL)), 44);
            if (!g) {
              g = new jJ();
              sJ(b, CL, g);
            }
            f = new II(c);
            TI(g, f, g.c.b, g.c);
            stb(a.a, f);
          }
        }
      }
      function Pdb(a) {
        var b, c, d, e, f, g, h;
        b = 0;
        for (d = new Tob(a.a); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 9);
          for (f = Uh(mX(c)); Cm(f); ) {
            e = Wv(Dm(f), 12);
            if (a == e.d.f.d && e.c.g == (sN(), rN)) {
              g = MX(e.c).b;
              h = MX(e.d).b;
              b = b > (h - g <= 0 ? 0 - (h - g) : h - g) ? b : h - g <= 0 ? 0 - (h - g) : h - g;
            }
          }
        }
        return b;
      }
      function yo(a, b) {
        var c, d, e;
        if (gw(b) === gw(_b(a))) {
          return true;
        }
        if (!aw(b, 20)) {
          return false;
        }
        d = Wv(b, 20);
        e = a.Y();
        if (e != d.Y()) {
          return false;
        }
        if (aw(d, 63)) {
          for (c = 0; c < e; c++) {
            if (!Tb(a.sb(c), d.sb(c))) {
              return false;
            }
          }
          return true;
        } else {
          return Ol(a.mb(), d.mb());
        }
      }
      function I8(a, b) {
        var c, d, e, f, g, h, i, j;
        e = a.b[b.k];
        if (e >= 0) {
          return e;
        } else {
          f = 1;
          for (h = new Tob(b.f); h.a < h.c.c.length; ) {
            g = Wv(Rob(h), 7);
            for (d = new Tob(g.e); d.a < d.c.c.length; ) {
              c = Wv(Rob(d), 12);
              j = c.d.f;
              if (b != j) {
                i = I8(a, j);
                f = f > i + 1 ? f : i + 1;
              }
            }
          }
          H8(a, b, f);
          return f;
        }
      }
      function edb(a, b, c) {
        var d, e, f, g, h, i;
        d = 0;
        if (a.b != 0 && b.b != 0) {
          f = WI(a, 0);
          g = WI(b, 0);
          h = Ixb(Yv(_ub(f)));
          i = Ixb(Yv(_ub(g)));
          e = true;
          do {
            h > i - c && h < i + c && ++d;
            h <= i && f.b != f.d.c ? h = Ixb(Yv(_ub(f))) : i <= h && g.b != g.d.c ? i = Ixb(Yv(_ub(g))) : e = false;
          } while (e);
        }
        return d;
      }
      function sv(a, b) {
        switch (uv(a)) {
          case 5:
            return ew(b);
          case 6:
            return cw(b);
          case 7:
            return bw(b);
          case 0:
            return Vv(b, a.__elementTypeId$);
          case 2:
            return fw(b) && !(b.ad === kI);
          case 1:
            return fw(b) && !(b.ad === kI) || Vv(b, a.__elementTypeId$);
          default:
            return true;
        }
      }
      function Lv(a, b) {
        var c, d, e, f, g;
        b &= 63;
        c = a.h;
        d = (c & 524288) != 0;
        d && (c |= -1048576);
        if (b < 22) {
          g = c >> b;
          f = a.m >> b | c << 22 - b;
          e = a.l >> b | a.m << 22 - b;
        } else if (b < 44) {
          g = d ? bzb : 0;
          f = c >> b - 22;
          e = a.m >> b - 22 | c << 44 - b;
        } else {
          g = d ? bzb : 0;
          f = d ? azb : 0;
          e = c >> b - 44;
        }
        return Ev(e & azb, f & azb, g & bzb);
      }
      function O9(a, b) {
        switch (a.e) {
          case 1:
            switch (b.e) {
              case 1:
                return 1;
              case 4:
                return 2;
              case 3:
                return 3;
              case 2:
                return 4;
            }
            break;
          case 2:
            switch (b.e) {
              case 1:
                return 1;
              case 2:
                return 2;
              case 3:
                return 3;
              case 4:
                return 4;
            }
            break;
          default:
            throw new slb(GAb);
        }
        return 0;
      }
      function hZ(a, b, c) {
        var d, e, f, g, h, i;
        d = new GU();
        d.c[d.c.length] = b;
        i = b;
        h = 0;
        do {
          i = mZ(a, i);
          !!i && (d.c[d.c.length] = i, true);
          ++h;
        } while (i);
        g = (c - (d.c.length - 1) * a.d.d) / d.c.length;
        for (f = new Tob(d); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 9);
          e.j.a = g;
        }
        return new RJ(Elb(h), g);
      }
      function kZ(a, b, c) {
        var d, e, f, g, h, i;
        d = new GU();
        d.c[d.c.length] = b;
        i = b;
        h = 0;
        do {
          i = lZ(a, i);
          !!i && (d.c[d.c.length] = i, true);
          ++h;
        } while (i);
        g = (c - (d.c.length - 1) * a.d.d) / d.c.length;
        for (f = new Tob(d); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 9);
          e.j.a = g;
        }
        return new RJ(Elb(h), g);
      }
      function m$(a) {
        var b, c, d, e, f, g;
        e = Wv(yU(a.f, 0), 7);
        g = 0;
        for (d = Uh(Sh((Gi(), new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [new fY(e), new lY(e)])))))); Cm(d); ) {
          c = Wv(Dm(d), 7);
          g += c.f.i.a + c.i.a + c.a.a;
        }
        b = Wv(rJ(a, (eM(), SL)), 10);
        f = !b ? 0 : b.a;
        a.i.a = g / (e.b.c.length + e.e.c.length) - f;
      }
      function Ueb(a, b) {
        var c, d, e, f;
        if (b < 2 * a.c) {
          throw new slb("The knot vector must have at least two time the dimension elements.");
        }
        a.j = 0;
        a.i = 1;
        for (d = 0; d < a.c; d++) {
          a.g.ib(0);
        }
        f = b + 1 - 2 * a.c;
        for (e = 1; e < f; e++) {
          a.g.ib(e / f);
        }
        if (a.e) {
          for (c = 0; c < a.c; c++) {
            a.g.ib(1);
          }
        }
      }
      function Fs(a) {
        var b, c;
        c = a.c;
        a.c = 0;
        ds(a.f, a.i);
        if (!a.e) {
          return a.g;
        } else if (!a.g) {
          return a.e;
        } else if (a.e.d >= a.g.d) {
          b = a.f;
          b.e = Is(a.e, b);
          b.g = a.g;
          b.a = a.a - 1;
          b.j = XH(a.j, c);
          return Gs(b);
        } else {
          b = a.i;
          b.g = Js(a.g, b);
          b.e = a.e;
          b.a = a.a - 1;
          b.j = XH(a.j, c);
          return Gs(b);
        }
      }
      function e2(a) {
        var b, c, d, e, f, g;
        for (e = new Tob(a.a); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 9);
          if (d.g == (CX(), BX)) {
            f = Wv(rJ(d, (Rib(), nib)), 9);
            c = d.f;
            b = (Cxb(0, c.c.length), Wv(c.c[0], 7));
            g = Wv(rJ(b, uib), 7);
            g.g == (sN(), $M) && d.k > f.k ? QX(g, pN) : g.g == pN && f.k > d.k && QX(g, $M);
          }
        }
      }
      function q3(a, b, c) {
        var d, e, f, g, h, i, j;
        j = a.b;
        g = 0;
        for (f = new Tob(a.a.b); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 33);
          g = Nlb(g, e.j.a);
        }
        i = wfb(a.a.c, a.a.d, b, c, g);
        Ue(a.a.a, Veb(i));
        h = s3(a.a.b, i.a, j);
        d = new Dfb((!i.k && (i.k = new Efb(Xeb(i))), i.k));
        zfb(d);
        return !h ? d : Gfb(d, h);
      }
      function wbb(a, b, c) {
        var d, e, f, g, h, i, j;
        d = c;
        e = b;
        do {
          e = a.a[e.k];
          g = (j = a.f[e.k], Ixb(a.n[j.k]) + Ixb(a.d[e.k]) - e.e.d);
          h = zbb(e, !e.d ? -1 : zU(e.d.a, e, 0));
          if (h) {
            f = (i = a.f[h.k], Ixb(a.n[i.k]) + Ixb(a.d[h.k]) + h.j.b + h.e.a);
            d = Qlb(d, g - (f + Xjb(a.j, e, h)));
          }
        } while (b != e);
        return d;
      }
      function xbb(a, b, c) {
        var d, e, f, g, h, i, j;
        d = c;
        e = b;
        do {
          e = a.a[e.k];
          f = (j = a.f[e.k], Ixb(a.n[j.k]) + Ixb(a.d[e.k]) + e.j.b + e.e.a);
          h = ybb(e, !e.d ? -1 : zU(e.d.a, e, 0));
          if (h) {
            g = (i = a.f[h.k], Ixb(a.n[i.k]) + Ixb(a.d[h.k]) - h.e.d);
            d = Qlb(d, g - (f + Xjb(a.j, e, h)));
          }
        } while (b != e);
        return d;
      }
      function Sr(b, c, d) {
        var e, f, g;
        Mh(d, Xyb);
        if (d == 0) {
          return Pr(b, c);
        }
        g = b.c.a;
        f = xv(mw, Yyb, 26, 1, 12, 1);
        try {
          if (!ok(b.b, c) || !g) {
            return 0;
          }
          e = Hs(g, b.d, c, d, f);
        } catch (a) {
          a = OH(a);
          if (aw(a, 119)) {
            return 0;
          } else if (aw(a, 76)) {
            return 0;
          } else
            throw NH(a);
        }
        Us(b.c, g, e);
        return f[0];
      }
      function MO(a, b) {
        var c, d, e, f, g;
        if (a.b) {
          d = Wv(oW(a.e, (eM(), jL)), 65);
          e = d.b + d.c;
          c = d.d + d.a;
        } else {
          e = b * 2;
          c = b * 2;
        }
        g = Nlb(a.o[1] > 0 ? e + a.i[1] * b + a.n[1] : 0, a.o[3] > 0 ? e + a.i[3] * b + a.n[3] : 0);
        f = Nlb(a.o[4] > 0 ? c + a.i[4] * b + a.n[4] : 0, a.o[2] > 0 ? c + a.i[2] * b + a.n[2] : 0);
        return new HI(g, f);
      }
      function b$(a) {
        var b, c, d, e, f, g;
        g = Wv(FU(a.a, xv(qB, Nzb, 9, a.a.c.length, 0, 1)), 51);
        lpb(g, new g$());
        c = null;
        for (e = 0, f = g.length; e < f; ++e) {
          d = g[e];
          if (d.g != (CX(), xX)) {
            break;
          }
          b = Wv(rJ(d, (Rib(), hib)), 32);
          if (b != (sN(), rN) && b != ZM) {
            continue;
          }
          !!c && Wv(rJ(c, oib), 20).ib(d);
          c = d;
        }
      }
      function j6(a, b, c, d, e) {
        var f, g, h, i;
        i = new U6(b, d);
        for (h = T6(i); h.G(); ) {
          f = Wv(h.H(), 7);
          Umb(a.k, f, Elb(Wv(Smb(a.k, f), 24).a + Wv(re(Ktb(e.d, c)), 24).a));
        }
        i = new U6(c, d);
        for (g = T6(i); g.G(); ) {
          f = Wv(g.H(), 7);
          Umb(a.k, f, Elb(Wv(Smb(a.k, f), 24).a - Wv(re(Ktb(e.d, b)), 24).a));
        }
      }
      function hI(a, b, c) {
        var d = fI, h;
        var e = d[a];
        var f = e instanceof Array ? e[0] : null;
        if (e && !f) {
          _ = e;
        } else {
          _ = (h = b && b.prototype, !h && (h = fI[b]), jI(h));
          _._c = c;
          _.constructor = _;
          !b && (_.ad = kI);
          d[a] = _;
        }
        for (var g = 3; g < arguments.length; ++g) {
          arguments[g].prototype = _;
        }
        f && (_.$c = f);
      }
      function Wkb(a) {
        if (a.Sc()) {
          var b = a.c;
          b.Tc() ? a.n = "[" + b.k : !b.Sc() ? a.n = "[L" + b.Qc() + ";" : a.n = "[" + b.Qc();
          a.b = b.Pc() + "[]";
          a.j = b.Rc() + "[]";
          return;
        }
        var c = a.i;
        var d = a.d;
        d = d.split("/");
        a.n = Zkb(".", [c, Zkb("$", d)]);
        a.b = Zkb(".", [c, Zkb(".", d)]);
        a.j = d[d.length - 1];
      }
      function Mr(a, b, c) {
        var d;
        if (!c) {
          return 0;
        }
        d = a.d.$b(a.b.g, c.b);
        if (d > 0) {
          return Mr(a, b, c.g);
        } else if (d == 0) {
          switch (a.b.f.e) {
            case 0:
              return PH(b._b(c), b.ac(c.g));
            case 1:
              return b.ac(c.g);
            default:
              throw new tkb();
          }
        } else {
          return PH(PH(b.ac(c.g), b._b(c)), Mr(a, b, c.e));
        }
      }
      function Nr(a, b, c) {
        var d;
        if (!c) {
          return 0;
        }
        d = a.d.$b(a.b.e, c.b);
        if (d < 0) {
          return Nr(a, b, c.e);
        } else if (d == 0) {
          switch (a.b.d.e) {
            case 0:
              return PH(b._b(c), b.ac(c.e));
            case 1:
              return b.ac(c.e);
            default:
              throw new tkb();
          }
        } else {
          return PH(PH(b.ac(c.e), b._b(c)), Nr(a, b, c.g));
        }
      }
      function z2(a, b, c, d) {
        var e, f, g, h;
        g = new uX(a);
        sX(g, (CX(), zX));
        sJ(g, (Rib(), uib), b);
        sJ(g, (eM(), TL), (KM(), FM));
        sJ(g, qib, c);
        sJ(g, rib, d);
        f = new RX();
        QX(f, (sN(), rN));
        PX(f, g);
        h = new RX();
        QX(h, ZM);
        PX(h, g);
        eW(b, f);
        e = new hW();
        qJ(e, b);
        sJ(e, CL, null);
        dW(e, h);
        eW(e, d);
        return g;
      }
      function e6(a, b) {
        var c, d, e, f, g, h, i, j, k, l;
        c = 0;
        for (g = a.j, h = 0, i = g.length; h < i; ++h) {
          f = g[h];
          l = new U6(f, b);
          for (k = T6(l); k.G(); ) {
            j = Wv(k.H(), 7);
            for (e = Uh(Sh((Gi(), new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [j.b, j.e])))))); Cm(e); ) {
              d = Wv(Dm(e), 12);
              bW(d) || (c += b6(a, d, j));
            }
          }
        }
        return c;
      }
      function qab(a, b) {
        if (a.c < b.c) {
          return -1;
        } else if (a.c > b.c) {
          return 1;
        } else if (a.b < b.b) {
          return -1;
        } else if (a.b > b.b) {
          return 1;
        } else if (a.a != b.a) {
          return txb(a.a) - txb(b.a);
        } else if (a.d == (vab(), uab) && b.d == tab) {
          return -1;
        } else if (a.d == tab && b.d == uab) {
          return 1;
        }
        return 0;
      }
      function R4(a) {
        var b, c, d, e, f, g;
        e = new aJ();
        for (d = new Tob(a.d.a); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 61);
          c.c.c.length == 0 && (TI(e, c, e.c.b, e.c), true);
        }
        if (e.b > 1) {
          b = x7(y7(new A7(), a.b++), a.d);
          for (g = WI(e, 0); g.b != g.d.c; ) {
            f = Wv(_ub(g), 61);
            f7(i7(h7(j7(g7(new k7(), 1), 0), b), f));
          }
        }
      }
      function p3(a, b, c, d) {
        var e, f, g, h, i, j;
        j = 0;
        for (g = new Tob(a.a.b); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 33);
          j = Nlb(j, f.j.a);
        }
        i = vfb(a.a.c, b, a.a.d, d, Jeb(a.b), c);
        Ue(a.a.a, Veb(i));
        h = s3(a.a.b, i.a, a.b);
        e = new Dfb((!i.k && (i.k = new Efb(Xeb(i))), i.k));
        zfb(e);
        return !h ? e : Gfb(e, h);
      }
      function M0(a, b) {
        var c, d, e, f, g;
        for (d = new Tob(a.b); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 33);
          sJ(c, (Rib(), pib), b);
        }
        for (g = new Tob(a.c.c); g.a < g.c.c.length; ) {
          e = Wv(Rob(g), 33);
          sJ(e, (Rib(), pib), b);
        }
        for (f = new Tob(a.d.c); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 33);
          sJ(e, (Rib(), pib), b);
        }
      }
      function I1() {
        I1 = iI;
        G1 = new J1(tzb, 0);
        B1 = new J1("NIKOLOV", 1);
        E1 = new J1("NIKOLOV_PIXEL", 2);
        C1 = new J1("NIKOLOV_IMPROVED", 3);
        D1 = new J1("NIKOLOV_IMPROVED_PIXEL", 4);
        A1 = new J1("DUMMYNODE_PERCENTAGE", 5);
        F1 = new J1("NODECOUNT_PERCENTAGE", 6);
        H1 = new J1("NO_BOUNDARY", 7);
      }
      function cab(a, b) {
        var c, d, e, f, g;
        f = 0;
        g = Wv(re(Ktb(b.d, a)), 24);
        if (!g) {
          return 0;
        }
        for (e = Uh(Sh((Gi(), new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [a.b, a.e])))))); Cm(e); ) {
          d = Wv(Dm(e), 12);
          d.c == a ? c = Wv(Smb(b, d.d), 24) : c = Wv(Smb(b, d.c), 24);
          !!c && g.a > c.a && (f = Plb(f, g.a - c.a - 1));
        }
        return f;
      }
      function RZ(a) {
        var b, c;
        b = Wv(rJ(a, (eM(), HL)), 15).a;
        c = Wv(rJ(a, IL), 15).a;
        sJ(a, IL, new llb(b));
        sJ(a, HL, new llb(c));
        switch (Wv(rJ(a, lL), 103).e) {
          case 1:
            sJ(a, lL, (iK(), hK));
            break;
          case 2:
            sJ(a, lL, (iK(), dK));
            break;
          case 3:
            sJ(a, lL, (iK(), fK));
            break;
          case 4:
            sJ(a, lL, (iK(), gK));
        }
      }
      function N0(a) {
        var b, c, d, e, f;
        for (e = (Il(), new Im(Dl(ul(a.a, new yl())))); Cm(e); ) {
          d = Wv(Dm(e), 9);
          if (d.g == (CX(), yX)) {
            f = P0(d) ? (kP(), hP) : (kP(), gP);
            sJ(d, (Rib(), pib), f);
          }
          for (c = Uh(mX(d)); Cm(c); ) {
            b = Wv(Dm(c), 12);
            f = Ckb(Ixb(Xv(rJ(b, (Rib(), Iib))))) ? (kP(), gP) : (kP(), hP);
            M0(b, f);
          }
        }
      }
      function O0(a) {
        var b, c, d, e, f;
        for (e = (Il(), new Im(Dl(ul(a.a, new yl())))); Cm(e); ) {
          d = Wv(Dm(e), 9);
          if (d.g == (CX(), yX)) {
            f = P0(d) ? (kP(), gP) : (kP(), hP);
            sJ(d, (Rib(), pib), f);
          }
          for (c = Uh(mX(d)); Cm(c); ) {
            b = Wv(Dm(c), 12);
            f = Ckb(Ixb(Xv(rJ(b, (Rib(), Iib))))) ? (kP(), hP) : (kP(), gP);
            M0(b, f);
          }
        }
      }
      function jdb(a, b, c) {
        var d, e, f;
        for (f = new Tob(a.e); f.a < f.c.c.length; ) {
          d = Wv(Rob(f), 118);
          if (d.b.d < 0 && d.c > 0) {
            d.b.c -= d.c;
            d.b.c <= 0 && d.b.f > 0 && QI(b, d.b);
          }
        }
        for (e = new Tob(a.b); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 118);
          if (d.a.d < 0 && d.c > 0) {
            d.a.f -= d.c;
            d.a.f <= 0 && d.a.c > 0 && QI(c, d.a);
          }
        }
      }
      function agb(a, b, c) {
        var d, e, f;
        for (f = new Tob(a.j); f.a < f.c.c.length; ) {
          d = Wv(Rob(f), 117);
          if (d.b.i < 0 && d.c > 0) {
            d.b.e -= d.c;
            d.b.e <= 0 && d.b.k > 0 && QI(b, d.b);
          }
        }
        for (e = new Tob(a.d); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 117);
          if (d.a.i < 0 && d.c > 0) {
            d.a.k -= d.c;
            d.a.k <= 0 && d.a.e > 0 && QI(c, d.a);
          }
        }
      }
      function tj(a) {
        var b, c, d, e, f;
        f = a.d.c + a.e.c;
        switch (f) {
          case 0:
            return dr(), cr;
          case 1:
            d = Wv(Sl(new rnb(new inb(a).a)), 21);
            return Bj(d.yb(), d.zb());
          default:
            e = (mp(), new wub());
            for (c = new rnb(new inb(a).a); c.b; ) {
              b = pnb(c);
              tub(e, _b(b.yb()), _b(b.zb()));
            }
            return new ir(e);
        }
      }
      function DS(a, b, c) {
        var d, e, f;
        for (e = new Tob(a.b.a.b); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 25);
          if (!b.D(d)) {
            continue;
          }
          f = Ixb(Yv(c.B(d)));
          if (f > 0) {
            !(tK(a.b.d) && d.q.d) && !(uK(a.b.d) && d.q.b) && (d.j.e += 0 > f / 2 - 0.5 ? 0 : f / 2 - 0.5);
            !(tK(a.b.d) && d.q.a) && !(uK(a.b.d) && d.q.c) && (d.j.b -= f - 1);
          }
        }
      }
      function R9(a, b) {
        switch (a.e) {
          case 1:
            switch (b.e) {
              case 1:
                return HAb;
              case 4:
                return 0.5;
              case 3:
                return IAb;
              case 2:
                return JAb;
            }
            break;
          case 2:
            switch (b.e) {
              case 1:
                return HAb;
              case 2:
                return 0.5;
              case 3:
                return IAb;
              case 4:
                return JAb;
            }
            break;
          default:
            throw new slb(GAb);
        }
        return 0;
      }
      function rT(a, b) {
        var c, d, e, f;
        f = new Fnb(a, 0);
        c = (Bxb(f.b < f.d.Y()), Wv(f.d.sb(f.c = f.b++), 48));
        while (f.b < f.d.Y()) {
          d = (Bxb(f.b < f.d.Y()), Wv(f.d.sb(f.c = f.b++), 48));
          e = new WS(d.c, c.d, b);
          Bxb(f.b > 0);
          f.a.sb(f.c = --f.b);
          Anb(f, e);
          Bxb(f.b < f.d.Y());
          f.d.sb(f.c = f.b++);
          e.a = false;
          c = d;
        }
      }
      function oZ(a) {
        var b, c, d, e, f, g;
        e = Wv(rJ(a, (Rib(), Zhb)), 7);
        for (g = new Tob(a.f); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 7);
          for (d = new Tob(f.e); d.a < d.c.c.length; ) {
            b = Wv(Rob(d), 12);
            eW(b, e);
            return f;
          }
          for (c = new Tob(f.b); c.a < c.c.c.length; ) {
            b = Wv(Rob(c), 12);
            dW(b, e);
            return f;
          }
        }
        return null;
      }
      function i6(a, b, c, d, e) {
        var f, g, h, i, j, k;
        g = b;
        f = 0;
        h = false;
        k = new U6(c, d);
        for (j = T6(k); j.G(); ) {
          i = Wv(j.H(), 7);
          h = true;
          Umb(a.k, i, Elb(g));
          if (LM(Wv(rJ(c, (eM(), TL)), 28)) || i.b.c.length + i.e.c.length > 1) {
            ++f;
            ++g;
          }
        }
        if (!LM(Wv(rJ(c, (eM(), TL)), 28)) && h) {
          ++f;
          ++g;
        }
        Umb(e, c, Elb(f));
        return g;
      }
      function nfb(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m;
        g = a.b.mb();
        h = Wv(g.H(), 92);
        k = h.a.a;
        j = k > RAb;
        i = k < SAb;
        while (g.G()) {
          c = h;
          f = k;
          e = j;
          d = i;
          h = Wv(g.H(), 92);
          k = h.a.a;
          j = k > RAb;
          i = k < SAb;
          if (!(j || i)) {
            return mfb(h.b);
          }
          if (e && i || d && j) {
            b = f / (f - k);
            l = mfb(c.b);
            m = mfb(h.b);
            return b * l + (1 - b) * m;
          }
        }
        return 0;
      }
      function ofb(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m;
        g = a.b.mb();
        h = Wv(g.H(), 92);
        k = h.a.b;
        j = k > RAb;
        i = k < SAb;
        while (g.G()) {
          c = h;
          f = k;
          e = j;
          d = i;
          h = Wv(g.H(), 92);
          k = h.a.b;
          j = k > RAb;
          i = k < SAb;
          if (!(j || i)) {
            return mfb(h.b);
          }
          if (e && i || d && j) {
            b = f / (f - k);
            l = mfb(c.b);
            m = mfb(h.b);
            return b * l + (1 - b) * m;
          }
        }
        return 0;
      }
      function b6(a, b, c) {
        var d, e;
        d = 0;
        if (d6(b)) {
          if (ttb(a.g, b)) {
            Sr(a.i, Elb(h6(a, b.c)), 1) > 0;
            Sr(a.i, Elb(h6(a, b.d)), 1) > 0;
            utb(a.g, b);
            d += g6(a, b, a.i);
          } else {
            stb(a.g, b);
            Lr(a.i, Elb(h6(a, b.c)), 1);
            Lr(a.i, Elb(h6(a, b.d)), 1);
          }
        } else {
          e = Pr(a.i, Elb(Wv(Smb(a.k, c), 24).a));
          d += a.g.a.Y() - e;
        }
        return d;
      }
      function Keb(a) {
        switch (a.e) {
          case 0:
            return veb;
          case 1:
            return seb;
          case 2:
            return reb;
          case 3:
            return yeb;
          case 4:
            return xeb;
          case 5:
            return Deb;
          case 6:
            return Ceb;
          case 7:
            return web;
          case 8:
            return teb;
          case 9:
            return ueb;
          case 11:
            return Aeb;
          case 10:
            return zeb;
          default:
            return Beb;
        }
      }
      function Leb(a) {
        switch (a.e) {
          case 0:
            return neb;
          case 1:
            return meb;
          case 2:
            return jeb;
          case 3:
            return ieb;
          case 4:
            return peb;
          case 5:
            return oeb;
          case 6:
            return Heb;
          case 7:
            return Geb;
          case 8:
            return leb;
          case 9:
            return keb;
          case 10:
            return Eeb;
          case 11:
            return qeb;
          default:
            return Feb;
        }
      }
      function Meb(a) {
        switch (a.e) {
          case 0:
            return oeb;
          case 1:
            return Heb;
          case 2:
            return Geb;
          case 3:
            return neb;
          case 4:
            return meb;
          case 5:
            return jeb;
          case 6:
            return ieb;
          case 7:
            return peb;
          case 8:
            return leb;
          case 9:
            return keb;
          case 10:
            return Eeb;
          case 11:
            return qeb;
          default:
            return Feb;
        }
      }
      function Neb(a) {
        switch (a.e) {
          case 0:
            return jeb;
          case 1:
            return ieb;
          case 2:
            return peb;
          case 3:
            return oeb;
          case 4:
            return Heb;
          case 5:
            return Geb;
          case 6:
            return neb;
          case 7:
            return meb;
          case 8:
            return leb;
          case 9:
            return keb;
          case 10:
            return Eeb;
          case 11:
            return qeb;
          default:
            return Feb;
        }
      }
      function fcb(a) {
        var b, c, d, e, f, g, h, i;
        c = (mp(), new wub());
        h = new Yub((Oh(), new opb(a.f)));
        for (g = (e = new Snb(h.a).a.bb().mb(), new Ynb(e)); g.a.G(); ) {
          f = (d = Wv(g.a.H(), 21), Wv(d.yb(), 9));
          if (!f) {
            Fmb();
            break;
          }
          i = a.i[f.k];
          b = Wv(rub(c, i), 20);
          if (!b) {
            b = new GU();
            tub(c, i, b);
          }
          b.ib(f);
        }
        return c;
      }
      function CS(a, b, c) {
        var d, e, f;
        for (e = new Tob(a.b.a.b); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 25);
          if (!b.D(d)) {
            continue;
          }
          f = Ixb(Yv(c.B(d)));
          if (f > 0) {
            !(tK(a.b.d) && d.q.d) && !(uK(a.b.d) && d.q.b) && (d.j.e -= 0 > f / 2 - 0.5 ? 0 : f / 2 - 0.5);
            !(tK(a.b.d) && d.q.a) && !(uK(a.b.d) && d.q.c) && (d.j.b += 0 > f - 1 ? 0 : f - 1);
          }
        }
      }
      function T6(a) {
        var b, c, d;
        d = a.a.f;
        switch (a.b) {
          case 0:
            return new Tob(a.a.f);
          case 1:
            return Pl((c = new W6(d), c), S6(a));
          case 2:
            switch (a.c.e) {
              case 2:
              case 1:
                return Pl(new Tob(d), S6(a));
              case 3:
              case 4:
                return Pl((b = new W6(d), b), S6(a));
            }
        }
        throw new Imb("PortOrder not implemented.");
      }
      function CT(a, b) {
        var c;
        if (!!a.d && (b.c != a.e.c || hT(a.e.b, b.b))) {
          vU(a.f, a.d);
          a.a = a.d.d + a.d.c;
          a.d = null;
          a.e = null;
        }
        eT(b.b) ? a.c = b : a.b = b;
        if (b.b == (cT(), $S) && !b.a || b.b == _S && b.a || b.b == aT && b.a || b.b == bT && !b.a) {
          if (!!a.c && !!a.b) {
            c = new VN(a.a, a.c.d, b.c - a.a, a.b.d - a.c.d);
            a.d = c;
            a.e = b;
          }
        }
      }
      function Cbb(a, b, c, d) {
        this.e = a;
        this.j = Wv(rJ(a, (Rib(), Kib)), 134);
        this.f = xv(qB, Nzb, 9, b, 0, 1);
        this.b = xv(HF, Txb, 184, b, 6, 1);
        this.a = xv(qB, Nzb, 9, b, 0, 1);
        this.d = xv(HF, Txb, 184, b, 6, 1);
        this.i = xv(qB, Nzb, 9, b, 0, 1);
        this.g = xv(HF, Txb, 184, b, 6, 1);
        this.n = xv(HF, Txb, 184, b, 6, 1);
        this.k = c;
        this.c = d;
      }
      function P6(a, b, c) {
        var d, e;
        if (b.g == (CX(), BX) && c.g == BX) {
          if (!LM(Wv(rJ(Wv(rJ(b, (Rib(), uib)), 9), (eM(), TL)), 28)) || Wv(rJ(b, uib), 9) != Wv(rJ(c, uib), 9)) {
            return;
          }
          if (I6(b) || I6(c)) {
            a.d = 1;
            a.b = 1;
            return;
          }
          e = Wv(yU(b.f, 0), 7).g;
          d = Wv(yU(c.f, 0), 7).g;
          M6(b).g == (sN(), $M) ? H6(a, b, c, e, d) : H6(a, c, b, d, e);
        }
      }
      function f7(a) {
        if (!a.a.c || !a.a.d) {
          throw new ulb((Gkb(QD), QD.j + " must have a source and target " + (Gkb(UD), UD.j) + " specified."));
        }
        if (a.a.c == a.a.d) {
          throw new ulb("Network simplex does not support self-loops: " + a.a + " " + a.a.c + " " + a.a.d);
        }
        o7(a.a.c.g, a.a);
        o7(a.a.d.c, a.a);
        return a.a;
      }
      function H6(a, b, c, d, e) {
        if (d == (sN(), ZM) && e == ZM) {
          N6(a, b) > N6(a, c) ? a.d = K6(a, c) : a.b = K6(a, b);
        } else if (d == rN && e == rN) {
          N6(a, b) < N6(a, c) ? a.d = K6(a, c) : a.b = K6(a, b);
        } else if (d == rN && e == ZM) {
          if (N6(a, b) > N6(a, c)) {
            a.d = K6(a, c);
            a.b = K6(a, b);
          }
        } else {
          if (N6(a, b) < N6(a, c)) {
            a.d = K6(a, c);
            a.b = K6(a, b);
          }
        }
      }
      function W1(a) {
        var b, c, d, e, f, g, h, i;
        i = a.f.c.length;
        c = 0;
        b = i;
        e = 2 * i;
        for (h = new Tob(a.f); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 7);
          switch (g.g.e) {
            case 2:
            case 4:
              g.k = -1;
              break;
            case 1:
            case 3:
              d = g.b.c.length;
              f = g.e.c.length;
              d > 0 && f > 0 ? g.k = b++ : d > 0 ? g.k = c++ : f > 0 ? g.k = e++ : g.k = c++;
          }
        }
        Gpb(a.f, new Z1());
      }
      function i0(a, b, c, d) {
        var e, f, g, h, i;
        if (c.d.f == b.f) {
          return;
        }
        e = new uX(a);
        sX(e, (CX(), zX));
        sJ(e, (Rib(), uib), c);
        sJ(e, (eM(), TL), (KM(), FM));
        d.c[d.c.length] = e;
        g = new RX();
        PX(g, e);
        QX(g, (sN(), rN));
        h = new RX();
        PX(h, e);
        QX(h, ZM);
        i = c.d;
        eW(c, g);
        f = new hW();
        qJ(f, c);
        sJ(f, CL, null);
        dW(f, h);
        eW(f, i);
        j0(e, g, h);
      }
      function W2(a) {
        var b, c, d, e, f, g, h, i, j;
        g = rAb;
        i = rAb;
        h = null;
        for (c = new Sub(new Lub(a.e)); c.b != c.c.a.b; ) {
          b = Rub(c);
          if (Wv(b.d, 60).c == 1) {
            d = Wv(b.e, 116).a;
            j = Wv(b.e, 116).b;
            e = g - d > uAb;
            f = d - g < uAb && i - j > uAb;
            if (e || f) {
              i = Wv(b.e, 116).b;
              g = Wv(b.e, 116).a;
              h = Wv(b.d, 60);
              if (i == 0 && g == 0) {
                return h;
              }
            }
          }
        }
        return h;
      }
      function i1(a, b) {
        var c, d, e, f, g, h;
        f = a.d;
        h = Wv(rJ(a, (eM(), dM)), 15).a;
        if (h < 0) {
          h = 0;
          sJ(a, dM, new llb(h));
        }
        b.j.b = h;
        g = Math.floor(h / 2);
        d = new RX();
        QX(d, (sN(), rN));
        PX(d, b);
        d.i.b = g;
        e = new RX();
        QX(e, ZM);
        PX(e, b);
        e.i.b = g;
        eW(a, d);
        c = new hW();
        qJ(c, a);
        sJ(c, CL, null);
        dW(c, e);
        eW(c, f);
        h1(b, a, c);
        f1(a, c);
        return c;
      }
      function OZ(a) {
        var b, c;
        c = Wv(rJ(a, (Mjb(), vjb)), 85);
        b = Wv(rJ(a, (Rib(), mib)), 140);
        if (c == (Xib(), Tib)) {
          sJ(a, vjb, Wib);
          sJ(a, mib, (Hhb(), Ghb));
        } else if (c == Vib) {
          sJ(a, vjb, Wib);
          sJ(a, mib, (Hhb(), Ehb));
        } else if (b == (Hhb(), Ghb)) {
          sJ(a, vjb, Tib);
          sJ(a, mib, Fhb);
        } else if (b == Ehb) {
          sJ(a, vjb, Vib);
          sJ(a, mib, Fhb);
        }
      }
      function QO(a) {
        var b, c, d, e, f;
        for (d = new Tob(zW(a.e)); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 129);
          f = new II(c.e.i);
          e = xO()[c.e.k];
          b = Wv(qsb(a.c, e), 283);
          f.b = b.e + b.a;
          e.b == (DO(), BO) ? f.a = b.d : e.b == AO ? f.a = b.d + (b.c - c.e.j.a) / 2 : e.b == CO && (f.a = b.d + b.c - c.e.j.a);
          c.e.i.a = f.a;
          c.e.i.b = f.b;
          b.a += c.e.j.b + a.d;
        }
      }
      function UO(a) {
        var b, c, d;
        for (c = new Tob(AW(a)); c.a < c.c.c.length; ) {
          b = Wv(Rob(c), 161);
          d = new II(b.e.i);
          switch (Wv(b.e, 7).g.e) {
            case 4:
              d.a = 0;
              d.b = a.e.j.b / 2;
              break;
            case 2:
              d.a = a.e.j.a;
              d.b = a.e.j.b / 2;
              break;
            case 1:
              d.a = a.e.j.a / 2;
              d.b = 0;
              break;
            case 3:
              d.a = a.e.j.a / 2;
              d.b = a.e.j.b;
          }
          b.e.i.a = d.a;
          b.e.i.b = d.b;
        }
      }
      function oV() {
        this.c = xv(kw, hyb, 26, (sN(), Bv(tv(Kz, 1), uyb, 32, 0, [qN, $M, ZM, pN, rN])).length, 12, 1);
        this.b = xv(kw, hyb, 26, Bv(tv(Kz, 1), uyb, 32, 0, [qN, $M, ZM, pN, rN]).length, 12, 1);
        this.a = xv(kw, hyb, 26, Bv(tv(Kz, 1), uyb, 32, 0, [qN, $M, ZM, pN, rN]).length, 12, 1);
        Yob(this.c, Uzb);
        Yob(this.b, Vzb);
        Yob(this.a, Vzb);
      }
      function tfb(a, b, c) {
        var d, e, f, g, h, i, j, k;
        f = Ixb(Yv(a.b.mb().H()));
        j = Ixb(Yv(rl(b.b)));
        d = CI(xI(a.a), j - c);
        e = CI(xI(b.a), c - f);
        k = vI(d, e);
        CI(k, 1 / (j - f));
        this.a = k;
        this.b = new GU();
        h = true;
        g = a.b.mb();
        g.H();
        while (g.G()) {
          i = Ixb(Yv(g.H()));
          if (h && i - c > RAb) {
            this.b.ib(c);
            h = false;
          }
          this.b.ib(i);
        }
        h && this.b.ib(c);
      }
      function G7(a) {
        var b, c, d, e;
        J7(a, a.n);
        if (a.d.c.length > 0) {
          dpb(a.c);
          while (R7(a, Wv(Rob(new Tob(a.e.a)), 61)) < a.e.a.c.length) {
            b = L7(a);
            e = b.d.e - b.c.e - b.a;
            b.d.j && (e = -e);
            for (d = new Tob(a.e.a); d.a < d.c.c.length; ) {
              c = Wv(Rob(d), 61);
              c.j && (c.e += e);
            }
            dpb(a.c);
          }
          dpb(a.c);
          O7(a, Wv(Rob(new Tob(a.e.a)), 61));
          C7(a);
        }
      }
      function Aab(a, b) {
        var c, d, e, f, g, h, i;
        c = Vzb;
        h = (CX(), AX);
        for (e = new Tob(b.a); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 9);
          f = d.g;
          if (f != AX) {
            g = Yv(rJ(d, (Rib(), wib)));
            if (g == null) {
              c = c > 0 ? c : 0;
              d.i.b = c + Wjb(a.a, f, h);
            } else {
              d.i.b = (Dxb(g), g);
            }
          }
          i = Wjb(a.a, f, h);
          d.i.b < c + i + d.e.d && (d.i.b = c + i + d.e.d);
          c = d.i.b + d.j.b + d.e.a;
          h = f;
        }
      }
      function mdb(a, b, c) {
        var d, e, f;
        c.db(b, a);
        vU(a.g, b);
        f = a.o.d.Lc(b);
        hlb(a.k) ? a.k = f : a.k = Qlb(a.k, f);
        hlb(a.a) ? a.a = f : a.a = Nlb(a.a, f);
        b.g == a.o.d.Mc() ? hdb(a.j, f) : hdb(a.n, f);
        for (e = Uh(Sh((Gi(), new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [new fY(b), new lY(b)])))))); Cm(e); ) {
          d = Wv(Dm(e), 7);
          c.R(d) || mdb(a, d, c);
        }
      }
      function dlb(a) {
        var b, c, d, e, f;
        d = (bmb(), a.length);
        e = d > 0 && (a.charCodeAt(0) == 45 || a.charCodeAt(0) == 43) ? 1 : 0;
        for (b = e; b < d; b++) {
          if (Dkb(a.charCodeAt(b)) == -1) {
            throw new Ylb(dyb + a + '"');
          }
        }
        f = parseInt(a, 10);
        c = f < eyb;
        if (isNaN(f)) {
          throw new Ylb(dyb + a + '"');
        } else if (c || f > $xb) {
          throw new Ylb(dyb + a + '"');
        }
        return f;
      }
      function H$(a, b, c, d) {
        var e, f, g, h;
        e = Wv(nX(b, (sN(), rN)).mb().H(), 7);
        f = Wv(nX(b, ZM).mb().H(), 7);
        for (h = new Tob(a.f); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 7);
          while (g.b.c.length != 0) {
            eW(Wv(yU(g.b, 0), 12), e);
          }
          while (g.e.c.length != 0) {
            dW(Wv(yU(g.e, 0), 12), f);
          }
        }
        c || sJ(b, (Rib(), qib), null);
        d || sJ(b, (Rib(), rib), null);
      }
      function jU(a) {
        var b, c, d, e, f, g, h;
        h = new $U();
        for (g = new Tob(a.b); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 9);
          if (f.g == (CX(), xX)) {
            continue;
          }
          hU(h, f, new FI());
          for (e = Uh(mX(f)); Cm(e); ) {
            d = Wv(Dm(e), 12);
            if (d.c.f.g == xX || d.d.f.g == xX) {
              continue;
            }
            for (c = WI(d.a, 0); c.b != c.d.c; ) {
              b = Wv(_ub(c), 10);
              ZU(h, new VS(b.a, b.b));
            }
          }
        }
        return h;
      }
      function X4(a, b, c, d) {
        var e, f, g;
        this.e = new jJ();
        this.a = a;
        this.b = b;
        if (a.b < b.b) {
          this.j = a.a;
          this.k = a.b;
          this.n = b.b;
        } else {
          this.j = b.a;
          this.k = b.b;
          this.n = a.b;
        }
        e = Wv(rJ(d, (eM(), CL)), 44);
        if (e) {
          for (g = WI(e, 0); g.b != g.d.c; ) {
            f = Wv(_ub(g), 10);
            RR(f.a, a.a) && QI(this.e, f);
          }
        }
        this.g = c;
        !!this.g && (this.i = this.j - c.j.d);
        this.f = d;
      }
      function Zj(a) {
        hi();
        var b, c, d, e, f, g;
        g = new Wub();
        zpb(g, a);
        for (c = (f = new Snb(g.a).a.bb().mb(), new Ynb(f)); c.a.G(); ) {
          b = (d = Wv(c.a.H(), 21), d.yb());
          _b(b);
        }
        switch (g.a.Y()) {
          case 0:
            return kr(), jr;
          case 1:
            return new Gr((e = new Snb(g.a).a.bb().mb(), d = Wv(new Ynb(e).a.H(), 21), d.yb()));
          default:
            return new lr(g);
        }
      }
      function $P(a, b, c, d) {
        var e, f, g;
        VP(a, c, "x", b.i.a + d.a);
        VP(a, c, "y", b.i.b + d.b);
        VP(a, c, Jzb, b.j.a);
        VP(a, c, Kzb, b.j.b);
        if (aw(b, 9)) {
          if (Wv(rJ(b, (eM(), bM)), 86).kb((MN(), JN))) {
            e = Wv(b, 9).b;
            g = Pu(c, Lzb);
            if (!g) {
              g = new Tu();
              Ru(c, Lzb, g);
            }
            f = g.kc();
            VP(a, f, "left", e.b);
            VP(a, f, "top", e.d);
            VP(a, f, "right", e.c);
            VP(a, f, Azb, e.a);
          }
        }
      }
      function GR(a, b) {
        var c, d, e, f, g, h, i, j, k, l;
        g = b == 1 ? wR : vR;
        for (f = (i = new Snb(g.a).a.bb().mb(), new Ynb(i)); f.a.G(); ) {
          e = (h = Wv(f.a.H(), 21), Wv(h.yb(), 59));
          for (k = Wv(Dd(a.f.c, e), 18).mb(); k.G(); ) {
            j = Wv(k.H(), 27);
            d = Wv(j.b, 25);
            l = Wv(j.a, 78);
            c = l.c;
            switch (e.e) {
              case 2:
              case 1:
                d.j.e += c;
                break;
              case 4:
              case 3:
                d.j.d += c;
            }
          }
        }
      }
      function IS(a, b) {
        var c, d, e;
        b.a ? (Rwb(a.b, b.b), a.a[b.b.k] = Wv(Twb(a.b, b.b), 25), c = Wv(Swb(a.b, b.b), 25), !!c && (a.a[c.k] = b.b), void 0) : (d = Wv(Twb(a.b, b.b), 25), !!d && d == a.a[b.b.k] && !!d.f && d.f != b.b.f && d.i.ib(b.b), e = Wv(Swb(a.b, b.b), 25), !!e && a.a[e.k] == b.b && !!e.f && e.f != b.b.f && b.b.i.ib(e), Uwb(a.b, b.b), void 0);
      }
      function p1(a, b) {
        var c, d, e, f, g, h, i;
        e = new GU();
        for (c = 0; c <= a.i; c++) {
          d = new sY(b);
          d.k = a.i - c;
          e.c[e.c.length] = d;
        }
        for (h = new Tob(a.o); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 9);
          rX(g, Wv(yU(e, a.i - a.f[g.k]), 16));
        }
        f = new Tob(e);
        while (f.a < f.c.c.length) {
          i = Wv(Rob(f), 16);
          i.a.c.length == 0 && Sob(f);
        }
        b.c.c = xv(UF, syb, 1, 0, 4, 1);
        xU(b.c, e);
      }
      function N4(a) {
        var b, c, d, e;
        a.a.a.c = xv(UF, syb, 1, 0, 4, 1);
        for (d = new Tob(a.a.b); d.a < d.c.c.length; ) {
          b = Wv(Rob(d), 25);
          b.f = null;
        }
        for (e = new Tob(a.a.b); e.a < e.c.c.length; ) {
          b = Wv(Rob(e), 25);
          !b.o && vU(a.a.a, new QR(Bv(tv(kA, 1), syb, 25, 0, [b])));
        }
        for (c = new Tob(a.a.b); c.a < c.c.c.length; ) {
          b = Wv(Rob(c), 25);
          !!b.o && OR(b.o.f, b);
        }
      }
      function fc(a, b) {
        var c, d, e, f;
        a = (bmb(), a == null ? Wxb : a);
        c = (a.length + 16 * b.length, new Amb());
        f = 0;
        d = 0;
        while (d < b.length) {
          e = a.indexOf("%s", f);
          if (e == -1) {
            break;
          }
          jkb(c, a, f, e);
          xmb(c, b[d++]);
          f = e + 2;
        }
        wmb(c, a, f, a.length);
        if (d < b.length) {
          c.a += " [";
          xmb(c, b[d++]);
          while (d < b.length) {
            c.a += ", ";
            xmb(c, b[d++]);
          }
          c.a += "]";
        }
        return c.a;
      }
      function _vb(a, b, c, d) {
        var e, f;
        if (!b) {
          return c;
        } else {
          e = a.a.$b(c.d, b.d);
          if (e == 0) {
            d.d = job(b, c.e);
            d.b = true;
            return b;
          }
          f = e < 0 ? 0 : 1;
          b.a[f] = _vb(a, b.a[f], c, d);
          if (awb(b.a[f])) {
            if (awb(b.a[1 - f])) {
              b.b = true;
              b.a[0].b = false;
              b.a[1].b = false;
            } else {
              awb(b.a[f].a[f]) ? b = hwb(b, 1 - f) : awb(b.a[f].a[1 - f]) && (b = gwb(b, 1 - f));
            }
          }
        }
        return b;
      }
      function GY(a, b) {
        var c, d, e, f, g, h, i, j, k, l;
        i = pmb(b.a);
        h = hw(Llb(i / a.a));
        l = b.a;
        g = 0;
        j = h;
        for (f = 0; f < a.a; ++f) {
          k = (bmb(), l.substr((0 > g ? 0 : g) < i ? 0 > g ? 0 : g : i, (0 > (j < i ? j : i) ? 0 : j < i ? j : i) - ((0 > g ? 0 : g) < i ? 0 > g ? 0 : g : i)));
          g = j;
          j += h;
          d = Wv(yU(a.c, f), 9);
          c = new dX(k);
          c.j.b = b.j.b;
          Fd(a.b, b, c);
          vU(d.c, c);
        }
        BU(a.g.c, b);
        vU(a.i, (e = new PY(a, b), e));
      }
      function p8(a, b, c) {
        var d, e, f, g, h, i, j, k, l;
        b.k = 1;
        f = b.d;
        for (l = oX(b, (djb(), bjb)).mb(); l.G(); ) {
          k = Wv(l.H(), 7);
          for (e = new Tob(k.e); e.a < e.c.c.length; ) {
            d = Wv(Rob(e), 12);
            j = d.d.f;
            if (b != j) {
              g = j.d;
              if (g.k <= f.k) {
                h = f.k + 1;
                if (h == c.c.c.length) {
                  i = new sY(c);
                  i.k = h;
                  vU(c.c, i);
                  rX(j, i);
                } else {
                  i = Wv(yU(c.c, h), 16);
                  rX(j, i);
                }
                p8(a, j, c);
              }
            }
          }
        }
      }
      function SO(a) {
        var b, c, d, e, f;
        b = a.e.j;
        for (d = new Tob(AW(a)); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 161);
          e = Wv(oW(c, (eM(), LL)), 15);
          !e && (e = new llb(0));
          f = new II(c.e.i);
          switch (Wv(c.e, 7).g.e) {
            case 4:
              f.a = -c.e.j.a - e.a;
              break;
            case 2:
              f.a = b.a + e.a;
              break;
            case 1:
              f.b = -c.e.j.b - e.a;
              break;
            case 3:
              f.b = b.b + e.a;
          }
          c.e.i.a = f.a;
          c.e.i.b = f.b;
        }
      }
      function PZ(a) {
        var b, c, d;
        d = Wv(rJ(a, (eM(), JL)), 18);
        if (d.V()) {
          return;
        }
        c = (b = Wv(Hkb(Gz), 11), new atb(b, Wv(exb(b, b.length), 11), 0));
        d.kb((oM(), jM)) ? Wsb(c, jM) : Wsb(c, kM);
        d.kb(hM) || Wsb(c, hM);
        d.kb(gM) ? Wsb(c, nM) : d.kb(fM) ? Wsb(c, mM) : d.kb(iM) && Wsb(c, lM);
        d.kb(nM) ? Wsb(c, gM) : d.kb(mM) ? Wsb(c, fM) : d.kb(lM) && Wsb(c, iM);
        sJ(a, JL, c);
      }
      function afb(a, b, c, d, e) {
        var f, g, h, i, j, k, l, m, n, o2;
        m = Zeb(a, c);
        for (i = 0; i < b; i++) {
          e.J(c);
          n = new GU();
          o2 = Wv(d.H(), 92);
          for (k = m + i; k < a.c; k++) {
            h = o2;
            o2 = Wv(d.H(), 92);
            vU(n, new tfb(h, o2, c));
          }
          for (l = m + i; l < a.c; l++) {
            d.M();
            l > m + i && d.I();
          }
          for (g = new Tob(n); g.a < g.c.c.length; ) {
            f = Wv(Rob(g), 92);
            d.J(f);
          }
          if (i < b - 1) {
            for (j = m + i; j < a.c; j++) {
              d.M();
            }
          }
        }
      }
      function CW(a) {
        var b, c, d, e;
        if (a.d && Wv(a.e, 7).f.g == (CX(), BX)) {
          return ypb(), ypb(), vpb;
        } else if (!a.a) {
          a.a = new GU();
          for (d = new Tob(Wv(a.e, 7).b); d.a < d.c.c.length; ) {
            b = Wv(Rob(d), 12);
            vU(a.a, new tW(b));
          }
          if (a.d) {
            e = Wv(rJ(Wv(a.e, 7), (Rib(), Bib)), 9);
            if (e) {
              for (c = Uh(iX(e)); Cm(c); ) {
                b = Wv(Dm(c), 12);
                vU(a.a, new tW(b));
              }
            }
          }
        }
        return a.a;
      }
      function EW(a) {
        var b, c, d, e;
        if (a.d && Wv(a.e, 7).f.g == (CX(), BX)) {
          return ypb(), ypb(), vpb;
        } else if (!a.c) {
          a.c = new GU();
          for (d = new Tob(Wv(a.e, 7).e); d.a < d.c.c.length; ) {
            b = Wv(Rob(d), 12);
            vU(a.c, new tW(b));
          }
          if (a.d) {
            e = Wv(rJ(Wv(a.e, 7), (Rib(), Bib)), 9);
            if (e) {
              for (c = Uh(mX(e)); Cm(c); ) {
                b = Wv(Dm(c), 12);
                vU(a.c, new tW(b));
              }
            }
          }
        }
        return a.c;
      }
      function N1(a, b) {
        var c, d, e, f, g, h, i, j;
        h = Wv(rJ(a, (Rib(), uib)), 7);
        i = MI(Bv(tv(qz, 1), Fzb, 10, 0, [h.f.i, h.i, h.a])).a;
        j = a.f.i.b;
        c = Wv(FU(a.b, xv(dB, gAb, 12, a.b.c.length, 0, 1)), 47);
        for (e = 0, f = c.length; e < f; ++e) {
          d = c[e];
          eW(d, h);
          SI(d.a, new HI(i, j));
          if (b) {
            g = Wv(rJ(d, (eM(), CL)), 44);
            if (!g) {
              g = new jJ();
              sJ(d, CL, g);
            }
            QI(g, new HI(i, j));
          }
        }
      }
      function O1(a, b) {
        var c, d, e, f, g, h, i, j;
        e = Wv(rJ(a, (Rib(), uib)), 7);
        i = MI(Bv(tv(qz, 1), Fzb, 10, 0, [e.f.i, e.i, e.a])).a;
        j = a.f.i.b;
        c = Wv(FU(a.e, xv(dB, gAb, 12, a.e.c.length, 0, 1)), 47);
        for (g = 0, h = c.length; g < h; ++g) {
          f = c[g];
          dW(f, e);
          RI(f.a, new HI(i, j));
          if (b) {
            d = Wv(rJ(f, (eM(), CL)), 44);
            if (!d) {
              d = new jJ();
              sJ(f, CL, d);
            }
            QI(d, new HI(i, j));
          }
        }
      }
      function X2(a) {
        var b, c, d, e, f, g, h, i, j;
        g = rAb;
        i = rAb;
        h = null;
        for (c = new Sub(new Lub(a.e)); c.b != c.c.a.b; ) {
          b = Rub(c);
          if (gw(b.d) === gw((Ieb(), keb)) || gw(b.d) === gw(leb)) {
            d = Wv(b.e, 116).a;
            j = Wv(b.e, 116).b;
            e = g - d > uAb;
            f = d - g < uAb && i - j > uAb;
            if (e || f) {
              i = Wv(b.e, 116).b;
              g = Wv(b.e, 116).a;
              h = Wv(b.d, 60);
              if (i == 0 && g == 0) {
                return h;
              }
            }
          }
        }
        return h;
      }
      function P4(a, b) {
        var c, d, e, f, g;
        a.d = b;
        Ymb(a.b);
        a.c = false;
        h:
          for (d = new Tob(a.d.c); d.a < d.c.c.length; ) {
            c = Wv(Rob(d), 16);
            for (f = new Tob(c.a); f.a < f.c.c.length; ) {
              e = Wv(Rob(f), 9);
              if (!sl(gX(e))) {
                a.c = true;
                break h;
              }
            }
          }
        g = Vsb((sK(), qK), Bv(tv(Bz, 1), uyb, 59, 0, [oK, pK]));
        if (!a.c) {
          Wsb(g, rK);
          Wsb(g, nK);
        }
        a.a = new NR(g);
        O4(a);
        return a.a;
      }
      function $2() {
        var a, b, c, d, e;
        this.e = (mp(), new wub());
        this.b = (c = Wv(Hkb(_E), 11), new atb(c, Wv(exb(c, c.length), 11), 0));
        this.c = (d = Wv(Hkb(_E), 11), new atb(d, Wv(exb(d, d.length), 11), 0));
        this.a = (e = Wv(Hkb(_E), 11), new atb(e, Wv(exb(e, e.length), 11), 0));
        for (b = (Ieb(), Ieb(), feb).mb(); b.G(); ) {
          a = Wv(b.H(), 60);
          tub(this.e, a, new _2());
        }
      }
      function gdb(a, b, c) {
        var d, e, f, g, h, i;
        if (Jlb(a.k - a.a) < dAb || Jlb(b.k - b.a) < dAb) {
          return;
        }
        d = edb(a.n, b.j, c);
        e = edb(b.n, a.j, c);
        f = fdb(a.n, b.k, b.a) + fdb(b.j, a.k, a.a);
        g = fdb(b.n, a.k, a.a) + fdb(a.j, b.k, b.a);
        h = 16 * d + f;
        i = 16 * e + g;
        if (h < i) {
          new kdb(a, b, i - h);
        } else if (h > i) {
          new kdb(b, a, h - i);
        } else if (h > 0 && i > 0) {
          new kdb(a, b, 0);
          new kdb(b, a, 0);
        }
      }
      function c3(a, b) {
        var c, d, e, f, g, h, i, j, k;
        j = new GU();
        k = null;
        for (d = Wv(qsb(a3, a), 20).mb(); d.G(); ) {
          c = Wv(d.H(), 75);
          for (i = (f = new Snb(c.c.a).a.bb().mb(), new Ynb(f)); i.a.G(); ) {
            g = (e = Wv(i.a.H(), 21), Wv(e.yb(), 7));
            Anb(b, g);
            J2(g, a.b);
          }
          xU(j, c.b);
          k = a.a;
        }
        Dpb(j);
        K2(j, k);
        for (h = new Tob(j); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 7);
          Anb(b, g);
        }
      }
      function GP() {
        var b = {layout: function(a) {
          Rxb(IP(a));
        }};
        if (typeof klayregister === Zxb) {
          klayregister(b);
        } else {
          typeof document !== Czb && ($wnd.$klay = b);
          typeof module === Sxb && module.exports && (module.exports = b);
          typeof document === Czb && typeof self !== Czb && self.addEventListener("message", function(a) {
            b.layout(a.data);
          }, false);
        }
      }
      function _cb(a, b, c, d, e) {
        var f, g, h;
        h = e ? d.b : d.a;
        if (h > c.k && h < c.a || c.j.b != 0 && c.n.b != 0 && (Jlb(h - Ixb(Yv(UI(c.j)))) < dAb && Jlb(h - Ixb(Yv(UI(c.n)))) < dAb || Jlb(h - Ixb(Yv(VI(c.j)))) < dAb && Jlb(h - Ixb(Yv(VI(c.n)))) < dAb)) {
          if (!ttb(a.b, d)) {
            g = Wv(rJ(b, (eM(), CL)), 44);
            if (!g) {
              g = new jJ();
              sJ(b, CL, g);
            }
            f = new II(d);
            TI(g, f, g.c.b, g.c);
            stb(a.b, f);
          }
        }
      }
      function lU(a, b, c) {
        var d, e, f, g, h, i, j, k, l;
        d = c.c;
        e = c.d;
        h = MX(b.c);
        i = MX(b.d);
        if (d == b.c) {
          h = mU(a, h, e);
          i = nU(b.d);
        } else {
          h = nU(b.c);
          i = mU(a, i, e);
        }
        j = new kJ(b.a);
        TI(j, h, j.a, j.a.a);
        TI(j, i, j.c.b, j.c);
        g = b.c == d;
        l = new pV();
        for (f = 0; f < j.b - 1; ++f) {
          k = new RJ(Wv(tn(j, f), 10), Wv(tn(j, f + 1), 10));
          g && f == 0 || !g && f == j.b - 2 ? l.b = k : vU(l.a, k);
        }
        return l;
      }
      function GW(a, b) {
        var c, d, e, f;
        f = a.g.e - b.g.e;
        if (f != 0) {
          return f;
        }
        c = Wv(rJ(a, (eM(), UL)), 24);
        d = Wv(rJ(b, UL), 24);
        if (!!c && !!d) {
          e = c.a - d.a;
          if (e != 0) {
            return e;
          }
        }
        switch (a.g.e) {
          case 1:
            return glb(a.i.a, b.i.a);
          case 2:
            return glb(a.i.b, b.i.b);
          case 3:
            return glb(b.i.a, a.i.a);
          case 4:
            return glb(b.i.b, a.i.b);
          default:
            throw new ulb(iAb);
        }
      }
      function KO(a, b) {
        var c, d, e, f, g;
        g = new FI();
        for (f = new Tob(AW(a)); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 161);
          switch (Wv(e.e, 7).g.e) {
            case 4:
            case 2:
              g.b = Nlb(g.b, e.e.i.b + e.e.j.b + (b ? (d = Wv(e.e, 7).d, new EP(d.d, d.b, d.a, d.c)).a : 0));
              break;
            case 1:
            case 3:
              g.a = Nlb(g.a, e.e.i.a + e.e.j.a + (b ? (c = Wv(e.e, 7).d, new EP(c.d, c.b, c.a, c.c)).c : 0));
          }
        }
        return g;
      }
      function d32(a, b) {
        var c, d, e, f, g, h, i;
        e = new GU();
        i = new GU();
        c = Wv(qsb(a3, a), 20).mb();
        while (c.G()) {
          d = Wv(c.H(), 75);
          wU(e, d.b);
          wU(e, $db(d));
          if (c.G()) {
            d = Wv(c.H(), 75);
            xU(i, $db(d));
            xU(i, d.b);
          }
        }
        K2(e, a.b);
        K2(i, a.a);
        for (h = new Tob(e); h.a < h.c.c.length; ) {
          f = Wv(Rob(h), 7);
          Anb(b, f);
        }
        for (g = new Tob(i); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 7);
          Anb(b, f);
        }
      }
      function ohb() {
        ohb = iI;
        fhb = new phb("COMMENTS", 0);
        hhb = new phb("EXTERNAL_PORTS", 1);
        ihb = new phb("HYPEREDGES", 2);
        jhb = new phb("HYPERNODES", 3);
        khb = new phb("NON_FREE_PORTS", 4);
        lhb = new phb("NORTH_SOUTH_PORTS", 5);
        nhb = new phb("SELF_LOOPS", 6);
        ehb = new phb("CENTER_LABELS", 7);
        ghb = new phb("END_LABELS", 8);
        mhb = new phb("PARTITIONS", 9);
      }
      function Jxb(a, b) {
        var c, d, e, f;
        a = (bmb(), a == null ? Wxb : a);
        c = (a.length + 16 * b.length, new Amb());
        f = 0;
        d = 0;
        while (d < b.length) {
          e = a.indexOf("%s", f);
          if (e == -1) {
            break;
          }
          ymb(c, a.substr(f, e - f));
          xmb(c, b[d++]);
          f = e + 2;
        }
        ymb(c, imb(a, f, a.length - f));
        if (d < b.length) {
          c.a += " [";
          xmb(c, b[d++]);
          while (d < b.length) {
            c.a += ", ";
            xmb(c, b[d++]);
          }
          c.a += "]";
        }
        return c.a;
      }
      function pX(a, b, c) {
        var d, e;
        e = null;
        switch (b.e) {
          case 1:
            e = (LX(), GX);
            break;
          case 2:
            e = (LX(), IX);
        }
        d = null;
        switch (c.e) {
          case 1:
            d = (LX(), HX);
            break;
          case 2:
            d = (LX(), FX);
            break;
          case 3:
            d = (LX(), JX);
            break;
          case 4:
            d = (LX(), KX);
        }
        return !!e && !!d ? pl(a.f, (hc(), new ic(new opb(Bv(tv(tw, 1), syb, 68, 0, [Wv(_b(e), 68), Wv(_b(d), 68)]))))) : (ypb(), ypb(), vpb);
      }
      function vY(a, b, c) {
        var d, e, f, g, h, i, j;
        i = Eo(mX(b));
        for (e = WI(i, 0); e.b != e.d.c; ) {
          d = Wv(_ub(e), 12);
          j = d.d.f;
          if (!(Ckb(Ixb(Xv(rJ(j, (Rib(), Vhb))))) && rJ(j, uib) != null) && j.g == (CX(), wX) && !Ckb(Ixb(Xv(rJ(d, Iib)))) && d.d.g == (sN(), rN)) {
            f = rY(j.d) - rY(b.d);
            if (f > 1) {
              c ? g = rY(b.d) + 1 : g = rY(j.d) - 1;
              h = Wv(yU(a.a.c, g), 16);
              rX(j, h);
            }
            vY(a, j, c);
          }
        }
        return b;
      }
      function Hcb(a, b) {
        var c, d, e, f;
        b.d ? e = a.a.c == (Gbb(), Fbb) ? iX(b.b) : mX(b.b) : e = a.a.c == (Gbb(), Ebb) ? iX(b.b) : mX(b.b);
        f = false;
        for (d = (Il(), new Im(Dl(ul(e.a, new yl())))); Cm(d); ) {
          c = Wv(Dm(d), 12);
          if (a.c.a[c.c.f.d.k] === a.c.a[c.d.f.d.k]) {
            continue;
          }
          f = true;
          if (ttb(a.b, a.a.f[zcb(c, b.b).k])) {
            b.c = true;
            b.a = c;
            return b;
          }
        }
        b.c = f;
        b.a = null;
        return b;
      }
      function K4(a, b, c) {
        var d, e, f, g;
        d = Wv(rJ(a.d, (eM(), pL)), 15).a;
        for (f = new Tob(a.a.b); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 25);
          if (aw(e, 93)) {
            g = Wv(e, 93).b;
            if (g.g == (CX(), xX)) {
              switch (Wv(rJ(g, (Rib(), hib)), 32).e) {
                case 4:
                  g.i.a = b.a - d;
                  break;
                case 2:
                  g.i.a = c.a + d - (g.j.a + g.e.c);
                  break;
                case 1:
                  g.i.b = b.b - d;
                  break;
                case 3:
                  g.i.b = c.b + d - (g.j.b + g.e.a);
              }
            }
          }
        }
      }
      function Ztb() {
        if (!Object.create || !Object.getOwnPropertyNames) {
          return false;
        }
        var a = "__proto__";
        var b = Object.create(null);
        if (b[a] !== void 0) {
          return false;
        }
        var c = Object.getOwnPropertyNames(b);
        if (c.length != 0) {
          return false;
        }
        b[a] = 42;
        if (b[a] !== 42) {
          return false;
        }
        if (Object.getOwnPropertyNames(b).length == 0) {
          return false;
        }
        return true;
      }
      function eS(a) {
        var b, c, d, e, f, g, h, i, j;
        for (g = new Tob(a.a.a); g.a < g.c.c.length; ) {
          e = Wv(Rob(g), 78);
          e.f = 0;
          e.e.a.Q();
        }
        for (f = new Tob(a.a.a); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 78);
          for (c = (j = new Snb(e.a.a).a.bb().mb(), new Ynb(j)); c.a.G(); ) {
            b = (d = Wv(c.a.H(), 21), Wv(d.yb(), 25));
            for (i = b.i.mb(); i.G(); ) {
              h = Wv(i.H(), 25);
              if (h.f != e) {
                stb(e.e, h);
                ++h.f.f;
              }
            }
          }
        }
      }
      function bcb(a, b, c, d) {
        var e, f, g, h;
        if (b.g == (CX(), wX)) {
          for (f = Uh(iX(b)); Cm(f); ) {
            e = Wv(Dm(f), 12);
            g = e.c.f;
            if ((g.g == wX || Ckb(Ixb(Xv(rJ(g, (Rib(), Vhb)))))) && a.d.a[e.c.f.d.k] == d && a.d.a[b.d.k] == c) {
              return true;
            }
          }
        }
        if (b.g == zX) {
          for (f = Uh(iX(b)); Cm(f); ) {
            e = Wv(Dm(f), 12);
            h = e.c.f.g;
            if (h == zX && a.d.a[e.c.f.d.k] == d && a.d.a[b.d.k] == c) {
              return true;
            }
          }
        }
        return false;
      }
      function cfb(a) {
        var b, c, d, e, f, g;
        e = a.g.tb();
        d = a.b.tb();
        if (a.e) {
          for (c = 0; c < a.c; c++) {
            e.H();
          }
        } else {
          for (c = 0; c < a.c - 1; c++) {
            e.H();
            e.I();
          }
        }
        b = Ixb(Yv(e.H()));
        while (a.i - b > RAb) {
          f = b;
          g = 0;
          while ((b - f <= 0 ? 0 - (b - f) : b - f) < RAb) {
            ++g;
            b = Ixb(Yv(e.H()));
            d.H();
          }
          if (g < a.c) {
            e.M();
            afb(a, a.c - g, f, d, e);
            e.H();
          }
          d.M();
        }
        if (!a.e) {
          for (c = 0; c < a.c - 1; c++) {
            e.H();
            e.I();
          }
        }
        a.e = true;
        a.d = true;
      }
      function O2(a) {
        var b, c, d, e;
        switch (V2(a.a).c) {
          case 4:
            return Ieb(), oeb;
          case 3:
            return Wv(S2(a.a).mb().H(), 60);
          case 2:
            d = V2(a.a);
            c = new jtb(d);
            b = Wv(itb(c), 60);
            e = Wv(itb(c), 60);
            return Meb(b) == e ? Zsb(d, (Ieb(), oeb)) ? ieb : oeb : Leb(Leb(b)) == e ? Leb(b) : Neb(b);
          case 1:
            d = V2(a.a);
            return Meb(Wv(itb(new jtb(d)), 60));
          case 0:
            return Ieb(), peb;
          default:
            return null;
        }
      }
      function Q3(a, b) {
        var c;
        oR.call(this);
        this.a = Wv(rJ(b, (Rib(), Jib)), 15).a;
        this.c = this.a * Wv(rJ(b, (Mjb(), Ejb)), 15).a;
        this.b = a;
        this.j = new VN(a.i.a - a.e.b, a.i.b - a.e.d, a.j.a + a.e.b + a.e.c, a.j.b + a.e.d + a.e.a);
        BI(this.g);
        c = tl(iX(a)) - tl(mX(a));
        c < 0 ? vS(this.n, true, (sK(), oK)) : c > 0 && vS(this.n, true, (sK(), pK));
        a.g == (CX(), xX) && wS(this.n, false, false, false, false);
      }
      function UT(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m;
        f = new HI(b, c);
        for (k = new Tob(a.b); k.a < k.c.c.length; ) {
          j = Wv(Rob(k), 9);
          vI(j.i, f);
          for (m = new Tob(j.f); m.a < m.c.c.length; ) {
            l = Wv(Rob(m), 7);
            for (e = new Tob(l.e); e.a < e.c.c.length; ) {
              d = Wv(Rob(e), 12);
              hJ(d.a, f);
              g = Wv(rJ(d, (eM(), CL)), 44);
              !!g && hJ(g, f);
              for (i = new Tob(d.b); i.a < i.c.c.length; ) {
                h = Wv(Rob(i), 33);
                vI(h.i, f);
              }
            }
          }
        }
      }
      function TW(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m;
        f = new HI(b, c);
        for (k = new Tob(a.b); k.a < k.c.c.length; ) {
          j = Wv(Rob(k), 9);
          vI(j.i, f);
          for (m = new Tob(j.f); m.a < m.c.c.length; ) {
            l = Wv(Rob(m), 7);
            for (e = new Tob(l.e); e.a < e.c.c.length; ) {
              d = Wv(Rob(e), 12);
              hJ(d.a, f);
              g = Wv(rJ(d, (eM(), CL)), 44);
              !!g && hJ(g, f);
              for (i = new Tob(d.b); i.a < i.c.c.length; ) {
                h = Wv(Rob(i), 33);
                vI(h.i, f);
              }
            }
          }
        }
      }
      function X0(a, b) {
        var c, d, e, f, g;
        for (g = new Tob(a.f); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 7);
          if (b) {
            if (f.b.c.length != 0) {
              throw new $J((e = lX(a), nAb + (e == null ? Dlb(a.k) : e) + oAb + pAb + qAb));
            }
          } else {
            for (d = new Tob(f.b); d.a < d.c.c.length; ) {
              c = Wv(Rob(d), 12);
              if (gw(rJ(c.c.f, (Mjb(), vjb))) !== gw((Xib(), Tib))) {
                throw new $J((e = lX(a), nAb + (e == null ? Dlb(a.k) : e) + oAb + pAb + qAb));
              }
            }
          }
        }
      }
      function y6(a, b, c) {
        var d, e, f, g, h, i, j;
        d = 0;
        j = nX(b, c);
        for (i = j.mb(); i.G(); ) {
          h = Wv(i.H(), 7);
          if (Wv(rJ(h, (Rib(), Bib)), 9)) {
            g = Wv(rJ(h, Bib), 9);
            nX(g, (sN(), ZM)).mb().G() && (d += (f = a.k ? 1 : NX(Wv(yU(g.f, 0), 7)), f * Slb(w6(a, b, c).a - 1 - Wv(Smb(a.i, h), 24).a, B6(a, b, g))));
            nX(g, rN).mb().G() && (d += (e = a.k ? 1 : NX(Wv(yU(g.f, 0), 7)), e * Slb(Wv(Smb(a.i, h), 24).a, B6(a, b, g))));
          }
        }
        return d;
      }
      function J7(a, b) {
        var c, d, e, f, g, h, i;
        e = xv(mw, Yyb, 26, a.e.a.c.length, 12, 1);
        for (g = new Tob(a.e.a); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 61);
          e[f.b] += f.c.c.length;
        }
        h = Eo(b);
        while (h.b != 0) {
          f = Wv(h.b == 0 ? null : (Bxb(h.b != 0), $I(h, h.a.a)), 61);
          for (d = new Tob(f.g); d.a < d.c.c.length; ) {
            c = Wv(Rob(d), 89);
            i = c.d;
            i.e = Plb(i.e, f.e + c.a);
            --e[i.b];
            e[i.b] == 0 && (TI(h, i, h.c.b, h.c), true);
          }
        }
      }
      function nP(a, b, c, d, e, f, g) {
        a.d = d.e.i.a;
        a.e = d.e.i.b;
        if (e) {
          a.d += e.e.i.a;
          a.e += e.e.i.b;
        }
        a.c = b.e.j.a;
        a.b = b.e.j.b;
        if (!e) {
          c ? a.d -= g + b.e.j.a : a.d += d.e.j.a + g;
        } else {
          switch (Wv(e.e, 7).g.e) {
            case 0:
            case 2:
              a.d += e.e.j.a + g + f.a + g;
              break;
            case 4:
              a.d -= g + f.a + g + b.e.j.a;
              break;
            case 1:
              a.d += e.e.j.a + g;
              a.e -= g + f.b + g + b.e.j.b;
              break;
            case 3:
              a.d += e.e.j.a + g;
              a.e += e.e.j.b + g + f.b + g;
          }
        }
      }
      function V9(a, b) {
        var c, d, e, f, g, h, i, j, k;
        e = new GU();
        for (i = new Tob(b); i.a < i.c.c.length; ) {
          f = Wv(Rob(i), 9);
          vU(e, a.b[f.d.k][f.k]);
        }
        S9(a, e);
        while (k = T9(e)) {
          U9(a, Wv(k.a, 102), Wv(k.b, 102), e);
        }
        b.c = xv(UF, syb, 1, 0, 4, 1);
        for (d = new Tob(e); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 102);
          for (g = c.d, h = 0, j = g.length; h < j; ++h) {
            f = g[h];
            b.c[b.c.length] = f;
            a.a[f.d.k][f.k].a = W9(c.g, c.d[0]).a;
          }
        }
      }
      function lS(a) {
        var b, c, d, e, f, g, h;
        h = (mp(), new ntb());
        for (d = new Tob(a.a.b); d.a < d.c.c.length; ) {
          b = Wv(Rob(d), 25);
          Umb(h, b, new GU());
        }
        for (e = new Tob(a.a.b); e.a < e.c.c.length; ) {
          b = Wv(Rob(e), 25);
          b.r = Vzb;
          for (g = b.i.mb(); g.G(); ) {
            f = Wv(g.H(), 25);
            Wv(re(Ktb(h.d, f)), 20).ib(b);
          }
        }
        for (c = new Tob(a.a.b); c.a < c.c.c.length; ) {
          b = Wv(Rob(c), 25);
          b.i.Q();
          b.i = Wv(re(Ktb(h.d, b)), 20);
        }
        eS(a);
      }
      function kU(a) {
        var b, c, d, e, f;
        e = Wv(yU(a.b, 0), 9);
        b = new uX(a);
        vU(a.b, b);
        b.j.a = Nlb(1, e.j.a);
        b.j.b = Nlb(1, e.j.b);
        b.i.a = e.i.a;
        b.i.b = e.i.b;
        switch (Wv(rJ(e, (Rib(), hib)), 32).e) {
          case 4:
            b.i.a += 2;
            break;
          case 1:
            b.i.b += 2;
            break;
          case 2:
            b.i.a -= 2;
            break;
          case 3:
            b.i.b -= 2;
        }
        d = new RX();
        PX(d, b);
        c = new hW();
        f = Wv(yU(e.f, 0), 7);
        dW(c, f);
        eW(c, d);
        vI(BI(d.i), f.i);
        vI(BI(d.a), f.a);
        return b;
      }
      function T8(a) {
        var b, c, d, e, f, g, h, i, j;
        j = (mp(), new ntb());
        b = 0;
        c = new l7();
        for (h = a.mb(); h.G(); ) {
          f = Wv(h.H(), 9);
          i = x7(z7(y7(new A7(), b++), f), c);
          Ltb(j.d, f, i);
        }
        for (g = a.mb(); g.G(); ) {
          f = Wv(g.H(), 9);
          for (e = Uh(mX(f)); Cm(e); ) {
            d = Wv(Dm(e), 12);
            if (bW(d)) {
              continue;
            }
            f7(i7(h7(g7(j7(new k7(), Plb(1, Wv(rJ(d, (Rib(), Eib)), 24).a)), 1), Wv(Smb(j, d.c.f), 61)), Wv(Smb(j, d.d.f), 61)));
          }
        }
        return c;
      }
      function E2(a) {
        var b, c;
        if (a.V()) {
          return;
        }
        c = Wv(a.sb(0), 75).f;
        new g3(a);
        b = new Fnb(c.f, 0);
        e3((Ieb(), neb), b);
        f3(Eeb, b);
        D2((sN(), $M), b);
        d32(meb, b);
        f3(qeb, b);
        c3(jeb, b);
        e3(keb, b);
        D2(ZM, b);
        d32(ieb, b);
        e3(leb, b);
        c3(peb, b);
        e3(qeb, b);
        D2(pN, b);
        d32(oeb, b);
        e3(Eeb, b);
        c3(Heb, b);
        f3(leb, b);
        while (b.b < b.d.Y()) {
          Bxb(b.b < b.d.Y());
          b.d.sb(b.c = b.b++);
        }
        d32(Geb, b);
        f3(keb, b);
        f3(neb, b);
      }
      function F2(a) {
        var b, c;
        if (a.V()) {
          return;
        }
        c = Wv(a.sb(0), 75).f;
        new g3(a);
        b = new Fnb(c.f, 0);
        e3((Ieb(), neb), b);
        f3(Eeb, b);
        D2((sN(), $M), b);
        c3(meb, b);
        f3(qeb, b);
        c3(jeb, b);
        e3(keb, b);
        D2(ZM, b);
        c3(ieb, b);
        e3(leb, b);
        c3(peb, b);
        e3(qeb, b);
        D2(pN, b);
        c3(oeb, b);
        e3(Eeb, b);
        c3(Heb, b);
        f3(leb, b);
        while (b.b < b.d.Y()) {
          Bxb(b.b < b.d.Y());
          b.d.sb(b.c = b.b++);
        }
        c3(Geb, b);
        f3(keb, b);
        f3(neb, b);
      }
      function N7(a) {
        var b, c, d, e, f, g, h, i, j;
        e = eyb;
        g = $xb;
        for (j = new Tob(a.e.a); j.a < j.c.c.length; ) {
          h = Wv(Rob(j), 61);
          g = Slb(g, h.e);
          e = Plb(e, h.e);
        }
        f = 0;
        d = xv(mw, Yyb, 26, e - g + 1, 12, 1);
        for (i = new Tob(a.e.a); i.a < i.c.c.length; ) {
          h = Wv(Rob(i), 61);
          h.e -= g;
          ++d[h.e];
        }
        if (a.k) {
          for (c = new Tob(a.k.c); c.a < c.c.c.length; ) {
            b = Wv(Rob(c), 16);
            d[f++] += b.a.c.length;
            if (d.length == f) {
              break;
            }
          }
        }
        return d;
      }
      function L4(a) {
        var b, c, d, e;
        M4(a);
        J4(a);
        e = new HI(Uzb, Uzb);
        b = new HI(Vzb, Vzb);
        for (d = new Tob(a.a.b); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 25);
          e.a = Qlb(e.a, c.j.d);
          e.b = Qlb(e.b, c.j.e);
          b.a = Nlb(b.a, c.j.d + c.j.c);
          b.b = Nlb(b.b, c.j.e + c.j.b);
        }
        vI(BI(a.d.d), zI(new HI(e.a, e.b)));
        vI(BI(a.d.e), EI(new HI(b.a, b.b), e));
        K4(a, e, b);
        a.a.a.c = xv(UF, syb, 1, 0, 4, 1);
        a.a.b.c = xv(UF, syb, 1, 0, 4, 1);
      }
      function j1(a, b) {
        var c, d, e, f, g, h, i, j, k, l;
        g = a.e;
        k = Wv(rJ(a, (Rib(), Qib)), 20);
        l = 0;
        if (k) {
          i = 0;
          for (f = k.mb(); f.G(); ) {
            e = Wv(f.H(), 9);
            i = Nlb(i, e.j.b);
            l += e.j.a;
          }
          l += b / 2 * (k.Y() - 1);
          g.d += i + b;
        }
        c = Wv(rJ(a, Yhb), 20);
        d = 0;
        if (c) {
          i = 0;
          for (f = c.mb(); f.G(); ) {
            e = Wv(f.H(), 9);
            i = Nlb(i, e.j.b);
            d += e.j.a;
          }
          d += b / 2 * (c.Y() - 1);
          g.a += i + b;
        }
        h = l > d ? l : d;
        if (h > a.j.a) {
          j = (h - a.j.a) / 2;
          g.b = Nlb(g.b, j);
          g.c = Nlb(g.c, j);
        }
      }
      function ST(a, b, c, d) {
        var e, f, g, h, i, j, k, l, m, n;
        g = uI(b.d, c, d);
        for (l = new Tob(b.b); l.a < l.c.c.length; ) {
          k = Wv(Rob(l), 9);
          vI(k.i, g);
          for (n = new Tob(k.f); n.a < n.c.c.length; ) {
            m = Wv(Rob(n), 7);
            for (f = new Tob(m.e); f.a < f.c.c.length; ) {
              e = Wv(Rob(f), 12);
              hJ(e.a, g);
              h = Wv(rJ(e, (eM(), CL)), 44);
              !!h && hJ(h, g);
              for (j = new Tob(e.b); j.a < j.c.c.length; ) {
                i = Wv(Rob(j), 33);
                vI(i.i, g);
              }
            }
          }
          vU(a.b, k);
          k.a = a;
        }
      }
      function Q8(a, b) {
        var c, d, e, f, g;
        a.c == null || a.c.length < b.c.length ? a.c = xv(KH, xAb, 26, b.c.length, 13, 1) : dpb(a.c);
        a.a = new GU();
        d = 0;
        for (g = new Tob(b); g.a < g.c.c.length; ) {
          e = Wv(Rob(g), 9);
          e.k = d++;
        }
        c = new aJ();
        for (f = new Tob(b); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 9);
          if (!a.c[e.k]) {
            R8(a, e);
            c.b == 0 || (Bxb(c.b != 0), Wv(c.a.a.c, 20)).Y() < a.a.c.length ? RI(c, a.a) : SI(c, a.a);
            a.a = new GU();
          }
        }
        return c;
      }
      function xfb(a, b, c) {
        var d, e, f, g, h, i, j, k, l;
        d = sgb(a.g);
        j = vI(xI(a.i), a.a);
        k = vI(xI(b.i), b.a);
        e = vI(new II(j), CI(new GI(d), c));
        l = vI(new II(k), CI(new GI(d), c));
        g = CI(EI(new II(e), l), 0.5);
        i = vI(vI(new II(l), g), CI(new GI(d), Tlb(g.a * g.a + g.b * g.b)));
        h = new ufb(Bv(tv(qz, 1), Fzb, 10, 0, [j, e, i, l, k]));
        f = $eb(h, 0.5, false);
        h.a = f;
        bfb(h, new Ffb(Bv(tv(qz, 1), Fzb, 10, 0, [f, j, k])));
        return h;
      }
      function F7(a, b) {
        var c, d, e, f, g;
        nI(b, "Network simplex", 1);
        if (a.e.a.c.length < 1) {
          pI(b);
          return;
        }
        for (f = new Tob(a.e.a); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 61);
          e.e = 0;
        }
        g = a.e.a.c.length >= 40;
        g && Q7(a);
        H7(a);
        G7(a);
        c = K7(a);
        d = 0;
        while (!!c && d < a.f) {
          E7(a, c, D7(a, c));
          c = K7(a);
          ++d;
        }
        g && P7(a);
        a.a ? B7(a, N7(a)) : N7(a);
        a.b = null;
        a.d = null;
        a.p = null;
        a.c = null;
        a.g = null;
        a.i = null;
        a.n = null;
        a.o = null;
        pI(b);
      }
      function uQ(a) {
        var b, c, d, e, f, g, h, i, j, k;
        j = new vtb();
        e = (mp(), new ntb());
        for (h = 0, i = a.length; h < i; ++h) {
          g = a[h];
          b = g.mc();
          j.a.db(b, j);
          b == null ? Ltb(e.d, null, g) : dub(e.e, b, g);
          k = gmb(b, (bmb(), b.lastIndexOf(".")) + 1, b.length);
          if (!ttb(sQ, k)) {
            j.a.db(k, j);
            k == null ? Ltb(e.d, null, g) : dub(e.e, k, g);
            stb(sQ, k);
          }
        }
        d = (hi(), Yj((f = new Snb(j.a).a.bb().mb(), new Ynb(f))));
        c = tj(e);
        return new RJ(d, c);
      }
      function E7(a, b, c) {
        var d, e, f;
        if (!b.e) {
          throw new slb("Given leave edge is no tree edge.");
        }
        if (c.e) {
          throw new slb("Given enter edge is a tree edge already.");
        }
        b.e = false;
        utb(a.p, b);
        c.e = true;
        stb(a.p, c);
        d = c.d.e - c.c.e - c.a;
        I7(a, c.d, b) || (d = -d);
        for (f = new Tob(a.e.a); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 61);
          I7(a, e, b) || (e.e += d);
        }
        a.j = 1;
        dpb(a.c);
        O7(a, Wv(Rob(new Tob(a.e.a)), 61));
        C7(a);
      }
      function dU(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n;
        if (a.V()) {
          return new FI();
        }
        j = 0;
        l = 0;
        for (e = a.mb(); e.G(); ) {
          d = Wv(e.H(), 55);
          f = d.e;
          j = Nlb(j, f.a);
          l += f.a * f.b;
        }
        j = Nlb(j, Math.sqrt(l) * Wv(rJ(Wv(a.mb().H(), 55), (Rib(), Rhb)), 15).a);
        m = 0;
        n = 0;
        i = 0;
        c = b;
        for (h = a.mb(); h.G(); ) {
          g = Wv(h.H(), 55);
          k = g.e;
          if (m + k.a > j) {
            m = 0;
            n += i + b;
            i = 0;
          }
          UT(g, m, n);
          c = Nlb(c, m + k.a);
          i = Nlb(i, k.b);
          m += k.a + b;
        }
        return new HI(c + b, n + i + b);
      }
      function Nm(a, b, c, d) {
        var e, f, g;
        g = new Sn(b, c);
        if (!a.a) {
          a.a = a.e = g;
          Umb(a.b, b, new Rn(g));
          ++a.c;
        } else if (!d) {
          a.e.b = g;
          g.d = a.e;
          a.e = g;
          e = Wv(Smb(a.b, b), 126);
          if (!e) {
            Umb(a.b, b, new Rn(g));
            ++a.c;
          } else {
            ++e.a;
            f = e.c;
            f.c = g;
            g.e = f;
            e.c = g;
          }
        } else {
          e = Wv(Smb(a.b, b), 126);
          ++e.a;
          g.d = d.d;
          g.e = d.e;
          g.b = d;
          g.c = d;
          !d.e ? Wv(Smb(a.b, b), 126).b = g : d.e.c = g;
          !d.d ? a.a = g : d.d.b = g;
          d.d = g;
          d.e = g;
        }
        ++a.d;
        return g;
      }
      function hS(a) {
        var b, c, d, e, f, g, h, i;
        if (a.e) {
          throw new ulb((Gkb(nA), "The " + nA.j + Yzb));
        }
        a.d == (sK(), qK) && gS(a, oK);
        for (c = new Tob(a.a.a); c.a < c.c.c.length; ) {
          b = Wv(Rob(c), 78);
          b.f = 0;
        }
        for (g = new Tob(a.a.b); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 25);
          f.r = Vzb;
          for (e = f.i.mb(); e.G(); ) {
            d = Wv(e.H(), 25);
            ++d.f.f;
          }
        }
        a.b.Cc(a);
        for (i = new Tob(a.a.b); i.a < i.c.c.length; ) {
          h = Wv(Rob(i), 25);
          h.p = true;
        }
        return a;
      }
      function V1(a, b, c, d, e) {
        var f, g, h, i;
        f = new uX(a);
        sX(f, (CX(), BX));
        sJ(f, (eM(), TL), (KM(), FM));
        sJ(f, (Rib(), uib), b.c.f);
        g = new RX();
        sJ(g, uib, b.c);
        QX(g, e);
        PX(g, f);
        sJ(b.c, Bib, f);
        h = new uX(a);
        sX(h, BX);
        sJ(h, TL, FM);
        sJ(h, uib, b.d.f);
        i = new RX();
        sJ(i, uib, b.d);
        QX(i, e);
        PX(i, h);
        sJ(b.d, Bib, h);
        dW(b, g);
        eW(b, i);
        Fxb(0, c.c.length);
        fxb(c.c, 0, f);
        d.c[d.c.length] = h;
        sJ(f, aib, Elb(1));
        sJ(h, aib, Elb(1));
      }
      function j2(a, b) {
        var c, d, e, f, g;
        g = Wv(rJ(a.f, (eM(), TL)), 28);
        f = a.g.e - b.g.e;
        if (f != 0 || g == (KM(), HM)) {
          return f;
        }
        if (g == (KM(), EM)) {
          c = Wv(rJ(a, UL), 24);
          d = Wv(rJ(b, UL), 24);
          if (!!c && !!d) {
            e = c.a - d.a;
            if (e != 0) {
              return e;
            }
          }
        }
        switch (a.g.e) {
          case 1:
            return glb(a.i.a, b.i.a);
          case 2:
            return glb(a.i.b, b.i.b);
          case 3:
            return glb(b.i.a, a.i.a);
          case 4:
            return glb(b.i.b, a.i.b);
          default:
            throw new ulb(iAb);
        }
      }
      function hfb(a) {
        var b, c, d, e, f, g, h, i, j, k, l;
        h = new GU();
        f = Ixb(Yv(a.g.sb(a.g.Y() - 1)));
        for (l = a.g.mb(); l.G(); ) {
          k = Yv(l.H());
          uU(h, 0, f - (Dxb(k), k));
        }
        g = lJ(Xeb(a));
        j = new GU();
        e = new Tob(h);
        i = new GU();
        for (b = 0; b < a.c - 1; b++) {
          vU(j, Yv(Rob(e)));
        }
        for (d = WI(g, 0); d.b != d.d.c; ) {
          c = Wv(_ub(d), 10);
          vU(j, Yv(Rob(e)));
          vU(i, new sfb(c, j));
          Cxb(0, j.c.length);
          j.c.splice(0, 1);
        }
        return new ffb(a.e, a.f, a.d, a.c, h, i);
      }
      function zs(a, b, c, d, e) {
        var f, g, h, i, j;
        f = b.$b(c, a.b);
        if (f < 0) {
          h = a.e;
          if (!h) {
            e[0] = 0;
            return As(a, c, d);
          }
          g = h.d;
          a.e = zs(h, b, c, d, e);
          e[0] == 0 && ++a.a;
          a.j = PH(a.j, d);
          return a.e.d == g ? a : Gs(a);
        } else if (f > 0) {
          i = a.g;
          if (!i) {
            e[0] = 0;
            return Bs(a, c, d);
          }
          g = i.d;
          a.g = zs(i, b, c, d, e);
          e[0] == 0 && ++a.a;
          a.j = PH(a.j, d);
          return a.g.d == g ? a : Gs(a);
        }
        e[0] = a.c;
        j = PH(a.c, d);
        Xb(RH(j, $xb) <= 0);
        a.c += d;
        a.j = PH(a.j, d);
        return a;
      }
      function iJ(b, c) {
        var d, e, f, g, h, i;
        f = fmb(c, ",|;|\\(|\\)|\\[|\\]|\\{|\\}| |	|\n");
        _I(b);
        try {
          e = 0;
          h = 0;
          g = 0;
          i = 0;
          while (e < f.length) {
            if (f[e] != null && pmb(hmb(f[e])) > 0) {
              h % 2 == 0 ? g = clb(f[e]) : i = clb(f[e]);
              h > 0 && h % 2 != 0 && QI(b, new HI(g, i));
              ++h;
            }
            ++e;
          }
        } catch (a) {
          a = OH(a);
          if (aw(a, 130)) {
            d = a;
            throw new slb("The given string does not match the expected format for vectors." + d);
          } else
            throw NH(a);
        }
      }
      function _bb(a, b, c) {
        var d, e, f, g, h, i, j, k;
        e = true;
        for (g = new Tob(b.c); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 16);
          j = Vzb;
          for (i = new Tob(f.a); i.a < i.c.c.length; ) {
            h = Wv(Rob(i), 9);
            k = Ixb(c.n[h.k]) + Ixb(c.d[h.k]) - h.e.d;
            d = Ixb(c.n[h.k]) + Ixb(c.d[h.k]) + h.j.b + h.e.a;
            if (k > j && d > j) {
              j = Ixb(c.n[h.k]) + Ixb(c.d[h.k]) + h.j.b + h.e.a;
            } else {
              e = false;
              a.a && (Fmb(), Emb);
              break;
            }
          }
          if (!e) {
            break;
          }
        }
        a.a && (Fmb(), Emb);
        return e;
      }
      function Jv(a) {
        var b, c, d, e, f, g, h, i;
        if (isNaN(a)) {
          return Rv(), Qv;
        }
        if (a < -9223372036854776e3) {
          return Rv(), Pv;
        }
        if (a >= 9223372036854776e3) {
          return Rv(), Ov;
        }
        e = false;
        if (a < 0) {
          e = true;
          a = -a;
        }
        d = 0;
        if (a >= dzb) {
          d = hw(a / dzb);
          a -= d * dzb;
        }
        c = 0;
        if (a >= czb) {
          c = hw(a / czb);
          a -= c * czb;
        }
        b = hw(a);
        f = Ev(b, c, d);
        e && (g = ~f.l + 1 & azb, h = ~f.m + (g == 0 ? 1 : 0) & azb, i = ~f.h + (g == 0 && h == 0 ? 1 : 0) & bzb, f.l = g, f.m = h, f.h = i, void 0);
        return f;
      }
      function JO(a) {
        var b, c, d, e, f, g, h;
        e = DW(a);
        if (Qob(new Tob(e))) {
          h = new VN(0, 0, a.e.j.a, a.e.j.b);
          for (c = new Tob(e); c.a < c.c.c.length; ) {
            b = Wv(Rob(c), 129);
            d = new VN(b.e.i.a, b.e.i.b, b.e.j.a, b.e.j.b);
            TN(h, d);
          }
          g = new FP((f = Wv(a.e, 7).d, new EP(f.d, f.b, f.a, f.c)));
          g.d = -h.e;
          g.a = h.e + h.b - a.e.j.b;
          g.b = -h.d;
          g.c = h.d + h.c - a.e.j.a;
          Wv(a.e, 7).d.b = g.b;
          Wv(a.e, 7).d.d = g.d;
          Wv(a.e, 7).d.c = g.c;
          Wv(a.e, 7).d.a = g.a;
        }
      }
      function Y0(a) {
        var b, c, d, e, f;
        for (f = new Tob(a.f); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 7);
          for (d = new Tob(e.e); d.a < d.c.c.length; ) {
            c = Wv(Rob(d), 12);
            if (gw(rJ(c.d.f, (Mjb(), vjb))) !== gw((Xib(), Vib))) {
              throw new $J((b = lX(a), nAb + (b == null ? Dlb(a.k) : b) + "' has its layer constraint set to LAST or LAST_SEPARATE, but has at least one outgoing edge. Connections between nodes with these " + qAb));
            }
          }
        }
      }
      function Rfb(a, b, c, d) {
        var e, f, g, h, i, j;
        for (f = new Tob(a); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 12);
          g = e.c;
          if (b.a.R(g)) {
            h = (fgb(), dgb);
          } else if (c.a.R(g)) {
            h = (fgb(), egb);
          } else {
            throw new slb("Source port must be in one of the port sets.");
          }
          i = e.d;
          if (b.a.R(i)) {
            j = (fgb(), dgb);
          } else if (c.a.R(i)) {
            j = (fgb(), egb);
          } else {
            throw new slb("Target port must be in one of the port sets.");
          }
          vU(d, new lgb(e, h, j));
        }
      }
      function bQ(a, b) {
        var c, d, e, f, g, h;
        if ("edges" in b.a) {
          h = Pu(b, "edges");
          if (!h.hc()) {
            throw new GQ("The 'edges' property of a node has to be an array.", h, b);
          }
          f = h.hc();
          for (g = 0; g < f.a.length; ++g) {
            e = gu(f, g);
            if (!e.kc()) {
              throw new GQ("All elements of the 'edges' property must be objects.", e, b);
            }
            aQ(a, e.kc());
          }
        }
        if (Mzb in b.a) {
          d = Pu(b, Mzb).hc();
          for (g = 0; g < d.a.length; ++g) {
            c = gu(d, g).kc();
            bQ(a, c);
          }
        }
      }
      function fS(a) {
        var b, c, d, e, f, g, h, i;
        for (d = new Tob(a.a.a); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 78);
          c.g = null;
          for (g = (i = new Snb(c.a.a).a.bb().mb(), new Ynb(i)); g.a.G(); ) {
            e = (b = Wv(g.a.H(), 21), Wv(b.yb(), 25));
            BI(e.g);
            (!c.g || e.j.d < c.g.j.d) && (c.g = e);
          }
          for (f = (h = new Snb(c.a.a).a.bb().mb(), new Ynb(h)); f.a.G(); ) {
            e = (b = Wv(f.a.H(), 21), Wv(b.yb(), 25));
            e.g.a = e.j.d - c.g.j.d;
            e.g.b = e.j.e - c.g.j.e;
          }
        }
        return a;
      }
      function Nab(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2;
        c = false;
        n = $yb * a.b.f * a.b.d;
        for (e = new Tob(b.c); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 16);
          j = new Tob(d.a);
          f = Wv(Rob(j), 9);
          k = Uab(a.a[f.k]);
          while (j.a < j.c.c.length) {
            h = Wv(Rob(j), 9);
            l = Uab(a.a[h.k]);
            if (k != l) {
              m = Xjb(a.b, f, h);
              g = f.i.b + f.j.b + f.e.a + k.a + m;
              i = h.i.b - h.e.d + l.a;
              if (g > i + n) {
                o2 = k.i + l.i;
                l.a = (l.i * l.a + k.i * k.a) / o2;
                l.i = o2;
                k.g = l;
                c = true;
              }
            }
            f = h;
            k = l;
          }
        }
        return c;
      }
      function XY(a) {
        var b, c, d, e, f, g;
        if (gw(rJ(a, (eM(), TL))) === gw((KM(), GM)) || gw(rJ(a, TL)) === gw(FM)) {
          for (g = new Tob(a.f); g.a < g.c.c.length; ) {
            f = Wv(Rob(g), 7);
            if (f.g == (sN(), $M) || f.g == pN) {
              return false;
            }
          }
        }
        if (MM(Wv(rJ(a, TL), 28))) {
          for (e = nX(a, (sN(), ZM)).mb(); e.G(); ) {
            d = Wv(e.H(), 7);
            if (d.b.c.length != 0) {
              return false;
            }
          }
        }
        for (c = Uh(mX(a)); Cm(c); ) {
          b = Wv(Dm(c), 12);
          if (b.c.f == b.d.f) {
            return false;
          }
        }
        return true;
      }
      function KW(a, b) {
        var c, d, e, f, g, h, i, j, k;
        e = a.f;
        g = e.j.a;
        f = e.j.b;
        if (g <= 0 && f <= 0) {
          return sN(), qN;
        }
        j = a.i.a;
        k = a.i.b;
        h = a.j.a;
        c = a.j.b;
        switch (b.e) {
          case 2:
          case 1:
            if (j < 0) {
              return sN(), rN;
            } else if (j + h > g) {
              return sN(), ZM;
            }
            break;
          case 4:
          case 3:
            if (k < 0) {
              return sN(), $M;
            } else if (k + c > f) {
              return sN(), pN;
            }
        }
        i = (j + h / 2) / g;
        d = (k + c / 2) / f;
        return i + d <= 1 && i - d <= 0 ? (sN(), rN) : i + d >= 1 && i - d >= 0 ? (sN(), ZM) : d < 0.5 ? (sN(), $M) : (sN(), pN);
      }
      function pP(a, b, c, d, e, f, g) {
        var h, i, j, k, l, m;
        m = new UN();
        for (j = b.mb(); j.G(); ) {
          h = Wv(j.H(), 627);
          for (l = new Tob(sW(h)); l.a < l.c.c.length; ) {
            k = Wv(Rob(l), 129);
            if (gw(oW(k, (eM(), tL))) === gw((EK(), CK))) {
              nP(m, k, false, d, e, f, g);
              TN(a, m);
            }
          }
        }
        for (i = c.mb(); i.G(); ) {
          h = Wv(i.H(), 627);
          for (l = new Tob(sW(h)); l.a < l.c.c.length; ) {
            k = Wv(Rob(l), 129);
            if (gw(oW(k, (eM(), tL))) === gw((EK(), BK))) {
              nP(m, k, true, d, e, f, g);
              TN(a, m);
            }
          }
        }
      }
      function f8(a, b) {
        var c, d, e, f, g, h, i, j;
        for (i = new Tob(b.f); i.a < i.c.c.length; ) {
          h = Wv(Rob(i), 7);
          for (e = Uh(Sh((Gi(), new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [h.b, h.e])))))); Cm(e); ) {
            d = Wv(Dm(e), 12);
            c = d.c == h ? d.d : d.c;
            f = c.f;
            if (b == f) {
              continue;
            }
            j = Wv(rJ(d, (Rib(), Eib)), 24).a;
            j < 0 && (j = 0);
            g = f.k;
            if (a.b[g] == 0) {
              if (d.d == c) {
                a.a[g] -= j + 1;
                a.a[g] <= 0 && a.c[g] > 0 && QI(a.e, f);
              } else {
                a.c[g] -= j + 1;
                a.c[g] <= 0 && a.a[g] > 0 && QI(a.d, f);
              }
            }
          }
        }
      }
      function tcb(a, b) {
        var c, d, e, f, g, h, i, j, k;
        for (g = new Tob(b.c); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 16);
          for (j = new Tob(f.a); j.a < j.c.c.length; ) {
            i = Wv(Rob(j), 9);
            k = new GU();
            h = 0;
            for (e = Uh(iX(i)); Cm(e); ) {
              c = Wv(Dm(e), 12);
              Wv(rJ(c, (Rib(), Eib)), 24).a > h && (h = Wv(rJ(c, Eib), 24).a);
            }
            for (d = Uh(iX(i)); Cm(d); ) {
              c = Wv(Dm(d), 12);
              i.d != c.c.f.d && Wv(rJ(c, (Rib(), Eib)), 24).a == h && vU(k, new RJ(c.c.f, c));
            }
            Gpb(k, a.c);
            uU(a.b, i.k, k);
          }
        }
      }
      function ucb(a, b) {
        var c, d, e, f, g, h, i, j, k;
        for (g = new Tob(b.c); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 16);
          for (j = new Tob(f.a); j.a < j.c.c.length; ) {
            i = Wv(Rob(j), 9);
            k = new GU();
            h = 0;
            for (e = Uh(mX(i)); Cm(e); ) {
              c = Wv(Dm(e), 12);
              Wv(rJ(c, (Rib(), Eib)), 24).a > h && (h = Wv(rJ(c, Eib), 24).a);
            }
            for (d = Uh(mX(i)); Cm(d); ) {
              c = Wv(Dm(d), 12);
              i.d != c.d.f.d && Wv(rJ(c, (Rib(), Eib)), 24).a == h && vU(k, new RJ(c.d.f, c));
            }
            Gpb(k, a.c);
            uU(a.f, i.k, k);
          }
        }
      }
      function g3(a) {
        b3();
        var b, c, d, e, f, g, h, i, j, k;
        this.b = new i3();
        this.c = new GU();
        this.a = new GU();
        for (i = Seb(), j = 0, k = i.length; j < k; ++j) {
          h = i[j];
          ssb(a3, h, new GU());
        }
        for (c = a.mb(); c.G(); ) {
          b = Wv(c.H(), 75);
          xU(this.a, Zdb(b));
          b.g.a.Y() == 0 ? Wv(qsb(a3, b.e), 20).ib(b) : vU(this.c, b);
        }
        for (f = (g = new aob(a3).a.bb().mb(), new fob(g)); f.a.G(); ) {
          e = (d = Wv(f.a.H(), 21), Wv(d.zb(), 20));
          Gpb(e, this.b);
        }
        Dpb(Wv(qsb(a3, (Ieb(), neb)), 20));
      }
      function E$(a, b) {
        var c, d, e, f, g, h, i;
        i = Wv(rJ(b, (eM(), TL)), 28);
        if (!(i == (KM(), GM) || i == FM)) {
          return;
        }
        f = (c = Wv(rJ(b, (Rib(), Xhb)), 15).a, new HI(b.e.a + b.a.b + b.a.c + 2 * c, b.e.b + b.a.d + b.a.a + 2 * c)).b;
        for (h = new Tob(a.a); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 9);
          if (g.g != (CX(), xX)) {
            continue;
          }
          d = Wv(rJ(g, hib), 32);
          if (d != (sN(), ZM) && d != rN) {
            continue;
          }
          e = Ixb(Yv(rJ(g, Cib)));
          i == GM && (e *= f);
          g.i.b = e - Wv(rJ(g, SL), 10).b;
          fX(g, false, true);
        }
      }
      function fZ(a, b) {
        var c, d, e, f, g, h, i, j;
        c = new uX(a.d.c);
        sX(c, (CX(), wX));
        sJ(c, (eM(), TL), Wv(rJ(b, TL), 28));
        sJ(c, JL, Wv(rJ(b, JL), 86));
        c.k = a.d.b++;
        vU(a.b, c);
        c.j.b = b.j.b;
        c.j.a = 0;
        j = (sN(), ZM);
        f = Ao(nX(b, j));
        for (i = new Tob(f); i.a < i.c.c.length; ) {
          h = Wv(Rob(i), 7);
          PX(h, c);
        }
        g = new RX();
        QX(g, j);
        PX(g, b);
        g.i.a = c.j.a;
        g.i.b = c.j.b / 2;
        e = new RX();
        QX(e, tN(j));
        PX(e, c);
        e.i.b = c.j.b / 2;
        e.i.a = -e.j.a;
        d = new hW();
        dW(d, g);
        eW(d, e);
        return c;
      }
      function m3(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m, n, o2;
        i = new Dh();
        Np(a, i);
        e = new deb(b);
        n = new GU();
        vU(n, (o2 = a.j, Wv(um(dq(!o2 ? a.j = new eq(a) : o2)), 7)));
        m = new GU();
        while (n.c.length != 0) {
          h = Wv(Rob(new Tob(n)), 7);
          m.c[m.c.length] = h;
          d = Sm(a, h);
          for (g = new Nqb(d.b.mb()); g.b.G(); ) {
            f = Wv(g.b.H(), 12);
            if (beb(e, f, c)) {
              l = Wv(Gd(i, f), 20);
              for (k = l.mb(); k.G(); ) {
                j = Wv(k.H(), 7);
                zU(m, j, 0) != -1 || (n.c[n.c.length] = j, true);
              }
            }
          }
          BU(n, h);
        }
        return e;
      }
      function fmb(a, b) {
        var c, d, e, f, g, h, i;
        c = RegExp(b, "g");
        h = xv($F, Txb, 2, 0, 5, 1);
        d = 0;
        i = a;
        f = null;
        while (true) {
          g = c.exec(i);
          if (g == null || i == "") {
            h[d] = i;
            break;
          } else {
            h[d] = gmb(i, 0, g.index);
            i = gmb(i, g.index + g[0].length, (bmb(), i.length));
            c.lastIndex = 0;
            if (f == i) {
              h[d] = i.substr(0, 1);
              i = imb(i, 1, i.length - 1);
            }
            f = i;
            ++d;
          }
        }
        if ((bmb(), a.length) > 0) {
          e = h.length;
          while (e > 0 && h[e - 1] == "") {
            --e;
          }
          e < h.length && (h.length = e, void 0);
        }
        return h;
      }
      function NO(a) {
        var b, c, d, e, f, g;
        for (g = new Tob(AW(a.e)); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 161);
          switch (Wv(f.e, 7).g.e) {
            case 4:
              a.q.b = Nlb(a.q.b, (c = Wv(f.e, 7).d, new EP(c.d, c.b, c.a, c.c)).c);
              break;
            case 2:
              a.q.c = Nlb(a.q.c, (d = Wv(f.e, 7).d, new EP(d.d, d.b, d.a, d.c)).b);
              break;
            case 1:
              a.q.d = Nlb(a.q.d, (e = Wv(f.e, 7).d, new EP(e.d, e.b, e.a, e.c)).a);
              break;
            case 3:
              a.q.a = Nlb(a.q.a, (b = Wv(f.e, 7).d, new EP(b.d, b.b, b.a, b.c)).d);
          }
        }
      }
      function Ns(a, b, c, d, e) {
        var f, g, h;
        f = b.$b(c, a.b);
        if (f < 0) {
          g = a.e;
          if (!g) {
            e[0] = 0;
            return d > 0 ? As(a, c, d) : a;
          }
          a.e = Ns(g, b, c, d, e);
          d == 0 && e[0] != 0 ? --a.a : d > 0 && e[0] == 0 && ++a.a;
          a.j = PH(a.j, d - e[0]);
          return Gs(a);
        } else if (f > 0) {
          h = a.g;
          if (!h) {
            e[0] = 0;
            return d > 0 ? Bs(a, c, d) : a;
          }
          a.g = Ns(h, b, c, d, e);
          d == 0 && e[0] != 0 ? --a.a : d > 0 && e[0] == 0 && ++a.a;
          a.j = PH(a.j, d - e[0]);
          return Gs(a);
        }
        e[0] = a.c;
        if (d == 0) {
          return Fs(a);
        }
        a.j = PH(a.j, d - a.c);
        a.c = d;
        return a;
      }
      function Q7(a) {
        var b, c, d, e, f, g, h;
        a.o = new Uvb();
        d = new aJ();
        for (g = new Tob(a.e.a); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 61);
          m7(f).c.length == 1 && (TI(d, f, d.c.b, d.c), true);
        }
        while (d.b != 0) {
          f = Wv(d.b == 0 ? null : (Bxb(d.b != 0), $I(d, d.a.a)), 61);
          if (m7(f).c.length == 0) {
            continue;
          }
          b = Wv(yU(m7(f), 0), 89);
          c = f.g.c.length > 0;
          h = c7(b, f);
          c ? p7(h.c, b) : p7(h.g, b);
          m7(h).c.length == 1 && (TI(d, h, d.c.b, d.c), true);
          e = new RJ(f, b);
          Tvb(a.o, e);
          BU(a.e.a, f);
        }
      }
      function Hs(a, b, c, d, e) {
        var f, g, h;
        f = b.$b(c, a.b);
        if (f < 0) {
          g = a.e;
          if (!g) {
            e[0] = 0;
            return a;
          }
          a.e = Hs(g, b, c, d, e);
          if (e[0] > 0) {
            if (d >= e[0]) {
              --a.a;
              a.j = XH(a.j, e[0]);
            } else {
              a.j = XH(a.j, d);
            }
          }
          return e[0] == 0 ? a : Gs(a);
        } else if (f > 0) {
          h = a.g;
          if (!h) {
            e[0] = 0;
            return a;
          }
          a.g = Hs(h, b, c, d, e);
          if (e[0] > 0) {
            if (d >= e[0]) {
              --a.a;
              a.j = XH(a.j, e[0]);
            } else {
              a.j = XH(a.j, d);
            }
          }
          return Gs(a);
        }
        e[0] = a.c;
        if (d >= a.c) {
          return Fs(a);
        } else {
          a.c -= d;
          a.j = XH(a.j, d);
          return a;
        }
      }
      function BQ(a, b, c) {
        var d, e, f, g, h, i, j, k;
        for (i = new Tob(c.b); i.a < i.c.c.length; ) {
          h = Wv(Rob(i), 9);
          g = Wv(rJ(h, (Rib(), sib)), 55);
          if (g) {
            k = BQ(a, b, g);
            h.j.a = (f = Wv(rJ(k, Xhb), 15).a, new HI(k.e.a + k.a.b + k.a.c + 2 * f, k.e.b + k.a.d + k.a.a + 2 * f)).a;
            h.j.b = (e = Wv(rJ(k, Xhb), 15).a, new HI(k.e.a + k.a.b + k.a.c + 2 * e, k.e.b + k.a.d + k.a.a + 2 * e)).b;
          }
        }
        j = new sI();
        d = $v(rJ(c, (eM(), kL)));
        d != null && emb(d, "de.cau.cs.kieler.fixed") ? JP(c, j) : ZQ(b, c, j);
        return c;
      }
      function bR(a) {
        var b, c, d, e, f, g, h, i;
        h = Wv(rJ(a, (eM(), aM)), 18);
        i = Wv(rJ(a, bM), 18);
        d = Wv(rJ(a, (Rib(), Xhb)), 15).a;
        a.d.a += d;
        a.d.b += d;
        a.e.a += 2 * d;
        a.e.b += 2 * d;
        sJ(a, Xhb, new llb(0));
        e = (c = Wv(rJ(a, Xhb), 15).a, new HI(a.e.a + a.a.b + a.a.c + 2 * c, a.e.b + a.a.d + a.a.a + 2 * c));
        b = new II(e);
        if (h.kb((DN(), zN))) {
          g = Wv(rJ(a, IL), 15).a;
          f = Wv(rJ(a, HL), 15).a;
          if (i.kb((MN(), KN))) {
            g <= 0 && (g = 20);
            f <= 0 && (f = 20);
          }
          b.a = Nlb(e.a, g);
          b.b = Nlb(e.b, f);
        }
        cR(a, e, b);
      }
      function rV(a, b, c) {
        var d, e, f, g, h, i, j, k;
        if (b.k == 0) {
          b.k = 1;
          g = c;
          if (!c) {
            e = new GU();
            f = (d = Wv(Hkb(Kz), 11), new atb(d, Wv(exb(d, d.length), 11), 0));
            g = new RJ(e, f);
          }
          Wv(g.a, 20).ib(b);
          b.g == (CX(), xX) && Wv(g.b, 18).ib(Wv(rJ(b, (Rib(), hib)), 32));
          for (i = new Tob(b.f); i.a < i.c.c.length; ) {
            h = Wv(Rob(i), 7);
            for (k = Uh(Sh((Gi(), new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [new fY(h), new lY(h)])))))); Cm(k); ) {
              j = Wv(Dm(k), 7);
              rV(a, j.f, g);
            }
          }
          return g;
        }
        return null;
      }
      function QW(a, b, c, d) {
        var e, f, g, h, i;
        i = new II(b.i);
        i.a += b.j.a / 2;
        i.b += b.j.b / 2;
        h = Wv(rJ(b, (Rib(), tib)), 15).a;
        f = a.e;
        g = a.a;
        e = a.d;
        switch (Wv(rJ(b, hib), 32).e) {
          case 1:
            i.a += g.b + e.a - c / 2;
            i.b = -d - h;
            b.i.b = -(g.d + h + e.b);
            break;
          case 2:
            i.a = f.a + g.b + g.c + h;
            i.b += g.d + e.b - d / 2;
            b.i.a = f.a + g.c + h - e.a;
            break;
          case 3:
            i.a += g.b + e.a - c / 2;
            i.b = f.b + g.d + g.a + h;
            b.i.b = f.b + g.a + h - e.b;
            break;
          case 4:
            i.a = -c - h;
            i.b += g.d + e.b - d / 2;
            b.i.a = -(g.b + h + e.a);
        }
        return i;
      }
      function $Q(a, b) {
        var c, d, e, f, g, h, i;
        for (f = new Tob(b.b); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 9);
          g = rJ(e, (Rib(), uib));
          if (aw(g, 7)) {
            h = Wv(g, 7);
            i = QW(b, e, h.j.a, h.j.b);
            h.i.a = i.a;
            h.i.b = i.b;
            QX(h, Wv(rJ(e, hib), 32));
          }
        }
        c = (d = Wv(rJ(b, (Rib(), Xhb)), 15).a, new HI(b.e.a + b.a.b + b.a.c + 2 * d, b.e.b + b.a.d + b.a.a + 2 * d));
        if (Wv(rJ(b, jib), 18).kb((ohb(), hhb))) {
          sJ(a, (eM(), TL), (KM(), FM));
          Wv(rJ(hX(a), jib), 18).ib(khb);
          WW(a, c, false);
        } else {
          WW(a, c, true);
        }
      }
      function VW(a, b, c) {
        var d, e, f, g, h;
        h = null;
        switch (b.e) {
          case 1:
            for (e = new Tob(a.f); e.a < e.c.c.length; ) {
              d = Wv(Rob(e), 7);
              if (Ckb(Ixb(Xv(rJ(d, (Rib(), kib)))))) {
                return d;
              }
            }
            h = new RX();
            sJ(h, (Rib(), kib), (xkb(), xkb(), wkb));
            break;
          case 2:
            for (g = new Tob(a.f); g.a < g.c.c.length; ) {
              f = Wv(Rob(g), 7);
              if (Ckb(Ixb(Xv(rJ(f, (Rib(), yib)))))) {
                return f;
              }
            }
            h = new RX();
            sJ(h, (Rib(), yib), (xkb(), xkb(), wkb));
        }
        if (h) {
          PX(h, a);
          QX(h, c);
          LW(h.i, a.j, c);
        }
        return h;
      }
      function pk(a, b) {
        var c, d, e, f, g, h, i;
        _b(b);
        Xb(a.a.t(b.a));
        d = a.b;
        f = a.e;
        g = a.d;
        if (a.b) {
          if (b.b) {
            c = a.a.$b(a.e, b.e);
            if (c < 0 || c == 0 && b.d == (Gh(), Fh)) {
              f = b.e;
              g = b.d;
            }
          }
        } else {
          d = b.b;
          f = b.e;
          g = b.d;
        }
        e = a.c;
        h = a.g;
        i = a.f;
        if (a.c) {
          if (b.c) {
            c = a.a.$b(a.g, b.g);
            if (c > 0 || c == 0 && b.f == (Gh(), Fh)) {
              h = b.g;
              i = b.f;
            }
          }
        } else {
          e = b.c;
          h = b.g;
          i = b.f;
        }
        if (d && e) {
          c = a.a.$b(f, h);
          if (c > 0 || c == 0 && g == (Gh(), Fh) && i == (Gh(), Fh)) {
            f = h;
            g = (Gh(), Fh);
            i = Eh;
          }
        }
        return new sk(a.a, d, f, g, e, h, i);
      }
      function h0(a, b, c, d) {
        var e, f, g, h, i, j, k;
        if (c.c.f == b.f) {
          return;
        }
        e = new uX(a);
        sX(e, (CX(), zX));
        sJ(e, (Rib(), uib), c);
        sJ(e, (eM(), TL), (KM(), FM));
        d.c[d.c.length] = e;
        g = new RX();
        PX(g, e);
        QX(g, (sN(), rN));
        h = new RX();
        PX(h, e);
        QX(h, ZM);
        eW(c, g);
        f = new hW();
        qJ(f, c);
        sJ(f, CL, null);
        dW(f, h);
        eW(f, b);
        j0(e, g, h);
        j = new Fnb(c.b, 0);
        while (j.b < j.d.Y()) {
          i = (Bxb(j.b < j.d.Y()), Wv(j.d.sb(j.c = j.b++), 33));
          k = Wv(rJ(i, tL), 107);
          if (k == (EK(), BK)) {
            vnb(j);
            vU(f.b, i);
          }
        }
      }
      function Pfb(a, b, c, d) {
        var e, f, g, h, i, j, k, l, m, n, o2, p, q;
        f = c + (b.n + 1) * a.a;
        g = b.b;
        e = new HI(f, g);
        for (i = (k = new Snb(b.c.a).a.bb().mb(), new Ynb(k)); i.a.G(); ) {
          h = (j = Wv(i.a.H(), 21), Wv(j.yb(), 12));
          o2 = MX(h.d);
          l = MX(h.c);
          n = new HI(f, l.b);
          q = new HI(f, o2.b);
          m = new HI(c - 10, l.b);
          p = new HI(d, o2.b);
          o2.a >= d && l.a >= d && (m.a = d);
          o2.a <= c && l.a <= c && (p.a = c - 10);
          b.c.a.Y() == 1 ? fJ(h.a, Bv(tv(qz, 1), Fzb, 10, 0, [m, n, q, p])) : fJ(h.a, Bv(tv(qz, 1), Fzb, 10, 0, [m, n, e, q, p]));
        }
      }
      function cW(a, b) {
        var c, d, e, f, g, h;
        f = a.c;
        g = a.d;
        dW(a, null);
        eW(a, null);
        b && Ckb(Ixb(Xv(rJ(g, (Rib(), kib))))) ? dW(a, VW(g.f, (djb(), bjb), (sN(), ZM))) : dW(a, g);
        b && Ckb(Ixb(Xv(rJ(f, (Rib(), yib))))) ? eW(a, VW(f.f, (djb(), ajb), (sN(), rN))) : eW(a, f);
        for (d = new Tob(a.b); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 33);
          e = Wv(rJ(c, (eM(), tL)), 107);
          e == (EK(), CK) ? sJ(c, tL, BK) : e == BK && sJ(c, tL, CK);
        }
        h = Ckb(Ixb(Xv(rJ(a, (Rib(), Iib)))));
        sJ(a, Iib, (xkb(), h ? vkb : wkb));
        a.a = lJ(a.a);
      }
      function efb(a) {
        var b, c, d, e, f, g;
        Teb(this);
        for (c = a.Y() - 1; c < 3; c++) {
          a.rb(0, Wv(a.sb(0), 10));
        }
        if (a.Y() < 4) {
          throw new slb("At (least dimension + 1) control points are necessary!");
        } else {
          this.c = 3;
          this.e = true;
          this.f = true;
          this.d = false;
          Ueb(this, a.Y() + this.c - 1);
          g = new GU();
          f = this.g.mb();
          for (b = 0; b < this.c - 1; b++) {
            vU(g, Yv(f.H()));
          }
          for (e = a.mb(); e.G(); ) {
            d = Wv(e.H(), 10);
            vU(g, Yv(f.H()));
            this.b.ib(new sfb(d, g));
            Cxb(0, g.c.length);
            g.c.splice(0, 1);
          }
        }
      }
      function scb(a) {
        var b, c, d, e, f, g, h, i, j, k, l;
        l = new rcb();
        l.d = 0;
        for (g = new Tob(a.c); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 16);
          l.d += f.a.c.length;
        }
        d = 0;
        e = 0;
        l.a = xv(mw, Yyb, 26, a.c.c.length, 12, 1);
        j = 0;
        l.e = xv(mw, Yyb, 26, l.d, 12, 1);
        for (c = new Tob(a.c); c.a < c.c.c.length; ) {
          b = Wv(Rob(c), 16);
          b.k = d++;
          l.a[b.k] = e++;
          k = 0;
          for (i = new Tob(b.a); i.a < i.c.c.length; ) {
            h = Wv(Rob(i), 9);
            h.k = j++;
            l.e[h.k] = k++;
          }
        }
        l.c = new wcb(l);
        l.b = Do(l.d);
        tcb(l, a);
        l.f = Do(l.d);
        ucb(l, a);
        return l;
      }
      function Lab(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p;
        h = xv(mw, Yyb, 26, b.c.c.length, 12, 1);
        j = xv(pB, uyb, 132, b.c.c.length, 0, 1);
        for (l = a.a, m = 0, n = l.length; m < n; ++m) {
          k = l[m];
          p = 0;
          for (g = new Tob(k.f); g.a < g.c.c.length; ) {
            e = Wv(Rob(g), 9);
            i = e.g;
            d = rY(e.d);
            ++h[d];
            o2 = a.b.a * a.b.d;
            h[d] > 0 && !!j[d] && (o2 = Wjb(a.b, j[d], i));
            p = Nlb(p, e.d.c.b + o2);
          }
          for (f = new Tob(k.f); f.a < f.c.c.length; ) {
            e = Wv(Rob(f), 9);
            e.i.b = p + e.e.d;
            c = e.d;
            c.c.b = p + e.e.d + e.j.b + e.e.a;
            j[zU(c.b.c, c, 0)] = e.g;
          }
        }
      }
      function n$(a) {
        var b, c, d, e, f, g, h, i, j, k;
        for (i = new Tob(a.a); i.a < i.c.c.length; ) {
          h = Wv(Rob(i), 9);
          if (h.g != (CX(), xX)) {
            continue;
          }
          e = Wv(rJ(h, (Rib(), hib)), 32);
          if (e == (sN(), ZM) || e == rN) {
            for (d = Uh(gX(h)); Cm(d); ) {
              c = Wv(Dm(d), 12);
              b = c.a;
              if (b.b == 0) {
                continue;
              }
              j = c.c;
              if (j.f == h) {
                f = (Bxb(b.b != 0), Wv(b.a.a.c, 10));
                f.b = MI(Bv(tv(qz, 1), Fzb, 10, 0, [j.f.i, j.i, j.a])).b;
              }
              k = c.d;
              if (k.f == h) {
                g = (Bxb(b.b != 0), Wv(b.c.b.c, 10));
                g.b = MI(Bv(tv(qz, 1), Fzb, 10, 0, [k.f.i, k.i, k.a])).b;
              }
            }
          }
        }
      }
      function U9(a, b, c, d) {
        var e, f, g, h, i, j;
        g = new _9(a, b, c);
        i = new Fnb(d, 0);
        e = false;
        while (i.b < i.d.Y()) {
          h = (Bxb(i.b < i.d.Y()), Wv(i.d.sb(i.c = i.b++), 102));
          if (h == b || h == c) {
            vnb(i);
          } else if (!e && Ixb(W9(h.g, h.d[0]).a) > Ixb(W9(g.g, g.d[0]).a)) {
            Bxb(i.b > 0);
            i.a.sb(i.c = --i.b);
            Anb(i, g);
            e = true;
          } else if (!!h.e && h.e.Y() > 0) {
            f = (!h.e && (h.e = new GU()), h.e).nb(b);
            j = (!h.e && (h.e = new GU()), h.e).nb(c);
            if (f || j) {
              (!h.e && (h.e = new GU()), h.e).ib(g);
              ++g.c;
            }
          }
        }
        e || (d.c[d.c.length] = g, true);
      }
      function s2(a, b, c, d) {
        var e, f, g, h, i, j, k, l, m, n, o2;
        if (c.d.f == b.f) {
          return;
        }
        e = new uX(a);
        sX(e, (CX(), zX));
        sJ(e, (Rib(), uib), c);
        sJ(e, (eM(), TL), (KM(), FM));
        d.c[d.c.length] = e;
        g = new RX();
        PX(g, e);
        QX(g, (sN(), rN));
        h = new RX();
        PX(h, e);
        QX(h, ZM);
        i = c.d;
        eW(c, g);
        f = new hW();
        qJ(f, c);
        sJ(f, CL, null);
        dW(f, h);
        eW(f, i);
        j = Wv(yU(g.b, 0), 12).c;
        k = j.f;
        l = k.g;
        m = Wv(yU(h.e, 0), 12).d;
        n = m.f;
        o2 = n.g;
        l == zX ? sJ(e, qib, Wv(rJ(k, qib), 7)) : sJ(e, qib, j);
        o2 == zX ? sJ(e, rib, Wv(rJ(n, rib), 7)) : sJ(e, rib, m);
      }
      function $6(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r;
        if (h = a.b[b], i = a.b[c], (j = Wv(rJ(h, (Rib(), oib)), 20), !!j && j.Y() != 0 && j.kb(i)) || (k = h.g != (CX(), zX) && i.g != zX, l = Wv(rJ(h, nib), 9), m = Wv(rJ(i, nib), 9), n = !!l && l != h || !!m && m != i, o2 = l != m, p = _6(h, (sN(), $M)), q = _6(i, pN), r = n && o2 || p || q, k && r) || h.g == (CX(), BX) && i.g == AX || i.g == (CX(), BX) && h.g == AX) {
          return false;
        }
        g = a.b[b];
        d = a.b[c];
        m6(a.c, g, d);
        G6(a.d, g, d);
        f = M5(a.a, g, d) + a.c.d + a.d.d;
        e = M5(a.a, d, g) + a.c.b + a.d.b;
        return f > e;
      }
      function v2(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p;
        g = b;
        m = b.d;
        k = b.c.f;
        n = b.d.f;
        l = rY(k.d);
        o2 = rY(n.d);
        for (h = l; h < o2; h++) {
          e = new uX(a);
          sX(e, (CX(), zX));
          sJ(e, (Rib(), uib), g);
          sJ(e, (eM(), TL), (KM(), FM));
          i = Wv(yU(a.c, h + 1), 16);
          rX(e, i);
          p = Wv(rJ(g, dM), 15).a;
          if (p < 0) {
            p = 0;
            sJ(g, dM, new llb(p));
          }
          e.j.b = p;
          j = Math.floor(p / 2);
          d = new RX();
          QX(d, (sN(), rN));
          PX(d, e);
          d.i.b = j;
          f = new RX();
          QX(f, ZM);
          PX(f, e);
          f.i.b = j;
          eW(g, d);
          c = new hW();
          qJ(c, g);
          sJ(c, CL, null);
          dW(c, f);
          eW(c, m);
          w2(e, g, c);
          g = c;
        }
      }
      function Qeb(a, b) {
        Ieb();
        if (a == b) {
          return Reb(a);
        }
        switch (a.e) {
          case 1:
            switch (b.e) {
              case 4:
                return neb;
              case 1:
                return meb;
              case 2:
                return jeb;
              case 3:
                return qeb;
            }
          case 2:
            switch (b.e) {
              case 1:
                return jeb;
              case 2:
                return ieb;
              case 3:
                return peb;
              case 4:
                return keb;
            }
          case 3:
            switch (b.e) {
              case 2:
                return peb;
              case 3:
                return oeb;
              case 4:
                return Heb;
              case 1:
                return qeb;
            }
          case 4:
            switch (b.e) {
              case 3:
                return Heb;
              case 4:
                return Geb;
              case 1:
                return neb;
              case 2:
                return keb;
            }
        }
        return Feb;
      }
      function s$(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o2, p;
        l = new Wub();
        e = null;
        for (g = new Tob(a.c); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 16);
          for (i = new Tob(f.a); i.a < i.c.c.length; ) {
            h = Wv(Rob(i), 9);
            if (h.g != (CX(), xX)) {
              continue;
            }
            k = Wv(rJ(h, (Rib(), gib)), 9);
            if (k) {
              r$(k, l);
              m = new RX();
              PX(m, h);
              n = Wv(rJ(h, hib), 32);
              QX(m, n);
              o2 = Wv(yU(k.f, 0), 7);
              p = new hW();
              dW(p, m);
              eW(p, o2);
            }
          }
          e = f;
        }
        for (c = (j = new Snb(l.a).a.bb().mb(), new Ynb(j)); c.a.G(); ) {
          b = (d = Wv(c.a.H(), 21), Wv(d.yb(), 9));
          rX(b, e);
        }
        return l;
      }
      function RV(a, b, c) {
        var d, e, f, g, h, i, j, k, l;
        e = new GU();
        for (j = new Tob(b.b); j.a < j.c.c.length; ) {
          i = Wv(Rob(j), 9);
          h = Wv(rJ(i, (Rib(), sib)), 55);
          if (h) {
            d = RV(a, h, i);
            xU(e, d);
            PV(a, h, i);
            if (Wv(rJ(h, jib), 18).kb((ohb(), hhb))) {
              for (l = new Tob(i.f); l.a < l.c.c.length; ) {
                k = Wv(Rob(l), 7);
                if (Smb(a.b, k) == null) {
                  f = NW(k, (KM(), IM), k.g, -(k.b.c.length - k.e.c.length), k.j, Wv(rJ(h, (eM(), sL)), 59), h);
                  sJ(f, uib, k);
                  Umb(a.b, k, f);
                  vU(h.b, f);
                }
              }
            }
          }
        }
        g = new GU();
        OV(a, b, c, e, g);
        !!c && QV(a, b, c, g);
        return g;
      }
      function Obb(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m;
        b = ecb(a);
        for (k = (h = new Snb(b).a.bb().mb(), new Ynb(h)); k.a.G(); ) {
          j = (e = Wv(k.a.H(), 21), Wv(e.yb(), 9));
          l = j.e.d;
          m = j.j.b + j.e.a;
          a.d[j.k] = 0;
          c = j;
          while ((f = a.a[c.k]) != j) {
            d = gcb(c, f);
            a.c == (Gbb(), Ebb) ? i = d.d.i.b + d.d.a.b - d.c.i.b - d.c.a.b : i = d.c.i.b + d.c.a.b - d.d.i.b - d.d.a.b;
            g = Ixb(a.d[c.k]) + i;
            a.d[f.k] = g;
            l = Nlb(l, f.e.d - g);
            m = Nlb(m, g + f.j.b + f.e.a);
            c = f;
          }
          c = j;
          do {
            a.d[c.k] = Ixb(a.d[c.k]) + l;
            c = a.a[c.k];
          } while (c != j);
          a.b[j.k] = l + m;
        }
      }
      function Gcb(a, b, c) {
        var d, e, f, g, h, i, j, k;
        d = a.a.k == (Lbb(), Kbb) ? Uzb : Vzb;
        h = Hcb(a, new Fcb(b, c));
        if (!h.a && h.c) {
          QI(a.d, h);
          return d;
        } else if (h.a) {
          e = h.a.c;
          i = h.a.d;
          if (c) {
            j = a.a.c == (Gbb(), Fbb) ? i : e;
            f = a.a.c == Fbb ? e : i;
            g = a.a.f[f.f.k];
            k = Ixb(a.a.n[g.k]) + Ixb(a.a.d[f.f.k]) + f.i.b + f.a.b - Ixb(a.a.d[j.f.k]) - j.i.b - j.a.b;
          } else {
            j = a.a.c == (Gbb(), Ebb) ? i : e;
            f = a.a.c == Ebb ? e : i;
            k = Ixb(a.a.n[a.a.f[f.f.k].k]) + Ixb(a.a.d[f.f.k]) + f.i.b + f.a.b - Ixb(a.a.d[j.f.k]) - j.i.b - j.a.b;
          }
          return k;
        }
        return d;
      }
      function FY(a) {
        var b, c, d, e, f;
        sJ(a.g, (Rib(), Thb), Eo(a.g.c));
        for (b = 1; b < a.c.c.length - 1; ++b) {
          sJ(Wv(yU(a.c, b), 9), (eM(), JL), (oM(), Vsb(jM, Bv(tv(Gz, 1), uyb, 41, 0, [mM, fM]))));
        }
        for (d = WI(Eo(a.g.c), 0); d.b != d.d.c; ) {
          c = Wv(_ub(d), 33);
          e = Wv(rJ(a.g, (eM(), JL)), 86);
          if (Xe(e, Vsb((oM(), kM), Bv(tv(Gz, 1), uyb, 41, 0, [gM, mM]))))
            ;
          else if (Xe(e, Vsb(kM, Bv(tv(Gz, 1), uyb, 41, 0, [iM, mM])))) {
            vU(a.e.c, c);
            BU(a.g.c, c);
            f = new MY(a, c);
            sJ(a.g, Uhb, f);
          } else {
            GY(a, c);
            vU(a.i, a.d);
            sJ(a.g, Uhb, EY(a.i));
          }
        }
      }
      function OW(a, b, c, d) {
        var e, f, g, h, i, j, k;
        f = PW(d);
        h = Ckb(Ixb(Xv(rJ(d, (Mjb(), xjb)))));
        if ((h || Ckb(Ixb(Xv(rJ(a, (eM(), AL)))))) && !MM(Wv(rJ(a, (eM(), TL)), 28))) {
          e = vN(f);
          i = VW(a, c, c == (djb(), bjb) ? e : tN(e));
        } else {
          i = new RX();
          PX(i, a);
          k = i.i;
          k.a = b.a - a.i.a;
          k.b = b.b - a.i.b;
          wI(k, a.j.a, a.j.b);
          QX(i, KW(i, f));
          g = Wv(rJ(d, (Rib(), jib)), 18);
          j = i.g;
          switch (f.e) {
            case 2:
            case 1:
              (j == (sN(), $M) || j == pN) && g.ib((ohb(), lhb));
              break;
            case 4:
            case 3:
              (j == (sN(), ZM) || j == rN) && g.ib((ohb(), lhb));
          }
        }
        return i;
      }
      function G2(a) {
        var b, c, d, e, f, g, h, i;
        d = Nl(Ao(a.a));
        e = (b = Wv(Hkb(_E), 11), new atb(b, Wv(exb(b, b.length), 11), 0));
        while (d.a.G() || d.b.mb().G()) {
          c = Wv(nm(d), 12);
          h = c.c.g;
          i = c.d.g;
          if (h == (sN(), qN)) {
            if (i != qN) {
              g = Reb(i);
              sJ(c, (Rib(), Mib), g);
              QX(c.c, i);
              Wsb(e, g);
              d.a.I();
            }
          } else {
            if (i == qN) {
              g = Reb(h);
              sJ(c, (Rib(), Mib), g);
              QX(c.d, h);
              Wsb(e, g);
              d.a.I();
            } else {
              g = Qeb(h, i);
              sJ(c, (Rib(), Mib), g);
              Wsb(e, g);
              d.a.I();
            }
          }
        }
        e.c == 1 ? f = Wv(itb(new jtb(e)), 60) : f = (Ieb(), Feb);
        aeb(a, f, false);
        return f;
      }
      function AI(b, c) {
        var d, e, f, g;
        f = 0;
        while (f < (bmb(), c.length) && LI(c.charCodeAt(f), fzb)) {
          ++f;
        }
        d = c.length;
        while (d > 0 && LI(c.charCodeAt(d - 1), gzb)) {
          --d;
        }
        if (f >= d) {
          throw new slb("The given string does not contain any numbers.");
        }
        g = fmb(c.substr(f, d - f), ",|;|\r|\n");
        if (g.length != 2) {
          throw new slb("Exactly two numbers are expected, " + g.length + " were found.");
        }
        try {
          b.a = clb(hmb(g[0]));
          b.b = clb(hmb(g[1]));
        } catch (a) {
          a = OH(a);
          if (aw(a, 130)) {
            e = a;
            throw new slb(hzb + e);
          } else
            throw NH(a);
        }
      }
      function Qdb(a, b, c) {
        var d, e, f, g, h, i, j, k, l;
        i = c + b.d.c.a;
        for (l = new Tob(b.f); l.a < l.c.c.length; ) {
          k = Wv(Rob(l), 7);
          d = MI(Bv(tv(qz, 1), Fzb, 10, 0, [k.f.i, k.i, k.a]));
          f = new HI(0, d.b);
          if (k.g == (sN(), ZM)) {
            f.a = i;
          } else if (k.g == rN) {
            f.a = c;
          } else {
            continue;
          }
          if (d.a == f.a) {
            continue;
          }
          e = k.e.c.length + k.b.c.length > 1;
          for (h = Uh(Sh((Gi(), new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [k.b, k.e])))))); Cm(h); ) {
            g = Wv(Dm(h), 12);
            j = g.c == k ? g.d : g.c;
            Jlb(MI(Bv(tv(qz, 1), Fzb, 10, 0, [j.f.i, j.i, j.a])).b - f.b) > 1 && Odb(a, g, f, e, k);
          }
        }
      }
      function FR(a, b) {
        var c, d, e, f, g, h;
        for (g = new rnb(new inb(a.f.b).a); g.b; ) {
          f = pnb(g);
          e = Wv(f.yb(), 251);
          if (b == 1) {
            if (e.yc() != (sK(), rK) && e.yc() != nK) {
              continue;
            }
          } else {
            if (e.yc() != (sK(), oK) && e.yc() != pK) {
              continue;
            }
          }
          d = Wv(Wv(f.zb(), 27).b, 25);
          h = Wv(Wv(f.zb(), 27).a, 78);
          c = h.c;
          switch (e.yc().e) {
            case 2:
              d.j.d = a.e.a;
              d.j.c = Nlb(1, d.j.c + c);
              break;
            case 1:
              d.j.d = d.j.d + c;
              d.j.c = Nlb(1, d.j.c - c);
              break;
            case 4:
              d.j.e = a.e.b;
              d.j.b = Nlb(1, d.j.b + c);
              break;
            case 3:
              d.j.e = d.j.e + c;
              d.j.b = Nlb(1, d.j.b - c);
          }
        }
      }
      function bdb(a, b, c, d, e) {
        var f, g, h, i, j, k, l, m, n;
        m = (mp(), new ntb());
        h = new GU();
        adb(a, c, a.d.Mc(), h, m);
        adb(a, d, a.d.Nc(), h, m);
        i = new Fnb(h, 0);
        while (i.b < i.d.Y()) {
          f = (Bxb(i.b < i.d.Y()), Wv(i.d.sb(i.c = i.b++), 80));
          j = new Fnb(h, i.b);
          while (j.b < j.d.Y()) {
            g = (Bxb(j.b < j.d.Y()), Wv(j.d.sb(j.c = j.b++), 80));
            gdb(f, g, a.a);
          }
        }
        ddb(h, Wv(rJ(b, (Rib(), Gib)), 154));
        idb(h);
        n = -1;
        for (l = new Tob(h); l.a < l.c.c.length; ) {
          k = Wv(Rob(l), 80);
          if (Jlb(k.k - k.a) < dAb) {
            continue;
          }
          n = Plb(n, k.i);
          a.d.Kc(k, e);
        }
        a.b.a.Q();
        return n + 1;
      }
      function r3(a, b, c) {
        var d, e;
        e = new II(b);
        d = new II(a.j);
        switch (c.e) {
          case 1:
          case 8:
          case 7:
            uI(e, -d.a / 2, -d.b);
            uI(b, 0, -(0.5 + d.b));
            break;
          case 3:
          case 4:
          case 5:
            uI(e, -d.a / 2, 0);
            uI(b, 0, 0.5 + d.b);
            break;
          case 0:
            uI(e, -d.a / 2, -d.b);
            uI(b, 0, -(0.5 + -d.b));
            break;
          case 10:
          case 2:
            uI(e, 0, -d.b / 2);
            uI(b, 0, -(0.5 + d.b));
            break;
          case 6:
            uI(e, -d.a, d.b / 2);
            uI(b, 0, -(0.5 + d.b));
            break;
          case 9:
            uI(e, -d.a / 2, 0);
            uI(b, 0, -(0.5 + d.b));
            break;
          case 11:
            uI(e, -d.a, -d.b / 2);
            uI(b, 0, -(0.5 + d.b));
        }
        vI(BI(a.i), e);
        return new Cfb(a);
      }
      function Gmb(a, b, c, d, e) {
        Fmb();
        var f, g, h, i, j, k, l;
        Exb(a, "src");
        Exb(c, "dest");
        k = tb(a);
        h = tb(c);
        Axb((k.g & 4) != 0, "srcType is not an array");
        Axb((h.g & 4) != 0, "destType is not an array");
        j = k.c;
        f = h.c;
        Axb((j.g & 1) != 0 ? j == f : (f.g & 1) == 0, "Array types don't match");
        l = a.length;
        i = c.length;
        if (b < 0 || d < 0 || e < 0 || b + e > l || d + e > i) {
          throw new nkb();
        }
        if (((j.g & 1) == 0 || (j.g & 4) != 0) && k != h) {
          if (a === c && b < d) {
            b += e;
            for (g = d + e; g-- > d; ) {
              c[g] = a[--b];
            }
          } else {
            for (g = d + e; d < g; ) {
              c[d++] = a[b++];
            }
          }
        } else
          e > 0 && dxb(a, b, c, d, e, true);
      }
      function cR(a, b, c) {
        var d, e, f, g, h;
        d = Wv(rJ(a, (Mjb(), jjb)), 18);
        c.a > b.a && (d.kb((zgb(), tgb)) ? a.d.a += (c.a - b.a) / 2 : d.kb(vgb) && (a.d.a += c.a - b.a));
        c.b > b.b && (d.kb((zgb(), xgb)) ? a.d.b += (c.b - b.b) / 2 : d.kb(wgb) && (a.d.b += c.b - b.b));
        if (Wv(rJ(a, (Rib(), jib)), 18).kb((ohb(), hhb)) && (c.a > b.a || c.b > b.b)) {
          for (h = new Tob(a.b); h.a < h.c.c.length; ) {
            g = Wv(Rob(h), 9);
            if (g.g == (CX(), xX)) {
              e = Wv(rJ(g, hib), 32);
              e == (sN(), ZM) ? g.i.a += c.a - b.a : e == pN && (g.i.b += c.b - b.b);
            }
          }
        }
        f = a.a;
        a.e.a = c.a - f.b - f.c;
        a.e.b = c.b - f.d - f.a;
      }
      function Ms(a, b, c, d, e, f) {
        var g, h, i;
        g = b.$b(c, a.b);
        if (g < 0) {
          h = a.e;
          if (!h) {
            f[0] = 0;
            if (d == 0 && e > 0) {
              return As(a, c, e);
            }
            return a;
          }
          a.e = Ms(h, b, c, d, e, f);
          if (f[0] == d) {
            e == 0 && f[0] != 0 ? --a.a : e > 0 && f[0] == 0 && ++a.a;
            a.j = PH(a.j, e - f[0]);
          }
          return Gs(a);
        } else if (g > 0) {
          i = a.g;
          if (!i) {
            f[0] = 0;
            if (d == 0 && e > 0) {
              return Bs(a, c, e);
            }
            return a;
          }
          a.g = Ms(i, b, c, d, e, f);
          if (f[0] == d) {
            e == 0 && f[0] != 0 ? --a.a : e > 0 && f[0] == 0 && ++a.a;
            a.j = PH(a.j, e - f[0]);
          }
          return Gs(a);
        }
        f[0] = a.c;
        if (d == a.c) {
          if (e == 0) {
            return Fs(a);
          }
          a.j = PH(a.j, e - a.c);
          a.c = e;
        }
        return a;
      }
      function gfb(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q;
        i = a.e;
        n = a.f;
        g = a.d;
        o2 = a.c;
        k = o2 - 1;
        p = a.g;
        l = Eo(a.g.xb(1, a.g.Y() - 1));
        j = new GU();
        for (c = 0; c < a.b.Y() - 1; c++) {
          h = CI(EI(xI(Wv(a.b.sb(c + 1), 92).a), Wv(a.b.sb(c), 92).a), o2 / (Ixb(Yv(p.sb(c + o2))) - Ixb(Yv(p.sb(c)))));
          j.c[j.c.length] = h;
        }
        q = new GU();
        f = WI(l, 0);
        m = new GU();
        for (b = 0; b < k - 1; b++) {
          vU(q, Yv(_ub(f)));
        }
        for (e = new Tob(j); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 10);
          vU(q, Yv(_ub(f)));
          vU(m, new sfb(d, q));
          Cxb(0, q.c.length);
          q.c.splice(0, 1);
        }
        return new ffb(i, n, g, k, l, m);
      }
      function fP(a) {
        this.q = new AP();
        this.p = new AP();
        this.o = xv(mw, Yyb, 26, (sN(), Bv(tv(Kz, 1), uyb, 32, 0, [qN, $M, ZM, pN, rN])).length, 12, 1);
        this.i = xv(mw, Yyb, 26, Bv(tv(Kz, 1), uyb, 32, 0, [qN, $M, ZM, pN, rN]).length, 12, 1);
        this.j = xv(kw, hyb, 26, Bv(tv(Kz, 1), uyb, 32, 0, [qN, $M, ZM, pN, rN]).length, 12, 1);
        this.n = xv(kw, hyb, 26, Bv(tv(Kz, 1), uyb, 32, 0, [qN, $M, ZM, pN, rN]).length, 12, 1);
        this.g = xv(Hz, uyb, 100, Bv(tv(Kz, 1), uyb, 32, 0, [qN, $M, ZM, pN, rN]).length, 0, 1);
        this.c = new vsb(Oz);
        this.e = a;
        $ob(this.o);
        $ob(this.i);
        Yob(this.n, 0);
      }
      function _Q(a, b) {
        var c, d, e, f, g, h, i, j, k, l;
        g = b.i != null && !b.b;
        g || nI(b, "Component Layout", 1);
        c = Wv(rJ(a, (Rib(), Fib)), 20);
        f = 1 / c.Y();
        if (Ckb(Ixb(Xv(rJ(a, (eM(), rL)))))) {
          l = 0;
          for (k = c.mb(); k.G(); ) {
            j = Wv(k.H(), 31);
            ++l;
            Jkb(tb(j));
            j.sc(a, rI(b, f));
          }
        } else {
          for (k = c.mb(); k.G(); ) {
            j = Wv(k.H(), 31);
            j.sc(a, rI(b, f));
          }
        }
        for (e = new Tob(a.c); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 16);
          xU(a.b, d.a);
          d.a.c = xv(UF, syb, 1, 0, 4, 1);
        }
        for (i = new Tob(a.b); i.a < i.c.c.length; ) {
          h = Wv(Rob(i), 9);
          rX(h, null);
        }
        a.c.c = xv(UF, syb, 1, 0, 4, 1);
        g || pI(b);
      }
      function S9(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m;
        for (g = new Tob(b); g.a < g.c.c.length; ) {
          e = Wv(Rob(g), 102);
          e.e = null;
          e.c = 0;
        }
        h = null;
        for (f = new Tob(b); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 102);
          k = e.d[0];
          for (m = Wv(rJ(k, (Rib(), oib)), 20).mb(); m.G(); ) {
            l = Wv(m.H(), 9);
            (!e.e && (e.e = new GU()), e.e).ib(a.b[l.d.k][l.k]);
            ++a.b[l.d.k][l.k].c;
          }
          if (k.g == (CX(), AX)) {
            if (h) {
              for (j = An(new Bn(a.c, h), 0); j.c; ) {
                i = Wv(ko(j), 9);
                for (d = An(new Bn(a.c, k), 0); d.c; ) {
                  c = Wv(ko(d), 9);
                  Y9(a.b[i.d.k][i.k]).ib(a.b[c.d.k][c.k]);
                  ++a.b[c.d.k][c.k].c;
                }
              }
            }
            h = k;
          }
        }
      }
      function gQ(a, b, c, d) {
        var e, f, g, h, i, j;
        SP(b);
        f = Wv(rJ(d, (Rib(), jib)), 18);
        h = (eM(), KL).b;
        if (h in b.a && Pu(b, h).ic().a) {
          return;
        }
        i = new RX();
        sJ(i, uib, b);
        PX(i, c);
        g = Wv(Pu(b, "id"), 97);
        Vmb(a.k, g.a, i);
        Umb(a.n, i, b);
        _P(b, i);
        hQ(b, i);
        dQ(a, b, i, d);
        QX(i, Wv(rJ(i, WL), 32));
        j = Wv(rJ(c, TL), 28);
        j == (KM(), JM) && (j = IM);
        e = Wv(rJ(d, sL), 59);
        e == (sK(), qK) && (e = pK);
        RW(i, j, e, Wv(rJ(i, SL), 10));
        switch (e.e) {
          case 2:
          case 1:
            (i.g == (sN(), $M) || i.g == pN) && f.ib((ohb(), lhb));
            break;
          case 4:
          case 3:
            (i.g == (sN(), ZM) || i.g == rN) && f.ib((ohb(), lhb));
        }
      }
      function Q5(a, b) {
        var c, d, e, f, g, h, i, j;
        a.f = b;
        e = b.c.c.length;
        a.a = xv(qB, Txb, 51, e, 0, 2);
        a.d = xv(qB, Txb, 51, e, 0, 2);
        a.g = xv(qB, Txb, 51, e, 0, 2);
        g = new Fnb(b.c, 0);
        while (g.b < g.d.Y()) {
          d = (Bxb(g.b < g.d.Y()), Wv(g.d.sb(g.c = g.b++), 16));
          h = d.a.c.length;
          f = g.b - 1;
          a.a[f] = xv(qB, Nzb, 9, h, 0, 1);
          a.d[f] = xv(qB, Nzb, 9, h, 0, 1);
          a.g[f] = xv(qB, Nzb, 9, h, 0, 1);
          j = new Fnb(d.a, 0);
          c = 0;
          while (j.b < j.d.Y()) {
            i = (Bxb(j.b < j.d.Y()), Wv(j.d.sb(j.c = j.b++), 9));
            i.k = c++;
            a.d[f][j.b - 1] = i;
            a.a[f][j.b - 1] = i;
            a.g[f][j.b - 1] = i;
          }
        }
        a.b = new _4(a.d);
        a.e.c && (a.b.e = true);
      }
      function gZ(a) {
        var b, c, d, e, f, g;
        e = new GU();
        for (g = new Tob(a.c.f); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 7);
          f.g == (sN(), ZM) && (e.c[e.c.length] = f, true);
        }
        if (a.d.a == (sK(), pK) && !MM(Wv(rJ(a.c, (eM(), TL)), 28))) {
          for (d = Uh(mX(a.c)); Cm(d); ) {
            c = Wv(Dm(d), 12);
            vU(e, c.c);
          }
        }
        sJ(a.c, (Rib(), Whb), new llb(a.c.j.a));
        sJ(a.c, Vhb, (xkb(), xkb(), wkb));
        vU(a.b, a.c);
        b = null;
        a.e == 1 ? b = jZ(a, a.c, rY(a.c.d), a.c.j.a) : a.e == 0 ? b = iZ(a, a.c, rY(a.c.d), a.c.j.a) : a.e == 3 ? b = kZ(a, a.c, a.c.j.a) : a.e == 2 && (b = hZ(a, a.c, a.c.j.a));
        !!b && new HY(a.c, a.b, Ixb(Yv(b.b)));
      }
      function Mab(a, b, c) {
        var d, e, f, g, h, i, j, k;
        e = b.g;
        Ckb(Ixb(Xv(rJ(b, (Rib(), Vhb))))) && (e = (CX(), wX));
        if (b.k >= 0) {
          return false;
        } else if (!!c.e && e == (CX(), wX) && e != c.e) {
          return false;
        } else {
          b.k = c.b;
          vU(c.f, b);
        }
        c.e = e;
        if (e == (CX(), zX) || e == BX || e == wX) {
          for (g = new Tob(b.f); g.a < g.c.c.length; ) {
            f = Wv(Rob(g), 7);
            for (k = (d = new Tob(new lY(f).a.e), new nY(d)); Qob(k.a); ) {
              j = Wv(Rob(k.a), 12).d;
              h = j.f;
              i = h.g;
              if (b.d != h.d) {
                if (e == wX) {
                  if (i == wX) {
                    if (Mab(a, h, c)) {
                      return true;
                    }
                  }
                } else {
                  if (i == zX || i == BX) {
                    if (Mab(a, h, c)) {
                      return true;
                    }
                  }
                }
              }
            }
          }
        }
        return true;
      }
      function K3(a, b) {
        var c, d, e, f, g, h, i, j, k;
        fJ(a.a, Bv(tv(qz, 1), Fzb, 10, 0, [b.a, b.b]));
        Ue(a.c, b.e);
        a.q.d = a.q.d | b.d;
        a.q.a = a.q.a | b.c;
        h = Qlb(a.j.e, b.k);
        i = Nlb(a.j.e + a.j.b, b.n);
        SN(a.j, b.j, h, 0, i - h);
        stb(a.d, b.f);
        b.f.c.f == b.f.d.f && wS(a.n, true, true, true, true);
        g = new vtb();
        j = new vtb();
        for (e = (k = new Snb(a.d.a).a.bb().mb(), new Ynb(k)); e.a.G(); ) {
          d = (f = Wv(e.a.H(), 21), Wv(f.yb(), 12));
          stb(g, d.c);
          stb(j, d.d);
        }
        c = g.a.Y() - j.a.Y();
        if (c < 0) {
          vS(a.n, true, (sK(), oK));
          vS(a.n, false, pK);
        } else if (c > 0) {
          vS(a.n, false, (sK(), oK));
          vS(a.n, true, pK);
        }
      }
      function tP(b, c) {
        var d, e, f, g, h, i, j, k, l, m;
        h = 0;
        while (h < (bmb(), c.length) && yP(c.charCodeAt(h), fzb)) {
          ++h;
        }
        d = c.length;
        while (d > 0 && yP(c.charCodeAt(d - 1), gzb)) {
          --d;
        }
        if (h < d) {
          l = fmb(c.substr(h, d - h), ",|;");
          try {
            for (j = 0, k = l.length; j < k; ++j) {
              i = l[j];
              g = fmb(i, "=");
              if (g.length != 2) {
                throw new slb("Expecting a list of key-value pairs.");
              }
              f = hmb(g[0]);
              m = clb(hmb(g[1]));
              emb(f, "top") ? b.d = m : emb(f, "left") ? b.b = m : emb(f, Azb) ? b.a = m : emb(f, "right") && (b.c = m);
            }
          } catch (a) {
            a = OH(a);
            if (aw(a, 130)) {
              e = a;
              throw new slb(hzb + e);
            } else
              throw NH(a);
          }
        }
      }
      function Ubb(a, b) {
        var c, d, e, f, g, h, i, j, k;
        k = new aJ();
        for (h = (j = new aob(a.c).a.bb().mb(), new fob(j)); h.a.G(); ) {
          f = (e = Wv(h.a.H(), 21), Wv(e.zb(), 200));
          f.b == 0 && (TI(k, f, k.c.b, k.c), true);
        }
        while (k.b != 0) {
          f = Wv(k.b == 0 ? null : (Bxb(k.b != 0), $I(k, k.a.a)), 200);
          for (d = new Tob(f.d); d.a < d.c.c.length; ) {
            c = Wv(Rob(d), 279);
            b.k == (Lbb(), Jbb) ? c.b.a = Qlb(c.b.a, f.a + c.a) : c.b.a = Nlb(c.b.a, f.a + c.a);
            --c.b.b;
            c.b.b == 0 && QI(k, c.b);
          }
        }
        for (g = (i = new aob(a.c).a.bb().mb(), new fob(i)); g.a.G(); ) {
          f = (e = Wv(g.a.H(), 21), Wv(e.zb(), 200));
          b.g[f.c.k] = f.a;
        }
      }
      function yZ(a, b, c) {
        var d, e, f, g;
        f = a.i;
        e = MI(Bv(tv(qz, 1), Fzb, 10, 0, [b.i, b.f.i]));
        d = MI(Bv(tv(qz, 1), Fzb, 10, 0, [b.f.i, b.i, b.a]));
        g = b.d;
        switch (b.g.e) {
          case 4:
            f.a = Qlb(e.a, d.a) - g.b - a.j.a - c;
            f.b = MI(Bv(tv(qz, 1), Fzb, 10, 0, [b.f.i, b.i, b.a])).b + c;
            break;
          case 2:
            f.a = Nlb(e.a + b.j.a, d.a) + g.c + c;
            f.b = MI(Bv(tv(qz, 1), Fzb, 10, 0, [b.f.i, b.i, b.a])).b + c;
            break;
          case 1:
            f.a = MI(Bv(tv(qz, 1), Fzb, 10, 0, [b.f.i, b.i, b.a])).a + c;
            f.b = Qlb(e.b, d.b) - g.d - a.j.b - c;
            break;
          case 3:
            f.a = MI(Bv(tv(qz, 1), Fzb, 10, 0, [b.f.i, b.i, b.a])).a + c;
            f.b = Nlb(e.b + b.j.b, d.b) + g.a + c;
        }
      }
      function zZ(a, b, c) {
        var d, e, f, g;
        f = a.i;
        e = MI(Bv(tv(qz, 1), Fzb, 10, 0, [b.i, b.f.i]));
        d = MI(Bv(tv(qz, 1), Fzb, 10, 0, [b.f.i, b.i, b.a]));
        g = b.d;
        switch (b.g.e) {
          case 4:
            f.a = Qlb(e.a, d.a) - g.b - a.j.a - c;
            f.b = MI(Bv(tv(qz, 1), Fzb, 10, 0, [b.f.i, b.i, b.a])).b - a.j.b - c;
            break;
          case 2:
            f.a = Nlb(e.a + b.j.a, d.a) + g.c + c;
            f.b = MI(Bv(tv(qz, 1), Fzb, 10, 0, [b.f.i, b.i, b.a])).b - a.j.b - c;
            break;
          case 1:
            f.a = MI(Bv(tv(qz, 1), Fzb, 10, 0, [b.f.i, b.i, b.a])).a + c;
            f.b = Qlb(e.b, d.b) - g.d - a.j.b - c;
            break;
          case 3:
            f.a = MI(Bv(tv(qz, 1), Fzb, 10, 0, [b.f.i, b.i, b.a])).a + c;
            f.b = Nlb(e.b + b.j.b, d.b) + g.a + c;
        }
      }
      function MQ(a) {
        var b, c;
        c = Wv(rJ(a, (Rib(), jib)), 18);
        b = XQ(HQ);
        Ckb(Ixb(Xv(rJ(a, (Mjb(), rjb))))) ? RQ(b, (d0(), W_)) : TQ(b, (d0(), W_));
        rJ(a, (bK(), aK)) != null && QQ(b, IQ);
        switch (Wv(rJ(a, (eM(), sL)), 59).e) {
          case 2:
            PQ(RQ(b, (d0(), L_)), K_);
            break;
          case 3:
            PQ(RQ(b, (d0(), o_)), n_);
            break;
          case 4:
            PQ(RQ(b, (d0(), c0)), b0);
        }
        c.kb((ohb(), fhb)) && PQ(RQ(b, (d0(), m_)), l_);
        gw(rJ(a, Bjb)) !== gw((I1(), G1)) && TQ(b, (d0(), P_));
        gw(rJ(a, Fjb)) !== gw((g4(), e4)) && gw(rJ(a, eib)) === gw((NK(), JK)) && PQ(b, (d0(), w_));
        if (c.kb(mhb)) {
          RQ(b, (d0(), T_));
          TQ(b, S_);
        }
        return b;
      }
      function zhb() {
        zhb = iI;
        shb = new Ahb("ONE_SIDED", 0, true, false, false);
        whb = new Ahb("TWO_SIDED", 1, false, false, false);
        thb = new Ahb("ONE_SIDED_BEST_OF_UP_OR_DOWN", 2, true, true, false);
        xhb = new Ahb("TWO_SIDED_BEST_OF_UP_OR_DOWN", 3, false, true, false);
        uhb = new Ahb("ONE_SIDED_BEST_OF_UP_OR_DOWN_ORTHOGONAL_HYPEREDGES", 4, true, true, true);
        yhb = new Ahb("TWO_SIDED_BEST_OF_UP_OR_DOWN_ORTHOGONAL_HYPEREDGES", 5, false, true, true);
        vhb = new Ahb("ONE_SIDED_ORTHOGONAL_HYPEREDGES", 6, true, false, true);
        rhb = new Ahb("OFF", 7, false, false, false);
      }
      function LV(a, b, c, d, e, f, g) {
        var h, i, j, k, l, m, n;
        l = Ckb(Ixb(Xv(rJ(b, (Mjb(), yjb)))));
        m = null;
        f == (djb(), ajb) && d.c.f == c ? m = d.c : f == bjb && d.d.f == c && (m = d.d);
        j = g;
        if (!g || !l || !!m) {
          k = (sN(), qN);
          m ? k = m.g : MM(Wv(rJ(c, (eM(), TL)), 28)) && (k = f == ajb ? rN : ZM);
          i = JV(a, b, c, f, k, d);
          h = IV((hX(c), d));
          if (f == ajb) {
            dW(h, Wv(yU(i.f, 0), 7));
            eW(h, e);
          } else {
            dW(h, e);
            eW(h, Wv(yU(i.f, 0), 7));
          }
          j = new UV(d, h, i, Wv(rJ(i, (Rib(), uib)), 7), f, !m);
        } else {
          vU(g.e, d);
          n = Olb(Wv(rJ(g.d, (eM(), dM)), 15).a, Wv(rJ(d, dM), 15).a);
          sJ(g.d, dM, new llb(n));
        }
        Fd(a.a, d, new XV(j.d, b, f));
        return j;
      }
      function T1(a, b, c, d) {
        var e, f, g, h, i, j, k, l;
        f = new uX(a);
        sX(f, (CX(), BX));
        sJ(f, (eM(), TL), (KM(), FM));
        e = 0;
        if (b) {
          g = new RX();
          sJ(g, (Rib(), uib), b);
          sJ(f, uib, b.f);
          QX(g, (sN(), rN));
          PX(g, f);
          l = Wv(FU(b.b, xv(dB, gAb, 12, b.b.c.length, 0, 1)), 47);
          for (j = 0, k = l.length; j < k; ++j) {
            i = l[j];
            eW(i, g);
          }
          sJ(b, Bib, f);
          ++e;
        }
        if (c) {
          h = new RX();
          sJ(f, (Rib(), uib), c.f);
          sJ(h, uib, c);
          QX(h, (sN(), ZM));
          PX(h, f);
          l = Wv(FU(c.e, xv(dB, gAb, 12, c.e.c.length, 0, 1)), 47);
          for (j = 0, k = l.length; j < k; ++j) {
            i = l[j];
            dW(i, h);
          }
          sJ(c, Bib, f);
          ++e;
        }
        sJ(f, (Rib(), aib), Elb(e));
        d.c[d.c.length] = f;
        return f;
      }
      function MV(a, b) {
        var c, d, e, f, g, h, i;
        for (g = ud(a.a).mb(); g.G(); ) {
          f = Wv(g.H(), 12);
          if (f.b.c.length > 0) {
            d = new IU(Wv(Dd(a.a, f), 18));
            Gpb(d, new $V(b));
            e = new Fnb(f.b, 0);
            while (e.b < e.d.Y()) {
              c = (Bxb(e.b < e.d.Y()), Wv(e.d.sb(e.c = e.b++), 33));
              h = -1;
              switch (Wv(rJ(c, (eM(), tL)), 107).e) {
                case 2:
                  h = d.c.length - 1;
                  break;
                case 1:
                  h = d.c.length / 2 | 0;
                  break;
                case 3:
                  h = 0;
              }
              if (h != -1) {
                i = (Cxb(h, d.c.length), Wv(d.c[h], 114));
                vU(i.b.b, c);
                Wv(rJ(hX(i.b.c.f), (Rib(), jib)), 18).ib((ohb(), ghb));
                Wv(rJ(hX(i.b.c.f), jib), 18).ib(ehb);
                vnb(e);
                sJ(c, xib, f);
              }
            }
          }
          dW(f, null);
          eW(f, null);
        }
      }
      function H7(a) {
        var b, c, d, e, f, g, h, i, j, k, l;
        k = a.e.a.c.length;
        for (g = new Tob(a.e.a); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 61);
          f.j = false;
        }
        a.i = xv(mw, Yyb, 26, k, 12, 1);
        a.g = xv(mw, Yyb, 26, k, 12, 1);
        a.n = new GU();
        e = 0;
        l = new GU();
        for (i = new Tob(a.e.a); i.a < i.c.c.length; ) {
          h = Wv(Rob(i), 61);
          h.b = e++;
          h.c.c.length == 0 && vU(a.n, h);
          xU(l, h.g);
        }
        b = 0;
        for (d = new Tob(l); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 89);
          c.b = b++;
          c.e = false;
        }
        j = l.c.length;
        if (a.b == null || a.b.length < j) {
          a.b = xv(kw, hyb, 26, j, 12, 1);
          a.c = xv(KH, xAb, 26, j, 13, 1);
        } else {
          dpb(a.c);
        }
        a.d = l;
        a.p = new Xub(op(a.d.c.length));
        a.j = 1;
      }
      function z0(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u;
        p = a.d;
        q = b.d;
        n = Wv(oX(a, (djb(), ajb)).mb().H(), 7);
        t = Wv(oX(a, bjb).mb().H(), 7);
        o2 = Wv(oX(b, ajb).mb().H(), 7);
        u = Wv(oX(b, bjb).mb().H(), 7);
        l = Wv(FU(n.b, xv(dB, gAb, 12, 1, 0, 1)), 47);
        r = Wv(FU(t.e, xv(dB, gAb, 12, 1, 0, 1)), 47);
        m = Wv(FU(o2.b, xv(dB, gAb, 12, 1, 0, 1)), 47);
        s = Wv(FU(u.e, xv(dB, gAb, 12, 1, 0, 1)), 47);
        rX(a, q);
        for (e = 0, i = m.length; e < i; ++e) {
          c = m[e];
          eW(c, n);
        }
        for (f = 0, j = s.length; f < j; ++f) {
          c = s[f];
          dW(c, t);
        }
        rX(b, p);
        for (g = 0, k = l.length; g < k; ++g) {
          c = l[g];
          eW(c, o2);
        }
        for (d = 0, h = r.length; d < h; ++d) {
          c = r[d];
          dW(c, u);
        }
      }
      function gR(a) {
        var b, c, d, e, f, g, h, i;
        for (f = new Tob(a.a.b); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 25);
          e.vc();
        }
        i = new HI(Uzb, Uzb);
        b = new HI(Vzb, Vzb);
        for (d = new Tob(a.a.b); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 25);
          i.a = Qlb(i.a, c.j.d);
          i.b = Qlb(i.b, c.j.e);
          b.a = Nlb(b.a, c.j.d + c.j.c);
          b.b = Nlb(b.b, c.j.e + c.j.b);
        }
        for (h = Jd(a.c).mb(); h.G(); ) {
          g = Wv(h.H(), 27);
          c = Wv(g.b, 25);
          i.a = Qlb(i.a, c.j.d);
          i.b = Qlb(i.b, c.j.e);
          b.a = Nlb(b.a, c.j.d + c.j.c);
          b.b = Nlb(b.b, c.j.e + c.j.b);
        }
        a.d = zI(new HI(i.a, i.b));
        a.e = EI(new HI(b.a, b.b), i);
        a.a.a.c = xv(UF, syb, 1, 0, 4, 1);
        a.a.b.c = xv(UF, syb, 1, 0, 4, 1);
      }
      function P$(a) {
        var b, c, d, e, f, g, h;
        h = Wv(yU(a.f, 0), 7);
        if (h.e.c.length != 0 && h.b.c.length != 0) {
          throw new ulb("Interactive layout does not support NORTH/SOUTH ports with incoming _and_ outgoing edges.");
        }
        if (h.e.c.length != 0) {
          f = Uzb;
          for (c = new Tob(h.e); c.a < c.c.c.length; ) {
            b = Wv(Rob(c), 12);
            g = b.d.f;
            d = Wv(rJ(g, (eM(), GL)), 65);
            f = Qlb(f, g.i.a - d.b);
          }
          return new $c(_b(f));
        }
        if (h.b.c.length != 0) {
          e = Vzb;
          for (c = new Tob(h.b); c.a < c.c.c.length; ) {
            b = Wv(Rob(c), 12);
            g = b.c.f;
            d = Wv(rJ(g, (eM(), GL)), 65);
            e = Nlb(e, g.i.a + g.j.a + d.c);
          }
          return new $c(_b(e));
        }
        return zb(), zb(), yb;
      }
      function JV(a, b, c, d, e, f) {
        var g, h, i, j, k, l, m;
        j = d == (djb(), ajb) ? f.c : f.d;
        i = PW(b);
        if (j.f == c) {
          g = Wv(Smb(a.b, j), 9);
          if (!g) {
            g = NW(j, Wv(rJ(c, (eM(), TL)), 28), e, d == ajb ? -1 : 1, j.j, i, b);
            sJ(g, (Rib(), uib), j);
            Umb(a.b, j, g);
          }
        } else {
          k = Wv(rJ(f, (eM(), dM)), 15).a;
          g = NW((l = new tJ(), m = Wv(rJ(b, (Rib(), Jib)), 15).a * Wv(rJ(b, (Mjb(), qjb)), 15).a / 2, sJ(l, tib, new llb(m)), l), Wv(rJ(c, TL), 28), e, d == ajb ? -1 : 1, new HI(k, k), i, b);
          h = KV(a, g, c, d);
          sJ(g, uib, h);
          Umb(a.b, h, g);
        }
        Wv(rJ(b, (Rib(), jib)), 18).ib((ohb(), hhb));
        MM(Wv(rJ(b, (eM(), TL)), 28)) ? sJ(b, TL, (KM(), HM)) : sJ(b, TL, (KM(), IM));
        return g;
      }
      function Iab(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A;
        d = Wv(rJ(b, (Mjb(), wjb)), 15).a;
        v = Wv(rJ(b, Kjb), 24).a;
        m = 4;
        e = 3;
        w = 20 / v;
        n = false;
        i = 0;
        g = $xb;
        do {
          f = i != 1;
          l = i != 0;
          A = 0;
          for (q = a.a, s = 0, u = q.length; s < u; ++s) {
            o2 = q[s];
            o2.g = null;
            Jab(a, o2, f, l, d);
            A += Jlb(o2.a);
          }
          do {
            h = Nab(a, b);
          } while (h);
          for (p = a.a, r = 0, t = p.length; r < t; ++r) {
            o2 = p[r];
            c = Uab(o2).a;
            if (c != 0) {
              for (k = new Tob(o2.f); k.a < k.c.c.length; ) {
                j = Wv(Rob(k), 9);
                j.i.b += c;
              }
            }
          }
          if (i == 0 || i == 1) {
            --m;
            if (m <= 0 && (A < g || -m > v)) {
              i = 2;
              g = $xb;
            } else if (i == 0) {
              i = 1;
              g = A;
            } else {
              i = 0;
              g = A;
            }
          } else {
            n = A >= g || g - A < w;
            g = A;
            n && --e;
          }
        } while (!(n && e <= 0));
      }
      function vZ(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m, n;
        l = Wv(FU(a.f, xv(BB, mAb, 7, a.f.c.length, 0, 1)), 346);
        for (j = 0, k = l.length; j < k; ++j) {
          i = l[j];
          if (c != (djb(), ajb)) {
            h = Wv(FU(i.e, xv(dB, gAb, 12, i.e.c.length, 0, 1)), 47);
            for (e = 0, f = h.length; e < f; ++e) {
              d = h[e];
              n = Wv(rJ(d.d.f, (Mjb(), vjb)), 85);
              !Ckb(Ixb(Xv(rJ(d, (Rib(), Iib))))) && !(b == (Xib(), Uib) && n == Vib) && cW(d, true);
            }
          }
          if (c != bjb) {
            g = Wv(FU(i.b, xv(dB, gAb, 12, i.b.c.length, 0, 1)), 47);
            for (e = 0, f = g.length; e < f; ++e) {
              d = g[e];
              m = Wv(rJ(d.c.f, (Mjb(), vjb)), 85);
              !Ckb(Ixb(Xv(rJ(d, (Rib(), Iib))))) && !(b == (Xib(), Sib) && m == Tib) && cW(d, true);
            }
          }
        }
      }
      function RW(a, b, c, d) {
        var e, f, g, h, i;
        g = a.g;
        if (g == (sN(), qN) && b != (KM(), IM) && b != (KM(), JM)) {
          g = KW(a, c);
          QX(a, g);
          rJ(a, (eM(), LL)) == null && g != qN && (a.i.a != 0 || a.i.b != 0) && sJ(a, LL, new llb(JW(a, g)));
        }
        if (b == (KM(), GM)) {
          i = 0;
          switch (g.e) {
            case 1:
            case 3:
              f = a.f.j.a;
              f > 0 && (i = a.i.a / f);
              break;
            case 2:
            case 4:
              e = a.f.j.b;
              e > 0 && (i = a.i.b / e);
          }
          sJ(a, (Rib(), Cib), i);
        }
        h = a.j;
        if (d) {
          a.a.a = d.a;
          a.a.b = d.b;
        } else if (b != IM && b != JM && g != qN) {
          switch (g.e) {
            case 1:
              a.a.a = h.a / 2;
              break;
            case 2:
              a.a.a = h.a;
              a.a.b = h.b / 2;
              break;
            case 3:
              a.a.a = h.a / 2;
              a.a.b = h.b;
              break;
            case 4:
              a.a.b = h.b / 2;
          }
        } else {
          a.a.a = h.a / 2;
          a.a.b = h.b / 2;
        }
      }
      function zJ(a) {
        var b, c, d, e;
        if (aw(a.a, 10)) {
          return xI(Wv(a.a, 10));
        } else if (aw(a.a, 66)) {
          return Xsb(Wv(a.a, 86));
        } else if (aw(a.a, 50)) {
          return Wv(a.a, 50).Wc();
        } else if (aw(a.a, 191)) {
          b = new Vwb();
          e = (d = new rwb(new wwb(new Gob(Wv(a.a, 191).a).a).b), new Mob(d));
          while (Bnb(e.a.a)) {
            Rwb(b, (c = pwb(e.a), c.yb()));
          }
          return b;
        } else if (aw(a.a, 13)) {
          return new IU(Wv(a.a, 13));
        } else if (aw(a.a, 44)) {
          b = new jJ();
          e = WI(Wv(a.a, 44), 0);
          while (e.b != e.d.c) {
            QI(b, Wv(_ub(e), 10));
          }
          return b;
        } else if (aw(a.a, 58)) {
          b = new aJ();
          e = WI(Wv(a.a, 58), 0);
          while (e.b != e.d.c) {
            QI(b, _ub(e));
          }
          return b;
        } else {
          return a.a;
        }
      }
      function o1(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2;
        h = 0;
        o2 = 0;
        i = Xob(a.f, a.f.length);
        f = a.d;
        g = a.i;
        d = a.a;
        e = a.b;
        do {
          n = 0;
          for (k = new Tob(a.p); k.a < k.c.c.length; ) {
            j = Wv(Rob(k), 9);
            m = n1(a, j);
            c = true;
            (a.q == (I1(), B1) || a.q == E1) && (c = Ckb(Ixb(Xv(m.b))));
            if (Wv(m.a, 24).a < 0 && c) {
              ++n;
              i = Xob(a.f, a.f.length);
              a.d = a.d + Wv(m.a, 24).a;
              o2 += f - a.d;
              f = a.d + Wv(m.a, 24).a;
              g = a.i;
              d = Ao(a.a);
              e = Ao(a.b);
            } else {
              a.f = Xob(i, i.length);
              a.d = f;
              a.a = (_b(d), d ? new IU((Oh(), d)) : Bo(new Tob(null)));
              a.b = (_b(e), e ? new IU((Oh(), e)) : Bo(new Tob(null)));
              a.i = g;
            }
          }
          ++h;
          l = n != 0 && Ckb(Ixb(Xv(b.B(new RJ(Elb(o2), Elb(h))))));
        } while (l);
      }
      function yO(a, b, c, d) {
        var e, f, g, h, i, j, k;
        if (!Qob(new Tob(zW(a)))) {
          return d;
        }
        k = wO(Wv(oW(a, (eM(), JL)), 86));
        for (i = new Tob(zW(a)); i.a < i.c.c.length; ) {
          h = Wv(Rob(i), 129);
          j = wO(Wv(oW(h, JL), 86));
          j == (uO(), tO) && (j = k);
          qW(h, j.e);
          e = zO(c, j);
          e.c = Nlb(e.c, h.e.j.a);
          e.b += h.e.j.b + b;
        }
        for (g = new Lsb(new Fsb(c).a); htb(g.a); ) {
          f = (g.b = itb(g.a), new Psb(g.c, g.b));
          e = Wv(f.b.b[f.a.e], 62);
          e.b -= b;
          switch (Wv(f.a, 67).e) {
            case 12:
            case 13:
            case 14:
              d.d = Nlb(d.d, e.b + b);
              break;
            case 15:
              d.b = Nlb(d.b, e.c + b);
              break;
            case 17:
              d.c = Nlb(d.c, e.c + b);
              break;
            case 18:
            case 19:
            case 20:
              d.a = Nlb(d.a, e.b + b);
          }
        }
        return d;
      }
      function mgb(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m, n, o2, p;
        igb(this);
        c == (fgb(), dgb) ? stb(this.g, a) : stb(this.o, a);
        n = rAb;
        m = 5e-324;
        for (j = (g = new Snb(b.a).a.bb().mb(), new Ynb(g)); j.a.G(); ) {
          h = (e = Wv(j.a.H(), 21), Wv(e.yb(), 27));
          k = Wv(h.a, 223);
          d = Wv(h.b, 12);
          l = d.c;
          l == a && (l = d.d);
          k == dgb ? stb(this.g, l) : stb(this.o, l);
          p = MI(Bv(tv(qz, 1), Fzb, 10, 0, [l.f.i, l.i, l.a])).b;
          n = n < p ? n : p;
          m = m > p ? m : p;
        }
        o2 = MI(Bv(tv(qz, 1), Fzb, 10, 0, [a.f.i, a.i, a.a])).b;
        kgb(this, o2, n, m);
        for (i = (f = new Snb(b.a).a.bb().mb(), new Ynb(f)); i.a.G(); ) {
          h = (e = Wv(i.a.H(), 21), Wv(e.yb(), 27));
          stb(this.c, Wv(h.b, 12));
        }
        this.f = false;
      }
      function cQ(a, b, c, d) {
        var e, f, g, h, i, j;
        h = (eM(), KL).b;
        if (h in b.a && Pu(b, h).ic().a) {
          return;
        }
        j = Pu(b, Dzb);
        if (!j) {
          throw new GQ("Labels must have a property 'text'.", null, b);
        } else if (!j.lc()) {
          throw new GQ("A label's 'text' property must be a string.", j, b);
        }
        i = j.lc().a;
        f = new dX(i);
        sJ(f, (Rib(), uib), b);
        Umb(a.f, f, b);
        _P(b, f);
        hQ(b, f);
        aw(c, 9) ? vU(Wv(c, 9).c, f) : aw(c, 12) ? vU(Wv(c, 12).b, f) : aw(c, 7) && vU(Wv(c, 7).c, f);
        if (aw(c, 12)) {
          g = Wv(rJ(f, tL), 107);
          _P(b, f);
          sJ(f, tL, g);
          e = Wv(rJ(d, jib), 18);
          switch (g.e) {
            case 2:
            case 3:
              e.ib((ohb(), ghb));
            case 1:
            case 0:
              e.ib((ohb(), ehb));
              sJ(f, tL, (EK(), AK));
          }
        }
      }
      function UW(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r;
        f = 0;
        g = 0;
        for (j = new Tob(a.a); j.a < j.c.c.length; ) {
          h = Wv(Rob(j), 9);
          f = Nlb(f, h.e.b);
          g = Nlb(g, h.e.c);
        }
        for (i = new Tob(a.a); i.a < i.c.c.length; ) {
          h = Wv(Rob(i), 9);
          c = Wv(rJ(h, (eM(), lL)), 103);
          switch (c.e) {
            case 1:
              o2 = 0;
              break;
            case 2:
              o2 = 1;
              break;
            case 5:
              o2 = 0.5;
              break;
            default:
              d = 0;
              l = 0;
              for (n = new Tob(h.f); n.a < n.c.c.length; ) {
                m = Wv(Rob(n), 7);
                m.b.c.length == 0 || ++d;
                m.e.c.length == 0 || ++l;
              }
              d + l == 0 ? o2 = 0.5 : o2 = l / (d + l);
          }
          q = a.c;
          k = h.j.a;
          r = (q.a - k) * o2;
          o2 > 0.5 ? r -= g * 2 * (o2 - 0.5) : o2 < 0.5 && (r += f * 2 * (0.5 - o2));
          e = h.e.b;
          r < e && (r = e);
          p = h.e.c;
          r > q.a - p - k && (r = q.a - p - k);
          h.i.a = b + r;
        }
      }
      function Kv(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C, D, F, G;
        c = a.l & 8191;
        d = a.l >> 13 | (a.m & 15) << 9;
        e = a.m >> 4 & 8191;
        f = a.m >> 17 | (a.h & 255) << 5;
        g = (a.h & 1048320) >> 8;
        h = b.l & 8191;
        i = b.l >> 13 | (b.m & 15) << 9;
        j = b.m >> 4 & 8191;
        k = b.m >> 17 | (b.h & 255) << 5;
        l = (b.h & 1048320) >> 8;
        B = c * h;
        C = d * h;
        D = e * h;
        F = f * h;
        G = g * h;
        if (i != 0) {
          C += c * i;
          D += d * i;
          F += e * i;
          G += f * i;
        }
        if (j != 0) {
          D += c * j;
          F += d * j;
          G += e * j;
        }
        if (k != 0) {
          F += c * k;
          G += d * k;
        }
        l != 0 && (G += c * l);
        n = B & azb;
        o2 = (C & 511) << 13;
        m = n + o2;
        q = B >> 22;
        r = C >> 9;
        s = (D & 262143) << 4;
        t = (F & 31) << 17;
        p = q + r + s + t;
        v = D >> 18;
        w = F >> 5;
        A = (G & 4095) << 8;
        u = v + w + A;
        p += m >> 22;
        m &= azb;
        u += p >> 22;
        p &= azb;
        u &= bzb;
        return Ev(m, p, u);
      }
      function jZ(a, b, c, d) {
        var e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w;
        q = a.d.c.c.c.length;
        if (c >= q - 1) {
          return null;
        }
        e = new GU();
        e.c[e.c.length] = b;
        u = b;
        g = c;
        o2 = -1;
        h = Wv(yU(a.d.c.c, c), 16);
        for (n = 0; n < h.a.c.length; ++n) {
          r = Wv(yU(h.a, n), 9);
          if (r == b) {
            o2 = n;
            break;
          }
        }
        p = eZ(a, 1, o2, c, q, a.a);
        if (!p) {
          return null;
        }
        v = a.a;
        m = 0;
        f = 0;
        while (!!u && v > 1 && g < q - 1) {
          k = fZ(a, u);
          l = Wv(yU(a.d.c.c, g + 1), 16);
          w = Wv(p.sb(m++), 24).a;
          s = Slb(w, l.a.c.length);
          qX(k, s, l);
          !!u && (e.c[e.c.length] = u, true);
          u = k;
          --v;
          ++f;
          ++g;
        }
        t = (d - (e.c.length - 1) * a.d.d) / e.c.length;
        for (j = new Tob(e); j.a < j.c.c.length; ) {
          i = Wv(Rob(j), 9);
          i.j.a = t;
        }
        return new RJ(Elb(f), t);
      }
      function iZ(a, b, c, d) {
        var e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w;
        if (c <= 0) {
          return null;
        }
        e = new GU();
        e.c[e.c.length] = b;
        u = b;
        g = c;
        o2 = -1;
        h = Wv(yU(a.d.c.c, c), 16);
        for (n = 0; n < h.a.c.length; ++n) {
          q = Wv(yU(h.a, n), 9);
          if (q == b) {
            o2 = n;
            break;
          }
        }
        p = eZ(a, 0, o2, c, a.d.c.c.c.length, a.a);
        if (!p) {
          return null;
        }
        v = a.a;
        m = 0;
        f = 0;
        t = o2;
        while (!!u && v > 1 && g > 1) {
          k = fZ(a, u);
          h = Wv(yU(a.d.c.c, g), 16);
          l = Wv(yU(a.d.c.c, g - 1), 16);
          w = Wv(p.sb(m++), 24).a;
          r = Slb(w, l.a.c.length);
          qX(u, r, l);
          qX(k, t, h);
          t = r;
          !!u && (e.c[e.c.length] = u, true);
          u = k;
          --v;
          ++f;
          --g;
        }
        s = (d - (e.c.length - 1) * a.d.d) / e.c.length;
        for (j = new Tob(e); j.a < j.c.c.length; ) {
          i = Wv(Rob(j), 9);
          i.j.a = s;
        }
        return new RJ(Elb(f), s);
      }
      function sV(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2;
        a.b = a.c;
        o2 = Xv(rJ(b, (eM(), _L)));
        n = o2 == null || Ckb((Dxb(o2), o2));
        f = Wv(rJ(b, (Rib(), jib)), 18).kb((ohb(), hhb));
        e = Wv(rJ(b, TL), 28);
        c = !(e == (KM(), EM) || e == GM || e == FM);
        if (n && (c || !f)) {
          for (l = new Tob(b.b); l.a < l.c.c.length; ) {
            j = Wv(Rob(l), 9);
            j.k = 0;
          }
          m = new GU();
          for (k = new Tob(b.b); k.a < k.c.c.length; ) {
            j = Wv(Rob(k), 9);
            d = rV(a, j, null);
            if (d) {
              i = new kW();
              qJ(i, b);
              sJ(i, fib, Wv(d.b, 18));
              YW(i.a, b.a);
              for (h = Wv(d.a, 20).mb(); h.G(); ) {
                g = Wv(h.H(), 9);
                vU(i.b, g);
                g.a = i;
              }
              m.ib(i);
            }
          }
          f && (a.b = a.a);
        } else {
          m = new opb(Bv(tv(mB, 1), {38: 1, 39: 1, 42: 1, 3: 1, 8: 1, 5: 1, 6: 1}, 55, 0, [b]));
        }
        return m;
      }
      function T4(a) {
        var b, c, d, e, f, g, h, i, j;
        for (c = new Tob(a.a.a.b); c.a < c.c.c.length; ) {
          b = Wv(Rob(c), 25);
          for (g = b.i.mb(); g.G(); ) {
            f = Wv(g.H(), 25);
            if (b.f == f.f) {
              continue;
            }
            tK(a.a.d) ? i = a.a.g.tc(b, f) : i = a.a.g.uc(b, f);
            d = b.g.a + b.j.c + i - f.g.a;
            d = Math.ceil(d);
            d = 0 > d ? 0 : d;
            if (!!b.o && !!f.o && aw(b, 82) && aw(f, 82) && !sr(or(Wv(b, 82).d, Wv(f, 82).d))) {
              e = x7(new A7(), a.d);
              h = hw(Llb(f.g.a - b.g.a));
              f7(i7(h7(j7(g7(new k7(), 0 > h ? 0 : h), 1), e), a.c[b.f.d]));
              f7(i7(h7(j7(g7(new k7(), 0 > -h ? 0 : -h), 1), e), a.c[f.f.d]));
            } else {
              j = 1;
              (aw(b, 82) && aw(f, 93) || aw(f, 82) && aw(b, 93)) && (j = 2);
              f7(i7(h7(j7(g7(new k7(), hw(d)), j), a.c[b.f.d]), a.c[f.f.d]));
            }
          }
        }
      }
      function tQ() {
        tQ = iI;
        sQ = new vtb();
        rQ = uQ(Bv(tv(rz, 1), syb, 79, 0, [(eM(), kL), xL]));
        oQ = uQ(Bv(tv(rz, 1), syb, 79, 0, [ML, UL, (Mjb(), Hjb), yL, (Rib(), Eib), Kjb, Cjb]));
        kQ = uQ(Bv(tv(rz, 1), syb, 79, 0, [mL, qL, KL, wL, BL, EL, FL, $L, _L, AL, gjb, mjb, njb, xjb, rjb, yjb, Ijb, Djb, ijb]));
        nQ = uQ(Bv(tv(rz, 1), syb, 79, 0, [IL, HL, DL, dM, LL, Dib, Xhb, Rhb, Jib, Ejb, qjb, wjb]));
        mQ = uQ(Bv(tv(rz, 1), syb, 79, 0, [WL, lL, sL, uL, tL, vL, zL, NL, OL, PL, QL, RL, TL, VL, hjb, ljb, zjb, ojb, kjb, Ajb, Bjb, sjb, tjb, vjb, Fjb, Gjb, Jjb, Ljb, ujb]));
        lQ = uQ(Bv(tv(rz, 1), syb, 79, 0, [JL, aM, bM, jjb]));
        qQ = uQ(Bv(tv(rz, 1), syb, 79, 0, [jL, oL, CL, GL, SL, YL]));
        pQ = uQ(Bv(tv(rz, 1), syb, 79, 0, [(RP(), OP)]));
      }
      function AR(a) {
        var b, c, d, e, f, g, h;
        b = 0;
        for (f = new Tob(a.b.a); f.a < f.c.c.length; ) {
          d = Wv(Rob(f), 78);
          d.b = 0;
          d.c = 0;
        }
        zR(a, 0);
        yR(a, a.g);
        fS(a.c);
        jS(a.c);
        c = (sK(), oK);
        hS(bS(gS(hS(bS(gS(hS(gS(a.c, c)), vK(c)))), c)));
        gS(a.c, oK);
        DR(a, a.g);
        ER(a, 0);
        FR(a, 0);
        GR(a, 1);
        zR(a, 1);
        yR(a, a.d);
        fS(a.c);
        for (g = new Tob(a.b.a); g.a < g.c.c.length; ) {
          d = Wv(Rob(g), 78);
          b += Jlb(d.c);
        }
        for (h = new Tob(a.b.a); h.a < h.c.c.length; ) {
          d = Wv(Rob(h), 78);
          d.b = 0;
          d.c = 0;
        }
        c = rK;
        hS(bS(gS(hS(bS(gS(hS(jS(gS(a.c, c))), vK(c)))), c)));
        gS(a.c, oK);
        DR(a, a.d);
        ER(a, 1);
        FR(a, 1);
        GR(a, 0);
        jS(a.c);
        for (e = new Tob(a.b.a); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 78);
          b += Jlb(d.c);
        }
        return b;
      }
      function BR(a) {
        var b, c, d, e, f, g, h;
        b = new GU();
        a.g = new GU();
        a.d = new GU();
        for (g = new rnb(new inb(a.f.b).a); g.b; ) {
          f = pnb(g);
          vU(b, Wv(Wv(f.zb(), 27).b, 25));
          tK(Wv(f.yb(), 251).yc()) ? vU(a.d, Wv(f.zb(), 27)) : vU(a.g, Wv(f.zb(), 27));
        }
        yR(a, a.d);
        yR(a, a.g);
        a.c = new rS(a.b);
        pS(a.c, (fR(), eR));
        DR(a, a.d);
        DR(a, a.g);
        xU(b, a.c.a.b);
        a.e = new HI(Uzb, Uzb);
        a.a = new HI(Vzb, Vzb);
        for (d = new Tob(b); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 25);
          a.e.a = Qlb(a.e.a, c.j.d);
          a.e.b = Qlb(a.e.b, c.j.e);
          a.a.a = Nlb(a.a.a, c.j.d + c.j.c);
          a.a.b = Nlb(a.a.b, c.j.e + c.j.b);
        }
        oS(a.c, new IR());
        h = 0;
        do {
          e = AR(a);
          ++h;
        } while ((h < 2 || e > $yb) && h < 10);
        oS(a.c, new KR());
        AR(a);
        iS(a.c);
        gR(a.f);
      }
      function tT(a) {
        oT();
        var b, c, d, e, f, g, h;
        h = new qT();
        for (c = new Tob(a); c.a < c.c.c.length; ) {
          b = Wv(Rob(c), 48);
          (!h.b || b.c >= h.b.c) && (h.b = b);
          if (!h.c || b.c <= h.c.c) {
            h.d = h.c;
            h.c = b;
          }
          (!h.e || b.d >= h.e.d) && (h.e = b);
          (!h.f || b.d <= h.f.d) && (h.f = b);
        }
        d = new xT((cT(), $S));
        RT(a, mT, new opb(Bv(tv(JA, 1), syb, 160, 0, [d])));
        g = new xT(bT);
        RT(a, lT, new opb(Bv(tv(JA, 1), syb, 160, 0, [g])));
        e = new xT(_S);
        RT(a, kT, new opb(Bv(tv(JA, 1), syb, 160, 0, [e])));
        f = new xT(aT);
        RT(a, jT, new opb(Bv(tv(JA, 1), syb, 160, 0, [f])));
        rT(d.c, $S);
        rT(e.c, _S);
        rT(f.c, aT);
        rT(g.c, bT);
        h.a.c = xv(UF, syb, 1, 0, 4, 1);
        xU(h.a, d.c);
        xU(h.a, Fo(e.c));
        xU(h.a, f.c);
        xU(h.a, Fo(g.c));
        return h;
      }
      function $O(a) {
        var b, c, d, e, f, g, h, i, j, k;
        e = Wv(vW(a, (eM(), DL)), 15).a;
        for (h = new Tob(uW(a)); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 626);
          c = new fP(g);
          c.d = e;
          c.k = Wv(oW(g, XL), 15).a;
          d = Wv(oW(g, VL), 149);
          b = Ckb(Ixb(Xv(rJ(Wv(g.e, 9), (Rib(), $hb)))));
          for (k = new Tob(AW(g)); k.a < k.c.c.length; ) {
            j = Wv(Rob(k), 161);
            d == (UM(), SM) ? XO(j, b, e) : d == TM && YO(j, e);
            JO(j);
          }
          LO(c, Wv(oW(g, aM), 86).kb((DN(), CN)));
          NO(c);
          yO(c.e, c.d, c.c, c.p);
          _O(c);
          ZO(c);
          VO(c);
          i = new CP((f = Wv(g.e, 9).b, new BP(f.d, f.b, f.a, f.c)));
          i.b = c.p.b + c.q.b;
          i.c = c.p.c + c.q.c;
          i.d = c.p.d + c.q.d;
          i.a = c.p.a + c.q.a;
          Wv(g.e, 9).b.b = i.b;
          Wv(g.e, 9).b.d = i.d;
          Wv(g.e, 9).b.c = i.c;
          Wv(g.e, 9).b.a = i.a;
        }
      }
      function c1(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t;
        i = Wv(nX(a, (sN(), rN)).mb().H(), 7).b;
        n = Wv(nX(a, ZM).mb().H(), 7).e;
        h = i.c.length;
        t = MX(Wv(yU(a.f, 0), 7));
        while (h-- > 0) {
          p = (Cxb(0, i.c.length), Wv(i.c[0], 12));
          e = (Cxb(0, n.c.length), Wv(n.c[0], 12));
          s = e.d.b;
          f = zU(s, e, 0);
          fW(p, e.d, f);
          dW(e, null);
          eW(e, null);
          o2 = p.a;
          b && QI(o2, new II(t));
          for (d = WI(e.a, 0); d.b != d.d.c; ) {
            c = Wv(_ub(d), 10);
            QI(o2, new II(c));
          }
          r = p.b;
          for (m = new Tob(e.b); m.a < m.c.c.length; ) {
            l = Wv(Rob(m), 33);
            r.c[r.c.length] = l;
          }
          q = Wv(rJ(p, (eM(), CL)), 44);
          g = Wv(rJ(e, CL), 44);
          if (g) {
            if (!q) {
              q = new jJ();
              sJ(p, CL, q);
            }
            for (k = WI(g, 0); k.b != k.d.c; ) {
              j = Wv(_ub(k), 10);
              QI(q, new II(j));
            }
          }
        }
      }
      function XO(a, b, c) {
        var d, e, f, g, h;
        f = Li(DW(a));
        if (f.Nb().V()) {
          return;
        }
        h = 0;
        switch (Wv(a.e, 7).g.e) {
          case 4:
          case 2:
            h = b && Ckb(Ixb(Xv(rJ(Wv(a.e, 7), (Rib(), lib))))) ? a.e.j.b : (a.e.j.b - Wv(f.Nb().sb(0), 129).pc().b) / 2 - c;
            break;
          case 1:
            h = a.e.j.b;
            break;
          case 3:
            h = 0;
        }
        Wv(a.e, 7).g == (sN(), pN) && Ii(f);
        for (e = new Tob(DW(a)); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 129);
          g = new II(a.e.i);
          switch (Wv(a.e, 7).g.e) {
            case 4:
              g.a = a.e.j.a + c;
              g.b = h + c;
              h += c + d.e.j.b;
              break;
            case 2:
              g.a = -d.e.j.a - c;
              g.b = h + c;
              h += c + d.e.j.b;
              break;
            case 1:
              g.a = (a.e.j.a - d.e.j.a) / 2;
              g.b = h + c;
              h += c + d.e.j.b;
              break;
            case 3:
              g.a = (a.e.j.a - d.e.j.a) / 2;
              g.b = h - c - d.e.j.b;
              h -= c + d.e.j.b;
          }
          d.e.i.a = g.a;
          d.e.i.b = g.b;
        }
      }
      function jR(a, b) {
        var c, d, e, f, g, h, i, j, k, l;
        a.a = new NR(Tsb(Bz));
        for (d = new Tob(b.a); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 347);
          h = new QR(Bv(tv(kA, 1), syb, 25, 0, []));
          vU(a.a.a, h);
          for (j = new Tob(c.d); j.a < j.c.c.length; ) {
            i = Wv(Rob(j), 62);
            k = new pR(a, i);
            iR(k, Wv(rJ(c.c, (Rib(), fib)), 18));
            if (!Qmb(a.g, c)) {
              Umb(a.g, c, new HI(i.d, i.e));
              Umb(a.f, c, k);
            }
            vU(a.a.b, k);
            OR(h, k);
          }
          for (g = new Tob(c.b); g.a < g.c.c.length; ) {
            f = Wv(Rob(g), 251);
            k = new pR(a, f.Bc());
            Umb(a.b, f, new RJ(h, k));
            iR(k, Wv(rJ(c.c, (Rib(), fib)), 18));
            if (f.zc()) {
              l = new qR(a, f.zc(), 1);
              iR(l, Wv(rJ(c.c, fib), 18));
              e = new QR(Bv(tv(kA, 1), syb, 25, 0, []));
              OR(e, l);
              Fd(a.c, f.yc(), new RJ(h, l));
            }
          }
        }
        return a.a;
      }
      function ccb(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t;
        p = b.c.c.length;
        if (p < 3) {
          return;
        }
        n = xv(mw, Yyb, 26, p, 12, 1);
        l = 0;
        for (k = new Tob(b.c); k.a < k.c.c.length; ) {
          j = Wv(Rob(k), 16);
          n[l++] = j.a.c.length;
        }
        m = new Fnb(b.c, 2);
        for (d = 1; d < p - 1; d++) {
          c = (Bxb(m.b < m.d.Y()), Wv(m.d.sb(m.c = m.b++), 16));
          o2 = new Tob(c.a);
          f = 0;
          h = 0;
          for (i = 0; i < n[d + 1]; i++) {
            t = Wv(Rob(o2), 9);
            if (i == n[d + 1] - 1 || bcb(a, t, d + 1, d)) {
              g = n[d] - 1;
              bcb(a, t, d + 1, d) && (g = a.d.e[Wv(Wv(Wv(yU(a.d.b, t.k), 20).sb(0), 27).a, 9).k]);
              while (h <= i) {
                s = Wv(yU(c.a, h), 9);
                if (!bcb(a, s, d + 1, d)) {
                  for (r = Wv(yU(a.d.b, s.k), 20).mb(); r.G(); ) {
                    q = Wv(r.H(), 27);
                    e = a.d.e[Wv(q.a, 9).k];
                    (e < f || e > g) && stb(a.c, Wv(q.b, 12));
                  }
                }
                ++h;
              }
              f = g;
            }
          }
        }
      }
      function _9(a, b, c) {
        var d, e, f, g, h, i;
        this.g = a;
        h = b.d.length;
        i = c.d.length;
        this.d = xv(qB, Nzb, 9, h + i, 0, 1);
        for (g = 0; g < h; g++) {
          this.d[g] = b.d[g];
        }
        for (f = 0; f < i; f++) {
          this.d[h + f] = c.d[f];
        }
        if (b.e) {
          this.e = Eo(b.e);
          this.e.nb(c);
          if (c.e) {
            for (e = c.e.mb(); e.G(); ) {
              d = Wv(e.H(), 102);
              if (d == b) {
                continue;
              } else
                this.e.kb(d) ? --d.c : this.e.ib(d);
            }
          }
        } else if (c.e) {
          this.e = Eo(c.e);
          this.e.nb(b);
        }
        this.f = b.f + c.f;
        this.a = b.a + c.a;
        this.a > 0 ? Z9(this, this.f / this.a) : W9(b.g, b.d[0]).a != null && W9(c.g, c.d[0]).a != null ? Z9(this, (Ixb(W9(b.g, b.d[0]).a) + Ixb(W9(c.g, c.d[0]).a)) / 2) : W9(b.g, b.d[0]).a != null ? Z9(this, W9(b.g, b.d[0]).a) : W9(c.g, c.d[0]).a != null && Z9(this, W9(c.g, c.d[0]).a);
      }
      function x9(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m;
        switch (a.g.e) {
          case 1:
            d = Wv(rJ(a, (Rib(), uib)), 12);
            c = Wv(rJ(d, vib), 44);
            !c ? c = new jJ() : Ckb(Ixb(Xv(rJ(d, Iib)))) && (c = lJ(c));
            j = Wv(rJ(a, qib), 7);
            k = MI(Bv(tv(qz, 1), Fzb, 10, 0, [j.f.i, j.i, j.a]));
            if (b <= k.a) {
              return k.b;
            }
            TI(c, k, c.a, c.a.a);
            l = Wv(rJ(a, rib), 7);
            m = MI(Bv(tv(qz, 1), Fzb, 10, 0, [l.f.i, l.i, l.a]));
            if (m.a <= b) {
              return m.b;
            }
            TI(c, m, c.c.b, c.c);
            i = WI(c, 0);
            g = Wv(_ub(i), 10);
            h = Wv(_ub(i), 10);
            while (h.a < b && i.b != i.d.c) {
              g = h;
              h = Wv(_ub(i), 10);
            }
            return g.b + (b - g.a) / (h.a - g.a) * (h.b - g.b);
          case 3:
            f = Wv(rJ(Wv(yU(a.f, 0), 7), (Rib(), uib)), 7);
            e = f.f;
            switch (f.g.e) {
              case 1:
                return e.i.b;
              case 3:
                return e.i.b + e.j.b;
            }
        }
        return kX(a).b;
      }
      function KP(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m;
        k = gw(rJ(a.c.f, (Rib(), sib))) === gw(rJ(a.d.f, sib));
        g = new FI();
        c = Wv(rJ(a, (eM(), oL)), 44);
        if (!!c && c.b >= 2) {
          _I(a.a);
          d = 0;
          for (m = WI(c, 0); m.b != m.d.c; ) {
            l = Wv(_ub(m), 10);
            if (d == 0) {
              b = EI(EI(new HI(l.a, l.b), a.c.i), a.c.f.i);
              a.c.a.a = b.a;
              a.c.a.b = b.b;
            } else if (d == c.b - 1) {
              b = EI(EI(new HI(l.a, l.b), a.d.i), a.d.f.i);
              a.d.a.a = b.a;
              a.d.a.b = b.b;
            } else {
              QI(a.a, l);
            }
            ++d;
          }
        }
        if (k) {
          for (i = WI(a.a, 0); i.b != i.d.c; ) {
            h = Wv(_ub(i), 10);
            g.a = Nlb(g.a, h.a);
            g.b = Nlb(g.b, h.b);
          }
        }
        for (f = new Tob(a.b); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 33);
          j = Wv(rJ(e, YL), 10);
          if (j) {
            e.i.a = j.a;
            e.i.b = j.b;
          }
          if (k) {
            g.a = Nlb(g.a, e.i.a + e.j.a);
            g.b = Nlb(g.b, e.i.b + e.j.b);
          }
        }
        return g;
      }
      function eQ(a, b, c) {
        var d, e, f, g, h, i, j;
        SP(b);
        d = Wv(rJ(c, (Rib(), jib)), 18);
        g = new uX(c);
        sJ(g, uib, b);
        vU(c.b, g);
        f = Wv(Pu(b, "id"), 97);
        Vmb(a.i, f.a, g);
        Umb(a.j, g, b);
        _P(b, g);
        hQ(b, g);
        if ("ports" in b.a) {
          j = Pu(b, "ports");
          if (!j.hc()) {
            throw new GQ("The 'ports' property of the node must be an array.", j, b);
          }
          i = j.hc();
          for (e = 0; e < i.a.length; ++e) {
            aw(gu(i, e), 69) && gQ(a, Wv(gu(i, e), 69), g, c);
          }
        }
        dQ(a, b, g, c);
        Mzb in b.a && Pu(b, Mzb).hc().a.length > 0 && sJ(g, $hb, (xkb(), xkb(), wkb));
        h = Wv(rJ(g, (eM(), TL)), 28);
        h == (KM(), JM) ? IM : h != IM && d.ib((ohb(), khb));
        Ckb(Ixb(Xv(rJ(g, qL)))) && d.ib((ohb(), fhb));
        if (Ckb(Ixb(Xv(rJ(g, AL))))) {
          d.ib((ohb(), jhb));
          d.ib(ihb);
          sJ(g, TL, IM);
        }
        return g;
      }
      function iR(a, b) {
        b.V() && wS(a.n, true, true, true, true);
        b.t((sN(), eN)) && wS(a.n, true, true, true, false);
        b.t(_M) && wS(a.n, false, true, true, true);
        b.t(mN) && wS(a.n, true, true, false, true);
        b.t(oN) && wS(a.n, true, false, true, true);
        b.t(fN) && wS(a.n, false, true, true, false);
        b.t(aN) && wS(a.n, false, true, false, true);
        b.t(nN) && wS(a.n, true, false, false, true);
        b.t(lN) && wS(a.n, true, false, true, false);
        b.t(jN) && wS(a.n, true, true, true, true);
        b.t(cN) && wS(a.n, true, true, true, true);
        b.t(jN) && wS(a.n, true, true, true, true);
        b.t(bN) && wS(a.n, true, true, true, true);
        b.t(kN) && wS(a.n, true, true, true, true);
        b.t(iN) && wS(a.n, true, true, true, true);
        b.t(hN) && wS(a.n, true, true, true, true);
      }
      function n1(a, b) {
        var c, d, e, f, g, h, i, j, k, l;
        i = true;
        e = 0;
        j = a.f[b.k];
        k = b.j.b + a.n;
        c = a.c[b.k][2];
        DU(a.a, j, Elb(Wv(yU(a.a, j), 24).a - 1 + c));
        DU(a.b, j, Ixb(Yv(yU(a.b, j))) - k + c * a.e);
        ++j;
        if (j >= a.i) {
          ++a.i;
          vU(a.a, Elb(1));
          vU(a.b, k);
        } else {
          d = a.c[b.k][1];
          DU(a.a, j, Elb(Wv(yU(a.a, j), 24).a + 1 - d));
          DU(a.b, j, Ixb(Yv(yU(a.b, j))) + k - d * a.e);
        }
        (a.q == (I1(), B1) && (Wv(yU(a.a, j), 24).a > a.j || Wv(yU(a.a, j - 1), 24).a > a.j) || a.q == E1 && (Ixb(Yv(yU(a.b, j))) > a.k || Ixb(Yv(yU(a.b, j - 1))) > a.k)) && (i = false);
        for (g = Uh(iX(b)); Cm(g); ) {
          f = Wv(Dm(g), 12);
          h = f.c.f;
          if (a.f[h.k] == j) {
            l = n1(a, h);
            e = e + Wv(l.a, 24).a;
            i = i && Ckb(Ixb(Xv(l.b)));
          }
        }
        a.f[b.k] = j;
        e = e + a.c[b.k][0];
        return new RJ(Elb(e), (xkb(), i ? wkb : vkb));
      }
      function WW(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r;
        m = new II(a.j);
        r = b.a / m.a;
        h = b.b / m.b;
        p = b.a - m.a;
        f = b.b - m.b;
        if (c) {
          e = gw(rJ(a, (eM(), TL))) === gw((KM(), FM));
          for (o2 = new Tob(a.f); o2.a < o2.c.c.length; ) {
            n = Wv(Rob(o2), 7);
            switch (n.g.e) {
              case 1:
                e || (n.i.a *= r);
                break;
              case 2:
                n.i.a += p;
                e || (n.i.b *= h);
                break;
              case 3:
                e || (n.i.a *= r);
                n.i.b += f;
                break;
              case 4:
                e || (n.i.b *= h);
            }
          }
        }
        for (j = new Tob(a.c); j.a < j.c.c.length; ) {
          i = Wv(Rob(j), 33);
          k = i.i.a + i.j.a / 2;
          l = i.i.b + i.j.b / 2;
          q = k / m.a;
          g = l / m.b;
          if (q + g >= 1) {
            if (q - g > 0 && l >= 0) {
              i.i.a += p;
              i.i.b += f * g;
            } else if (q - g < 0 && k >= 0) {
              i.i.a += p * q;
              i.i.b += f;
            }
          }
        }
        a.j.a = b.a;
        a.j.b = b.b;
        sJ(a, (eM(), aM), (DN(), d = Wv(Hkb(Lz), 11), new atb(d, Wv(exb(d, d.length), 11), 0)));
      }
      function C7(a) {
        var b, c, d, e, f, g, h, i, j, k;
        d = new GU();
        for (g = new Tob(a.e.a); g.a < g.c.c.length; ) {
          e = Wv(Rob(g), 61);
          k = 0;
          e.k.c = xv(UF, syb, 1, 0, 4, 1);
          for (c = new Tob(m7(e)); c.a < c.c.c.length; ) {
            b = Wv(Rob(c), 89);
            if (b.e) {
              vU(e.k, b);
              ++k;
            }
          }
          k == 1 && (d.c[d.c.length] = e, true);
        }
        for (f = new Tob(d); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 61);
          while (e.k.c.length == 1) {
            j = Wv(Rob(new Tob(e.k)), 89);
            a.b[j.b] = j.f;
            h = j.c;
            i = j.d;
            for (c = new Tob(m7(e)); c.a < c.c.c.length; ) {
              b = Wv(Rob(c), 89);
              b == j || (b.e ? h == b.c || i == b.d ? a.b[j.b] -= a.b[b.b] - b.f : a.b[j.b] += a.b[b.b] - b.f : e == h ? b.c == e ? a.b[j.b] += b.f : a.b[j.b] -= b.f : b.c == e ? a.b[j.b] -= b.f : a.b[j.b] += b.f);
            }
            BU(h.k, j);
            BU(i.k, j);
            h == e ? e = j.d : e = j.c;
          }
        }
      }
      function _fb(a) {
        var b, c, d, e, f, g, h, i, j, k;
        j = new aJ();
        h = new aJ();
        for (f = new Tob(a); f.a < f.c.c.length; ) {
          d = Wv(Rob(f), 77);
          d.e = d.d.c.length;
          d.k = d.j.c.length;
          d.e == 0 && (TI(j, d, j.c.b, j.c), true);
          d.k == 0 && d.g.a.Y() == 0 && (TI(h, d, h.c.b, h.c), true);
        }
        g = -1;
        while (j.b != 0) {
          d = Wv(un(j, 0), 77);
          for (c = new Tob(d.j); c.a < c.c.c.length; ) {
            b = Wv(Rob(c), 117);
            k = b.b;
            k.n = Plb(k.n, d.n + 1);
            g = Plb(g, k.n);
            --k.e;
            k.e == 0 && (TI(j, k, j.c.b, j.c), true);
          }
        }
        if (g > -1) {
          for (e = WI(h, 0); e.b != e.d.c; ) {
            d = Wv(_ub(e), 77);
            d.n = g;
          }
          while (h.b != 0) {
            d = Wv(un(h, 0), 77);
            for (c = new Tob(d.d); c.a < c.c.c.length; ) {
              b = Wv(Rob(c), 117);
              i = b.a;
              if (i.g.a.Y() != 0) {
                continue;
              }
              i.n = Slb(i.n, d.n - 1);
              --i.k;
              i.k == 0 && (TI(h, i, h.c.b, h.c), true);
            }
          }
        }
      }
      function QV(a, b, c, d) {
        var e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v;
        i = new GU();
        for (f = new Tob(b.b); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 9);
          for (h = new Tob(e.f); h.a < h.c.c.length; ) {
            g = Wv(Rob(h), 7);
            k = null;
            for (t = Wv(FU(g.e, xv(dB, gAb, 12, 0, 0, 1)), 47), u = 0, v = t.length; u < v; ++u) {
              s = t[u];
              if (!SW(s.d.f, c)) {
                r = LV(a, b, c, s, s.c, (djb(), bjb), k);
                r != k && (i.c[i.c.length] = r, true);
                r.c && (k = r);
              }
            }
            j = null;
            for (o2 = Wv(FU(g.b, xv(dB, gAb, 12, 0, 0, 1)), 47), p = 0, q = o2.length; p < q; ++p) {
              n = o2[p];
              if (!SW(n.c.f, c)) {
                r = LV(a, b, c, n, n.d, (djb(), ajb), j);
                r != j && (i.c[i.c.length] = r, true);
                r.c && (j = r);
              }
            }
          }
        }
        for (m = new Tob(i); m.a < m.c.c.length; ) {
          l = Wv(Rob(m), 187);
          zU(b.b, l.a, 0) != -1 || vU(b.b, l.a);
          l.c && (d.c[d.c.length] = l, true);
        }
      }
      function WO(a) {
        var b, c, d, e, f, g, h, i, j;
        d = a.e.e.j;
        b = Wv(oW(a.e, (eM(), aM)), 86).kb((DN(), CN));
        PO(a);
        for (f = new Tob(AW(a.e)); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 161);
          h = Wv(oW(e, LL), 15);
          !h && (h = new llb(0));
          i = e.e.j;
          g = (c = Wv(e.e, 7).d, new EP(c.d, c.b, c.a, c.c));
          j = new II(e.e.i);
          switch (Wv(e.e, 7).g.e) {
            case 4:
              j.a = -i.a - h.a;
              j.b = a.s - i.b - (b ? g.a : 0);
              a.s -= cP(a, (sN(), rN)) + i.b + (b ? g.d + g.a : 0);
              break;
            case 2:
              j.a = d.a + h.a;
              j.b = a.a + (b ? g.d : 0);
              a.a += cP(a, (sN(), ZM)) + i.b + (b ? g.d + g.a : 0);
              break;
            case 1:
              j.a = a.f + (b ? g.b : 0);
              j.b = -e.e.j.b - h.a;
              a.f += cP(a, (sN(), $M)) + i.a + (b ? g.b + g.c : 0);
              break;
            case 3:
              j.a = a.r - i.a - (b ? g.c : 0);
              j.b = d.b + h.a;
              a.r -= cP(a, (sN(), pN)) + i.a + (b ? g.b + g.c : 0);
          }
          e.e.i.a = j.a;
          e.e.i.b = j.b;
        }
      }
      function u$(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r;
        k = new Wub();
        l = new Wub();
        q = new Wub();
        r = new Wub();
        j = Wv(rJ(b, (Rib(), Jib)), 15).a;
        f = j * Wv(rJ(b, (Mjb(), qjb)), 15).a;
        Ckb(Ixb(Xv(rJ(b, (eM(), rL)))));
        for (i = (m = new Snb(c.a).a.bb().mb(), new Ynb(m)); i.a.G(); ) {
          h = (g = Wv(i.a.H(), 21), Wv(g.yb(), 9));
          n = Wv(rJ(h, hib), 32);
          if (n == (sN(), $M)) {
            l.a.db(h, l);
            for (e = Uh(iX(h)); Cm(e); ) {
              d = Wv(Dm(e), 12);
              stb(k, d.c.f);
            }
          } else if (n == pN) {
            r.a.db(h, r);
            for (e = Uh(iX(h)); Cm(e); ) {
              d = Wv(Dm(e), 12);
              stb(q, d.c.f);
            }
          }
        }
        if (k.a.Y() != 0) {
          o2 = new cdb(2, f);
          p = bdb(o2, b, k, l, -j - b.d.b);
          if (p > 0) {
            a.a = j + (p - 1) * f;
            b.d.b += a.a;
            b.e.b += a.a;
          }
        }
        if (q.a.Y() != 0) {
          o2 = new cdb(1, f);
          p = bdb(o2, b, q, r, b.e.b + j - b.d.b);
          p > 0 && (b.e.b += j + (p - 1) * f);
        }
      }
      function Xt(a, b) {
        var c, d, e, f, g, h, i, j, k;
        if ((bmb(), b.length) == 0) {
          return a.fc(Yxb, Xxb, -1, -1);
        }
        k = hmb(b);
        emb(k.substr(0, 3), "at ") && (k = imb(k, 3, k.length - 3));
        k = k.replace(/\[.*?\]/g, "");
        g = k.indexOf("(");
        if (g == -1) {
          g = k.indexOf("@");
          if (g == -1) {
            j = k;
            k = "";
          } else {
            j = hmb(imb(k, g + 1, k.length - (g + 1)));
            k = hmb(k.substr(0, g));
          }
        } else {
          c = k.indexOf(")", g);
          j = k.substr(g + 1, c - (g + 1));
          k = hmb(k.substr(0, g));
        }
        g = mmb(k, lmb(46));
        g != -1 && (k = imb(k, g + 1, k.length - (g + 1)));
        (k.length == 0 || emb(k, "Anonymous function")) && (k = Xxb);
        h = nmb(j, lmb(58));
        e = omb(j, lmb(58), h - 1);
        i = -1;
        d = -1;
        f = Yxb;
        if (h != -1 && e != -1) {
          f = j.substr(0, e);
          i = St(j.substr(e + 1, h - (e + 1)));
          d = St(imb(j, h + 1, j.length - (h + 1)));
        }
        return a.fc(f, k, i, d);
      }
      function idb(a) {
        var b, c, d, e, f, g, h, i, j, k;
        j = new GU();
        h = new GU();
        for (g = new Tob(a); g.a < g.c.c.length; ) {
          e = Wv(Rob(g), 80);
          e.c = e.b.c.length;
          e.f = e.e.c.length;
          e.c == 0 && (j.c[j.c.length] = e, true);
          e.f == 0 && e.j.b == 0 && (h.c[h.c.length] = e, true);
        }
        d = -1;
        while (j.c.length != 0) {
          e = Wv(AU(j, 0), 80);
          for (c = new Tob(e.e); c.a < c.c.c.length; ) {
            b = Wv(Rob(c), 118);
            k = b.b;
            k.i = Plb(k.i, e.i + 1);
            d = Plb(d, k.i);
            --k.c;
            k.c == 0 && (j.c[j.c.length] = k, true);
          }
        }
        if (d > -1) {
          for (f = new Tob(h); f.a < f.c.c.length; ) {
            e = Wv(Rob(f), 80);
            e.i = d;
          }
          while (h.c.length != 0) {
            e = Wv(AU(h, 0), 80);
            for (c = new Tob(e.b); c.a < c.c.c.length; ) {
              b = Wv(Rob(c), 118);
              i = b.a;
              if (i.j.b > 0) {
                continue;
              }
              i.i = Slb(i.i, e.i - 1);
              --i.f;
              i.f == 0 && (h.c[h.c.length] = i, true);
            }
          }
        }
      }
      function PV(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m, n, o2, p;
        if (!Ckb(Ixb(Xv(rJ(c, (eM(), $L)))))) {
          return;
        }
        for (h = new Tob(c.f); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 7);
          l = Wv(FU(g.e, xv(dB, gAb, 12, g.e.c.length, 0, 1)), 47);
          for (j = 0, k = l.length; j < k; ++j) {
            i = l[j];
            f = i.d.f == c;
            e = f && Ckb(Ixb(Xv(rJ(i, $L))));
            if (e) {
              n = i.c;
              m = Wv(Smb(a.b, n), 9);
              if (!m) {
                m = NW(n, (KM(), IM), n.g, -1, n.j, Wv(rJ(b, sL), 59), b);
                sJ(m, (Rib(), uib), n);
                Umb(a.b, n, m);
                vU(b.b, m);
              }
              p = i.d;
              o2 = Wv(Smb(a.b, p), 9);
              if (!o2) {
                o2 = NW(p, (KM(), IM), p.g, 1, p.j, Wv(rJ(b, sL), 59), b);
                sJ(o2, (Rib(), uib), p);
                Umb(a.b, p, o2);
                vU(b.b, o2);
              }
              d = IV(i);
              dW(d, Wv(yU(m.f, 0), 7));
              eW(d, Wv(yU(o2.f, 0), 7));
              Fd(a.a, i, new XV(d, b, (djb(), bjb)));
              Wv(rJ(b, (Rib(), jib)), 18).ib((ohb(), hhb));
            }
          }
        }
      }
      function vfb(a, b, c, d, e, f) {
        var g, h, i, j, k, l, m, n, o2, p, q, r, s, t;
        n = sgb(a.g);
        p = sgb(c.g);
        o2 = vI(xI(a.i), a.a);
        q = vI(xI(c.i), c.a);
        g = vI(new II(o2), CI(new GI(n), b));
        h = vI(new II(q), CI(new GI(p), d));
        j = ogb(a, e);
        e == (sN(), pN) || e == ZM ? j += f : j -= f;
        m = new FI();
        r = new FI();
        switch (e.e) {
          case 1:
          case 3:
            m.a = g.a;
            m.b = o2.b + j;
            r.a = h.a;
            r.b = m.b;
            break;
          case 2:
          case 4:
            m.a = o2.a + j;
            m.b = g.b;
            r.a = m.a;
            r.b = h.b;
            break;
          default:
            return null;
        }
        k = CI(vI(new HI(m.a, m.b), r), 0.5);
        l = new ufb(Bv(tv(qz, 1), Fzb, 10, 0, [o2, g, m, k, r, h, q]));
        i = ifb(l);
        t = jfb(l);
        switch (e.e) {
          case 1:
          case 3:
            l.a = i;
            s = lfb(l);
            break;
          case 2:
          case 4:
            l.a = t;
            s = kfb(l);
            break;
          default:
            return null;
        }
        bfb(l, new Ffb(Bv(tv(qz, 1), Fzb, 10, 0, [i, t, s, o2, q])));
        return l;
      }
      function qU(a, b, c, d) {
        var e, f, g, h, i, j, k, l, m, n;
        f = new eV(b);
        l = lU(a, b, f);
        n = Nlb(Wv(rJ(b, (eM(), dM)), 15).a, 1);
        for (k = new Tob(l.a); k.a < k.c.c.length; ) {
          j = Wv(Rob(k), 27);
          i = pU(Wv(j.a, 10), Wv(j.b, 10), n);
          o = true;
          o = o & YU(c, new HI(i.d, i.e));
          o = o & YU(c, uI(new HI(i.d, i.e), i.c, 0));
          o = o & YU(c, uI(new HI(i.d, i.e), 0, i.b));
          o & YU(c, uI(new HI(i.d, i.e), i.c, i.b));
        }
        m = f.d;
        h = pU(Wv(l.b.a, 10), Wv(l.b.b, 10), n);
        if (m == (sN(), rN) || m == ZM) {
          d.c[m.e] = Qlb(d.c[m.e], h.e);
          d.b[m.e] = Nlb(d.b[m.e], h.e + h.b);
        } else {
          d.c[m.e] = Qlb(d.c[m.e], h.d);
          d.b[m.e] = Nlb(d.b[m.e], h.d + h.c);
        }
        e = Vzb;
        g = f.c.f.e;
        switch (m.e) {
          case 4:
            e = g.c;
            break;
          case 2:
            e = g.b;
            break;
          case 1:
            e = g.a;
            break;
          case 3:
            e = g.d;
        }
        d.a[m.e] = Nlb(d.a[m.e], e);
        return f;
      }
      function OV(a, b, c, d, e) {
        var f, g, h, i, j, k, l, m, n, o2, p, q;
        f = new GU();
        for (j = new Tob(d); j.a < j.c.c.length; ) {
          h = Wv(Rob(j), 187);
          g = null;
          if (h.f == (djb(), bjb)) {
            for (o2 = new Tob(h.e); o2.a < o2.c.c.length; ) {
              n = Wv(Rob(o2), 12);
              q = n.d.f;
              if (hX(q) == b) {
                GV(a, b, h, n, h.b, n.d);
              } else if (!c || SW(q, c)) {
                HV(a, b, h, d, n);
              } else {
                m = LV(a, b, c, n, h.b, bjb, g);
                m != g && (f.c[f.c.length] = m, true);
                m.c && (g = m);
              }
            }
          } else {
            for (l = new Tob(h.e); l.a < l.c.c.length; ) {
              k = Wv(Rob(l), 12);
              p = k.c.f;
              if (hX(p) == b) {
                GV(a, b, h, k, k.c, h.b);
              } else if (!c || SW(p, c)) {
                continue;
              } else {
                m = LV(a, b, c, k, h.b, ajb, g);
                m != g && (f.c[f.c.length] = m, true);
                m.c && (g = m);
              }
            }
          }
        }
        for (i = new Tob(f); i.a < i.c.c.length; ) {
          h = Wv(Rob(i), 187);
          zU(b.b, h.a, 0) != -1 || vU(b.b, h.a);
          h.c && (e.c[e.c.length] = h, true);
        }
      }
      function TO(a) {
        var b, c, d, e;
        b = a.e.j;
        for (d = new Tob(AW(a)); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 161);
          e = Wv(oW(c, (eM(), LL)), 15);
          !e && (e = new llb(0));
          switch (Wv(c.e, 7).g.e) {
            case 4:
              c.e.i.b = b.b * Ixb(Yv(oW(c, HO)));
              c.e.i.a = -c.e.j.a - e.a;
              break;
            case 2:
              c.e.i.b = b.b * Ixb(Yv(oW(c, HO)));
              c.e.i.a = b.a + e.a;
              break;
            case 1:
              c.e.i.a = b.a * Ixb(Yv(oW(c, HO)));
              c.e.i.b = -c.e.j.b - e.a;
              break;
            case 3:
              c.e.i.a = b.a * Ixb(Yv(oW(c, HO)));
              c.e.i.b = b.b + e.a;
          }
          switch (Wv(c.e, 7).g.e) {
            case 4:
              c.e.i.b = b.b * Ixb(Yv(oW(c, HO)));
              c.e.i.a = -c.e.j.a - e.a;
              break;
            case 2:
              c.e.i.b = b.b * Ixb(Yv(oW(c, HO)));
              c.e.i.a = b.a + e.a;
              break;
            case 1:
              c.e.i.a = b.a * Ixb(Yv(oW(c, HO)));
              c.e.i.b = -c.e.j.b - e.a;
              break;
            case 3:
              c.e.i.a = b.a * Ixb(Yv(oW(c, HO)));
              c.e.i.b = b.b + e.a;
          }
        }
      }
      function C2(a) {
        var b, c, d, e, f, g, h, i, j;
        f = a.f;
        e = pr(Zdb(a));
        j = WI(Eo(a.g), 0);
        while (j.b != j.d.c) {
          i = Wv(_ub(j), 7);
          if (i.e.c.length == 0) {
            for (c = new Tob(i.b); c.a < c.c.c.length; ) {
              b = Wv(Rob(c), 12);
              d = b.c;
              if (e.a.R(d)) {
                g = new Fnb(f.f, 0);
                h = (Bxb(g.b < g.d.Y()), Wv(g.d.sb(g.c = g.b++), 7));
                while (h != i) {
                  h = (Bxb(g.b < g.d.Y()), Wv(g.d.sb(g.c = g.b++), 7));
                }
                Anb(g, d);
                $ub(j, d);
                J2(d, i.g);
                avb(j);
                avb(j);
                e.a.eb(d) != null;
              }
            }
          } else {
            for (c = new Tob(i.e); c.a < c.c.c.length; ) {
              b = Wv(Rob(c), 12);
              d = b.d;
              if (e.a.R(d)) {
                g = new Fnb(f.f, 0);
                h = (Bxb(g.b < g.d.Y()), Wv(g.d.sb(g.c = g.b++), 7));
                while (h != i) {
                  h = (Bxb(g.b < g.d.Y()), Wv(g.d.sb(g.c = g.b++), 7));
                }
                Bxb(g.b > 0);
                g.a.sb(g.c = --g.b);
                Anb(g, d);
                $ub(j, d);
                J2(d, i.g);
                avb(j);
                avb(j);
                e.a.eb(d) != null;
              }
            }
          }
        }
      }
      function IP(b) {
        var c, d, e, f, g, h, i, j, k;
        g = new Uu(b);
        f = Pu(g, "graph");
        j = Pu(g, "success");
        e = Pu(g, "error");
        h = Pu(g, "options");
        try {
          if (!f || !f.kc()) {
            throw new $J("Mandatory parameter missing, 'graph' must be specified");
          }
          AQ(new CQ(), f.kc(), h ? h.kc() : null);
          i = f.kc().a;
          !!j && !!j.kc() ? HP(j.kc().a, i) : HP(null, i);
        } catch (a) {
          a = OH(a);
          if (aw(a, 73)) {
            k = a;
            !!e && !!e.kc() ? HP(e.kc().a, DQ(k).a) : HP(null, DQ(k).a);
          } else if (aw(a, 54)) {
            c = a;
            d = new Tu();
            Ru(d, "type", new lv(Ikb(c.$c)));
            c.bc() != null ? Ru(d, Dzb, new lv(c.bc())) : Ru(d, Dzb, new lv("null (sic)"));
            Ru(d, Ezb, new lv(Hb(new Kb("\n"), new wnb(new opb((c.g == null && (c.g = Pt(c)), c.g))))));
            !!e && !!e.kc() ? HP(e.kc().a, d.a) : HP(null, d.a);
            at(c, (Fmb(), Dmb), "");
          } else
            throw NH(a);
        }
      }
      function e9(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m;
        if (c) {
          d = -1;
          k = new Fnb(b, 0);
          while (k.b < k.d.Y()) {
            h = (Bxb(k.b < k.d.Y()), Wv(k.d.sb(k.c = k.b++), 9));
            l = a.a[h.d.k][h.k].a;
            if (l == null) {
              g = d + 1;
              f = new Fnb(b, k.b);
              while (f.b < f.d.Y()) {
                m = i9(a, (Bxb(f.b < f.d.Y()), Wv(f.d.sb(f.c = f.b++), 9))).a;
                if (m != null) {
                  g = (Dxb(m), m);
                  break;
                }
              }
              l = (d + g) / 2;
              a.a[h.d.k][h.k].a = l;
              a.a[h.d.k][h.k].d = (Dxb(l), l);
              a.a[h.d.k][h.k].b = 1;
            }
            d = (Dxb(l), l);
          }
        } else {
          e = 0;
          for (j = new Tob(b); j.a < j.c.c.length; ) {
            h = Wv(Rob(j), 9);
            a.a[h.d.k][h.k].a != null && (e = Nlb(e, Ixb(a.a[h.d.k][h.k].a)));
          }
          e += 2;
          for (i = new Tob(b); i.a < i.c.c.length; ) {
            h = Wv(Rob(i), 9);
            if (a.a[h.d.k][h.k].a == null) {
              l = wvb(a.e, 24) * FAb * e - 1;
              a.a[h.d.k][h.k].a = l;
              a.a[h.d.k][h.k].d = l;
              a.a[h.d.k][h.k].b = 1;
            }
          }
        }
      }
      function RO(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m, n, o2;
        i = 0;
        j = 0;
        o2 = 0;
        n = 0;
        g = 0;
        m = 0;
        l = 0;
        k = 0;
        for (f = new Lsb(new Fsb(a.c).a); htb(f.a); ) {
          e = (f.b = itb(f.a), new Psb(f.c, f.b));
          d = Wv(e.b.b[e.a.e], 62);
          switch (Wv(e.a, 67).e) {
            case 12:
            case 13:
            case 14:
              m += d.c + b;
              break;
            case 15:
            case 16:
            case 17:
              l += d.c + b;
              g = Nlb(g, d.b + b);
              break;
            case 18:
            case 19:
            case 20:
              k += d.c + b;
              break;
            case 0:
            case 1:
            case 2:
              o2 += d.c + b;
              break;
            case 3:
            case 4:
            case 5:
              n += d.c + b;
              break;
            case 6:
            case 7:
            case 8:
              i += d.b + b;
              break;
            case 9:
            case 10:
            case 11:
              j += d.b + b;
          }
        }
        i -= b;
        j -= b;
        o2 -= b;
        n -= b;
        m += m != 0 ? b : 0;
        l += l != 0 ? b : 0;
        k += k != 0 ? b : 0;
        h = a.p.d + g + a.p.a;
        h += h != 0 ? b : 0;
        c.a = Nlb(c.a, o2);
        c.a = Nlb(c.a, m);
        c.a = Nlb(c.a, l);
        c.a = Nlb(c.a, k);
        c.a = Nlb(c.a, n);
        c.b = Nlb(c.b, i);
        c.b = Nlb(c.b, h);
        c.b = Nlb(c.b, j);
      }
      function T9(a) {
        var b, c, d, e, f, g, h, i;
        b = null;
        for (d = new Tob(a); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 102);
          Ixb(W9(c.g, c.d[0]).a);
          c.b = null;
          if (!!c.e && c.e.Y() > 0 && c.c == 0) {
            !b && (b = new GU());
            b.c[b.c.length] = c;
          }
        }
        if (b) {
          while (b.c.length != 0) {
            c = Wv(AU(b, 0), 102);
            if (!!c.b && c.b.c.length > 0) {
              for (f = (!c.b && (c.b = new GU()), new Tob(c.b)); f.a < f.c.c.length; ) {
                e = Wv(Rob(f), 102);
                if (Ixb(W9(e.g, e.d[0]).a) == Ixb(W9(c.g, c.d[0]).a)) {
                  if (zU(a, e, 0) > zU(a, c, 0)) {
                    return new RJ(e, c);
                  }
                } else if (Ixb(W9(e.g, e.d[0]).a) > Ixb(W9(c.g, c.d[0]).a)) {
                  return new RJ(e, c);
                }
              }
            }
            for (h = (!c.e && (c.e = new GU()), c.e).mb(); h.G(); ) {
              g = Wv(h.H(), 102);
              i = (!g.b && (g.b = new GU()), g.b);
              Fxb(0, i.c.length);
              fxb(i.c, 0, c);
              g.c == i.c.length && (b.c[b.c.length] = g, true);
            }
          }
        }
        return null;
      }
      function R0(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o2, p;
        l = (mp(), new ntb());
        for (k = (Il(), new Im(Dl(ul(a.a, new yl())))); Cm(k); ) {
          j = Wv(Dm(k), 9);
          e = Q0(j, (sN(), ZM));
          for (d = new Tob(e); d.a < d.c.c.length; ) {
            c = Wv(Rob(d), 7);
            for (g = new Tob(c.e); g.a < g.c.c.length; ) {
              f = Wv(Rob(g), 12);
              kP();
              p = f.d.f;
              (p.g == (CX(), zX) || p.g == yX) && (p = Wv(rJ(p, (Rib(), rib)), 7).f);
              if (Ktb(l.d, p)) {
                b = Wv(re(Ktb(l.d, p)), 171);
              } else {
                e.c.length == 2 ? gw(c) === gw((Cxb(0, e.c.length), e.c[0])) ? b = gP : b = hP : b = gP;
                Ltb(l.d, p, b);
              }
              for (i = new Tob(f.b); i.a < i.c.c.length; ) {
                h = Wv(Rob(i), 33);
                sJ(h, (Rib(), pib), b);
              }
              for (o2 = new Tob(f.c.c); o2.a < o2.c.c.length; ) {
                m = Wv(Rob(o2), 33);
                sJ(m, (Rib(), pib), b);
              }
              for (n = new Tob(f.d.c); n.a < n.c.c.length; ) {
                m = Wv(Rob(n), 33);
                sJ(m, (Rib(), pib), b);
              }
            }
          }
        }
      }
      function lZ(a, b) {
        var c, d, e, f, g, h, i, j, k;
        if (tl(mX(b)) != 1 || Wv(ql(mX(b)), 12).d.f.g != (CX(), zX)) {
          return null;
        }
        f = Wv(ql(mX(b)), 12);
        c = f.d.f;
        sX(c, (CX(), wX));
        sJ(c, (Rib(), qib), null);
        sJ(c, rib, null);
        sJ(c, (eM(), TL), Wv(rJ(b, TL), 28));
        sJ(c, JL, Wv(rJ(b, JL), 86));
        e = rJ(f.c, uib);
        g = null;
        for (j = nX(c, (sN(), ZM)).mb(); j.G(); ) {
          h = Wv(j.H(), 7);
          if (h.e.c.length != 0) {
            sJ(h, uib, e);
            k = f.c;
            h.j.a = k.j.a;
            h.j.b = k.j.b;
            h.a.a = k.a.a;
            h.a.b = k.a.b;
            xU(h.c, k.c);
            k.c.c = xv(UF, syb, 1, 0, 4, 1);
            g = h;
            break;
          }
        }
        sJ(f.c, uib, null);
        if (!sl(nX(b, ZM))) {
          for (i = new Tob(Ao(nX(b, ZM))); i.a < i.c.c.length; ) {
            h = Wv(Rob(i), 7);
            if (h.e.c.length == 0) {
              d = new RX();
              QX(d, ZM);
              d.j.a = h.j.a;
              d.j.b = h.j.b;
              PX(d, c);
              sJ(d, uib, rJ(h, uib));
              PX(h, null);
            } else {
              PX(g, c);
            }
          }
        }
        c.j.b = b.j.b;
        vU(a.b, c);
        return c;
      }
      function _O(a) {
        var b, c, d, e, f, g, h, i, j;
        f = a.e.e.j;
        g = new II(f);
        i = Wv(oW(a.e, (eM(), aM)), 86);
        j = Wv(oW(a.e, bM), 86);
        h = Wv(oW(a.e, TL), 28);
        b = Zsb(i, (DN(), CN));
        if (i.c == 0) {
          return;
        }
        f.a = 0;
        f.b = 0;
        d = null;
        switch (h.e) {
          case 1:
          case 2:
          case 3:
            d = MO(a, a.k);
            break;
          case 4:
            d = new II(g);
            break;
          case 5:
            d = KO(a.e, b);
        }
        if (Zsb(i, BN)) {
          if (d) {
            f.a = Nlb(f.a, d.a);
            f.b = Nlb(f.b, d.b);
          }
          if (b) {
            f.a = Nlb(f.a, a.q.b + a.q.c + a.k);
            f.b = Nlb(f.b, a.q.d + a.q.a + a.k);
          }
        }
        Zsb(i, AN) && Qob(new Tob(zW(a.e))) && RO(a, a.d, f);
        if (Zsb(i, zN)) {
          e = Wv(oW(a.e, IL), 15).a;
          c = Wv(oW(a.e, HL), 15).a;
          if (Zsb(j, (MN(), KN))) {
            e <= 0 && (e = 20);
            c <= 0 && (c = 20);
          }
          if (Zsb(j, LN)) {
            e > 0 && (f.a = Nlb(f.a, e + a.q.b + a.q.c));
            c > 0 && (f.b = Nlb(f.b, c + a.q.d + a.q.a));
          } else {
            e > 0 && (f.a = Nlb(f.a, e));
            c > 0 && (f.b = Nlb(f.b, c));
          }
        }
        pW(a.e, f);
      }
      function ewb(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m, n;
        if (!a.b) {
          return false;
        }
        g = null;
        m = null;
        i = new ywb(null, null);
        e = 1;
        i.a[1] = a.b;
        l = i;
        while (l.a[e]) {
          j = e;
          h = m;
          m = l;
          l = l.a[e];
          d = a.a.$b(b, l.d);
          e = d < 0 ? 0 : 1;
          d == 0 && (!c.c || ovb(l.e, c.d)) && (g = l);
          if (!(!!l && l.b) && !awb(l.a[e])) {
            if (awb(l.a[1 - e])) {
              m = m.a[j] = hwb(l, e);
            } else if (!awb(l.a[1 - e])) {
              n = m.a[1 - j];
              if (n) {
                if (!awb(n.a[1 - j]) && !awb(n.a[j])) {
                  m.b = false;
                  n.b = true;
                  l.b = true;
                } else {
                  f = h.a[1] == m ? 1 : 0;
                  awb(n.a[j]) ? h.a[f] = gwb(m, j) : awb(n.a[1 - j]) && (h.a[f] = hwb(m, j));
                  l.b = h.a[f].b = true;
                  h.a[f].a[0].b = false;
                  h.a[f].a[1].b = false;
                }
              }
            }
          }
        }
        if (g) {
          c.b = true;
          c.d = g.e;
          if (l != g) {
            k = new ywb(l.d, l.e);
            fwb(a, i, g, k);
            m == g && (m = k);
          }
          m.a[m.a[1] == l ? 1 : 0] = l.a[!l.a[0] ? 1 : 0];
          --a.c;
        }
        a.b = i.a[1];
        !!a.b && (a.b.b = false);
        return c.b;
      }
      function v$(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s;
        d = Wv(rJ(a, (eM(), TL)), 28);
        i = a.e;
        h = a.a;
        c = Wv(rJ(a, (Rib(), Xhb)), 15).a;
        j = i.a + h.b + h.c + 2 * c;
        k = 0 - h.d - c - a.d.b;
        n = i.b + h.d + h.a + 2 * c - a.d.b;
        l = new GU();
        o2 = new GU();
        for (f = (m = new Snb(b.a).a.bb().mb(), new Ynb(m)); f.a.G(); ) {
          e = (g = Wv(f.a.H(), 21), Wv(g.yb(), 9));
          switch (d.e) {
            case 1:
            case 2:
            case 3:
              m$(e);
              break;
            case 4:
              p = Wv(rJ(e, SL), 10);
              q = !p ? 0 : p.a;
              e.i.a = j * Ixb(Yv(rJ(e, Cib))) - q;
              fX(e, true, false);
              break;
            case 5:
              r = Wv(rJ(e, SL), 10);
              s = !r ? 0 : r.a;
              e.i.a = Ixb(Yv(rJ(e, Cib))) - s;
              fX(e, true, false);
              i.a = Nlb(i.a, e.i.a + e.j.a / 2);
          }
          switch (Wv(rJ(e, hib), 32).e) {
            case 1:
              e.i.b = k;
              l.c[l.c.length] = e;
              break;
            case 3:
              e.i.b = n;
              o2.c[o2.c.length] = e;
          }
        }
        switch (d.e) {
          case 1:
          case 2:
            o$(l, a);
            o$(o2, a);
            break;
          case 3:
            t$(l, a);
            t$(o2, a);
        }
      }
      function OY(a) {
        var b, c, d, e, f, g;
        d = Wv(rJ(a.a.g, (eM(), JL)), 86);
        if (jf(d, (oM(), b = Wv(Hkb(Gz), 11), new atb(b, Wv(exb(b, b.length), 11), 0))))
          ;
        else if (Xe(d, Usb(gM))) {
          c = Wv(Wv(Dd(a.a.b, a.b), 20).sb(0), 33);
          a.b.i.a = c.i.a;
          a.b.i.b = c.i.b;
        } else if (Xe(d, Usb(iM))) {
          e = Wv(yU(a.a.c, a.a.c.c.length - 1), 9);
          f = Wv(Wv(Dd(a.a.b, a.b), 20).sb(Wv(Dd(a.a.b, a.b), 20).Y() - 1), 33);
          g = e.j.a - (f.i.a + f.j.a);
          a.b.i.a = a.a.g.j.a - g - a.b.j.a;
          a.b.i.b = f.i.b;
        } else if (Xe(d, Vsb(mM, Bv(tv(Gz, 1), uyb, 41, 0, [fM])))) {
          c = Wv(Wv(Dd(a.a.b, a.b), 20).sb(0), 33);
          a.b.i.a = (a.a.g.j.a - a.b.j.a) / 2;
          a.b.i.b = c.i.b;
        } else if (Xe(d, Usb(mM))) {
          c = Wv(Wv(Dd(a.a.b, a.b), 20).sb(0), 33);
          a.b.i.b = c.i.b;
        } else if (Xe(d, Usb(fM))) {
          c = Wv(Wv(Dd(a.a.b, a.b), 20).sb(0), 33);
          a.b.i.a = (a.a.g.j.a - a.b.j.a) / 2;
          a.b.i.b = c.i.b;
        }
        return null;
      }
      function NZ(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q;
        for (o2 = new Tob(a); o2.a < o2.c.c.length; ) {
          n = Wv(Rob(o2), 9);
          MZ(n.i);
          MZ(n.j);
          PZ(n);
          RZ(n);
          for (q = new Tob(n.f); q.a < q.c.c.length; ) {
            p = Wv(Rob(q), 7);
            MZ(p.i);
            MZ(p.a);
            MZ(p.j);
            QX(p, QZ(p.g));
            f = Wv(rJ(p, (eM(), UL)), 24);
            !!f && sJ(p, UL, Elb(-f.a));
            for (e = new Tob(p.e); e.a < e.c.c.length; ) {
              d = Wv(Rob(e), 12);
              for (c = WI(d.a, 0); c.b != c.d.c; ) {
                b = Wv(_ub(c), 10);
                MZ(b);
              }
              i = Wv(rJ(d, CL), 44);
              if (i) {
                for (h = WI(i, 0); h.b != h.d.c; ) {
                  g = Wv(_ub(h), 10);
                  MZ(g);
                }
              }
              for (l = new Tob(d.b); l.a < l.c.c.length; ) {
                j = Wv(Rob(l), 33);
                MZ(j.i);
                MZ(j.j);
              }
            }
            for (m = new Tob(p.c); m.a < m.c.c.length; ) {
              j = Wv(Rob(m), 33);
              MZ(j.i);
              MZ(j.j);
            }
          }
          if (n.g == (CX(), xX)) {
            sJ(n, (Rib(), hib), QZ(Wv(rJ(n, hib), 32)));
            OZ(n);
          }
          for (k = new Tob(n.c); k.a < k.c.c.length; ) {
            j = Wv(Rob(k), 33);
            MZ(j.j);
            MZ(j.i);
          }
        }
      }
      function YP(a, b, c, d) {
        var e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s;
        TP(c);
        if (SW(b.d.f, b.c.f)) {
          k = b.c;
          l = MI(Bv(tv(qz, 1), Fzb, 10, 0, [k.i, k.a]));
          j = k.f.b;
          uI(l, -j.b, -j.d);
          l.a -= d.a;
          l.b -= d.b;
        } else {
          l = MX(b.c);
        }
        l.a += d.a;
        l.b += d.b;
        m = new Tu();
        VP(a, m, "x", l.a);
        VP(a, m, "y", l.b);
        Ru(c, "sourcePoint", m);
        n = MX(b.d);
        rJ(b, (Rib(), Pib)) != null && vI(n, Wv(rJ(b, Pib), 10));
        vI(n, d);
        o2 = new Tu();
        VP(a, o2, "x", n.a);
        VP(a, o2, "y", n.b);
        Ru(c, "targetPoint", o2);
        e = new ju();
        s = hJ(b.a, d);
        f = 0;
        for (r = WI(s, 0); r.b != r.d.c; ) {
          p = Wv(_ub(r), 10);
          i = new Tu();
          VP(a, i, "x", p.a);
          VP(a, i, "y", p.b);
          hu(e, f++, i);
        }
        s.b == 0 ? Ru(c, Hzb, null) : Ru(c, Hzb, e);
        g = Wv(rJ(b, (eM(), CL)), 44);
        f = 0;
        if (g) {
          hJ(g, d);
          h = new ju();
          for (q = WI(g, 0); q.b != q.d.c; ) {
            p = Wv(_ub(q), 10);
            i = new Tu();
            VP(a, i, "x", p.a);
            VP(a, i, "y", p.b);
            hu(h, f++, i);
          }
          Ru(c, Izb, h);
        } else {
          Ru(c, Izb, null);
        }
      }
      function pZ(a, b, c, d) {
        var e, f, g, h, i, j, k, l, m, n, o2, p, q, r;
        p = a.i;
        q = a.j;
        m = a.e;
        if (b) {
          l = d / 2 * (b.Y() - 1);
          n = 0;
          for (j = b.mb(); j.G(); ) {
            h = Wv(j.H(), 9);
            l += h.j.a;
            n = Nlb(n, h.j.b);
          }
          r = p.a - (l - q.a) / 2;
          g = p.b - m.d + n;
          e = q.a / (b.Y() + 1);
          f = e;
          for (i = b.mb(); i.G(); ) {
            h = Wv(i.H(), 9);
            h.i.a = r;
            h.i.b = g - h.j.b;
            r += h.j.a + d / 2;
            k = oZ(h);
            k.i.a = h.j.a / 2 - k.a.a;
            k.i.b = h.j.b;
            o2 = Wv(rJ(h, (Rib(), Zhb)), 7);
            if (o2.b.c.length + o2.e.c.length == 1) {
              o2.i.a = f - o2.a.a;
              o2.i.b = 0;
              PX(o2, a);
            }
            f += e;
          }
        }
        if (c) {
          l = d / 2 * (c.Y() - 1);
          n = 0;
          for (j = c.mb(); j.G(); ) {
            h = Wv(j.H(), 9);
            l += h.j.a;
            n = Nlb(n, h.j.b);
          }
          r = p.a - (l - q.a) / 2;
          g = p.b + q.b + m.a - n;
          e = q.a / (c.Y() + 1);
          f = e;
          for (i = c.mb(); i.G(); ) {
            h = Wv(i.H(), 9);
            h.i.a = r;
            h.i.b = g;
            r += h.j.a + d / 2;
            k = oZ(h);
            k.i.a = h.j.a / 2 - k.a.a;
            k.i.b = 0;
            o2 = Wv(rJ(h, (Rib(), Zhb)), 7);
            if (o2.b.c.length + o2.e.c.length == 1) {
              o2.i.a = f - o2.a.a;
              o2.i.b = q.b;
              PX(o2, a);
            }
            f += e;
          }
        }
      }
      function Jab(a, b, c, d, e) {
        var f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w;
        w = 0;
        n = 0;
        for (l = new Tob(b.f); l.a < l.c.c.length; ) {
          k = Wv(Rob(l), 9);
          m = 0;
          h = 0;
          i = c ? Wv(rJ(k, Fab), 24).a : eyb;
          r = d ? Wv(rJ(k, Gab), 24).a : eyb;
          j = i > r ? i : r;
          for (t = new Tob(k.f); t.a < t.c.c.length; ) {
            s = Wv(Rob(t), 7);
            u = k.i.b + s.i.b + s.a.b;
            if (d) {
              for (g = new Tob(s.e); g.a < g.c.c.length; ) {
                f = Wv(Rob(g), 12);
                p = f.d;
                o2 = p.f;
                if (b != a.a[o2.k]) {
                  q = Plb(Wv(rJ(o2, Fab), 24).a, Wv(rJ(o2, Gab), 24).a);
                  v = Wv(rJ(f, (Rib(), Eib)), 24).a;
                  if (v >= j && v >= q) {
                    m += o2.i.b + p.i.b + p.a.b - u;
                    ++h;
                  }
                }
              }
            }
            if (c) {
              for (g = new Tob(s.b); g.a < g.c.c.length; ) {
                f = Wv(Rob(g), 12);
                p = f.c;
                o2 = p.f;
                if (b != a.a[o2.k]) {
                  q = Plb(Wv(rJ(o2, Fab), 24).a, Wv(rJ(o2, Gab), 24).a);
                  v = Wv(rJ(f, (Rib(), Eib)), 24).a;
                  if (v >= j && v >= q) {
                    m += o2.i.b + p.i.b + p.a.b - u;
                    ++h;
                  }
                }
              }
            }
          }
          if (h > 0) {
            w += m / h;
            ++n;
          }
        }
        if (n > 0) {
          b.a = e * w / n;
          b.i = n;
        } else {
          b.a = 0;
          b.i = 0;
        }
      }
      function Kab(a, b, c, d) {
        var e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s;
        n = b.c.length;
        m = 0;
        for (l = new Tob(a.c); l.a < l.c.c.length; ) {
          k = Wv(Rob(l), 16);
          r = k.a;
          if (r.c.length == 0) {
            continue;
          }
          q = new Tob(r);
          j = 0;
          s = null;
          e = Wv(Rob(q), 9);
          while (e) {
            f = Wv(yU(b, e.k), 111);
            if (f.c >= 0) {
              i = null;
              h = new Fnb(k.a, j + 1);
              while (h.b < h.d.Y()) {
                g = (Bxb(h.b < h.d.Y()), Wv(h.d.sb(h.c = h.b++), 9));
                i = Wv(yU(b, g.k), 111);
                if (i.d == f.d && i.c < f.c) {
                  break;
                } else {
                  i = null;
                }
              }
              if (i) {
                if (s) {
                  DU(d, e.k, Elb(Wv(yU(d, e.k), 24).a - 1));
                  Wv(yU(c, s.k), 20).nb(f);
                }
                f = Vab(f, e, n++);
                b.c[b.c.length] = f;
                vU(c, new GU());
                if (s) {
                  Wv(yU(c, s.k), 20).ib(f);
                  vU(d, Elb(1));
                } else {
                  vU(d, Elb(0));
                }
              }
            }
            o2 = null;
            if (q.a < q.c.c.length) {
              o2 = Wv(Rob(q), 9);
              p = Wv(yU(b, o2.k), 111);
              Wv(yU(c, e.k), 20).ib(p);
              DU(d, o2.k, Elb(Wv(yU(d, o2.k), 24).a + 1));
            }
            f.d = m;
            f.c = j++;
            s = e;
            e = o2;
          }
          ++m;
        }
        Ckb(Ixb(Xv(rJ(a, (eM(), rL))))) && void 0;
      }
      function gS(a, b) {
        var c;
        if (a.e) {
          throw new ulb((Gkb(nA), "The " + nA.j + Yzb));
        }
        if (!MR(a.a, b)) {
          throw new gt("The direction " + b + " is not supported by the CGraph instance.");
        }
        if (b == a.d) {
          return a;
        }
        c = a.d;
        a.d = b;
        switch (c.e) {
          case 0:
            switch (b.e) {
              case 2:
                dS(a);
                break;
              case 1:
                kS(a);
                dS(a);
                break;
              case 4:
                qS(a);
                dS(a);
                break;
              case 3:
                qS(a);
                kS(a);
                dS(a);
            }
            break;
          case 2:
            switch (b.e) {
              case 1:
                kS(a);
                lS(a);
                break;
              case 4:
                qS(a);
                dS(a);
                break;
              case 3:
                qS(a);
                kS(a);
                dS(a);
            }
            break;
          case 1:
            switch (b.e) {
              case 2:
                kS(a);
                lS(a);
                break;
              case 4:
                kS(a);
                qS(a);
                dS(a);
                break;
              case 3:
                kS(a);
                qS(a);
                kS(a);
                dS(a);
            }
            break;
          case 4:
            switch (b.e) {
              case 2:
                qS(a);
                dS(a);
                break;
              case 1:
                qS(a);
                kS(a);
                dS(a);
                break;
              case 3:
                kS(a);
                lS(a);
            }
            break;
          case 3:
            switch (b.e) {
              case 2:
                kS(a);
                qS(a);
                dS(a);
                break;
              case 1:
                kS(a);
                qS(a);
                kS(a);
                dS(a);
                break;
              case 4:
                kS(a);
                lS(a);
            }
        }
        return a;
      }
      function c9(a, b, c) {
        var d, e, f, g, h, i, j, k, l;
        if (a.a[b.d.k][b.k].e) {
          return;
        } else {
          a.a[b.d.k][b.k].e = true;
        }
        a.a[b.d.k][b.k].b = 0;
        a.a[b.d.k][b.k].d = 0;
        a.a[b.d.k][b.k].a = null;
        for (k = new Tob(b.f); k.a < k.c.c.length; ) {
          j = Wv(Rob(k), 7);
          l = c ? new fY(j) : new lY(j);
          for (i = l.mb(); i.G(); ) {
            h = Wv(i.H(), 7);
            g = h.f;
            if (g.d == b.d) {
              if (g != b) {
                c9(a, g, c);
                a.a[b.d.k][b.k].b += a.a[g.d.k][g.k].b;
                a.a[b.d.k][b.k].d += a.a[g.d.k][g.k].d;
              }
            } else {
              a.a[b.d.k][b.k].d += a.d[h.k];
              ++a.a[b.d.k][b.k].b;
            }
          }
        }
        f = Wv(rJ(b, (Rib(), Shb)), 20);
        if (f) {
          for (e = f.mb(); e.G(); ) {
            d = Wv(e.H(), 9);
            if (b.d == d.d) {
              c9(a, d, c);
              a.a[b.d.k][b.k].b += a.a[d.d.k][d.k].b;
              a.a[b.d.k][b.k].d += a.a[d.d.k][d.k].d;
            }
          }
        }
        if (a.a[b.d.k][b.k].b > 0) {
          a.a[b.d.k][b.k].d += wvb(a.e, 24) * FAb * 0.07000000029802322 - 0.03500000014901161;
          a.a[b.d.k][b.k].a = a.a[b.d.k][b.k].d / a.a[b.d.k][b.k].b;
        }
      }
      function Sbb(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m;
        for (e = new Tob(a.a.c); e.a < e.c.c.length; ) {
          c = Wv(Rob(e), 16);
          for (i = new Tob(c.a); i.a < i.c.c.length; ) {
            h = Wv(Rob(i), 9);
            b.i[h.k] = h;
            b.g[h.k] = b.k == (Lbb(), Kbb) ? Vzb : Uzb;
          }
        }
        g = a.a.c;
        b.c == (Gbb(), Ebb) && (g = aw(g, 87) ? Ii(Wv(g, 87)) : aw(g, 88) ? Wv(g, 88).a : aw(g, 63) ? new ap(g) : new Ro(g));
        Acb(a.e, b, a.b);
        bpb(b.n);
        for (f = g.mb(); f.G(); ) {
          c = Wv(f.H(), 16);
          j = c.a;
          b.k == (Lbb(), Kbb) && (j = aw(j, 87) ? Ii(Wv(j, 87)) : aw(j, 88) ? Wv(j, 88).a : aw(j, 63) ? new ap(j) : new Ro(j));
          for (m = j.mb(); m.G(); ) {
            l = Wv(m.H(), 9);
            b.f[l.k] == l && Tbb(a, l, b);
          }
        }
        Ubb(a, b);
        for (d = g.mb(); d.G(); ) {
          c = Wv(d.H(), 16);
          for (m = new Tob(c.a); m.a < m.c.c.length; ) {
            l = Wv(Rob(m), 9);
            b.n[l.k] = b.n[b.f[l.k].k];
            if (l == b.f[l.k]) {
              k = Ixb(b.g[b.i[l.k].k]);
              (b.k == (Lbb(), Kbb) && k > Vzb || b.k == Jbb && k < Uzb) && (b.n[l.k] = Ixb(b.n[l.k]) + k);
            }
          }
        }
        a.e.Jc();
      }
      function NQ(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m;
        pJ(b, Bv(tv(rz, 1), syb, 79, 0, [(Rib(), Jib), Xhb, (Mjb(), Kjb), Rhb]));
        j = Wv(rJ(b, Jib), 15).a;
        Wv(rJ(b, qjb), 15).a * j < 2 && sJ(b, qjb, new llb(2 / j));
        k = Wv(rJ(b, (eM(), sL)), 59);
        k == (sK(), qK) && sJ(b, sL, PW(b));
        l = Wv(rJ(b, Hjb), 24);
        l.a == 0 ? sJ(b, Gib, new yvb()) : sJ(b, Gib, new zvb(l.a));
        m = new $jb(b);
        sJ(b, Kib, m);
        e = KQ(a, Wv(rJ(b, ljb), 180));
        h = KQ(a, Wv(rJ(b, zjb), 180));
        d = KQ(a, Wv(rJ(b, kjb), 180));
        i = KQ(a, Wv(rJ(b, Ajb), 180));
        f = KQ(a, Ocb(Wv(rJ(b, eib), 122)));
        g = new WQ();
        sJ(b, _hb, g);
        QQ(QQ(QQ(QQ(QQ(QQ(g, e.qc(b)), h.qc(b)), d.qc(b)), i.qc(b)), f.qc(b)), MQ(b));
        c = (Mh(30, Vyb), new HU(30));
        sJ(b, Fib, c);
        xU(c, LQ(a, g, 0));
        c.c[c.c.length] = e;
        xU(c, LQ(a, g, 1));
        c.c[c.c.length] = h;
        xU(c, LQ(a, g, 2));
        c.c[c.c.length] = d;
        xU(c, LQ(a, g, 3));
        c.c[c.c.length] = i;
        xU(c, LQ(a, g, 4));
        c.c[c.c.length] = f;
        xU(c, LQ(a, g, 5));
      }
      function YO(a, b) {
        var c, d, e, f, g, h;
        f = Li(DW(a));
        if (f.Nb().V()) {
          return;
        }
        e = Wv(rJ(Wv(Wv(Wv(f.Nb().sb(0), 129), 224).e, 33), (kP(), iP)), 171);
        e = e == jP ? hP : e;
        h = 0;
        switch (Wv(a.e, 7).g.e) {
          case 4:
          case 2:
            e == hP && (h = a.e.j.b);
            break;
          case 3:
            h = a.e.j.b;
        }
        (Wv(a.e, 7).g == (sN(), $M) || e == gP) && (f = Ii(f));
        for (d = Xl(f.Nb().mb()); d.G(); ) {
          c = Wv(d.H(), 129);
          g = new II(c.e.i);
          if (e == gP) {
            switch (Wv(a.e, 7).g.e) {
              case 1:
              case 4:
                g.a = -c.e.j.a - b;
                g.b = h - b - c.e.j.b;
                h -= b + c.e.j.b;
                break;
              case 2:
                g.a = a.e.j.a + b;
                g.b = h - b - c.e.j.b;
                h -= b + c.e.j.b;
                break;
              case 3:
                g.a = -c.e.j.a - b;
                g.b = h + b;
                h += b + c.e.j.b;
            }
          } else {
            switch (Wv(a.e, 7).g.e) {
              case 4:
                g.a = -c.e.j.a - b;
                g.b = h + b;
                h += b + c.e.j.b;
                break;
              case 2:
                g.a = a.e.j.a + b;
                g.b = h + b;
                h += b + c.e.j.b;
                break;
              case 1:
                g.a = a.e.j.a + b;
                g.b = h - b - c.e.j.b;
                h -= b + c.e.j.b;
                break;
              case 3:
                g.a = a.e.j.a + b;
                g.b = h + b;
                h += b + c.e.j.b;
            }
          }
          c.e.i.a = g.a;
          c.e.i.b = g.b;
        }
      }
      function fab(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m, n;
        d = 0;
        e = 0;
        for (k = 0; k < a.length; k++) {
          i = a[k];
          if (LM(Wv(rJ(i, (eM(), TL)), 28))) {
            for (g = nX(i, (sN(), ZM)).mb(); g.G(); ) {
              f = Wv(g.H(), 7);
              if (f.b.c.length + f.e.c.length > 0) {
                d += f.b.c.length + f.e.c.length;
                Umb(b, f, Elb(d));
              }
            }
          } else {
            for (h = nX(i, (sN(), ZM)).mb(); h.G(); ) {
              f = Wv(h.H(), 7);
              d += f.b.c.length + f.e.c.length;
            }
            for (g = nX(i, ZM).mb(); g.G(); ) {
              f = Wv(g.H(), 7);
              f.b.c.length + f.e.c.length > 0 && Umb(b, f, Elb(d));
            }
          }
        }
        for (j = a.length - 1; j >= 0; j--) {
          i = a[j];
          if (LM(Wv(rJ(i, (eM(), TL)), 28))) {
            for (m = nX(i, (sN(), rN)).mb(); m.G(); ) {
              l = Wv(m.H(), 7);
              if (l.b.c.length + l.e.c.length > 0) {
                e += l.b.c.length + l.e.c.length;
                Umb(c, l, Elb(e));
              }
            }
          } else {
            for (n = nX(i, (sN(), rN)).mb(); n.G(); ) {
              l = Wv(n.H(), 7);
              e += l.b.c.length + l.e.c.length;
            }
            for (m = nX(i, rN).mb(); m.G(); ) {
              l = Wv(m.H(), 7);
              l.b.c.length + l.e.c.length > 0 && Umb(c, l, Elb(e));
            }
          }
        }
      }
      function wfb(a, b, c, d, e) {
        var f, g, h, i, j, k, l, m, n, o2, p, q, r;
        m = sgb(a.g);
        o2 = sgb(b.g);
        n = vI(xI(a.i), a.a);
        p = vI(xI(b.i), b.a);
        i = vI(new HI(n.a, n.b), CI(new GI(m), 1.3 * c));
        q = vI(new HI(p.a, p.b), CI(new GI(o2), 1.3 * d));
        h = Jlb(i.a - q.a);
        h < e && (a.g == (sN(), rN) || a.g == ZM ? i.a < q.a ? i.a = q.a - e : i.a = q.a + e : i.a < q.a ? q.a = i.a + e : q.a = i.a - e);
        f = 0;
        g = 0;
        switch (a.g.e) {
          case 4:
            f = 2 * (n.a - c) - 0.5 * (i.a + q.a);
            break;
          case 2:
            f = 2 * (n.a + c) - 0.5 * (i.a + q.a);
            break;
          case 1:
            g = 2 * (n.b - c) - 0.5 * (i.b + q.b);
            break;
          case 3:
            g = 2 * (n.b + c) - 0.5 * (i.b + q.b);
        }
        switch (b.g.e) {
          case 4:
            f = 2 * (p.a - d) - 0.5 * (q.a + i.a);
            break;
          case 2:
            f = 2 * (p.a + d) - 0.5 * (q.a + i.a);
            break;
          case 1:
            g = 2 * (p.b - d) - 0.5 * (q.b + i.b);
            break;
          case 3:
            g = 2 * (p.b + d) - 0.5 * (q.b + i.b);
        }
        l = new HI(f, g);
        k = new ufb(Bv(tv(qz, 1), Fzb, 10, 0, [n, i, l, q, p]));
        j = ifb(k);
        r = jfb(k);
        k.a = j;
        bfb(k, new Ffb(Bv(tv(qz, 1), Fzb, 10, 0, [j, r, n, p])));
        return k;
      }
      function p$(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m, n, o2, p, q;
        i = c.a;
        e = Wv(rJ(c, (Rib(), Xhb)), 15).a;
        o2 = c.d;
        h = (d = Wv(rJ(c, Xhb), 15).a, new HI(c.e.a + c.a.b + c.a.c + 2 * d, c.e.b + c.a.d + c.a.a + 2 * d));
        j = h.b;
        for (m = new Tob(a.a); m.a < m.c.c.length; ) {
          k = Wv(Rob(m), 9);
          if (k.g != (CX(), xX)) {
            continue;
          }
          f = Wv(rJ(k, hib), 32);
          g = Wv(rJ(k, iib), 10);
          n = k.i;
          switch (f.e) {
            case 2:
              n.a = c.e.a + e + i.c - o2.a;
              break;
            case 4:
              n.a = -o2.a - e - i.b;
          }
          q = 0;
          switch (f.e) {
            case 2:
            case 4:
              if (b == (KM(), GM)) {
                p = Ixb(Yv(rJ(k, Cib)));
                n.b = h.b * p - Wv(rJ(k, (eM(), SL)), 10).b;
                q = n.b + g.b;
                fX(k, false, true);
              } else if (b == FM) {
                n.b = Ixb(Yv(rJ(k, Cib))) - Wv(rJ(k, (eM(), SL)), 10).b;
                q = n.b + g.b;
                fX(k, false, true);
              }
          }
          j = j > q ? j : q;
        }
        c.e.b += j - h.b;
        for (l = new Tob(a.a); l.a < l.c.c.length; ) {
          k = Wv(Rob(l), 9);
          if (k.g != (CX(), xX)) {
            continue;
          }
          f = Wv(rJ(k, hib), 32);
          n = k.i;
          switch (f.e) {
            case 1:
              n.b = -o2.b - e - i.d;
              break;
            case 3:
              n.b = c.e.b + e + i.a - o2.b;
          }
        }
      }
      function $Y(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o2;
        e = new GU();
        for (i = new Tob(a.d.f); i.a < i.c.c.length; ) {
          g = Wv(Rob(i), 7);
          g.g == (sN(), ZM) && (e.c[e.c.length] = g, true);
        }
        if (a.e.a == (sK(), pK) && !MM(Wv(rJ(a.d, (eM(), TL)), 28))) {
          for (d = Uh(mX(a.d)); Cm(d); ) {
            c = Wv(Dm(d), 12);
            vU(e, c.c);
          }
        }
        f = a.d.j.a;
        sJ(a.d, (Rib(), Whb), new llb(a.d.j.a));
        a.d.j.a = a.c;
        sJ(a.d, Vhb, (xkb(), xkb(), wkb));
        vU(a.b, a.d);
        j = a.d;
        f -= a.c;
        k = a.a;
        while (k > 1) {
          b = Qlb(f, a.c);
          j = (l = new uX(a.e.c), sX(l, (CX(), wX)), sJ(l, (eM(), TL), Wv(rJ(j, TL), 28)), sJ(l, JL, Wv(rJ(j, JL), 86)), l.k = a.e.b++, vU(a.b, l), l.j.b = j.j.b, l.j.a = b, m = new RX(), QX(m, (sN(), ZM)), PX(m, j), m.i.a = l.j.a, m.i.b = l.j.b / 2, n = new RX(), QX(n, rN), PX(n, l), n.i.b = l.j.b / 2, n.i.a = -n.j.a, o2 = new hW(), dW(o2, m), eW(o2, n), l);
          vU(a.e.c.b, j);
          --k;
          f -= a.c + a.e.d;
        }
        new HY(a.d, a.b, a.c);
        for (h = new Tob(e); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 7);
          BU(a.d.f, g);
          PX(g, j);
        }
      }
      function Qfb(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n;
        if (a.p > b.a || b.p > a.a) {
          return;
        }
        c = 0;
        d = 0;
        for (l = (g = new Snb(a.o.a).a.bb().mb(), new Ynb(g)); l.a.G(); ) {
          j = (e = Wv(l.a.H(), 21), Wv(e.yb(), 7));
          qgb(MI(Bv(tv(qz, 1), Fzb, 10, 0, [j.f.i, j.i, j.a])).b, b.p, b.a) && ++c;
        }
        for (m = (h = new Snb(a.g.a).a.bb().mb(), new Ynb(h)); m.a.G(); ) {
          j = (e = Wv(m.a.H(), 21), Wv(e.yb(), 7));
          qgb(MI(Bv(tv(qz, 1), Fzb, 10, 0, [j.f.i, j.i, j.a])).b, b.p, b.a) && --c;
        }
        for (n = (i = new Snb(b.o.a).a.bb().mb(), new Ynb(i)); n.a.G(); ) {
          j = (e = Wv(n.a.H(), 21), Wv(e.yb(), 7));
          qgb(MI(Bv(tv(qz, 1), Fzb, 10, 0, [j.f.i, j.i, j.a])).b, a.p, a.a) && ++d;
        }
        for (k = (f = new Snb(b.g.a).a.bb().mb(), new Ynb(f)); k.a.G(); ) {
          j = (e = Wv(k.a.H(), 21), Wv(e.yb(), 7));
          qgb(MI(Bv(tv(qz, 1), Fzb, 10, 0, [j.f.i, j.i, j.a])).b, a.p, a.a) && --d;
        }
        if (c < d) {
          new bgb(a, b, d - c);
        } else if (d < c) {
          new bgb(b, a, c - d);
        } else {
          new bgb(b, a, 0);
          new bgb(a, b, 0);
        }
      }
      function $jb(a) {
        var b;
        this.f = Wv(rJ(a, (Rib(), Jib)), 15).a;
        this.d = Wv(rJ(a, (Mjb(), Ejb)), 15).a;
        this.a = this.f * Wv(rJ(a, qjb), 15).a;
        this.b = this.f * Wv(rJ(a, pjb), 15).a;
        Wv(rJ(a, Dib), 15);
        this.c = Wv(rJ(a, Dib), 15).a;
        this.e = Wv(rJ(a, (eM(), DL)), 15).a;
        b = (CX(), Bv(tv(pB, 1), uyb, 132, 0, [AX, zX, xX, BX, yX, wX])).length;
        this.g = vv(lw, [Txb, tAb], [250, 26], 12, [b, b], 2);
        Yjb(this, AX, this.f);
        Zjb(this, AX, zX, this.b);
        Zjb(this, AX, BX, this.b);
        Zjb(this, AX, xX, this.c);
        Zjb(this, AX, yX, this.b);
        Zjb(this, AX, wX, this.b);
        Yjb(this, zX, this.a);
        Zjb(this, zX, BX, this.a);
        Zjb(this, zX, xX, this.c);
        Zjb(this, zX, yX, this.e);
        Zjb(this, zX, wX, this.b);
        Yjb(this, BX, this.a);
        Zjb(this, BX, xX, this.c);
        Zjb(this, BX, yX, this.e);
        Zjb(this, BX, wX, this.b);
        Yjb(this, xX, this.c);
        Zjb(this, xX, yX, this.c);
        Zjb(this, xX, wX, this.c);
        Yjb(this, yX, this.e);
        Zjb(this, yX, wX, this.e);
        Yjb(this, wX, this.f);
      }
      function mZ(a, b) {
        var c, d, e, f, g, h, i, j, k;
        if (tl(iX(b)) != 1 || Wv(ql(iX(b)), 12).c.f.g != (CX(), zX)) {
          return null;
        }
        c = Wv(ql(iX(b)), 12);
        d = c.c.f;
        sX(d, (CX(), AX));
        sJ(d, (Rib(), qib), null);
        sJ(d, rib, null);
        sJ(d, Whb, Wv(rJ(b, Whb), 15));
        sJ(d, Vhb, (xkb(), xkb(), wkb));
        sJ(d, uib, rJ(b, uib));
        d.j.b = b.j.b;
        f = rJ(c.d, uib);
        g = null;
        for (j = nX(d, (sN(), rN)).mb(); j.G(); ) {
          h = Wv(j.H(), 7);
          if (h.b.c.length != 0) {
            sJ(h, uib, f);
            k = c.d;
            h.j.a = k.j.a;
            h.j.b = k.j.b;
            h.a.a = k.a.a;
            h.a.b = k.a.b;
            xU(h.c, k.c);
            k.c.c = xv(UF, syb, 1, 0, 4, 1);
            g = h;
            break;
          }
        }
        sJ(c.d, uib, null);
        if (tl(nX(b, rN)) > 1) {
          for (i = WI(Eo(nX(b, rN)), 0); i.b != i.d.c; ) {
            h = Wv(_ub(i), 7);
            if (h.b.c.length == 0) {
              e = new RX();
              QX(e, rN);
              e.j.a = h.j.a;
              e.j.b = h.j.b;
              PX(e, d);
              sJ(e, uib, rJ(h, uib));
              PX(h, null);
            } else {
              PX(g, d);
            }
          }
        }
        sJ(b, uib, null);
        sJ(b, Vhb, (null, vkb));
        sX(b, wX);
        sJ(d, (eM(), TL), Wv(rJ(b, TL), 28));
        sJ(d, JL, Wv(rJ(b, JL), 86));
        uU(a.b, 0, d);
        return d;
      }
      function NW(a, b, c, d, e, f, g) {
        var h, i, j, k, l, m;
        l = c;
        j = new uX(g);
        sX(j, (CX(), xX));
        sJ(j, (Rib(), iib), e);
        sJ(j, (eM(), TL), (KM(), FM));
        sJ(j, tib, Wv(rJ(a, LL), 15));
        i = Wv(rJ(a, SL), 10);
        !i && (i = new HI(e.a / 2, e.b / 2));
        sJ(j, SL, i);
        k = new RX();
        PX(k, j);
        if (!(b != IM && b != JM)) {
          h = f != (sK(), qK) ? f : pK;
          d > 0 ? l = vN(h) : l = tN(vN(h));
          sJ(a, WL, l);
        }
        switch (l.e) {
          case 4:
            sJ(j, (Mjb(), vjb), (Xib(), Tib));
            sJ(j, dib, (Hgb(), Ggb));
            j.j.b = e.b;
            QX(k, (sN(), ZM));
            k.i.b = i.b;
            break;
          case 2:
            sJ(j, (Mjb(), vjb), (Xib(), Vib));
            sJ(j, dib, (Hgb(), Egb));
            j.j.b = e.b;
            QX(k, (sN(), rN));
            k.i.b = i.b;
            break;
          case 1:
            sJ(j, mib, (Hhb(), Ghb));
            j.j.a = e.a;
            QX(k, (sN(), pN));
            k.i.a = i.a;
            break;
          case 3:
            sJ(j, mib, (Hhb(), Ehb));
            j.j.a = e.a;
            QX(k, (sN(), $M));
            k.i.a = i.a;
        }
        if (b == EM || b == GM || b == FM) {
          m = 0;
          switch (l.e) {
            case 4:
            case 2:
              m = null.cd;
              b == GM && (m /= null.cd);
              break;
            case 1:
            case 3:
              m = null.cd;
              b == GM && (m /= null.cd);
          }
          sJ(j, Cib, m);
        }
        sJ(j, hib, l);
        return j;
      }
      function LP(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t;
        j = new jJ();
        r = (mp(), new ntb());
        Umb(r, a, MP(a));
        d = (Mh(2, Vyb), new HU(2));
        !!a.c && vU(d, a.c);
        !!a.d && vU(d, a.d);
        for (n = new Tob(d); n.a < n.c.c.length; ) {
          m = Wv(Rob(n), 7);
          b = new aJ();
          Ue(b, Ao(Sh((Gi(), new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [m.b, m.e])))))));
          Ve(b, a, true);
          if (b.b != 0) {
            t = Wv(re(Ktb(r.d, a)), 34);
            if (m == a.d) {
              o2 = t[t.length - 1];
              s = true;
            } else {
              o2 = t[0];
              s = false;
            }
            for (i = 1; i < t.length; i++) {
              s ? p = t[t.length - 1 - i] : p = t[i];
              c = WI(b, 0);
              while (c.b != c.d.c) {
                k = Wv(_ub(c), 12);
                l = Wv(re(Ktb(r.d, k)), 34);
                if (l == null) {
                  l = MP(k);
                  Ltb(r.d, k, l);
                }
                if (l.length <= i) {
                  bvb(c);
                } else {
                  s ? q = l[l.length - 1 - i] : q = l[i];
                  if (p.a != q.a || p.b != q.b) {
                    e = p.a - o2.a;
                    g = p.b - o2.b;
                    f = q.a - o2.a;
                    h = q.b - o2.b;
                    f * g == h * e && NP(e) == NP(f) && NP(g) == NP(h) ? ((e <= 0 ? 0 - e : e) < (f <= 0 ? 0 - f : f) || (g <= 0 ? 0 - g : g) < (h <= 0 ? 0 - h : h)) && (TI(j, p, j.c.b, j.c), true) : i > 1 && (TI(j, o2, j.c.b, j.c), true);
                    bvb(c);
                  }
                }
              }
              o2 = p;
            }
          }
        }
        return j;
      }
      function m1(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o2, p;
        a.n = Wv(rJ(a.g, (Rib(), Jib)), 15).a * Wv(rJ(a.g, (Mjb(), Ejb)), 15).a;
        a.e = a.n * Wv(rJ(a.g, qjb), 15).a;
        a.i = a.g.c.c.length;
        h = a.i - 1;
        m = 0;
        a.j = 0;
        a.k = 0;
        a.a = Co(xv(PF, Txb, 24, a.i, 0, 1));
        a.b = Co(xv(HF, Txb, 184, a.i, 6, 1));
        for (g = new Tob(a.g.c); g.a < g.c.c.length; ) {
          e = Wv(Rob(g), 16);
          e.k = h;
          for (l = new Tob(e.a); l.a < l.c.c.length; ) {
            k = Wv(Rob(l), 9);
            k.k = m;
            ++m;
          }
          --h;
        }
        a.f = xv(mw, Yyb, 26, m, 12, 1);
        a.c = vv(mw, [Txb, Yyb], [52, 26], 12, [m, 3], 2);
        a.o = new GU();
        a.p = new GU();
        b = 0;
        a.d = 0;
        for (f = new Tob(a.g.c); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 16);
          h = e.k;
          d = 0;
          p = 0;
          i = e.a.c.length;
          j = 0;
          for (l = new Tob(e.a); l.a < l.c.c.length; ) {
            k = Wv(Rob(l), 9);
            m = k.k;
            a.f[m] = k.d.k;
            j += k.j.b + a.n;
            c = tl(iX(k));
            o2 = tl(mX(k));
            a.c[m][0] = o2 - c;
            a.c[m][1] = c;
            a.c[m][2] = o2;
            d += c;
            p += o2;
            c > 0 && vU(a.p, k);
            vU(a.o, k);
          }
          b -= d;
          n = i + b;
          j += b * a.e;
          DU(a.a, h, Elb(n));
          DU(a.b, h, j);
          a.j = Plb(a.j, n);
          a.k = Nlb(a.k, j);
          a.d += b;
          b += p;
        }
      }
      function sN() {
        sN = iI;
        var a;
        qN = new uN(szb, 0);
        $M = new uN("NORTH", 1);
        ZM = new uN("EAST", 2);
        pN = new uN("SOUTH", 3);
        rN = new uN("WEST", 4);
        dN = (ypb(), new Frb((a = Wv(Hkb(Kz), 11), new atb(a, Wv(exb(a, a.length), 11), 0))));
        eN = Kk(Vsb($M, Bv(tv(Kz, 1), uyb, 32, 0, [])));
        _M = Kk(Vsb(ZM, Bv(tv(Kz, 1), uyb, 32, 0, [])));
        mN = Kk(Vsb(pN, Bv(tv(Kz, 1), uyb, 32, 0, [])));
        oN = Kk(Vsb(rN, Bv(tv(Kz, 1), uyb, 32, 0, [])));
        jN = Kk(Vsb($M, Bv(tv(Kz, 1), uyb, 32, 0, [pN])));
        cN = Kk(Vsb(ZM, Bv(tv(Kz, 1), uyb, 32, 0, [rN])));
        lN = Kk(Vsb($M, Bv(tv(Kz, 1), uyb, 32, 0, [rN])));
        fN = Kk(Vsb($M, Bv(tv(Kz, 1), uyb, 32, 0, [ZM])));
        nN = Kk(Vsb(pN, Bv(tv(Kz, 1), uyb, 32, 0, [rN])));
        aN = Kk(Vsb(ZM, Bv(tv(Kz, 1), uyb, 32, 0, [pN])));
        iN = Kk(Vsb($M, Bv(tv(Kz, 1), uyb, 32, 0, [ZM, rN])));
        bN = Kk(Vsb(ZM, Bv(tv(Kz, 1), uyb, 32, 0, [pN, rN])));
        kN = Kk(Vsb($M, Bv(tv(Kz, 1), uyb, 32, 0, [pN, rN])));
        gN = Kk(Vsb($M, Bv(tv(Kz, 1), uyb, 32, 0, [ZM, pN])));
        hN = Kk(Vsb($M, Bv(tv(Kz, 1), uyb, 32, 0, [ZM, pN, rN])));
      }
      function q$(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C;
        u = new GU();
        for (m = new Tob(a.c); m.a < m.c.c.length; ) {
          l = Wv(Rob(m), 16);
          for (p = new Tob(l.a); p.a < p.c.c.length; ) {
            n = Wv(Rob(p), 9);
            if (n.g != (CX(), xX)) {
              continue;
            }
            if (rJ(n, (Rib(), gib)) == null) {
              continue;
            }
            q = null;
            s = null;
            r = null;
            for (A = new Tob(n.f); A.a < A.c.c.length; ) {
              w = Wv(Rob(A), 7);
              switch (w.g.e) {
                case 4:
                  q = w;
                  break;
                case 2:
                  s = w;
                  break;
                default:
                  r = w;
              }
            }
            t = Wv(yU(r.e, 0), 12);
            i = new kJ(t.a);
            h = new II(r.i);
            vI(h, n.i);
            j = WI(i, 0);
            $ub(j, h);
            v = lJ(t.a);
            k = new II(r.i);
            vI(k, n.i);
            TI(v, k, v.c.b, v.c);
            B = Wv(rJ(n, gib), 9);
            C = Wv(yU(B.f, 0), 7);
            g = Wv(FU(q.b, xv(dB, gAb, 12, 0, 0, 1)), 47);
            for (d = 0, f = g.length; d < f; ++d) {
              b = g[d];
              eW(b, C);
              gJ(b.a, b.a.b, i);
            }
            g = Wv(FU(s.e, xv(dB, gAb, 12, s.e.c.length, 0, 1)), 47);
            for (c = 0, e = g.length; c < e; ++c) {
              b = g[c];
              dW(b, C);
              gJ(b.a, 0, v);
            }
            dW(t, null);
            eW(t, null);
            u.c[u.c.length] = n;
          }
        }
        for (o2 = new Tob(u); o2.a < o2.c.c.length; ) {
          n = Wv(Rob(o2), 9);
          rX(n, null);
        }
      }
      function _tb() {
        function e() {
          this.obj = this.createObject();
        }
        ;
        e.prototype.createObject = function(a) {
          return Object.create(null);
        };
        e.prototype.get = function(a) {
          return this.obj[a];
        };
        e.prototype.set = function(a, b) {
          this.obj[a] = b;
        };
        e.prototype[$Ab] = function(a) {
          delete this.obj[a];
        };
        e.prototype.keys = function() {
          return Object.getOwnPropertyNames(this.obj);
        };
        e.prototype.entries = function() {
          var b = this.keys();
          var c = this;
          var d = 0;
          return {next: function() {
            if (d >= b.length)
              return {done: true};
            var a = b[d++];
            return {value: [a, c.get(a)], done: false};
          }};
        };
        if (!Ztb()) {
          e.prototype.createObject = function() {
            return {};
          };
          e.prototype.get = function(a) {
            return this.obj[":" + a];
          };
          e.prototype.set = function(a, b) {
            this.obj[":" + a] = b;
          };
          e.prototype[$Ab] = function(a) {
            delete this.obj[":" + a];
          };
          e.prototype.keys = function() {
            var a = [];
            for (var b in this.obj) {
              b.charCodeAt(0) == 58 && a.push(b.substring(1));
            }
            return a;
          };
        }
        return e;
      }
      function fQ(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u;
        k = new kW();
        sJ(k, PP, b);
        Umb(a.e, b, k);
        sJ(k, (Rib(), zib), c);
        !!a.d && iQ(a.d, k, false);
        hQ(b, k);
        if (Lzb in b.a) {
          q = k.a;
          r = Wv(Pu(b, Lzb), 69);
          p = Wv(Pu(r, "left"), 104);
          !!p && (q.b = p.a);
          t = Wv(Pu(r, "top"), 104);
          !!t && (q.d = t.a);
          s = Wv(Pu(r, "right"), 104);
          !!s && (q.c = s.a);
          e = Wv(Pu(r, Azb), 104);
          !!e && (q.a = e.a);
        }
        l = (d = Wv(Hkb(mF), 11), new atb(d, Wv(exb(d, d.length), 11), 0));
        sJ(k, jib, l);
        a.g == null && (a.g = Xv(rJ(k, (zQ(), yQ))));
        if (Mzb in b.a) {
          u = Pu(b, Mzb);
          if (!u.hc()) {
            throw new GQ("The 'children' property of nodes must be an array.", u, b);
          }
          j = u.hc();
          if (j.a.length > 0) {
            !!c && sJ(c, sib, k);
            h = xv(qB, Nzb, 9, j.a.length, 0, 1);
            for (n = 0; n < j.a.length; ++n) {
              i = gu(j, n);
              if (!i.kc()) {
                throw new GQ("A 'children' array contains a non-object node element.", i, b);
              }
              f = eQ(a, i.kc(), k);
              h[n] = f;
            }
            for (m = 0; m < j.a.length; ++m) {
              o2 = gu(j, m).kc();
              g = h[m];
              Mzb in o2.a && !Ckb(Ixb(Xv(rJ(g, (eM(), KL))))) && fQ(a, o2, g);
            }
          }
        }
        return k;
      }
      function LO(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p;
        if (!Qob(new Tob(AW(a.e)))) {
          return;
        }
        for (h = new Tob(AW(a.e)); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 161);
          j = Wv(g.e, 7).g.e;
          ++a.o[j];
          switch (Wv(g.e, 7).g.e) {
            case 4:
            case 2:
              a.n[j] += g.e.j.b + (b ? (d = Wv(g.e, 7).d, new EP(d.d, d.b, d.a, d.c)).a + (e = Wv(g.e, 7).d, new EP(e.d, e.b, e.a, e.c)).d : 0);
              break;
            case 1:
            case 3:
              a.n[j] += g.e.j.a + (b ? (f = Wv(g.e, 7).d, new EP(f.d, f.b, f.a, f.c)).b + (c = Wv(g.e, 7).d, new EP(c.d, c.b, c.a, c.c)).c : 0);
          }
        }
        i = Wv(oW(a.e, (eM(), NL)), 100);
        i = i == (zM(), yM) ? xM : i;
        a.g[1] = Wv(oW(a.e, PL), 100);
        a.g[3] = Wv(oW(a.e, QL), 100);
        a.g[4] = Wv(oW(a.e, RL), 100);
        a.g[2] = Wv(oW(a.e, OL), 100);
        for (l = (sN(), Bv(tv(Kz, 1), uyb, 32, 0, [qN, $M, ZM, pN, rN])), n = 0, p = l.length; n < p; ++n) {
          j = l[n];
          a.g[j.e] = a.g[j.e] == yM ? i : a.g[j.e];
        }
        a.b = oW(a.e, jL) != null;
        for (k = Bv(tv(Kz, 1), uyb, 32, 0, [qN, $M, ZM, pN, rN]), m = 0, o2 = k.length; m < o2; ++m) {
          j = k[m];
          a.o[j.e] == 1 ? a.i[j.e] = 2 : !a.b && a.g[j.e] == xM ? a.i[j.e] = a.o[j.e] + 1 : a.i[j.e] = a.o[j.e] - 1;
        }
      }
      function Tfb(a, b, c, d, e, f) {
        var g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v;
        i = Wv(a.a, 16);
        p = Wv(a.b, 16);
        j = Wv(b.a, 18);
        q = Wv(b.b, 18);
        if (i) {
          for (l = new Tob(i.a); l.a < l.c.c.length; ) {
            k = Wv(Rob(l), 9);
            for (t = nX(k, (sN(), ZM)).mb(); t.G(); ) {
              s = Wv(t.H(), 7);
              j.ib(s);
              for (h = new Tob(s.e); h.a < h.c.c.length; ) {
                g = Wv(Rob(h), 12);
                if (bW(g)) {
                  continue;
                }
                c.c[c.c.length] = g;
                Ufb(g, d);
                r = g.c.f.g;
                (r == (CX(), AX) || r == BX) && (e.c[e.c.length] = g, true);
                v = g.d;
                u = v.f.d;
                u == p ? q.ib(v) : u == i ? j.ib(v) : BU(c, g);
              }
            }
          }
        }
        if (p) {
          for (l = new Tob(p.a); l.a < l.c.c.length; ) {
            k = Wv(Rob(l), 9);
            for (o2 = new Tob(k.f); o2.a < o2.c.c.length; ) {
              n = Wv(Rob(o2), 7);
              for (h = new Tob(n.e); h.a < h.c.c.length; ) {
                g = Wv(Rob(h), 12);
                bW(g) && (m = f.a.db(g, f), m == null);
              }
            }
            for (t = nX(k, (sN(), rN)).mb(); t.G(); ) {
              s = Wv(t.H(), 7);
              q.ib(s);
              for (h = new Tob(s.e); h.a < h.c.c.length; ) {
                g = Wv(Rob(h), 12);
                if (bW(g)) {
                  continue;
                }
                c.c[c.c.length] = g;
                Ufb(g, d);
                r = g.c.f.g;
                (r == (CX(), AX) || r == BX) && (e.c[e.c.length] = g, true);
                v = g.d;
                u = v.f.d;
                u == p ? q.ib(v) : u == i ? j.ib(v) : BU(c, g);
              }
            }
          }
        }
      }
      function acb(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B;
        t = b.c.length;
        e = new Cbb(a.b, c, null, null);
        B = xv(kw, hyb, 26, t, 12, 1);
        p = xv(kw, hyb, 26, t, 12, 1);
        o2 = xv(kw, hyb, 26, t, 12, 1);
        q = 0;
        for (h = 0; h < t; h++) {
          p[h] = $xb;
          o2[h] = eyb;
        }
        for (i = 0; i < t; i++) {
          d = (Cxb(i, b.c.length), Wv(b.c[i], 81));
          B[i] = Abb(d);
          B[q] > B[i] && (q = i);
          for (l = new Tob(a.b.c); l.a < l.c.c.length; ) {
            k = Wv(Rob(l), 16);
            for (s = new Tob(k.a); s.a < s.c.c.length; ) {
              r = Wv(Rob(s), 9);
              w = Ixb(d.n[r.k]) + Ixb(d.d[r.k]);
              p[i] = p[i] < w ? p[i] : w;
              o2[i] = Nlb(o2[i], w + r.j.b);
            }
          }
        }
        A = xv(kw, hyb, 26, t, 12, 1);
        for (j = 0; j < t; j++) {
          (Cxb(j, b.c.length), Wv(b.c[j], 81)).k == (Lbb(), Jbb) ? A[j] = p[q] - p[j] : A[j] = o2[q] - o2[j];
        }
        f = xv(kw, hyb, 26, t, 12, 1);
        for (n = new Tob(a.b.c); n.a < n.c.c.length; ) {
          m = Wv(Rob(n), 16);
          for (v = new Tob(m.a); v.a < v.c.c.length; ) {
            u = Wv(Rob(v), 9);
            for (g = 0; g < t; g++) {
              f[g] = Ixb((Cxb(g, b.c.length), Wv(b.c[g], 81)).n[u.k]) + Ixb((Cxb(g, b.c.length), Wv(b.c[g], 81)).d[u.k]) + A[g];
            }
            kpb(f);
            e.n[u.k] = (f[1] + f[2]) / 2;
            e.d[u.k] = 0;
          }
        }
        return e;
      }
      function Sfb(a, b, c, d, e, f) {
        var g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v;
        p = null;
        c == (fgb(), dgb) ? p = a : c == egb && (p = b);
        for (r = (m = new Snb(p.a).a.bb().mb(), new Ynb(m)); r.a.G(); ) {
          q = (k = Wv(r.a.H(), 21), Wv(k.yb(), 7));
          s = MI(Bv(tv(qz, 1), Fzb, 10, 0, [q.f.i, q.i, q.a])).b;
          v = new vtb();
          g = new vtb();
          for (i = Uh(Sh((Gi(), new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [q.b, q.e])))))); Cm(i); ) {
            h = Wv(Dm(i), 12);
            if (Ckb(Ixb(Xv(rJ(h, (Rib(), Iib))))) != d) {
              continue;
            }
            if (zU(e, h, 0) != -1) {
              h.d == q ? t = h.c : t = h.d;
              u = MI(Bv(tv(qz, 1), Fzb, 10, 0, [t.f.i, t.i, t.a])).b;
              if ((u - s <= 0 ? 0 - (u - s) : u - s) < 0.2) {
                continue;
              }
              u < s ? a.a.R(t) ? stb(v, new RJ(dgb, h)) : stb(v, new RJ(egb, h)) : a.a.R(t) ? stb(g, new RJ(dgb, h)) : stb(g, new RJ(egb, h));
            }
          }
          if (v.a.Y() > 1) {
            vU(f, new mgb(q, v, c));
            for (o2 = (l = new Snb(v.a).a.bb().mb(), new Ynb(l)); o2.a.G(); ) {
              n = (j = Wv(o2.a.H(), 21), Wv(j.yb(), 27));
              BU(e, n.b);
            }
          }
          if (g.a.Y() > 1) {
            vU(f, new mgb(q, g, c));
            for (o2 = (l = new Snb(g.a).a.bb().mb(), new Ynb(l)); o2.a.G(); ) {
              n = (j = Wv(o2.a.H(), 21), Wv(j.yb(), 27));
              BU(e, n.b);
            }
          }
        }
      }
      function dab(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A;
        e = 0;
        s = 0;
        r = (mp(), new ntb());
        d = new ntb();
        f = new ntb();
        A = new ntb();
        fab(a, f, A);
        b = null;
        q = 0;
        w = 0;
        t = true;
        i = true;
        for (m = 0, o2 = a.length; m < o2; ++m) {
          k = a[m];
          for (v = new Tob(k.f); v.a < v.c.c.length; ) {
            u = Wv(Rob(v), 7);
            switch (u.g.e) {
              case 2:
                e += cab(u, f);
                break;
              case 4:
                e += cab(u, A);
            }
          }
          p = k.g;
          if (i && (p == (CX(), AX) || p == BX)) {
            j = Wv(rJ(k, (Rib(), nib)), 9);
            if (!j) {
              i = false;
              continue;
            }
            if (b != j) {
              !!b && Umb(r, b, new RJ(Elb(q), Elb(w)));
              b = j;
              q = 0;
              w = 0;
              t = true;
            }
            k == b && (t = false);
            if (t) {
              q += Wv(rJ(k, aib), 24).a;
              Umb(d, k, Elb(q));
            } else {
              w += Wv(rJ(k, aib), 24).a;
              Umb(d, k, Elb(w));
            }
          }
        }
        !!b && Umb(r, b, new RJ(Elb(q), Elb(w)));
        if (i) {
          h = null;
          g = 0;
          c = 0;
          t = true;
          for (l = 0, n = a.length; l < n; ++l) {
            k = a[l];
            p = k.g;
            switch (p.e) {
              case 0:
                g = Wv(re(Ktb(d.d, k)), 24).a;
                c = Wv(Wv(re(Ktb(r.d, k)), 27).b, 24).a;
                h = k;
                t = false;
                break;
              case 3:
                g = Wv(re(Ktb(d.d, k)), 24).a;
                j = Wv(rJ(k, (Rib(), nib)), 9);
                if (j != h) {
                  c = Wv(Wv(re(Ktb(r.d, j)), 27).a, 24).a;
                  h = j;
                  t = true;
                }
                break;
              default:
                s += t ? g : c - g;
            }
          }
        }
        return e + s;
      }
      function S4(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t;
        l = (mp(), new ntb());
        j = new xk();
        for (d = new Tob(a.a.a.b); d.a < d.c.c.length; ) {
          b = Wv(Rob(d), 25);
          if (aw(b, 93)) {
            k = Wv(b, 93).b;
            Ltb(l.d, k, b);
          } else if (aw(b, 82)) {
            for (f = (o2 = new Snb(Wv(b, 82).d.a).a.bb().mb(), new Ynb(o2)); f.a.G(); ) {
              e = (g = Wv(f.a.H(), 21), Wv(g.yb(), 12));
              Fd(j, e, b);
            }
          }
        }
        for (c = new Tob(a.a.a.b); c.a < c.c.c.length; ) {
          b = Wv(Rob(c), 25);
          if (aw(b, 93)) {
            k = Wv(b, 93).b;
            for (i = Uh(mX(k)); Cm(i); ) {
              h = Wv(Dm(i), 12);
              if (bW(h)) {
                continue;
              }
              q = h.c;
              t = h.d;
              if ((sN(), jN).kb(h.c.g) && jN.kb(h.d.g)) {
                continue;
              }
              r = Wv(Smb(l, h.d.f), 25);
              f7(i7(h7(j7(g7(new k7(), 0), 100), a.c[b.f.d]), a.c[r.f.d]));
              if (q.g == rN && TX((LX(), IX, q))) {
                for (n = Wv(Dd(j, h), 18).mb(); n.G(); ) {
                  m = Wv(n.H(), 25);
                  if (m.j.d < b.j.d) {
                    p = a.c[m.f.d];
                    s = a.c[b.f.d];
                    if (p == s) {
                      continue;
                    }
                    f7(i7(h7(j7(g7(new k7(), 1), 100), p), s));
                  }
                }
              }
              if (t.g == ZM && WX((LX(), GX, t))) {
                for (n = Wv(Dd(j, h), 18).mb(); n.G(); ) {
                  m = Wv(n.H(), 25);
                  if (m.j.d > b.j.d) {
                    p = a.c[b.f.d];
                    s = a.c[m.f.d];
                    if (p == s) {
                      continue;
                    }
                    f7(i7(h7(j7(g7(new k7(), 1), 100), p), s));
                  }
                }
              }
            }
          }
        }
      }
      function t3(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2;
        g = new z3(a);
        h = Ao(pl(b, g));
        Gpb(h, new C3());
        e = a.b;
        switch (e.c) {
          case 2:
            i = new E3(e.a);
            c = Al(pl(h, i));
            od(c) ? j = Wv(pd(c), 91).b : j = 15;
            i = new E3(Jeb(e));
            c = Al(pl(h, i));
            od(c) ? f = Wv(pd(c), 91).b : f = 15;
            i = new E3(e.b);
            c = Al(pl(h, i));
            od(c) ? k = Wv(pd(c), 91).b : k = 15;
            d = p3(a, j, f, k);
            stb(b, new w3(d, a.c, a.e, a.a.c.f, e.a));
            stb(b, new w3(d, a.c, a.e, a.a.c.f, Jeb(e)));
            stb(b, new w3(d, a.c, a.e, a.a.c.f, e.b));
            break;
          case 1:
            i = new E3(e.a);
            c = Al(pl(h, i));
            od(c) ? j = Wv(pd(c), 91).b : j = 15;
            i = new E3(e.b);
            c = Al(pl(h, i));
            od(c) ? k = Wv(pd(c), 91).b : k = 15;
            d = q3(a, j, k);
            stb(b, new w3(d, a.c, a.e, a.a.c.f, e.a));
            stb(b, new w3(d, a.c, a.e, a.a.c.f, e.b));
            break;
          case 0:
            i = new E3(e.a);
            c = Al(pl(h, i));
            od(c) ? j = Wv(pd(c), 91).b : j = 15;
            d = (l = a.b, m = xfb(a.a.c, a.a.d, j), Ue(a.a.a, Veb(m)), n = s3(a.a.b, m.a, l), o2 = new Dfb((!m.k && (m.k = new Efb(Xeb(m))), m.k)), zfb(o2), !n ? o2 : Gfb(o2, n));
            stb(b, new w3(d, a.c, a.e, a.a.c.f, e.a));
            break;
          default:
            throw new slb("The loopside must be defined.");
        }
        return d;
      }
      function Pbb(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v;
        for (h = new Tob(a.a.c); h.a < h.c.c.length; ) {
          f = Wv(Rob(h), 16);
          for (t = new Tob(f.a); t.a < t.c.c.length; ) {
            s = Wv(Rob(t), 9);
            b.f[s.k] = s;
            b.a[s.k] = s;
            b.d[s.k] = 0;
          }
        }
        i = a.a.c;
        b.c == (Gbb(), Ebb) && (i = aw(i, 87) ? Ii(Wv(i, 87)) : aw(i, 88) ? Wv(i, 88).a : aw(i, 63) ? new ap(i) : new Ro(i));
        for (g = i.mb(); g.G(); ) {
          f = Wv(g.H(), 16);
          n = -1;
          m = f.a;
          if (b.k == (Lbb(), Kbb)) {
            n = $xb;
            m = aw(m, 87) ? Ii(Wv(m, 87)) : aw(m, 88) ? Wv(m, 88).a : aw(m, 63) ? new ap(m) : new Ro(m);
          }
          for (v = m.mb(); v.G(); ) {
            u = Wv(v.H(), 9);
            b.c == Ebb ? l = Wv(yU(a.b.f, u.k), 20) : l = Wv(yU(a.b.b, u.k), 20);
            if (l.Y() > 0) {
              d = l.Y();
              j = hw(Math.floor((d + 1) / 2)) - 1;
              e = hw(Math.ceil((d + 1) / 2)) - 1;
              if (b.k == Kbb) {
                for (k = e; k >= j; k--) {
                  if (b.a[u.k] == u) {
                    p = Wv(l.sb(k), 27);
                    o2 = Wv(p.a, 9);
                    if (!ttb(c, p.b) && n > a.b.e[o2.k]) {
                      b.a[o2.k] = u;
                      b.f[u.k] = b.f[o2.k];
                      b.a[u.k] = b.f[u.k];
                      n = a.b.e[o2.k];
                    }
                  }
                }
              } else {
                for (k = j; k <= e; k++) {
                  if (b.a[u.k] == u) {
                    r = Wv(l.sb(k), 27);
                    q = Wv(r.a, 9);
                    if (!ttb(c, r.b) && n < a.b.e[q.k]) {
                      b.a[q.k] = u;
                      b.f[u.k] = b.f[q.k];
                      b.a[u.k] = b.f[u.k];
                      n = a.b.e[q.k];
                    }
                  }
                }
              }
            }
          }
        }
      }
      function Ieb() {
        Ieb = iI;
        meb = new Peb("N", 0, (sN(), $M), $M, 0);
        jeb = new Peb("EN", 1, ZM, $M, 1);
        ieb = new Peb("E", 2, ZM, ZM, 0);
        peb = new Peb("SE", 3, pN, ZM, 1);
        oeb = new Peb("S", 4, pN, pN, 0);
        Heb = new Peb("WS", 5, rN, pN, 1);
        Geb = new Peb("W", 6, rN, rN, 0);
        neb = new Peb("NW", 7, $M, rN, 1);
        keb = new Peb("ENW", 8, ZM, rN, 2);
        leb = new Peb("ESW", 9, ZM, rN, 2);
        qeb = new Peb("SEN", 10, pN, $M, 2);
        Eeb = new Peb("SWN", 11, pN, $M, 2);
        Feb = new Peb(szb, 12, qN, qN, 3);
        feb = bk(meb, jeb, ieb, peb, oeb, Heb, Bv(tv(_E, 1), uyb, 60, 0, [Geb, neb, keb, leb, qeb, Eeb]));
        heb = (hi(), Zj(Bv(tv(UF, 1), syb, 1, 4, [meb, ieb, oeb, Geb])));
        geb = Zj(Bv(tv(UF, 1), syb, 1, 4, [jeb, peb, Heb, neb]));
        veb = new Gr($M);
        seb = Zj(Bv(tv(UF, 1), syb, 1, 4, [ZM, $M]));
        reb = new Gr(ZM);
        yeb = Zj(Bv(tv(UF, 1), syb, 1, 4, [pN, ZM]));
        xeb = new Gr(pN);
        Deb = Zj(Bv(tv(UF, 1), syb, 1, 4, [rN, pN]));
        Ceb = new Gr(rN);
        web = Zj(Bv(tv(UF, 1), syb, 1, 4, [$M, rN]));
        teb = Zj(Bv(tv(UF, 1), syb, 1, 4, [ZM, $M, rN]));
        ueb = Zj(Bv(tv(UF, 1), syb, 1, 4, [ZM, pN, rN]));
        Aeb = Zj(Bv(tv(UF, 1), syb, 1, 4, [pN, rN, $M]));
        zeb = Zj(Bv(tv(UF, 1), syb, 1, 4, [pN, ZM, $M]));
        Beb = (kr(), jr);
      }
      function JZ(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u;
        s = 0;
        if (b.e.a == 0) {
          for (q = new Tob(a); q.a < q.c.c.length; ) {
            o2 = Wv(Rob(q), 9);
            s = Nlb(s, o2.i.a + o2.j.a + o2.e.c);
          }
        } else {
          s = b.e.a - b.d.a;
        }
        s -= b.d.a;
        for (p = new Tob(a); p.a < p.c.c.length; ) {
          o2 = Wv(Rob(p), 9);
          IZ(o2.i, s - o2.j.a);
          GZ(o2);
          switch (Wv(rJ(o2, (eM(), lL)), 103).e) {
            case 1:
              sJ(o2, lL, (iK(), gK));
              break;
            case 2:
              sJ(o2, lL, (iK(), fK));
          }
          r = o2.j;
          for (u = new Tob(o2.f); u.a < u.c.c.length; ) {
            t = Wv(Rob(u), 7);
            IZ(t.i, r.a - t.j.a);
            IZ(t.a, t.j.a);
            QX(t, CZ(t.g));
            g = Wv(rJ(t, UL), 24);
            !!g && sJ(t, UL, Elb(-g.a));
            for (f = new Tob(t.e); f.a < f.c.c.length; ) {
              e = Wv(Rob(f), 12);
              for (d = WI(e.a, 0); d.b != d.d.c; ) {
                c = Wv(_ub(d), 10);
                c.a = s - c.a;
              }
              j = Wv(rJ(e, CL), 44);
              if (j) {
                for (i = WI(j, 0); i.b != i.d.c; ) {
                  h = Wv(_ub(i), 10);
                  h.a = s - h.a;
                }
              }
              for (m = new Tob(e.b); m.a < m.c.c.length; ) {
                k = Wv(Rob(m), 33);
                IZ(k.i, s - k.j.a);
              }
            }
            for (n = new Tob(t.c); n.a < n.c.c.length; ) {
              k = Wv(Rob(n), 33);
              IZ(k.i, -k.j.a);
            }
          }
          if (o2.g == (CX(), xX)) {
            sJ(o2, (Rib(), hib), CZ(Wv(rJ(o2, hib), 32)));
            FZ(o2);
          }
          for (l = new Tob(o2.c); l.a < l.c.c.length; ) {
            k = Wv(Rob(l), 33);
            IZ(k.i, r.a - k.j.a);
          }
        }
      }
      function LZ(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u;
        s = 0;
        if (b.e.b == 0) {
          for (q = new Tob(a); q.a < q.c.c.length; ) {
            o2 = Wv(Rob(q), 9);
            s = Nlb(s, o2.i.b + o2.j.b + o2.e.a);
          }
        } else {
          s = b.e.b - b.d.b;
        }
        s -= b.d.b;
        for (p = new Tob(a); p.a < p.c.c.length; ) {
          o2 = Wv(Rob(p), 9);
          KZ(o2.i, s - o2.j.b);
          HZ(o2);
          switch (Wv(rJ(o2, (eM(), lL)), 103).e) {
            case 3:
              sJ(o2, lL, (iK(), dK));
              break;
            case 4:
              sJ(o2, lL, (iK(), hK));
          }
          r = o2.j;
          for (u = new Tob(o2.f); u.a < u.c.c.length; ) {
            t = Wv(Rob(u), 7);
            KZ(t.i, r.b - t.j.b);
            KZ(t.a, t.j.b);
            QX(t, DZ(t.g));
            g = Wv(rJ(t, UL), 24);
            !!g && sJ(t, UL, Elb(-g.a));
            for (f = new Tob(t.e); f.a < f.c.c.length; ) {
              e = Wv(Rob(f), 12);
              for (d = WI(e.a, 0); d.b != d.d.c; ) {
                c = Wv(_ub(d), 10);
                c.b = s - c.b;
              }
              j = Wv(rJ(e, CL), 44);
              if (j) {
                for (i = WI(j, 0); i.b != i.d.c; ) {
                  h = Wv(_ub(i), 10);
                  h.b = s - h.b;
                }
              }
              for (m = new Tob(e.b); m.a < m.c.c.length; ) {
                k = Wv(Rob(m), 33);
                KZ(k.i, s - k.j.b);
              }
            }
            for (n = new Tob(t.c); n.a < n.c.c.length; ) {
              k = Wv(Rob(n), 33);
              KZ(k.i, -k.j.b);
            }
          }
          if (o2.g == (CX(), xX)) {
            sJ(o2, (Rib(), hib), DZ(Wv(rJ(o2, hib), 32)));
            EZ(o2);
          }
          for (l = new Tob(o2.c); l.a < l.c.c.length; ) {
            k = Wv(Rob(l), 33);
            KZ(k.i, r.b - k.j.b);
          }
        }
      }
      function qP(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m, n;
        d = new VN(b.e.i.a, b.e.i.b, b.e.j.a, b.e.j.b);
        e = new UN();
        if (a.c) {
          for (g = new Tob(zW(b)); g.a < g.c.c.length; ) {
            f = Wv(Rob(g), 129);
            e.d = f.e.i.a + b.e.i.a;
            e.e = f.e.i.b + b.e.i.b;
            e.c = f.e.j.a;
            e.b = f.e.j.b;
            TN(d, e);
          }
        }
        for (k = new Tob(AW(b)); k.a < k.c.c.length; ) {
          j = Wv(Rob(k), 161);
          l = j.e.i.a + b.e.i.a;
          m = j.e.i.b + b.e.i.b;
          if (a.e) {
            e.d = l;
            e.e = m;
            e.c = j.e.j.a;
            e.b = j.e.j.b;
            TN(d, e);
          }
          if (a.d) {
            for (g = new Tob(DW(j)); g.a < g.c.c.length; ) {
              f = Wv(Rob(g), 129);
              e.d = f.e.i.a + l;
              e.e = f.e.i.b + m;
              e.c = f.e.j.a;
              e.b = f.e.j.b;
              TN(d, e);
            }
          }
          if (a.b) {
            n = new HI(-c, -c);
            if (gw(oW(b, (eM(), VL))) === gw((UM(), TM))) {
              for (g = new Tob(DW(j)); g.a < g.c.c.length; ) {
                f = Wv(Rob(g), 129);
                n.a += f.e.j.a + c;
                n.b += f.e.j.b + c;
              }
            }
            n.a = Nlb(n.a, 0);
            n.b = Nlb(n.b, 0);
            pP(d, EW(j), CW(j), b, j, n, c);
          }
        }
        a.b && pP(d, (ypb(), ypb(), vpb), (null, vpb), b, null, null, c);
        i = new FP((h = Wv(b.e, 9).e, new EP(h.d, h.b, h.a, h.c)));
        i.d = b.e.i.b - d.e;
        i.a = d.e + d.b - (b.e.i.b + b.e.j.b);
        i.b = b.e.i.a - d.d;
        i.c = d.d + d.c - (b.e.i.a + b.e.j.a);
        Wv(b.e, 9).e.b = i.b;
        Wv(b.e, 9).e.d = i.d;
        Wv(b.e, 9).e.c = i.c;
        Wv(b.e, 9).e.a = i.a;
      }
      function XT() {
        XT = iI;
        WT = new xk();
        Fd(WT, (sN(), dN), hN);
        Fd(WT, oN, kN);
        Fd(WT, oN, hN);
        Fd(WT, _M, gN);
        Fd(WT, _M, hN);
        Fd(WT, eN, iN);
        Fd(WT, eN, hN);
        Fd(WT, mN, bN);
        Fd(WT, mN, hN);
        Fd(WT, jN, cN);
        Fd(WT, jN, iN);
        Fd(WT, jN, bN);
        Fd(WT, jN, hN);
        Fd(WT, cN, jN);
        Fd(WT, cN, kN);
        Fd(WT, cN, gN);
        Fd(WT, cN, hN);
        Fd(WT, lN, lN);
        Fd(WT, lN, iN);
        Fd(WT, lN, kN);
        Fd(WT, fN, fN);
        Fd(WT, fN, iN);
        Fd(WT, fN, gN);
        Fd(WT, nN, nN);
        Fd(WT, nN, bN);
        Fd(WT, nN, kN);
        Fd(WT, aN, aN);
        Fd(WT, aN, bN);
        Fd(WT, aN, gN);
        Fd(WT, iN, eN);
        Fd(WT, iN, jN);
        Fd(WT, iN, lN);
        Fd(WT, iN, fN);
        Fd(WT, iN, iN);
        Fd(WT, iN, kN);
        Fd(WT, iN, gN);
        Fd(WT, iN, hN);
        Fd(WT, bN, mN);
        Fd(WT, bN, jN);
        Fd(WT, bN, nN);
        Fd(WT, bN, aN);
        Fd(WT, bN, bN);
        Fd(WT, bN, kN);
        Fd(WT, bN, gN);
        Fd(WT, bN, hN);
        Fd(WT, kN, oN);
        Fd(WT, kN, cN);
        Fd(WT, kN, lN);
        Fd(WT, kN, nN);
        Fd(WT, kN, iN);
        Fd(WT, kN, bN);
        Fd(WT, kN, kN);
        Fd(WT, kN, hN);
        Fd(WT, gN, _M);
        Fd(WT, gN, cN);
        Fd(WT, gN, fN);
        Fd(WT, gN, aN);
        Fd(WT, gN, iN);
        Fd(WT, gN, bN);
        Fd(WT, gN, gN);
        Fd(WT, gN, hN);
        Fd(WT, hN, dN);
        Fd(WT, hN, oN);
        Fd(WT, hN, _M);
        Fd(WT, hN, eN);
        Fd(WT, hN, mN);
        Fd(WT, hN, jN);
        Fd(WT, hN, cN);
        Fd(WT, hN, iN);
        Fd(WT, hN, bN);
        Fd(WT, hN, kN);
        Fd(WT, hN, gN);
        Fd(WT, hN, hN);
      }
      function Tbb(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r;
        if (c.n[b.k] != null) {
          return;
        }
        i = true;
        c.n[b.k] = 0;
        g = b;
        r = c.k == (Lbb(), Jbb) ? Vzb : Uzb;
        do {
          e = a.b.e[g.k];
          f = g.d.a.c.length;
          h = g.g;
          if (c.k == Jbb && e > 0 || c.k == Kbb && e < f - 1) {
            c.k == Kbb ? j = Wv(yU(g.d.a, e + 1), 9) : j = Wv(yU(g.d.a, e - 1), 9);
            l = c.f[j.k];
            k = j.g;
            Tbb(a, l, c);
            r = a.e.Ic(r, b, g);
            c.i[b.k] == b && (c.i[b.k] = c.i[l.k]);
            if (c.i[b.k] == c.i[l.k]) {
              q = Wjb(a.d, h, k);
              if (c.k == Kbb) {
                d = Ixb(c.n[b.k]);
                n = Ixb(c.n[l.k]) + Ixb(c.d[j.k]) - j.e.d - q - g.e.a - g.j.b - Ixb(c.d[g.k]);
                if (i) {
                  i = false;
                  c.n[b.k] = n < r ? n : r;
                } else {
                  c.n[b.k] = d < (n < r ? n : r) ? d : n < r ? n : r;
                }
              } else {
                d = Ixb(c.n[b.k]);
                n = Ixb(c.n[l.k]) + Ixb(c.d[j.k]) + j.j.b + j.e.a + q + g.e.d - Ixb(c.d[g.k]);
                if (i) {
                  i = false;
                  c.n[b.k] = n > r ? n : r;
                } else {
                  c.n[b.k] = d > (n > r ? n : r) ? d : n > r ? n : r;
                }
              }
            } else {
              q = a.d.f;
              p = Rbb(a, c.i[b.k]);
              m = Rbb(a, c.i[l.k]);
              if (c.k == Kbb) {
                o2 = Ixb(c.n[b.k]) + Ixb(c.d[g.k]) + g.j.b + g.e.a + q - (Ixb(c.n[l.k]) + Ixb(c.d[j.k]) - j.e.d);
                Xbb(p, m, o2);
              } else {
                o2 = Ixb(c.n[b.k]) + Ixb(c.d[g.k]) - g.e.d - Ixb(c.n[l.k]) - Ixb(c.d[j.k]) - j.j.b - j.e.a - q;
                Xbb(p, m, o2);
              }
            }
          } else {
            r = a.e.Ic(r, b, g);
          }
          g = c.a[g.k];
        } while (g != b);
        ycb(a.e, b);
      }
      function sZ(a, b, c, d) {
        var e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s;
        m = false;
        l = false;
        if (MM(Wv(rJ(d, (eM(), TL)), 28))) {
          g = false;
          h = false;
          t:
            for (o2 = new Tob(d.f); o2.a < o2.c.c.length; ) {
              n = Wv(Rob(o2), 7);
              for (q = Uh(Sh((Gi(), new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [new fY(n), new lY(n)])))))); Cm(q); ) {
                p = Wv(Dm(q), 7);
                if (!Ckb(Ixb(Xv(rJ(p.f, qL))))) {
                  if (n.g == (sN(), $M)) {
                    g = true;
                    break t;
                  }
                  if (n.g == pN) {
                    h = true;
                    break t;
                  }
                }
              }
            }
          m = h && !g;
          l = g && !h;
        }
        if (!m && !l && d.c.c.length != 0) {
          k = 0;
          for (j = new Tob(d.c); j.a < j.c.c.length; ) {
            i = Wv(Rob(j), 33);
            k += i.i.b + i.j.b / 2;
          }
          k /= d.c.c.length;
          s = k >= d.j.b / 2;
        } else {
          s = !l;
        }
        if (s) {
          r = Wv(rJ(d, (Rib(), Qib)), 20);
          if (!r) {
            f = new GU();
            sJ(d, Qib, f);
          } else if (m) {
            f = r;
          } else {
            e = Wv(rJ(d, Yhb), 20);
            if (!e) {
              f = new GU();
              sJ(d, Yhb, f);
            } else {
              r.Y() <= e.Y() ? f = r : f = e;
            }
          }
        } else {
          e = Wv(rJ(d, (Rib(), Yhb)), 20);
          if (!e) {
            f = new GU();
            sJ(d, Yhb, f);
          } else if (l) {
            f = e;
          } else {
            r = Wv(rJ(d, Qib), 20);
            if (!r) {
              f = new GU();
              sJ(d, Qib, f);
            } else {
              e.Y() <= r.Y() ? f = e : f = r;
            }
          }
        }
        f.ib(a);
        sJ(a, (Rib(), Zhb), c);
        if (b.d == c) {
          eW(b, null);
          c.b.c.length + c.e.c.length == 0 && PX(c, null);
        } else {
          dW(b, null);
          c.b.c.length + c.e.c.length == 0 && PX(c, null);
        }
        _I(b.a);
      }
      function rU(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t;
        c = new bV(b);
        c.a || kU(b);
        j = jU(b);
        i = new xk();
        q = new oV();
        for (p = new Tob(b.b); p.a < p.c.c.length; ) {
          o2 = Wv(Rob(p), 9);
          for (e = Uh(mX(o2)); Cm(e); ) {
            d = Wv(Dm(e), 12);
            if (d.c.f.g == (CX(), xX) || d.d.f.g == xX) {
              k = qU(a, d, j, q);
              Fd(i, oU(k.d), k.a);
            }
          }
        }
        g = new GU();
        for (t = Wv(rJ(c.c, (Rib(), fib)), 18).mb(); t.G(); ) {
          s = Wv(t.H(), 32);
          n = q.c[s.e];
          m = q.b[s.e];
          h = q.a[s.e];
          f = null;
          r = null;
          switch (s.e) {
            case 4:
              f = new VN(a.d.a, n, j.b.a - a.d.a, m - n);
              r = new VN(a.d.a, n, h, m - n);
              YU(j, new HI(f.d + f.c, f.e));
              YU(j, new HI(f.d + f.c, f.e + f.b));
              break;
            case 2:
              f = new VN(j.a.a, n, a.c.a - j.a.a, m - n);
              r = new VN(a.c.a - h, n, h, m - n);
              YU(j, new HI(f.d, f.e));
              YU(j, new HI(f.d, f.e + f.b));
              break;
            case 1:
              f = new VN(n, a.d.b, m - n, j.b.b - a.d.b);
              r = new VN(n, a.d.b, m - n, h);
              YU(j, new HI(f.d, f.e + f.b));
              YU(j, new HI(f.d + f.c, f.e + f.b));
              break;
            case 3:
              f = new VN(n, j.a.b, m - n, a.c.b - j.a.b);
              r = new VN(n, a.c.b - h, m - n, h);
              YU(j, new HI(f.d, f.e));
              YU(j, new HI(f.d + f.c, f.e));
          }
          if (f) {
            l = new jV();
            l.d = s;
            l.b = f;
            l.c = r;
            l.a = pr(Wv(Dd(i, oU(s)), 18));
            g.c[g.c.length] = l;
          }
        }
        xU(c.b, g);
        c.d = pT(tT(j));
        return c;
      }
      function tt() {
        var a = ["\\u0000", "\\u0001", "\\u0002", "\\u0003", "\\u0004", "\\u0005", "\\u0006", "\\u0007", "\\b", "\\t", "\\n", "\\u000B", "\\f", "\\r", "\\u000E", "\\u000F", "\\u0010", "\\u0011", "\\u0012", "\\u0013", "\\u0014", "\\u0015", "\\u0016", "\\u0017", "\\u0018", "\\u0019", "\\u001A", "\\u001B", "\\u001C", "\\u001D", "\\u001E", "\\u001F"];
        a[34] = '\\"';
        a[92] = "\\\\";
        a[173] = "\\u00ad";
        a[1536] = "\\u0600";
        a[1537] = "\\u0601";
        a[1538] = "\\u0602";
        a[1539] = "\\u0603";
        a[1757] = "\\u06dd";
        a[1807] = "\\u070f";
        a[6068] = "\\u17b4";
        a[6069] = "\\u17b5";
        a[8203] = "\\u200b";
        a[8204] = "\\u200c";
        a[8205] = "\\u200d";
        a[8206] = "\\u200e";
        a[8207] = "\\u200f";
        a[8232] = "\\u2028";
        a[8233] = "\\u2029";
        a[8234] = "\\u202a";
        a[8235] = "\\u202b";
        a[8236] = "\\u202c";
        a[8237] = "\\u202d";
        a[8238] = "\\u202e";
        a[8288] = "\\u2060";
        a[8289] = "\\u2061";
        a[8290] = "\\u2062";
        a[8291] = "\\u2063";
        a[8292] = "\\u2064";
        a[8298] = "\\u206a";
        a[8299] = "\\u206b";
        a[8300] = "\\u206c";
        a[8301] = "\\u206d";
        a[8302] = "\\u206e";
        a[8303] = "\\u206f";
        a[65279] = "\\ufeff";
        a[65529] = "\\ufff9";
        a[65530] = "\\ufffa";
        a[65531] = "\\ufffb";
        return a;
      }
      function eab(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w;
        b = 0;
        r = true;
        w = null;
        for (d = 0; d < a.length; d++) {
          f = a[d];
          q = f.g;
          if (q == (CX(), AX)) {
            w = f;
            r = false;
          } else if (q == BX) {
            if (aw(rJ(f, (Rib(), uib)), 12)) {
              continue;
            }
            c = Wv(rJ(f, uib), 9);
            if (w != c) {
              w = c;
              r = true;
            }
            if (!LM(Wv(rJ(c, (eM(), TL)), 28))) {
              continue;
            }
            m = null;
            o2 = null;
            for (t = new Tob(f.f); t.a < t.c.c.length; ) {
              s = Wv(Rob(t), 7);
              s.b.c.length == 0 ? s.e.c.length == 0 || (o2 = Wv(rJ(s, uib), 7)) : m = Wv(rJ(s, uib), 7);
            }
            for (e = d + 1; e < a.length; e++) {
              g = a[e];
              l = g.g;
              if (l == AX) {
                break;
              } else if (l == BX) {
                if (gw(rJ(g, uib)) !== gw(c)) {
                  break;
                }
                h = null;
                j = null;
                for (v = new Tob(g.f); v.a < v.c.c.length; ) {
                  u = Wv(Rob(v), 7);
                  u.b.c.length == 0 ? u.e.c.length == 0 || (j = Wv(rJ(u, uib), 7)) : h = Wv(rJ(u, uib), 7);
                }
                if (r) {
                  n = false;
                  p = false;
                  if (!!o2 && !!h && o2.k < h.k) {
                    ++b;
                    p = true;
                  }
                  if (!!m && !!j && m.k > j.k) {
                    ++b;
                    n = true;
                  }
                  if (!!o2 && !!j && o2.k > j.k) {
                    ++b;
                    p = true;
                  }
                  if (!!m && !!h && m.k < h.k) {
                    ++b;
                    n = true;
                  }
                  n && p && m == o2 && --b;
                } else {
                  i = false;
                  k = false;
                  if (!!m && !!j && m.k < j.k) {
                    ++b;
                    k = true;
                  }
                  if (!!o2 && !!h && o2.k > h.k) {
                    ++b;
                    i = true;
                  }
                  if (!!m && !!h && m.k < h.k) {
                    ++b;
                    i = true;
                  }
                  if (!!o2 && !!j && o2.k > j.k) {
                    ++b;
                    k = true;
                  }
                  i && k && h == j && --b;
                }
              }
            }
          }
        }
        return b;
      }
      function Oab(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C, D;
        for (t = a.a, u = 0, v = t.length; u < v; ++u) {
          s = t[u];
          j = $xb;
          k = $xb;
          for (o2 = new Tob(s.f); o2.a < o2.c.c.length; ) {
            m = Wv(Rob(o2), 9);
            g = !m.d ? -1 : zU(m.d.a, m, 0);
            if (g > 0) {
              l = Wv(yU(m.d.a, g - 1), 9);
              B = Xjb(a.b, m, l);
              q = m.i.b - m.e.d - (l.i.b + l.j.b + l.e.a + B);
            } else {
              q = m.i.b - m.e.d;
            }
            j = q < j ? q : j;
            if (g < m.d.a.c.length - 1) {
              l = Wv(yU(m.d.a, g + 1), 9);
              B = Xjb(a.b, m, l);
              r = l.i.b - l.e.d - (m.i.b + m.j.b + m.e.a + B);
            } else {
              r = 2 * m.i.b;
            }
            k = r < k ? r : k;
          }
          i = $xb;
          f = false;
          e = Wv(yU(s.f, 0), 9);
          for (D = new Tob(e.f); D.a < D.c.c.length; ) {
            C = Wv(Rob(D), 7);
            p = e.i.b + C.i.b + C.a.b;
            for (d = new Tob(C.b); d.a < d.c.c.length; ) {
              c = Wv(Rob(d), 12);
              w = c.c;
              b = w.f.i.b + w.i.b + w.a.b - p;
              if ((b <= 0 ? 0 - b : b) < (i <= 0 ? 0 - i : i) && (b <= 0 ? 0 - b : b) < (b < 0 ? j : k)) {
                i = b;
                f = true;
              }
            }
          }
          h = Wv(yU(s.f, s.f.c.length - 1), 9);
          for (A = new Tob(h.f); A.a < A.c.c.length; ) {
            w = Wv(Rob(A), 7);
            p = h.i.b + w.i.b + w.a.b;
            for (d = new Tob(w.e); d.a < d.c.c.length; ) {
              c = Wv(Rob(d), 12);
              C = c.d;
              b = C.f.i.b + C.i.b + C.a.b - p;
              if ((b <= 0 ? 0 - b : b) < (i <= 0 ? 0 - i : i) && (b <= 0 ? 0 - b : b) < (b < 0 ? j : k)) {
                i = b;
                f = true;
              }
            }
          }
          if (f && i != 0) {
            for (n = new Tob(s.f); n.a < n.c.c.length; ) {
              m = Wv(Rob(n), 9);
              m.i.b += i;
            }
          }
        }
      }
      function bU(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C, D;
        l = dU($T(a, (sN(), dN)), b);
        o2 = cU($T(a, eN), b);
        u = cU($T(a, mN), b);
        B = eU($T(a, oN), b);
        m = eU($T(a, _M), b);
        s = cU($T(a, lN), b);
        p = cU($T(a, fN), b);
        w = cU($T(a, nN), b);
        v = cU($T(a, aN), b);
        C = eU($T(a, cN), b);
        r = cU($T(a, jN), b);
        t = cU($T(a, iN), b);
        A = cU($T(a, bN), b);
        D = eU($T(a, kN), b);
        n = eU($T(a, gN), b);
        q = cU($T(a, hN), b);
        c = oJ(Bv(tv(kw, 1), hyb, 26, 12, [s.a, B.a, w.a, D.a]));
        d = oJ(Bv(tv(kw, 1), hyb, 26, 12, [o2.a, l.a, u.a, q.a]));
        e = r.a;
        f = oJ(Bv(tv(kw, 1), hyb, 26, 12, [p.a, m.a, v.a, n.a]));
        j = oJ(Bv(tv(kw, 1), hyb, 26, 12, [s.b, o2.b, p.b, t.b]));
        i = oJ(Bv(tv(kw, 1), hyb, 26, 12, [B.b, l.b, m.b, q.b]));
        k = C.b;
        h = oJ(Bv(tv(kw, 1), hyb, 26, 12, [w.b, u.b, v.b, A.b]));
        VT($T(a, dN), c + e, j + k);
        VT($T(a, hN), c + e, j + k);
        VT($T(a, eN), c + e, 0);
        VT($T(a, mN), c + e, j + k + i);
        VT($T(a, oN), 0, j + k);
        VT($T(a, _M), c + e + d, j + k);
        VT($T(a, fN), c + e + d, 0);
        VT($T(a, nN), 0, j + k + i);
        VT($T(a, aN), c + e + d, j + k + i);
        VT($T(a, cN), 0, j);
        VT($T(a, jN), c, 0);
        VT($T(a, bN), 0, j + k + i);
        VT($T(a, gN), c + e + d, 0);
        g = new FI();
        g.a = oJ(Bv(tv(kw, 1), hyb, 26, 12, [c + d + e + f, C.a, t.a, A.a]));
        g.b = oJ(Bv(tv(kw, 1), hyb, 26, 12, [j + i + k + h, r.b, D.b, n.b]));
        return g;
      }
      function Nfb(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p;
        d = new jJ();
        j = null;
        o2 = a.c;
        n = o2.f.g;
        if (n != (CX(), AX) && n != BX) {
          throw new slb("The target node of the edge must be a normal node or a northSouthPort.");
        }
        if (n == BX) {
          m = Wv(rJ(o2, (Rib(), uib)), 7);
          j = new HI(MI(Bv(tv(qz, 1), Fzb, 10, 0, [m.f.i, m.i, m.a])).a, MI(Bv(tv(qz, 1), Fzb, 10, 0, [o2.f.i, o2.i, o2.a])).b);
          o2 = m;
        }
        SI(d, MI(Bv(tv(qz, 1), Fzb, 10, 0, [o2.f.i, o2.i, o2.a])));
        g = Nlb(5, pgb(o2.f, o2.g));
        l = new GI(sgb(o2.g));
        l.a *= g;
        l.b *= g;
        QI(d, vI(l, MI(Bv(tv(qz, 1), Fzb, 10, 0, [o2.f.i, o2.i, o2.a]))));
        !!j && TI(d, j, d.c.b, d.c);
        f = a;
        i = a;
        h = null;
        c = false;
        while (f) {
          e = f.a;
          if (e.b != 0) {
            if (c) {
              QI(d, CI(vI(h, (Bxb(e.b != 0), Wv(e.a.a.c, 10))), 0.5));
              c = false;
            } else {
              c = true;
            }
            h = xI((Bxb(e.b != 0), Wv(e.c.b.c, 10)));
            Ue(d, e);
            _I(e);
          }
          i = f;
          f = Wv(re(Ktb(b.d, f)), 12);
        }
        p = i.d;
        if (p.f.g == BX) {
          m = Wv(rJ(p, (Rib(), uib)), 7);
          QI(d, new HI(MI(Bv(tv(qz, 1), Fzb, 10, 0, [m.f.i, m.i, m.a])).a, MI(Bv(tv(qz, 1), Fzb, 10, 0, [p.f.i, p.i, p.a])).b));
          p = m;
        }
        g = Nlb(5, pgb(p.f, p.g));
        l = new GI(sgb(p.g));
        CI(l, g);
        QI(d, vI(l, MI(Bv(tv(qz, 1), Fzb, 10, 0, [p.f.i, p.i, p.a]))));
        SI(d, MI(Bv(tv(qz, 1), Fzb, 10, 0, [p.f.i, p.i, p.a])));
        k = new efb(d);
        Ue(a.a, Veb(k));
      }
      function bZ(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o2;
        if (gw(rJ(a.c, (eM(), TL))) === gw((KM(), GM)) || gw(rJ(a.c, TL)) === gw(FM)) {
          for (k = new Tob(a.c.f); k.a < k.c.c.length; ) {
            j = Wv(Rob(k), 7);
            if (j.g == (sN(), $M) || j.g == pN) {
              return false;
            }
          }
        }
        for (d = Uh(mX(a.c)); Cm(d); ) {
          c = Wv(Dm(d), 12);
          if (c.c.f == c.d.f) {
            return false;
          }
        }
        if (MM(Wv(rJ(a.c, TL), 28))) {
          n = new GU();
          for (i = nX(a.c, (sN(), rN)).mb(); i.G(); ) {
            g = Wv(i.H(), 7);
            vU(n, Sh((Gi(), new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [g.b, g.e]))))));
          }
          o2 = (_b(n), new Vh(n));
          n = new GU();
          for (h = nX(a.c, ZM).mb(); h.G(); ) {
            g = Wv(h.H(), 7);
            vU(n, Sh((Gi(), new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [g.b, g.e]))))));
          }
          b = (_b(n), new Vh(n));
        } else {
          o2 = iX(a.c);
          b = mX(a.c);
        }
        f = !sl(mX(a.c));
        e = !sl(iX(a.c));
        if (!f && !e) {
          return false;
        }
        if (!f) {
          a.e = 1;
          return true;
        }
        if (!e) {
          a.e = 0;
          return true;
        }
        if (Ul((Il(), new Im(Dl(ul(o2.a, new yl()))))) == 1) {
          l = (_b(o2), Wv(Ql(new Im(Dl(ul(o2.a, new yl())))), 12)).c.f;
          if (l.g == (CX(), zX) && Wv(rJ(l, (Rib(), qib)), 7).f != a.c) {
            a.e = 2;
            return true;
          }
        }
        if (Ul(new Im(Dl(ul(b.a, new yl())))) == 1) {
          m = (_b(b), Wv(Ql(new Im(Dl(ul(b.a, new yl())))), 12)).d.f;
          if (m.g == (CX(), zX) && Wv(rJ(m, (Rib(), rib)), 7).f != a.c) {
            a.e = 3;
            return true;
          }
        }
        return false;
      }
      function K$(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r;
        d = new GU();
        e = $xb;
        f = $xb;
        g = $xb;
        if (c) {
          e = a.e.a;
          for (p = new Tob(b.f); p.a < p.c.c.length; ) {
            o2 = Wv(Rob(p), 7);
            for (i = new Tob(o2.e); i.a < i.c.c.length; ) {
              h = Wv(Rob(i), 12);
              if (h.a.b != 0) {
                k = Wv(UI(h.a), 10);
                if (k.a < e) {
                  f = e - k.a;
                  g = $xb;
                  d.c = xv(UF, syb, 1, 0, 4, 1);
                  e = k.a;
                }
                if (k.a <= e) {
                  d.c[d.c.length] = h;
                  h.a.b > 1 && (g = Qlb(g, Jlb(Wv(tn(h.a, 1), 10).b - k.b)));
                }
              }
            }
          }
        } else {
          for (p = new Tob(b.f); p.a < p.c.c.length; ) {
            o2 = Wv(Rob(p), 7);
            for (i = new Tob(o2.b); i.a < i.c.c.length; ) {
              h = Wv(Rob(i), 12);
              if (h.a.b != 0) {
                m = Wv(VI(h.a), 10);
                if (m.a > e) {
                  f = m.a - e;
                  g = $xb;
                  d.c = xv(UF, syb, 1, 0, 4, 1);
                  e = m.a;
                }
                if (m.a >= e) {
                  d.c[d.c.length] = h;
                  h.a.b > 1 && (g = Qlb(g, Jlb(Wv(tn(h.a, h.a.b - 2), 10).b - m.b)));
                }
              }
            }
          }
        }
        if (d.c.length != 0 && f > b.j.a / 2 && g > b.j.b / 2) {
          n = new RX();
          PX(n, b);
          QX(n, (sN(), $M));
          n.i.a = b.j.a / 2;
          r = new RX();
          PX(r, b);
          QX(r, pN);
          r.i.a = b.j.a / 2;
          r.i.b = b.j.b;
          for (i = new Tob(d); i.a < i.c.c.length; ) {
            h = Wv(Rob(i), 12);
            if (c) {
              j = Wv(YI(h.a), 10);
              q = h.a.b == 0 ? MX(h.d) : Wv(UI(h.a), 10);
              q.b >= j.b ? dW(h, r) : dW(h, n);
            } else {
              j = Wv(ZI(h.a), 10);
              q = h.a.b == 0 ? MX(h.c) : Wv(VI(h.a), 10);
              q.b >= j.b ? eW(h, r) : eW(h, n);
            }
            l = Wv(rJ(h, (eM(), CL)), 44);
            !!l && Ve(l, j, true);
          }
          b.i.a = e - b.j.a / 2;
        }
      }
      function N2(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t;
        r = new GU();
        s = new GU();
        t = new GU();
        for (f = new Tob(b); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 75);
          e.k > 50 ? (r.c[r.c.length] = e, true) : e.k > 0 ? (s.c[s.c.length] = e, true) : (t.c[t.c.length] = e, true);
        }
        if (s.c.length == 1 && r.c.length == 0) {
          xU(r, s);
          s.c = xv(UF, syb, 1, 0, 4, 1);
        }
        r.c.length != 0 && Zsb(U2(a.a), (Ieb(), meb)) && Zsb(U2(a.a), (Ieb(), oeb)) ? L2(a, r) : xU(s, r);
        s.c.length == 0 || M2(a, s);
        if (t.c.length != 0) {
          c = V2(a.a);
          if (c.c != 0) {
            k = new Tob(t);
            i = (_b(c), Nl(new vl(c).a));
            while (k.a < k.c.c.length) {
              e = Wv(Rob(k), 75);
              while (k.a < k.c.c.length && e.a.a.Y() < 2) {
                e = Wv(Rob(k), 75);
              }
              if (e.a.a.Y() > 1) {
                p = Wv(nm(i), 60);
                aeb(e, p, true);
                Sob(k);
                Y2(a.a, p);
              }
            }
          }
          m = t.c.length;
          d = O2(a);
          n = new GU();
          g = m / T2(a.a).c | 0;
          for (h = 0; h < g; h++) {
            xU(n, T2(a.a));
          }
          o2 = m % T2(a.a).c;
          if (o2 > 3) {
            xU(n, (Ieb(), Ieb(), geb));
            o2 -= 4;
          }
          switch (o2) {
            case 3:
              vU(n, Meb(d));
            case 2:
              q = Leb(Meb(d));
              do {
                q = Leb(q);
              } while (!Zsb(U2(a.a), q));
              n.c[n.c.length] = q;
              q = Neb(Meb(d));
              do {
                q = Neb(q);
              } while (!Zsb(U2(a.a), q));
              n.c[n.c.length] = q;
              break;
            case 1:
              vU(n, Meb(d));
          }
          l = new Tob(n);
          j = new Tob(t);
          while (l.a < l.c.c.length && j.a < j.c.c.length) {
            aeb(Wv(Rob(j), 75), Wv(Rob(l), 60), true);
          }
        }
      }
      function G9(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w;
        k = b.c.c.length;
        a.a = xv(qB, Txb, 51, k, 0, 2);
        a.b = xv(qB, Txb, 51, k, 0, 2);
        a.k = xv(qB, Txb, 51, k, 0, 2);
        i = xv(mw, Yyb, 26, k, 12, 1);
        g = xv(KH, xAb, 26, k, 13, 1);
        a.c = xv(KH, xAb, 26, k, 13, 1);
        a.d = xv(KH, xAb, 26, k, 13, 1);
        r = 0;
        v = 0;
        m = new Fnb(b.c, 0);
        while (m.b < m.d.Y()) {
          j = (Bxb(m.b < m.d.Y()), Wv(m.d.sb(m.c = m.b++), 16));
          l = m.b - 1;
          n = j.a.c.length;
          a.a[l] = xv(qB, Nzb, 9, n, 0, 1);
          a.k[l] = xv(qB, Nzb, 9, n, 0, 1);
          a.b[l] = xv(qB, Nzb, 9, n, 0, 1);
          i[l] = 0;
          g[l] = false;
          s = new Fnb(j.a, 0);
          while (s.b < s.d.Y()) {
            q = (Bxb(s.b < s.d.Y()), Wv(s.d.sb(s.c = s.b++), 9));
            a.b[l][s.b - 1] = q;
            q.k = r++;
            o2 = Wv(rJ(q, (Rib(), nib)), 9);
            !!o2 && (Nm(a.g, o2, q, null), true);
            for (u = new Tob(q.f); u.a < u.c.c.length; ) {
              t = Wv(Rob(u), 7);
              t.k = v++;
              for (f = new Tob(t.e); f.a < f.c.c.length; ) {
                e = Wv(Rob(f), 12);
                e.d.f.d == j && ++i[l];
              }
              t.g == (sN(), ZM) ? t.e.c.length + t.b.c.length > 1 && (a.c[l] = true) : t.g == rN && t.e.c.length + t.b.c.length > 1 && (a.d[l] = true);
            }
            if (q.g == (CX(), BX)) {
              ++i[l];
              g[l] = true;
            }
          }
        }
        c = true;
        p = true;
        for (h = 0; h < a.d.length - 1; h++) {
          d = a.c[h] || a.d[h + 1];
          c = c & d;
          p = p & !d;
        }
        a.j = xv(lw, tAb, 26, v, 12, 1);
        w = xv(mw, Yyb, 26, v, 12, 1);
        if (!c) {
          a.i = new iab(i, g, w);
          a.f = a.i;
        }
        if (!p) {
          a.e = new mab(i, g, w);
          a.f = a.e;
        }
      }
      function iU(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B;
        a.d = new HI(Uzb, Uzb);
        a.c = new HI(Vzb, Vzb);
        for (m = b.mb(); m.G(); ) {
          k = Wv(m.H(), 55);
          for (t = new Tob(k.b); t.a < t.c.c.length; ) {
            s = Wv(Rob(t), 9);
            a.d.a = Qlb(a.d.a, s.i.a - s.e.b);
            a.d.b = Qlb(a.d.b, s.i.b - s.e.d);
            a.c.a = Nlb(a.c.a, s.i.a + s.j.a + s.e.c);
            a.c.b = Nlb(a.c.b, s.i.b + s.j.b + s.e.a);
          }
        }
        h = new cV();
        for (l = b.mb(); l.G(); ) {
          k = Wv(l.H(), 55);
          d = rU(a, k);
          vU(h.a, d);
          d.a = d.a | !Wv(rJ(d.c, (Rib(), fib)), 18).V();
        }
        a.b = (xR(), B = new HR(), B.f = new kR(c), B.b = jR(B.f, h), B);
        BR((o2 = a.b, new sI(), o2));
        a.e = new FI();
        a.a = a.b.f.e;
        for (g = new Tob(h.a); g.a < g.c.c.length; ) {
          e = Wv(Rob(g), 347);
          u = CR(a.b, e);
          TW(e.c, u.a, u.b);
          for (q = new Tob(e.c.b); q.a < q.c.c.length; ) {
            p = Wv(Rob(q), 9);
            if (p.g == (CX(), xX)) {
              r = mU(a, p.i, Wv(rJ(p, (Rib(), hib)), 32));
              vI(BI(p.i), r);
            }
          }
        }
        for (f = new Tob(h.a); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 347);
          for (j = new Tob(aV(e)); j.a < j.c.c.length; ) {
            i = Wv(Rob(j), 12);
            A = new kJ(i.a);
            rn(A, 0, MX(i.c));
            QI(A, MX(i.d));
            n = null;
            for (w = WI(A, 0); w.b != w.d.c; ) {
              v = Wv(_ub(w), 10);
              if (!n) {
                n = v;
                continue;
              }
              if (Xs(n.a, v.a)) {
                a.e.a = Qlb(a.e.a, n.a);
                a.a.a = Nlb(a.a.a, n.a);
              } else if (Xs(n.b, v.b)) {
                a.e.b = Qlb(a.e.b, n.b);
                a.a.b = Nlb(a.a.b, n.b);
              }
              n = v;
            }
          }
        }
        zI(a.e);
        vI(a.a, a.e);
      }
      function U1(a, b, c, d, e) {
        var f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C, D, F;
        p = new HU(b.b);
        u = new HU(b.b);
        m = new HU(b.b);
        B = new HU(b.b);
        q = new HU(b.b);
        for (A = WI(b, 0); A.b != A.d.c; ) {
          v = Wv(_ub(A), 7);
          for (h = new Tob(v.e); h.a < h.c.c.length; ) {
            f = Wv(Rob(h), 12);
            if (f.c.f == f.d.f) {
              if (v.g == f.d.g) {
                B.c[B.c.length] = f;
                continue;
              } else if (v.g == (sN(), $M) && f.d.g == pN) {
                q.c[q.c.length] = f;
                continue;
              }
            }
          }
        }
        for (i = new Tob(q); i.a < i.c.c.length; ) {
          f = Wv(Rob(i), 12);
          V1(a, f, c, d, (sN(), ZM));
        }
        for (g = new Tob(B); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 12);
          C = new uX(a);
          sX(C, (CX(), BX));
          sJ(C, (eM(), TL), (KM(), FM));
          sJ(C, (Rib(), uib), f);
          D = new RX();
          sJ(D, uib, f.d);
          QX(D, (sN(), rN));
          PX(D, C);
          F = new RX();
          sJ(F, uib, f.c);
          QX(F, ZM);
          PX(F, C);
          sJ(f.c, Bib, C);
          sJ(f.d, Bib, C);
          dW(f, null);
          eW(f, null);
          c.c[c.c.length] = C;
          sJ(C, aib, Elb(2));
        }
        for (w = WI(b, 0); w.b != w.d.c; ) {
          v = Wv(_ub(w), 7);
          j = v.b.c.length > 0;
          r = v.e.c.length > 0;
          j && r ? (m.c[m.c.length] = v, true) : j ? (p.c[p.c.length] = v, true) : r && (u.c[u.c.length] = v, true);
        }
        for (o2 = new Tob(p); o2.a < o2.c.c.length; ) {
          n = Wv(Rob(o2), 7);
          vU(e, T1(a, n, null, c));
        }
        for (t = new Tob(u); t.a < t.c.c.length; ) {
          s = Wv(Rob(t), 7);
          vU(e, T1(a, null, s, c));
        }
        for (l = new Tob(m); l.a < l.c.c.length; ) {
          k = Wv(Rob(l), 7);
          vU(e, T1(a, k, k, c));
        }
      }
      function ZP(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A;
        u = new II(b.d);
        i = new GU();
        for (t = new Tob(b.b); t.a < t.c.c.length; ) {
          r = Wv(Rob(t), 9);
          n = Wv(Smb(a.j, r), 69);
          if (n) {
            $P(a, r, n, u);
            for (w = new Tob(r.f); w.a < w.c.c.length; ) {
              v = Wv(Rob(w), 7);
              o2 = Wv(Smb(a.n, v), 69);
              if (o2) {
                $P(a, v, o2, QP);
                WP(o2, (eM(), WL), new lv(yc(v.g)));
              }
              if (gw(rJ(r, (eM(), VL))) !== gw((UM(), RM))) {
                for (q = new Tob(v.c); q.a < q.c.c.length; ) {
                  p = Wv(Rob(q), 33);
                  m = Wv(Smb(a.f, p), 69);
                  $P(a, p, m, QP);
                }
              }
            }
            if (Wv(rJ(r, (eM(), JL)), 86).Y() != 0) {
              for (q = new Tob(r.c); q.a < q.c.c.length; ) {
                p = Wv(Rob(q), 33);
                m = Wv(Smb(a.f, p), 69);
                $P(a, p, m, QP);
              }
            }
            for (h = Uh(mX(r)); Cm(h); ) {
              f = Wv(Dm(h), 12);
              SW(f.d.f, r) || (i.c[i.c.length] = f, true);
            }
          }
        }
        A = Wv(rJ(b, (Rib(), zib)), 9);
        if (A) {
          for (h = Uh(mX(A)); Cm(h); ) {
            f = Wv(Dm(h), 12);
            SW(f.d.f, A) && (i.c[i.c.length] = f, true);
          }
        }
        for (g = new Tob(i); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 12);
          l = Wv(Smb(a.b, f), 69);
          YP(a, f, l, u);
          for (q = new Tob(f.b); q.a < q.c.c.length; ) {
            p = Wv(Rob(q), 33);
            m = Wv(Smb(a.f, p), 69);
            $P(a, p, m, u);
          }
        }
        c = (d = Wv(rJ(b, Xhb), 15).a, new HI(b.e.a + b.a.b + b.a.c + 2 * d, b.e.b + b.a.d + b.a.a + 2 * d));
        k = Wv(rJ(b, zib), 9);
        if (k) {
          k.j.a = c.a;
          k.j.b = c.b;
        }
        j = Wv(rJ(b, PP), 69);
        VP(a, j, Jzb, c.a);
        VP(a, j, Kzb, c.b);
        for (s = new Tob(b.b); s.a < s.c.c.length; ) {
          r = Wv(Rob(s), 9);
          e = Wv(rJ(r, sib), 55);
          !!e && ZP(a, e);
        }
      }
      function Xfb(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C, D, F, G, H;
        F = new aJ();
        B = new aJ();
        r = -1;
        for (i = new Tob(a); i.a < i.c.c.length; ) {
          g = Wv(Rob(i), 77);
          g.i = r--;
          l = 0;
          v = 0;
          for (f = new Tob(g.j); f.a < f.c.c.length; ) {
            d = Wv(Rob(f), 117);
            v += d.c;
          }
          for (e = new Tob(g.d); e.a < e.c.c.length; ) {
            d = Wv(Rob(e), 117);
            l += d.c;
          }
          g.e = l;
          g.k = v;
          v == 0 ? (TI(B, g, B.c.b, B.c), true) : l == 0 && (TI(F, g, F.c.b, F.c), true);
        }
        H = new Yub((Oh(), a));
        m = a.c.length;
        q = m + 1;
        s = m - 1;
        o2 = new GU();
        while (H.a.Y() != 0) {
          while (B.b != 0) {
            A = (Bxb(B.b != 0), Wv($I(B, B.a.a), 77));
            H.a.eb(A) != null;
            A.i = s--;
            agb(A, F, B);
          }
          while (F.b != 0) {
            C = (Bxb(F.b != 0), Wv($I(F, F.a.a), 77));
            H.a.eb(C) != null;
            C.i = q++;
            agb(C, F, B);
          }
          p = eyb;
          for (j = (t = new Snb(H.a).a.bb().mb(), new Ynb(t)); j.a.G(); ) {
            g = (k = Wv(j.a.H(), 21), Wv(k.yb(), 77));
            u = g.k - g.e;
            if (u >= p) {
              if (u > p) {
                o2.c = xv(UF, syb, 1, 0, 4, 1);
                p = u;
              }
              o2.c[o2.c.length] = g;
            }
          }
          if (o2.c.length != 0) {
            n = Wv(yU(o2, vvb(b, o2.c.length)), 77);
            H.a.eb(n) != null;
            n.i = q++;
            agb(n, F, B);
            o2.c = xv(UF, syb, 1, 0, 4, 1);
          }
        }
        w = a.c.length + 1;
        for (h = new Tob(a); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 77);
          g.i < m && (g.i += w);
        }
        for (D = new Tob(a); D.a < D.c.c.length; ) {
          C = Wv(Rob(D), 77);
          c = new Fnb(C.j, 0);
          while (c.b < c.d.Y()) {
            d = (Bxb(c.b < c.d.Y()), Wv(c.d.sb(c.c = c.b++), 117));
            G = d.b;
            if (C.i > G.i) {
              vnb(c);
              BU(G.d, d);
              if (d.c > 0) {
                d.a = G;
                vU(G.j, d);
                d.b = C;
                vU(C.d, d);
              }
            }
          }
        }
      }
      function OO(a) {
        var b, c, d;
        for (d = new Lsb(new Fsb(a.c).a); htb(d.a); ) {
          c = (d.b = itb(d.a), new Psb(d.c, d.b));
          b = Wv(c.b.b[c.a.e], 62);
          switch (Wv(c.a, 67).e) {
            case 0:
              b.d = 0;
              b.e = -(b.b + a.d);
              break;
            case 1:
              b.d = (a.e.e.j.a - b.c) / 2;
              b.e = -(b.b + a.d);
              break;
            case 2:
              b.d = a.e.e.j.a - b.c;
              b.e = -(b.b + a.d);
              break;
            case 3:
              b.d = 0;
              b.e = a.e.e.j.b + a.d;
              break;
            case 4:
              b.d = (a.e.e.j.a - b.c) / 2;
              b.e = a.e.e.j.b + a.d;
              break;
            case 5:
              b.d = a.e.e.j.a - b.c;
              b.e = a.e.e.j.b + a.d;
              break;
            case 6:
              b.d = -(b.c + a.d);
              b.e = 0;
              break;
            case 7:
              b.d = -(b.c + a.d);
              b.e = (a.e.e.j.b - b.b) / 2;
              break;
            case 8:
              b.d = -(b.c + a.d);
              b.e = a.e.e.j.b - b.b;
              break;
            case 9:
              b.d = a.e.e.j.a + a.d;
              b.e = 0;
              break;
            case 10:
              b.d = a.e.e.j.a + a.d;
              b.e = (a.e.e.j.b - b.b) / 2;
              break;
            case 11:
              b.d = a.e.e.j.a + a.d;
              b.e = a.e.e.j.b - b.b;
              break;
            case 12:
              b.d = a.q.b + a.d;
              b.e = a.q.d + a.d;
              break;
            case 13:
              b.d = (a.e.e.j.a - b.c) / 2;
              b.e = a.q.d + a.d;
              break;
            case 14:
              b.d = a.e.e.j.a - a.q.c - b.c - a.d;
              b.e = a.q.d + a.d;
              break;
            case 15:
              b.d = a.q.b + a.d;
              b.e = (a.e.e.j.b - b.b) / 2;
              break;
            case 16:
              b.d = (a.e.e.j.a - b.c) / 2;
              b.e = (a.e.e.j.b - b.b) / 2;
              break;
            case 17:
              b.d = a.e.e.j.a - a.q.c - b.c - a.d;
              b.e = (a.e.e.j.b - b.b) / 2;
              break;
            case 18:
              b.d = a.q.b + a.d;
              b.e = a.e.e.j.b - a.q.a - b.b - a.d;
              break;
            case 19:
              b.d = (a.e.e.j.a - b.c) / 2;
              b.e = a.e.e.j.b - a.q.a - b.b - a.d;
              break;
            case 20:
              b.d = a.e.e.j.a - a.q.c - b.c - a.d;
              b.e = a.e.e.j.b - a.q.a - b.b - a.d;
          }
        }
      }
      function ddb(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C, D, F, G, H, I;
        F = new aJ();
        B = new aJ();
        o2 = -1;
        for (s = new Tob(a); s.a < s.c.c.length; ) {
          q = Wv(Rob(s), 80);
          q.d = o2--;
          i = 0;
          v = 0;
          for (f = new Tob(q.e); f.a < f.c.c.length; ) {
            d = Wv(Rob(f), 118);
            v += d.c;
          }
          for (e = new Tob(q.b); e.a < e.c.c.length; ) {
            d = Wv(Rob(e), 118);
            i += d.c;
          }
          q.c = i;
          q.f = v;
          v == 0 ? (TI(B, q, B.c.b, B.c), true) : i == 0 && (TI(F, q, F.c.b, F.c), true);
        }
        H = (I = new Vwb(), ml(I, a), I);
        j = a.c.length;
        p = j - 1;
        n = j + 1;
        l = new GU();
        while (H.a.c != 0) {
          while (B.b != 0) {
            A = (Bxb(B.b != 0), Wv($I(B, B.a.a), 80));
            cwb(H.a, A) != null;
            A.d = p--;
            jdb(A, F, B);
          }
          while (F.b != 0) {
            C = (Bxb(F.b != 0), Wv($I(F, F.a.a), 80));
            cwb(H.a, C) != null;
            C.d = n++;
            jdb(C, F, B);
          }
          m = eyb;
          for (t = (h = new rwb(new wwb(new Gob(H.a).a).b), new Mob(h)); Bnb(t.a.a); ) {
            q = (g = pwb(t.a), Wv(g.yb(), 80));
            u = q.f - q.c;
            if (u >= m) {
              if (u > m) {
                l.c = xv(UF, syb, 1, 0, 4, 1);
                m = u;
              }
              l.c[l.c.length] = q;
            }
          }
          if (l.c.length != 0) {
            k = Wv(yU(l, vvb(b, l.c.length)), 80);
            cwb(H.a, k) != null;
            k.d = n++;
            jdb(k, F, B);
            l.c = xv(UF, syb, 1, 0, 4, 1);
          }
        }
        w = a.c.length + 1;
        for (r = new Tob(a); r.a < r.c.c.length; ) {
          q = Wv(Rob(r), 80);
          q.d < j && (q.d += w);
        }
        for (D = new Tob(a); D.a < D.c.c.length; ) {
          C = Wv(Rob(D), 80);
          c = new Fnb(C.e, 0);
          while (c.b < c.d.Y()) {
            d = (Bxb(c.b < c.d.Y()), Wv(c.d.sb(c.c = c.b++), 118));
            G = d.b;
            if (C.d > G.d) {
              vnb(c);
              BU(G.b, d);
              if (d.c > 0) {
                d.a = G;
                vU(G.e, d);
                d.b = C;
                vU(C.b, d);
              }
            }
          }
        }
      }
      function e0(a) {
        switch (a.e) {
          case 14:
            return new wY();
          case 37:
            return new SY();
          case 8:
            return new YY();
          case 30:
            return new cZ();
          case 38:
            return new qZ();
          case 3:
            return new tZ();
          case 47:
          case 1:
            return new SZ((XZ(), WZ));
          case 4:
            return new wZ();
          case 49:
            return new AZ();
          case 23:
            return new $5();
          case 13:
            return new d$();
          case 34:
            return new j$();
          case 40:
            return new w$();
          case 35:
            return new F$();
          case 44:
            return new o4();
          case 28:
            return new I$();
          case 39:
            return new L$();
          case 27:
            return new N$();
          case 6:
            return new R$();
          case 31:
            return new m0();
          case 9:
            return new q0();
          case 43:
            return new w0();
          case 17:
            return new A0();
          case 18:
            return new G0();
          case 29:
            return new S0();
          case 11:
            return new q1();
          case 12:
            return new Z0();
          case 36:
            return new _0();
          case 46:
          case 0:
            return new SZ((XZ(), VZ));
          case 41:
            return new b1();
          case 15:
            return new e1();
          case 33:
            return new k1();
          case 42:
            return new R1();
          case 22:
            return new X1();
          case 19:
            return new k0();
          case 10:
            return new _1();
          case 7:
            return new c2();
          case 24:
            return new f2();
          case 21:
            return new h2();
          case 16:
            return new n2();
          case 45:
            return new q2();
          case 26:
            return new x2();
          case 20:
            return new A2();
          case 25:
            return new H2();
          case 5:
            return new l3();
          case 32:
            return new u3();
          case 48:
          case 2:
            return new SZ((XZ(), UZ));
          default:
            throw new slb("No implementation is available for the layout processor " + (a.d != null ? a.d : "" + a.e));
        }
      }
      function PO(a) {
        var b, c, d, e, f, g, h;
        c = a.e.e.j;
        a.b ? b = Wv(oW(a.e, (eM(), jL)), 65) : b = new EP(a.k, a.k, a.k, a.k);
        e = c.a;
        (a.b || a.g[1] != (zM(), xM)) && (e -= b.b + b.c);
        f = c.a;
        (a.b || a.g[3] != (zM(), xM)) && (f -= b.b + b.c);
        g = c.b;
        (a.b || a.g[4] != (zM(), xM)) && (g -= b.d + b.a);
        d = c.b;
        (a.b || a.g[2] != (zM(), xM)) && (d -= b.d + b.a);
        if (aP(a, (sN(), $M)) == (zM(), xM)) {
          a.j[1] = (e - dP(a, $M)) / bP(a, $M);
          a.f = a.b ? b.b + (eP(a, $M) == 1 ? a.j[1] : 0) : a.j[1];
        } else {
          a.j[1] = a.k;
          h = dP(a, $M) + a.j[1] * (eP(a, $M) - 1);
          switch (aP(a, $M).e) {
            case 2:
              a.f = b.b;
              break;
            case 3:
              a.f = b.b + (e - h) / 2;
              break;
            case 4:
              a.f = c.a - h - b.c;
          }
        }
        if (aP(a, pN) == xM) {
          a.j[3] = (f - dP(a, pN)) / bP(a, pN);
          a.r = c.a - (a.b ? b.c + (eP(a, pN) == 1 ? a.j[3] : 0) : a.j[3]);
        } else {
          a.j[3] = a.k;
          h = dP(a, pN) + a.j[3] * (eP(a, pN) - 1);
          switch (aP(a, pN).e) {
            case 2:
              a.r = h + b.b;
              break;
            case 3:
              a.r = c.a - (f - h) / 2 - b.c;
              break;
            case 4:
              a.r = c.a - b.c;
          }
        }
        if (aP(a, rN) == xM) {
          a.j[4] = (g - dP(a, rN)) / bP(a, rN);
          a.s = c.b - (a.b ? b.a + (eP(a, rN) == 1 ? a.j[4] : 0) : a.j[4]);
        } else {
          a.j[4] = a.k;
          h = dP(a, rN) + a.j[4] * (eP(a, rN) - 1);
          switch (aP(a, rN).e) {
            case 2:
              a.s = h + b.d;
              break;
            case 3:
              a.s = c.b - (g - h) / 2 - b.a;
              break;
            case 4:
              a.s = c.b - b.a;
          }
        }
        if (aP(a, ZM) == xM) {
          a.j[2] = (d - dP(a, ZM)) / bP(a, ZM);
          a.a = a.b ? b.d + (eP(a, ZM) == 1 ? a.j[2] : 0) : a.j[2];
        } else {
          a.j[2] = a.k;
          h = dP(a, ZM) + a.j[2] * (eP(a, ZM) - 1);
          switch (aP(a, ZM).e) {
            case 2:
              a.a = b.d;
              break;
            case 3:
              a.a = b.d + (d - h) / 2;
              break;
            case 4:
              a.a = c.b - h - b.a;
          }
        }
      }
      function hab(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C, D, F, G, H, I;
        G = 0;
        g = 0;
        l = b[0].d;
        B = c[0].d;
        for (o2 = 0, q = c.length; o2 < q; ++o2) {
          m = c[o2];
          if (LM(Wv(rJ(m, (eM(), TL)), 28))) {
            s = 0;
            for (v = new Tob(m.f); v.a < v.c.c.length; ) {
              u = Wv(Rob(v), 7);
              if (u.g == (sN(), $M)) {
                for (f = new Tob(u.b); f.a < f.c.c.length; ) {
                  e = Wv(Rob(f), 12);
                  if (e.c.f.d == l) {
                    ++s;
                    break;
                  }
                }
              } else {
                break;
              }
            }
            t = 0;
            A = new Fnb(m.f, m.f.c.length);
            while (A.b > 0) {
              u = (Bxb(A.b > 0), Wv(A.a.sb(A.c = --A.b), 7));
              w = 0;
              for (f = new Tob(u.b); f.a < f.c.c.length; ) {
                e = Wv(Rob(f), 12);
                e.c.f.d == l && ++w;
              }
              if (w > 0) {
                if (u.g == (sN(), $M)) {
                  a.a[u.k] = G;
                  ++G;
                } else {
                  a.a[u.k] = G + s + t;
                  ++t;
                }
                g += w;
              }
            }
            G += t;
          } else {
            r = 0;
            for (v = new Tob(m.f); v.a < v.c.c.length; ) {
              u = Wv(Rob(v), 7);
              for (f = new Tob(u.b); f.a < f.c.c.length; ) {
                e = Wv(Rob(f), 12);
                e.c.f.d == l && ++r;
              }
              a.a[u.k] = G;
            }
            if (r > 0) {
              ++G;
              g += r;
            }
          }
        }
        C = xv(mw, Yyb, 26, g, 12, 1);
        i = 0;
        for (n = 0, p = b.length; n < p; ++n) {
          m = b[n];
          if (LM(Wv(rJ(m, (eM(), TL)), 28))) {
            for (v = new Tob(m.f); v.a < v.c.c.length; ) {
              u = Wv(Rob(v), 7);
              D = i;
              for (f = new Tob(u.e); f.a < f.c.c.length; ) {
                e = Wv(Rob(f), 12);
                F = e.d;
                F.f.d == B && kab(C, D, i++, a.a[F.k]);
              }
            }
          } else {
            D = i;
            for (v = new Tob(m.f); v.a < v.c.c.length; ) {
              u = Wv(Rob(v), 7);
              for (f = new Tob(u.e); f.a < f.c.c.length; ) {
                e = Wv(Rob(f), 12);
                F = e.d;
                F.f.d == B && kab(C, D, i++, a.a[F.k]);
              }
            }
          }
        }
        h = 1;
        while (h < G) {
          h *= 2;
        }
        I = 2 * h - 1;
        h -= 1;
        H = xv(mw, Yyb, 26, I, 12, 1);
        d = 0;
        for (k = 0; k < g; k++) {
          j = C[k] + h;
          ++H[j];
          while (j > 0) {
            j % 2 > 0 && (d += H[j + 1]);
            j = (j - 1) / 2 | 0;
            ++H[j];
          }
        }
        return d;
      }
      function BV(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C, D, F, G, H, I, J;
        nI(b, "Compound graph postprocessor", 1);
        c = Ckb(Ixb(Xv(rJ(a, (Mjb(), gjb)))));
        h = Wv(rJ(a, (Rib(), bib)), 144);
        l = new vtb();
        for (w = h.W().mb(); w.G(); ) {
          v = Wv(w.H(), 12);
          g = new IU(h.U(v));
          Gpb(g, new $V(a));
          F = VV((Cxb(0, g.c.length), Wv(g.c[0], 114)));
          H = WV(Wv(yU(g, g.c.length - 1), 114));
          _I(v.a);
          C = F.f;
          SW(H.f, C) ? B = Wv(rJ(C, sib), 55) : B = hX(C);
          o2 = Wv(rJ(v, (eM(), CL)), 44);
          if (ol(g, zV)) {
            if (!o2) {
              o2 = new jJ();
              sJ(v, CL, o2);
            } else {
              _I(o2);
            }
          } else
            !!o2 && sJ(v, CL, null);
          q = null;
          for (f = new Tob(g); f.a < f.c.c.length; ) {
            e = Wv(Rob(f), 114);
            u = new FI();
            MW(u, e.a, B);
            r = e.b;
            d = new jJ();
            gJ(d, 0, r.a);
            hJ(d, u);
            D = new II(MX(r.c));
            G = new II(MX(r.d));
            D.a += u.a;
            D.b += u.b;
            G.a += u.a;
            G.b += u.b;
            if (q) {
              d.b == 0 ? t = G : t = (Bxb(d.b != 0), Wv(d.a.a.c, 10));
              I = Jlb(q.a - t.a) > dAb;
              J = Jlb(q.b - t.b) > dAb;
              (!c && I && J || c && (I || J)) && QI(v.a, D);
            }
            Ue(v.a, d);
            d.b == 0 ? q = D : q = (Bxb(d.b != 0), Wv(d.c.b.c, 10));
            s = Wv(rJ(r, CL), 44);
            if (s) {
              n = new jJ();
              gJ(n, 0, s);
              hJ(n, u);
              Ue(o2, n);
            }
            if (WV(e) == H) {
              if (hX(H.f) != e.a) {
                u = new FI();
                MW(u, hX(H.f), B);
              }
              sJ(v, Pib, u);
            }
            p = new Fnb(r.b, 0);
            while (p.b < p.d.Y()) {
              i = (Bxb(p.b < p.d.Y()), Wv(p.d.sb(p.c = p.b++), 33));
              if (gw(rJ(i, xib)) !== gw(v)) {
                continue;
              }
              MW(i.i, hX(r.c.f), B);
              vnb(p);
              vU(v.b, i);
            }
            l.a.db(r, l);
          }
          dW(v, F);
          eW(v, H);
        }
        for (k = (A = new Snb(l.a).a.bb().mb(), new Ynb(A)); k.a.G(); ) {
          j = (m = Wv(k.a.H(), 21), Wv(m.yb(), 12));
          dW(j, null);
          eW(j, null);
        }
        pI(b);
      }
      function c$(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C, D, F, G, H, I;
        C = Wv(rJ(a, (eM(), TL)), 28);
        if (!(C != (KM(), IM) && C != JM)) {
          return;
        }
        p = a.c;
        o2 = p.c.length;
        l = new HU((Mh(o2 + 2, Uyb), $s(PH(PH(5, o2 + 2), (o2 + 2) / 10 | 0))));
        q = new HU((Mh(o2 + 2, Uyb), $s(PH(PH(5, o2 + 2), (o2 + 2) / 10 | 0))));
        vU(l, new ntb());
        vU(l, new ntb());
        vU(q, new GU());
        vU(q, new GU());
        A = new vtb();
        for (b = 0; b < o2; b++) {
          c = (Cxb(b, p.c.length), Wv(p.c[b], 16));
          D = (Cxb(b, l.c.length), Wv(l.c[b], 57));
          r = (mp(), new ntb());
          l.c[l.c.length] = r;
          G = (Cxb(b, q.c.length), Wv(q.c[b], 20));
          t = new GU();
          q.c[q.c.length] = t;
          for (e = new Tob(c.a); e.a < e.c.c.length; ) {
            d = Wv(Rob(e), 9);
            for (j = Uh(iX(d)); Cm(j); ) {
              h = Wv(Dm(j), 12);
              H = h.c.f;
              if (!_Z(H)) {
                continue;
              }
              A.a.db(H, A);
              F = Wv(D.cb(rJ(H, (Rib(), uib))), 9);
              if (!F) {
                F = $Z(a, H);
                D.db(rJ(H, uib), F);
                G.ib(F);
              }
              dW(h, Wv(yU(F.f, 1), 7));
            }
            for (i = Uh(mX(d)); Cm(i); ) {
              h = Wv(Dm(i), 12);
              I = h.d.f;
              if (!_Z(I)) {
                continue;
              }
              A.a.db(I, A);
              s = Wv(Smb(r, rJ(I, (Rib(), uib))), 9);
              if (!s) {
                s = $Z(a, I);
                Umb(r, rJ(I, uib), s);
                t.c[t.c.length] = s;
              }
              eW(h, Wv(yU(s.f, 0), 7));
            }
          }
        }
        for (m = 0; m < q.c.length; m++) {
          u = (Cxb(m, q.c.length), Wv(q.c[m], 20));
          if (u.V()) {
            continue;
          }
          if (m == 0) {
            n = new sY(a);
            Fxb(0, p.c.length);
            fxb(p.c, 0, n);
          } else if (m == l.c.length - 1) {
            n = new sY(a);
            p.c[p.c.length] = n;
          } else {
            n = (Cxb(m - 1, p.c.length), Wv(p.c[m - 1], 16));
          }
          for (g = u.mb(); g.G(); ) {
            f = Wv(g.H(), 9);
            rX(f, n);
          }
        }
        for (w = (B = new Snb(A.a).a.bb().mb(), new Ynb(B)); w.a.G(); ) {
          v = (k = Wv(w.a.H(), 21), Wv(k.yb(), 9));
          rX(v, null);
        }
      }
      function Pab(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C, D, F, G, H, I, J, K;
        I = new GU();
        for (o2 = new Tob(b.c); o2.a < o2.c.c.length; ) {
          m = Wv(Rob(o2), 16);
          for (v = new Tob(m.a); v.a < v.c.c.length; ) {
            u = Wv(Rob(v), 9);
            u.k = -1;
            l = eyb;
            B = eyb;
            for (D = new Tob(u.f); D.a < D.c.c.length; ) {
              C = Wv(Rob(D), 7);
              for (e = new Tob(C.b); e.a < e.c.c.length; ) {
                c = Wv(Rob(e), 12);
                F = Wv(rJ(c, (Rib(), Eib)), 24).a;
                l = l > F ? l : F;
              }
              for (d = new Tob(C.e); d.a < d.c.c.length; ) {
                c = Wv(Rob(d), 12);
                F = Wv(rJ(c, (Rib(), Eib)), 24).a;
                B = B > F ? B : F;
              }
            }
            sJ(u, Fab, Elb(l));
            sJ(u, Gab, Elb(B));
          }
        }
        r = 0;
        for (n = new Tob(b.c); n.a < n.c.c.length; ) {
          m = Wv(Rob(n), 16);
          for (v = new Tob(m.a); v.a < v.c.c.length; ) {
            u = Wv(Rob(v), 9);
            if (u.k < 0) {
              H = new Wab();
              H.b = r++;
              Mab(a, u, H);
              I.c[I.c.length] = H;
            }
          }
        }
        A = Do(I.c.length);
        k = Do(I.c.length);
        for (g = 0; g < I.c.length; g++) {
          vU(A, new GU());
          vU(k, Elb(0));
        }
        Kab(b, I, A, k);
        J = Wv(FU(I, xv(wE, NAb, 111, I.c.length, 0, 1)), 625);
        w = Wv(FU(A, xv(sH, {3: 1, 5: 1, 6: 1, 672: 1}, 20, A.c.length, 0, 1)), 672);
        j = xv(mw, Yyb, 26, k.c.length, 12, 1);
        for (h = 0; h < j.length; h++) {
          j[h] = (Cxb(h, k.c.length), Wv(k.c[h], 24)).a;
        }
        s = 0;
        t = new GU();
        for (i = 0; i < J.length; i++) {
          j[i] == 0 && vU(t, J[i]);
        }
        q = xv(mw, Yyb, 26, J.length, 12, 1);
        while (t.c.length != 0) {
          H = Wv(AU(t, 0), 111);
          q[H.b] = s++;
          while (!w[H.b].V()) {
            K = Wv(w[H.b].vb(0), 111);
            --j[K.b];
            j[K.b] == 0 && (t.c[t.c.length] = K, true);
          }
        }
        a.a = xv(wE, NAb, 111, J.length, 0, 1);
        for (f = 0; f < J.length; f++) {
          p = J[f];
          G = q[f];
          a.a[G] = p;
          p.b = G;
          for (v = new Tob(p.f); v.a < v.c.c.length; ) {
            u = Wv(Rob(v), 9);
            u.k = G;
          }
        }
        return a.a;
      }
      function JP(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C;
        nI(b, "Fixed Layout", 1);
        i = Wv(rJ(a, (eM(), uL)), 122);
        p = 0;
        q = 0;
        for (t = new Tob(a.b); t.a < t.c.c.length; ) {
          r = Wv(Rob(t), 9);
          B = Wv(rJ(r, YL), 10);
          if (B) {
            r.i.a = B.a;
            r.i.b = B.b;
            if (Wv(rJ(r, aM), 86).kb((DN(), zN))) {
              C = Wv(rJ(r, IL), 15).a;
              j = Wv(rJ(r, HL), 15).a;
              C > 0 && j > 0 && WW(r, new HI(C, j), true);
            }
          }
          p = Nlb(p, r.i.a + r.j.a);
          q = Nlb(q, r.i.b + r.j.b);
          for (n = new Tob(r.c); n.a < n.c.c.length; ) {
            l = Wv(Rob(n), 33);
            B = Wv(rJ(l, YL), 10);
            if (B) {
              l.i.a = B.a;
              l.i.b = B.b;
            }
            p = Nlb(p, r.i.a + l.i.a + l.j.a);
            q = Nlb(q, r.i.b + l.i.b + l.j.b);
          }
          for (v = new Tob(r.f); v.a < v.c.c.length; ) {
            u = Wv(Rob(v), 7);
            B = Wv(rJ(u, YL), 10);
            if (B) {
              u.i.a = B.a;
              u.i.b = B.b;
            }
            w = r.i.a + u.i.a;
            A = r.i.b + u.i.b;
            p = Nlb(p, w + u.j.a);
            q = Nlb(q, A + u.j.b);
            for (m = new Tob(u.c); m.a < m.c.c.length; ) {
              l = Wv(Rob(m), 33);
              B = Wv(rJ(l, YL), 10);
              if (B) {
                l.i.a = B.a;
                l.i.b = B.b;
              }
              p = Nlb(p, w + l.i.a + l.j.a);
              q = Nlb(q, A + l.i.b + l.j.b);
            }
          }
          for (h = Uh(mX(r)); Cm(h); ) {
            f = Wv(Dm(h), 12);
            o2 = KP(f);
            p = Nlb(p, o2.a);
            q = Nlb(q, o2.b);
          }
          for (g = Uh(iX(r)); Cm(g); ) {
            f = Wv(Dm(g), 12);
            if (gw(rJ(f.c.f, (Rib(), sib))) !== gw(a)) {
              o2 = KP(f);
              p = Nlb(p, o2.a);
              q = Nlb(q, o2.b);
            }
          }
        }
        if (i == (NK(), JK)) {
          for (s = new Tob(a.b); s.a < s.c.c.length; ) {
            r = Wv(Rob(s), 9);
            for (g = Uh(mX(r)); Cm(g); ) {
              f = Wv(Dm(g), 12);
              k = LP(f);
              k.b == 0 ? sJ(f, CL, null) : sJ(f, CL, k);
            }
          }
        }
        a.e.a = p;
        a.e.b = q;
        sJ(a, aM, (DN(), d = Wv(Hkb(Lz), 11), new atb(d, Wv(exb(d, d.length), 11), 0)));
        e = Wv(rJ(a, (Rib(), zib)), 9);
        !!e && sJ(e, aM, (c = Wv(Hkb(Lz), 11), new atb(c, Wv(exb(c, c.length), 11), 0)));
        pI(b);
      }
      function Y8(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C, D, F, G;
        if (!LM(Wv(rJ(b, (eM(), TL)), 28))) {
          if (b.f.c.length > 1) {
            A = xv(LF, Txb, 15, a.a.length, 0, 1);
            j = Do(a.a.length);
            p = 0;
            o2 = 0;
            c = 2 * b.d.a.c.length + 1;
            H:
              for (w = new Tob(b.f); w.a < w.c.c.length; ) {
                v = Wv(Rob(w), 7);
                r = v.g == (sN(), $M) || v.g == pN;
                G = 0;
                if (r) {
                  B = Wv(rJ(v, (Rib(), Bib)), 9);
                  if (!B) {
                    continue;
                  }
                  m = false;
                  u = false;
                  for (D = new Tob(B.f); D.a < D.c.c.length; ) {
                    C = Wv(Rob(D), 7);
                    gw(rJ(C, uib)) === gw(v) && (C.e.c.length == 0 ? C.b.c.length == 0 || (m = true) : u = true);
                  }
                  m && !u ? G = v.g == $M ? -(!B.d ? -1 : zU(B.d.a, B, 0)) : c - (!B.d ? -1 : zU(B.d.a, B, 0)) : u && !m ? G = (!B.d ? -1 : zU(B.d.a, B, 0)) + 1 : m && u && (G = v.g == $M ? 0 : c / 2);
                } else {
                  for (t = new Tob(v.e); t.a < t.c.c.length; ) {
                    s = Wv(Rob(t), 12);
                    e = s.d;
                    if (e.f.d == b.d) {
                      j.c[j.c.length] = v;
                      continue H;
                    } else {
                      G += a.a[e.k];
                    }
                  }
                  for (l = new Tob(v.b); l.a < l.c.c.length; ) {
                    k = Wv(Rob(l), 12);
                    e = k.c;
                    if (e.f.d == b.d) {
                      j.c[j.c.length] = v;
                      continue H;
                    } else {
                      G -= a.a[e.k];
                    }
                  }
                }
                if (v.b.c.length + v.e.c.length > 0) {
                  A[v.k] = new llb(G / (v.b.c.length + v.e.c.length));
                  p = Rlb(p, A[v.k].a);
                  o2 = Olb(o2, A[v.k].a);
                } else
                  r && (A[v.k] = new llb(G));
              }
            q = (!b.d ? -1 : zU(b.d.a, b, 0)) + 1;
            n = b.d.a.c.length + 1;
            for (i = new Tob(j); i.a < i.c.c.length; ) {
              h = Wv(Rob(i), 7);
              G = 0;
              g = 0;
              for (f = Uh(Sh((Gi(), new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [new fY(h), new lY(h)])))))); Cm(f); ) {
                e = Wv(Dm(f), 7);
                if (e.f.d == b.d) {
                  G += jX(e.f) + 1;
                  ++g;
                }
              }
              d = G / g;
              F = h.g;
              F == (sN(), ZM) ? d < q ? A[h.k] = new llb(p - d) : A[h.k] = new llb(o2 + (n - d)) : F == rN && (d < q ? A[h.k] = new llb(o2 + d) : A[h.k] = new llb(p - (n - d)));
            }
            Gpb(b.f, new a9(A));
          }
          sJ(b, TL, (KM(), EM));
        }
      }
      function O4(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C;
        B = new GU();
        a.a.b.c = xv(UF, syb, 1, 0, 4, 1);
        u = (mp(), new ntb());
        for (r = new Tob(a.d.c); r.a < r.c.c.length; ) {
          p = Wv(Rob(r), 16);
          for (t = new Tob(p.a); t.a < t.c.c.length; ) {
            s = Wv(Rob(t), 9);
            if (Ckb(Ixb(Xv(rJ(s, (eM(), qL)))))) {
              if (!sl(gX(s))) {
                h = Wv(ql(gX(s)), 12);
                v = h.c.f;
                v == s && (v = h.d.f);
                w = new RJ(v, EI(xI(s.i), v.i));
                Umb(a.b, s, w);
                continue;
              }
            }
            f = new Q3(s, a.d);
            vU(a.a.b, f);
            Ltb(u.d, s, f);
          }
        }
        for (q = new Tob(a.d.c); q.a < q.c.c.length; ) {
          p = Wv(Rob(q), 16);
          for (t = new Tob(p.a); t.a < t.c.c.length; ) {
            s = Wv(Rob(t), 9);
            f = Wv(re(Ktb(u.d, s)), 25);
            for (k = Uh(mX(s)); Cm(k); ) {
              i = Wv(Dm(k), 12);
              d = WI(i.a, 0);
              l = true;
              o2 = null;
              if (d.b != d.d.c) {
                b = Wv(_ub(d), 10);
                if (i.c.g == (sN(), $M)) {
                  C = new X4(b, new HI(b.a, f.j.e), f, i);
                  C.c = true;
                  B.c[B.c.length] = C;
                }
                if (i.c.g == pN) {
                  C = new X4(b, new HI(b.a, f.j.e + f.j.b), f, i);
                  C.d = true;
                  B.c[B.c.length] = C;
                }
                while (d.b != d.d.c) {
                  c = Wv(_ub(d), 10);
                  if (!RR(b.b, c.b)) {
                    o2 = new X4(b, c, null, i);
                    B.c[B.c.length] = o2;
                    if (l) {
                      l = false;
                      if (c.b < f.j.e) {
                        o2.c = true;
                      } else if (c.b > f.j.e + f.j.b) {
                        o2.d = true;
                      } else {
                        o2.d = true;
                        o2.c = true;
                      }
                    }
                  }
                  d.b != d.d.c && (b = c);
                }
                if (o2) {
                  g = Wv(Smb(u, i.d.f), 25);
                  if (b.b < g.j.e) {
                    o2.c = true;
                  } else if (b.b > g.j.e + g.j.b) {
                    o2.d = true;
                  } else {
                    o2.d = true;
                    o2.c = true;
                  }
                }
              }
            }
            for (j = Uh(iX(s)); Cm(j); ) {
              i = Wv(Dm(j), 12);
              if (i.a.b != 0) {
                b = Wv(VI(i.a), 10);
                if (i.d.g == (sN(), $M)) {
                  C = new X4(b, new HI(b.a, f.j.e), f, i);
                  C.c = true;
                  B.c[B.c.length] = C;
                }
                if (i.d.g == pN) {
                  C = new X4(b, new HI(b.a, f.j.e + f.j.b), f, i);
                  C.d = true;
                  B.c[B.c.length] = C;
                }
              }
            }
          }
        }
        if (B.c.length != 0) {
          ypb();
          Gpb(B, null);
          n = (Cxb(0, B.c.length), Wv(B.c[0], 142));
          e = new L3(n, a.d);
          for (m = 1; m < B.c.length; m++) {
            A = (Cxb(m, B.c.length), Wv(B.c[m], 142));
            if (RR(e.j.d, A.j) && !(TR(e.j.e + e.j.b, A.k) || TR(A.n, e.j.e))) {
              K3(e, A);
            } else {
              vU(a.a.b, e);
              e = new L3(A, a.d);
            }
          }
          vU(a.a.b, e);
        }
        B.c = xv(UF, syb, 1, 0, 4, 1);
        N4(a);
      }
      function eZ(a, b, c, d, e, f) {
        var g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C, D, F, G, H, I, J, K, L, M;
        h = Wv(yU(a.d.c.c, d), 16);
        K = new vtb();
        o2 = new vtb();
        for (n = 0; n < h.a.c.length; ++n) {
          s = Wv(yU(h.a, n), 9);
          n < c ? (D = K.a.db(s, K), D == null) : n > c && (C = o2.a.db(s, o2), C == null);
        }
        L = new vtb();
        p = new vtb();
        for (u = (G = new Snb(K.a).a.bb().mb(), new Ynb(G)); u.a.G(); ) {
          s = (l = Wv(u.a.H(), 21), Wv(l.yb(), 9));
          g = b == 1 ? mX(s) : iX(s);
          for (j = (Il(), new Im(Dl(ul(g.a, new yl())))); Cm(j); ) {
            i = Wv(Dm(j), 12);
            rY(s.d) != rY(i.d.f.d) && stb(L, i.d.f);
          }
        }
        for (v = (H = new Snb(o2.a).a.bb().mb(), new Ynb(H)); v.a.G(); ) {
          s = (l = Wv(v.a.H(), 21), Wv(l.yb(), 9));
          g = b == 1 ? mX(s) : iX(s);
          for (j = (Il(), new Im(Dl(ul(g.a, new yl())))); Cm(j); ) {
            i = Wv(Dm(j), 12);
            rY(s.d) != rY(i.d.f.d) && stb(p, i.d.f);
          }
        }
        if (aZ) {
          Fmb();
        }
        B = Wv(yU(a.d.c.c, d + (b == 1 ? 1 : -1)), 16);
        q = eyb;
        r = $xb;
        for (m = 0; m < B.a.c.length; m++) {
          s = Wv(yU(B.a, m), 9);
          L.a.R(s) ? q = q > m ? q : m : p.a.R(s) && (r = r < m ? r : m);
        }
        if (q < r) {
          for (w = (I = new Snb(L.a).a.bb().mb(), new Ynb(I)); w.a.G(); ) {
            s = (l = Wv(w.a.H(), 21), Wv(l.yb(), 9));
            for (k = Uh(mX(s)); Cm(k); ) {
              i = Wv(Dm(k), 12);
              if (rY(s.d) == rY(i.d.f.d)) {
                return null;
              }
            }
            for (j = Uh(iX(s)); Cm(j); ) {
              i = Wv(Dm(j), 12);
              if (rY(s.d) == rY(i.c.f.d)) {
                return null;
              }
            }
          }
          for (A = (F = new Snb(p.a).a.bb().mb(), new Ynb(F)); A.a.G(); ) {
            s = (l = Wv(A.a.H(), 21), Wv(l.yb(), 9));
            for (k = Uh(mX(s)); Cm(k); ) {
              i = Wv(Dm(k), 12);
              if (rY(s.d) == rY(i.d.f.d)) {
                return null;
              }
            }
            for (j = Uh(iX(s)); Cm(j); ) {
              i = Wv(Dm(j), 12);
              if (rY(s.d) == rY(i.c.f.d)) {
                return null;
              }
            }
          }
          K.a.Y() == 0 ? M = 0 : o2.a.Y() == 0 ? M = B.a.c.length : M = q + 1;
          for (t = new Tob(h.a); t.a < t.c.c.length; ) {
            s = Wv(Rob(t), 9);
            if (s.g == (CX(), BX)) {
              return null;
            }
          }
          if (f == 1) {
            return Co(Bv(tv(PF, 1), Txb, 24, 0, [Elb(M)]));
          } else if (b == 1 && d == e - 2 || b == 0 && d == 1) {
            return Co(Bv(tv(PF, 1), Txb, 24, 0, [Elb(M)]));
          } else {
            J = eZ(a, b, M, d + (b == 1 ? 1 : -1), e, f - 1);
            !!J && b == 1 && J.rb(0, Elb(M));
            return J;
          }
        }
        return null;
      }
      function aQ(b, c) {
        var d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u;
        SP(c);
        o2 = (eM(), KL).b;
        if (o2 in c.a && Pu(c, o2).ic().a) {
          return;
        }
        j = Pu(c, "source");
        k = Pu(c, "sourcePort");
        l = Pu(c, "target");
        m = Pu(c, "targetPort");
        if (!j) {
          throw new GQ("Edges must contain a 'source' property.", null, c);
        } else if (!j.lc()) {
          throw new GQ("Invalid format of an edge's 'source' property. It must be a string.", j, c);
        }
        if (!l) {
          throw new GQ("Edges must contain a 'target' property.", null, c);
        } else if (!l.lc()) {
          throw new GQ("Invalid format of an edge's 'target' property. It must be a string.", l, c);
        }
        r = null;
        t = null;
        try {
          q = Wv(Tmb(b.i, j.lc().a), 9);
          !!k && !!k.lc() && (r = Wv(Tmb(b.k, k.lc().a), 7));
          s = Wv(Tmb(b.i, l.lc().a), 9);
          !!m && !!m.lc() && (t = Wv(Tmb(b.k, m.lc().a), 7));
        } catch (a) {
          a = OH(a);
          if (aw(a, 76)) {
            throw new FQ("An edge's 'source', 'target', 'sourcePort', and 'targetPort' properties have to be strings.", c);
          } else
            throw NH(a);
        }
        if (!Ckb(Ixb(b.g))) {
          if (!q || !s) {
            return;
          } else if (hX(q) != hX(s)) {
            return;
          }
        }
        if (!q || !s) {
          throw new FQ("An edge's source or target node could not be resolved.", c);
        }
        p = hX(q);
        e = new hW();
        sJ(e, (Rib(), uib), c);
        h = Wv(Pu(c, "id"), 97);
        Vmb(b.a, h.a, e);
        Umb(b.b, e, c);
        hQ(c, e);
        dQ(b, c, e, p);
        f = Wv(rJ(p, jib), 18);
        q == s && f.ib((ohb(), nhb));
        if (!r) {
          r = OW(q, new FI(), (djb(), bjb), p);
        } else if (r.f != q) {
          throw new EQ("Inconsistent source port reference found.");
        }
        if (!t) {
          t = OW(s, new FI(), (djb(), ajb), p);
        } else if (t.f != s) {
          throw new EQ("Inconsistent target port reference found.");
        }
        dW(e, r);
        eW(e, t);
        (tl(Sh((Gi(), new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [r.b, r.e])))))) > 1 || tl(Sh(new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [t.b, t.e]))))) > 1) && f.ib((ohb(), ihb));
        if (gw(rJ(p, (Mjb(), kjb))) === gw((p9(), n9)) && !(Hzb in c.a)) {
          d = new jJ();
          try {
            i = Pu(c, Hzb).hc();
            for (g = 0; g < i.a.length; ++g) {
              n = gu(i, g).kc();
              u = new HI(Pu(n, "x").jc().a, Pu(n, "y").jc().a);
              TI(d, u, d.c.b, d.c);
            }
            sJ(e, vib, d);
          } catch (a) {
            a = OH(a);
            if (aw(a, 54)) {
              throw new FQ("Invalid format of an edges 'bendPoints' property.", c);
            } else
              throw NH(a);
          }
        }
        sJ(e, CL, null);
      }
      function d0() {
        d0 = iI;
        L_ = new f0("LEFT_DIR_PREPROCESSOR", 0);
        o_ = new f0("DOWN_DIR_PREPROCESSOR", 1);
        c0 = new f0("UP_DIR_PREPROCESSOR", 2);
        m_ = new f0("COMMENT_PREPROCESSOR", 3);
        p_ = new f0("EDGE_AND_LAYER_CONSTRAINT_EDGE_REVERSER", 4);
        __ = new f0("SPLINE_SELF_LOOP_PREPROCESSOR", 5);
        z_ = new f0("INTERACTIVE_EXTERNAL_PORT_POSITIONER", 6);
        T_ = new f0("PARTITION_PREPROCESSOR", 7);
        j_ = new f0("BIG_NODES_PREPROCESSOR", 8);
        D_ = new f0("LABEL_DUMMY_INSERTER", 9);
        S_ = new f0("PARTITION_POSTPROCESSOR", 10);
        P_ = new f0("NODE_PROMOTION", 11);
        I_ = new f0("LAYER_CONSTRAINT_PROCESSOR", 12);
        s_ = new f0("HIERARCHICAL_PORT_CONSTRAINT_PROCESSOR", 13);
        h_ = new f0("BIG_NODES_INTERMEDIATEPROCESSOR", 14);
        N_ = new f0("LONG_EDGE_SPLITTER", 15);
        W_ = new f0("PORT_SIDE_PROCESSOR", 16);
        F_ = new f0("LABEL_DUMMY_SWITCHER", 17);
        G_ = new f0("LABEL_MANAGEMENT_PROCESSOR", 18);
        A_ = new f0("INVERTED_PORT_PROCESSOR", 19);
        Z_ = new f0("SELF_LOOP_PROCESSOR", 20);
        V_ = new f0("PORT_LIST_SORTER", 21);
        R_ = new f0("NORTH_SOUTH_PORT_PREPROCESSOR", 22);
        r_ = new f0("GREEDY_SWITCH", 23);
        U_ = new f0("PORT_DISTRIBUTER", 24);
        $_ = new f0("SPLINE_SELF_LOOP_POSITIONER", 25);
        Y_ = new f0("SAUSAGE_COMPACTION", 26);
        B_ = new f0("IN_LAYER_CONSTRAINT_PROCESSOR", 27);
        x_ = new f0("HYPEREDGE_DUMMY_MERGER", 28);
        H_ = new f0("LABEL_SIDE_SELECTOR", 29);
        k_ = new f0("BIG_NODES_SPLITTER", 30);
        C_ = new f0("LABEL_AND_NODE_SIZE_PROCESSOR", 31);
        a0 = new f0("SPLINE_SELF_LOOP_ROUTER", 32);
        O_ = new f0("NODE_MARGIN_CALCULATOR", 33);
        t_ = new f0("HIERARCHICAL_PORT_DUMMY_SIZE_PROCESSOR", 34);
        v_ = new f0("HIERARCHICAL_PORT_POSITION_PROCESSOR", 35);
        J_ = new f0("LAYER_SIZE_AND_GRAPH_HEIGHT_CALCULATOR", 36);
        i_ = new f0("BIG_NODES_POSTPROCESSOR", 37);
        l_ = new f0("COMMENT_POSTPROCESSOR", 38);
        y_ = new f0("HYPERNODE_PROCESSOR", 39);
        u_ = new f0("HIERARCHICAL_PORT_ORTHOGONAL_EDGE_ROUTER", 40);
        M_ = new f0("LONG_EDGE_JOINER", 41);
        Q_ = new f0("NORTH_SOUTH_PORT_POSTPROCESSOR", 42);
        E_ = new f0("LABEL_DUMMY_REMOVER", 43);
        w_ = new f0("HORIZONTAL_COMPACTOR", 44);
        X_ = new f0("REVERSED_EDGE_RESTORER", 45);
        K_ = new f0("LEFT_DIR_POSTPROCESSOR", 46);
        n_ = new f0("DOWN_DIR_POSTPROCESSOR", 47);
        b0 = new f0("UP_DIR_POSTPROCESSOR", 48);
        q_ = new f0("END_LABEL_PROCESSOR", 49);
      }
      function Rib() {
        Rib = iI;
        var a, b;
        uib = new CJ("origin");
        _hb = new CJ("processingConfiguration");
        Fib = new CJ("processors");
        $hb = new DJ("compoundNode", (xkb(), xkb(), vkb));
        lib = new DJ("insideConnections", (null, vkb));
        sib = new CJ("nestedLGraph");
        zib = new CJ("parentLNode");
        vib = new CJ("originalBendpoints");
        wib = new CJ("originalDummyNodePosition");
        xib = new CJ("originalLabelEdge");
        Hib = new CJ("representedLabels");
        pib = new DJ("labelSide", (kP(), jP));
        Iib = new DJ("reversed", (null, vkb));
        Gib = new CJ("random");
        qib = new DJ("longEdgeSource", null);
        rib = new DJ("longEdgeTarget", null);
        dib = new DJ("edgeConstraint", (Hgb(), Fgb));
        nib = new CJ("inLayerLayoutUnit");
        mib = new DJ("inLayerConstraint", (Hhb(), Fhb));
        oib = new DJ("inLayerSuccessorConstraint", new GU());
        Bib = new CJ("portDummy");
        aib = new DJ("crossingHint", Elb(0));
        jib = new DJ("graphProperties", (b = Wv(Hkb(mF), 11), new atb(b, Wv(exb(b, b.length), 11), 0)));
        hib = new DJ("externalPortSide", (sN(), qN));
        iib = new DJ("externalPortSize", new FI());
        gib = new CJ("externalPortReplacedDummy");
        fib = new DJ("externalPortConnections", (a = Wv(Hkb(Kz), 11), new atb(a, Wv(exb(a, a.length), 11), 0)));
        Cib = new DJ(yzb, 0);
        Shb = new CJ("barycenterAssociates");
        Qib = new CJ("TopSideComments");
        Yhb = new CJ("BottomSideComments");
        Zhb = new CJ("CommentConnectionPort");
        kib = new DJ("inputCollect", (null, vkb));
        yib = new DJ("outputCollect", (null, vkb));
        cib = new DJ("cyclic", (null, vkb));
        Whb = new DJ("bigNodeOriginalSize", new llb(0));
        Vhb = new DJ("bigNodeInitial", (null, vkb));
        Thb = new DJ("de.cau.cs.kieler.klay.layered.bigNodeLabels", new GU());
        Uhb = new DJ("de.cau.cs.kieler.klay.layered.postProcess", null);
        bib = new CJ("crossHierarchyMap");
        Pib = new CJ("targetOffset");
        Lib = new DJ("splineLabelSize", new FI());
        Mib = new DJ("splineLoopSide", (Ieb(), Feb));
        Nib = new DJ("splineSelfLoopComponents", new GU());
        Oib = new DJ("splineSelfLoopMargins", new DP());
        Kib = new CJ("spacings");
        Aib = new DJ("partitionConstraint", (null, vkb));
        tib = new AJ((eM(), LL), new llb(0));
        Jib = new BJ(cM, new llb(20), new llb(1));
        Dib = new BJ(XL, new llb(10), new llb(1));
        Xhb = new BJ(pL, new llb(12), new llb(0));
        Eib = new AJ(ZL, Elb(0));
        Rhb = new BJ(nL, new llb(cAb), new llb(0));
        eib = new AJ(uL, (NK(), JK));
      }
      function Mjb() {
        Mjb = iI;
        Bjb = new DJ("de.cau.cs.kieler.klay.layered.nodePromotion", (I1(), G1));
        Cjb = new FJ("de.cau.cs.kieler.klay.layered.nodePromotionBoundary", Elb(0), Elb(0), Elb(100));
        Hjb = new DJ(vzb, Elb(1));
        Ejb = new EJ("de.cau.cs.kieler.klay.layered.inLayerSpacingFactor", new llb(1), new llb(0));
        qjb = new DJ("de.cau.cs.kieler.klay.layered.edgeSpacingFactor", new llb(0.5));
        pjb = new DJ("de.cau.cs.kieler.klay.layered.edgeNodeSpacingFactor", new llb(IAb));
        njb = new DJ("de.cau.cs.kieler.klay.layered.distributeNodes", (xkb(), xkb(), vkb));
        Ljb = new DJ("de.cau.cs.kieler.klay.layered.wideNodesOnMultipleLayers", (ckb(), bkb));
        ljb = new DJ("de.cau.cs.kieler.klay.layered.cycleBreaking", (Z7(), X7));
        zjb = new DJ("de.cau.cs.kieler.klay.layered.nodeLayering", (x8(), w8));
        kjb = new DJ("de.cau.cs.kieler.klay.layered.crossMin", (p9(), o9));
        tjb = new DJ("de.cau.cs.kieler.klay.layered.greedySwitch", (zhb(), whb));
        Ajb = new DJ("de.cau.cs.kieler.klay.layered.nodePlace", (kbb(), fbb));
        wjb = new FJ("de.cau.cs.kieler.klay.layered.linearSegmentsDeflectionDampening", new llb(HAb), new llb(0), new llb(1));
        sjb = new DJ("de.cau.cs.kieler.klay.layered.fixedAlignment", (_gb(), Ygb));
        ojb = new DJ("de.cau.cs.kieler.klay.layered.edgeLabelSideSelection", (Pgb(), Lgb));
        mjb = new DJ(uzb, (null, vkb));
        Kjb = new EJ("de.cau.cs.kieler.klay.layered.thoroughness", Elb(10), Elb(1));
        vjb = new DJ("de.cau.cs.kieler.klay.layered.layerConstraint", (Xib(), Wib));
        xjb = new DJ("de.cau.cs.kieler.klay.layered.mergeEdges", (null, vkb));
        yjb = new DJ("de.cau.cs.kieler.klay.layered.mergeHierarchyEdges", (null, wkb));
        ujb = new DJ("de.cau.cs.kieler.klay.layered.interactiveReferencePoint", (Mhb(), Khb));
        rjb = new DJ("de.cau.cs.kieler.klay.layered.feedBackEdges", (null, vkb));
        gjb = new DJ("de.cau.cs.kieler.klay.layered.unnecessaryBendpoints", (null, vkb));
        jjb = new DJ("de.cau.cs.kieler.klay.layered.contentAlignment", (zgb(), Vsb(ygb, Bv(tv(iF, 1), uyb, 123, 0, [ugb]))));
        Ijb = new DJ("de.cau.cs.kieler.klay.layered.sausageFolding", (null, vkb));
        Jjb = new DJ("de.cau.cs.kieler.klay.layered.splines.selfLoopPlacement", (Qjb(), Pjb));
        hjb = new DJ("de.cau.cs.kieler.klay.layered.nodeplace.compactionStrategy", (lcb(), jcb));
        Djb = new DJ("de.cau.cs.kieler.klay.layered.northOrSouthPort", (null, vkb));
        Fjb = new DJ("de.cau.cs.kieler.klay.layered.postCompaction", (g4(), e4));
        Gjb = new DJ("de.cau.cs.kieler.klay.layered.postCompaction.constraints", (X3(), W3));
        ijb = new DJ("de.cau.cs.kieler.klay.layered.components.compact", (null, vkb));
      }
      function uO() {
        uO = iI;
        rO = new vO("OUT_T_L", 0, (Gi(), new Er(Vsb((oM(), kM), Bv(tv(Gz, 1), uyb, 41, 0, [nM, gM])))), (DO(), BO));
        qO = new vO("OUT_T_C", 1, new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [Vsb(kM, Bv(tv(Gz, 1), uyb, 41, 0, [nM, fM])), Vsb(kM, Bv(tv(Gz, 1), uyb, 41, 0, [nM, fM, hM]))]))), AO);
        sO = new vO("OUT_T_R", 2, new Er(Vsb(kM, Bv(tv(Gz, 1), uyb, 41, 0, [nM, iM]))), CO);
        iO = new vO("OUT_B_L", 3, new Er(Vsb(kM, Bv(tv(Gz, 1), uyb, 41, 0, [lM, gM]))), BO);
        hO = new vO("OUT_B_C", 4, new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [Vsb(kM, Bv(tv(Gz, 1), uyb, 41, 0, [lM, fM])), Vsb(kM, Bv(tv(Gz, 1), uyb, 41, 0, [lM, fM, hM]))]))), AO);
        jO = new vO("OUT_B_R", 5, new Er(Vsb(kM, Bv(tv(Gz, 1), uyb, 41, 0, [lM, iM]))), CO);
        mO = new vO("OUT_L_T", 6, new Er(Vsb(kM, Bv(tv(Gz, 1), uyb, 41, 0, [gM, nM, hM]))), CO);
        lO = new vO("OUT_L_C", 7, new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [Vsb(kM, Bv(tv(Gz, 1), uyb, 41, 0, [gM, mM])), Vsb(kM, Bv(tv(Gz, 1), uyb, 41, 0, [gM, mM, hM]))]))), CO);
        kO = new vO("OUT_L_B", 8, new Er(Vsb(kM, Bv(tv(Gz, 1), uyb, 41, 0, [gM, lM, hM]))), CO);
        pO = new vO("OUT_R_T", 9, new Er(Vsb(kM, Bv(tv(Gz, 1), uyb, 41, 0, [iM, nM, hM]))), BO);
        oO = new vO("OUT_R_C", 10, new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [Vsb(kM, Bv(tv(Gz, 1), uyb, 41, 0, [iM, mM])), Vsb(kM, Bv(tv(Gz, 1), uyb, 41, 0, [iM, mM, hM]))]))), BO);
        nO = new vO("OUT_R_B", 11, new Er(Vsb(kM, Bv(tv(Gz, 1), uyb, 41, 0, [iM, lM, hM]))), BO);
        fO = new vO("IN_T_L", 12, new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [Vsb(jM, Bv(tv(Gz, 1), uyb, 41, 0, [nM, gM])), Vsb(jM, Bv(tv(Gz, 1), uyb, 41, 0, [nM, gM, hM]))]))), BO);
        eO = new vO("IN_T_C", 13, new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [Vsb(jM, Bv(tv(Gz, 1), uyb, 41, 0, [nM, fM])), Vsb(jM, Bv(tv(Gz, 1), uyb, 41, 0, [nM, fM, hM]))]))), AO);
        gO = new vO("IN_T_R", 14, new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [Vsb(jM, Bv(tv(Gz, 1), uyb, 41, 0, [nM, iM])), Vsb(jM, Bv(tv(Gz, 1), uyb, 41, 0, [nM, iM, hM]))]))), CO);
        cO = new vO("IN_C_L", 15, new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [Vsb(jM, Bv(tv(Gz, 1), uyb, 41, 0, [mM, gM])), Vsb(jM, Bv(tv(Gz, 1), uyb, 41, 0, [mM, gM, hM]))]))), BO);
        bO = new vO("IN_C_C", 16, new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [Vsb(jM, Bv(tv(Gz, 1), uyb, 41, 0, [mM, fM])), Vsb(jM, Bv(tv(Gz, 1), uyb, 41, 0, [mM, fM, hM]))]))), AO);
        dO = new vO("IN_C_R", 17, new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [Vsb(jM, Bv(tv(Gz, 1), uyb, 41, 0, [mM, iM])), Vsb(jM, Bv(tv(Gz, 1), uyb, 41, 0, [mM, iM, hM]))]))), CO);
        _N = new vO("IN_B_L", 18, new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [Vsb(jM, Bv(tv(Gz, 1), uyb, 41, 0, [lM, gM])), Vsb(jM, Bv(tv(Gz, 1), uyb, 41, 0, [lM, gM, hM]))]))), BO);
        $N = new vO("IN_B_C", 19, new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [Vsb(jM, Bv(tv(Gz, 1), uyb, 41, 0, [lM, fM])), Vsb(jM, Bv(tv(Gz, 1), uyb, 41, 0, [lM, fM, hM]))]))), AO);
        aO = new vO("IN_B_R", 20, new gr(Ti(Bv(tv(UF, 1), syb, 1, 4, [Vsb(jM, Bv(tv(Gz, 1), uyb, 41, 0, [lM, iM])), Vsb(jM, Bv(tv(Gz, 1), uyb, 41, 0, [lM, iM, hM]))]))), CO);
        tO = new vO(szb, 21, (null, Fi), null);
      }
      function lab(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C, D, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, $, ab, bb, cb, db, eb, fb, gb, hb, ib;
        $ = 0;
        for (G = 0, J = b.length; G < J; ++G) {
          D = b[G];
          if (LM(Wv(rJ(D, (eM(), TL)), 28))) {
            for (S = new Tob(D.f); S.a < S.c.c.length; ) {
              R = Wv(Rob(S), 7);
              U = 0;
              for (h = new Tob(R.e); h.a < h.c.c.length; ) {
                g = Wv(Rob(h), 12);
                D.d != g.d.f.d && ++U;
              }
              U > 0 && (a.a[R.k] = $++);
            }
          } else {
            L = 0;
            for (S = new Tob(D.f); S.a < S.c.c.length; ) {
              R = Wv(Rob(S), 7);
              for (h = new Tob(R.e); h.a < h.c.c.length; ) {
                g = Wv(Rob(h), 12);
                D.d != g.d.f.d && ++L;
              }
              a.a[R.k] = $;
            }
            L > 0 && ++$;
          }
        }
        eb = 0;
        for (H = 0, K = c.length; H < K; ++H) {
          D = c[H];
          if (LM(Wv(rJ(D, (eM(), TL)), 28))) {
            M = 0;
            for (S = new Tob(D.f); S.a < S.c.c.length; ) {
              R = Wv(Rob(S), 7);
              if (R.g == (sN(), $M)) {
                for (h = new Tob(R.b); h.a < h.c.c.length; ) {
                  g = Wv(Rob(h), 12);
                  if (D.d != g.c.f.d) {
                    ++M;
                    break;
                  }
                }
              } else {
                break;
              }
            }
            O = 0;
            V = new Fnb(D.f, D.f.c.length);
            while (V.b > 0) {
              R = (Bxb(V.b > 0), Wv(V.a.sb(V.c = --V.b), 7));
              U = 0;
              for (h = new Tob(R.b); h.a < h.c.c.length; ) {
                g = Wv(Rob(h), 12);
                D.d != g.c.f.d && ++U;
              }
              if (U > 0) {
                if (R.g == (sN(), $M)) {
                  a.a[R.k] = eb;
                  ++eb;
                } else {
                  a.a[R.k] = eb + M + O;
                  ++O;
                }
              }
            }
            eb += O;
          } else {
            L = 0;
            for (S = new Tob(D.f); S.a < S.c.c.length; ) {
              R = Wv(Rob(S), 7);
              for (h = new Tob(R.b); h.a < h.c.c.length; ) {
                g = Wv(Rob(h), 12);
                D.d != g.c.f.d && ++L;
              }
              a.a[R.k] = eb;
            }
            L > 0 && ++eb;
          }
        }
        T = (mp(), new ntb());
        n = new Wub();
        for (F = 0, I = b.length; F < I; ++F) {
          D = b[F];
          for (cb = new Tob(D.f); cb.a < cb.c.c.length; ) {
            bb = Wv(Rob(cb), 7);
            for (h = new Tob(bb.e); h.a < h.c.c.length; ) {
              g = Wv(Rob(h), 12);
              gb = g.d;
              if (D.d != gb.f.d) {
                ab = Wv(re(Ktb(T.d, bb)), 197);
                fb = Wv(re(Ktb(T.d, gb)), 197);
                if (!ab && !fb) {
                  m = new oab();
                  n.a.db(m, n);
                  vU(m.a, g);
                  vU(m.d, bb);
                  Ltb(T.d, bb, m);
                  vU(m.d, gb);
                  Ltb(T.d, gb, m);
                } else if (!ab) {
                  vU(fb.a, g);
                  vU(fb.d, bb);
                  Ltb(T.d, bb, fb);
                } else if (!fb) {
                  vU(ab.a, g);
                  vU(ab.d, gb);
                  Ltb(T.d, gb, ab);
                } else if (ab == fb) {
                  vU(ab.a, g);
                } else {
                  vU(ab.a, g);
                  for (Q = new Tob(fb.d); Q.a < Q.c.c.length; ) {
                    P = Wv(Rob(Q), 7);
                    Ltb(T.d, P, ab);
                  }
                  xU(ab.a, fb.a);
                  xU(ab.d, fb.d);
                  n.a.eb(fb) != null;
                }
              }
            }
          }
        }
        o2 = Wv(Ye(n, xv(tE, {674: 1, 3: 1, 5: 1, 6: 1}, 197, n.a.Y(), 0, 1)), 674);
        C = b[0].d;
        Z = c[0].d;
        for (k = 0, l = o2.length; k < l; ++k) {
          j = o2[k];
          j.e = $;
          j.f = eb;
          for (S = new Tob(j.d); S.a < S.c.c.length; ) {
            R = Wv(Rob(S), 7);
            W = a.a[R.k];
            if (R.f.d == C) {
              W < j.e && (j.e = W);
              W > j.b && (j.b = W);
            } else if (R.f.d == Z) {
              W < j.f && (j.f = W);
              W > j.c && (j.c = W);
            }
          }
        }
        ipb(o2, 0, o2.length, (hsb(), hsb(), gsb));
        db = xv(mw, Yyb, 26, o2.length, 12, 1);
        d = xv(mw, Yyb, 26, eb + 1, 12, 1);
        for (q = 0; q < o2.length; q++) {
          db[q] = o2[q].f;
          d[db[q]] = 1;
        }
        f = 0;
        for (r = 0; r < d.length; r++) {
          d[r] == 1 ? d[r] = f : --f;
        }
        X = 0;
        for (s = 0; s < db.length; s++) {
          db[s] += d[db[s]];
          X = Plb(X, db[s] + 1);
        }
        i = 1;
        while (i < X) {
          i *= 2;
        }
        ib = 2 * i - 1;
        i -= 1;
        hb = xv(mw, Yyb, 26, ib, 12, 1);
        e = 0;
        for (A = 0; A < db.length; A++) {
          w = db[A] + i;
          ++hb[w];
          while (w > 0) {
            w % 2 > 0 && (e += hb[w + 1]);
            w = (w - 1) / 2 | 0;
            ++hb[w];
          }
        }
        B = xv(sE, syb, 156, o2.length * 2, 0, 1);
        for (t = 0; t < o2.length; t++) {
          B[2 * t] = new rab(o2[t], o2[t].e, o2[t].b, (vab(), uab));
          B[2 * t + 1] = new rab(o2[t], o2[t].b, o2[t].e, tab);
        }
        ipb(B, 0, B.length, (null, gsb));
        N = 0;
        for (u = 0; u < B.length; u++) {
          switch (B[u].d.e) {
            case 0:
              ++N;
              break;
            case 1:
              --N;
              e += N;
          }
        }
        Y = xv(sE, syb, 156, o2.length * 2, 0, 1);
        for (v = 0; v < o2.length; v++) {
          Y[2 * v] = new rab(o2[v], o2[v].f, o2[v].c, (vab(), uab));
          Y[2 * v + 1] = new rab(o2[v], o2[v].c, o2[v].f, tab);
        }
        ipb(Y, 0, Y.length, (null, gsb));
        N = 0;
        for (p = 0; p < Y.length; p++) {
          switch (Y[p].d.e) {
            case 0:
              ++N;
              break;
            case 1:
              --N;
              e += N;
          }
        }
        return e;
      }
      function eM() {
        eM = iI;
        var a, b;
        mL = new DJ("de.cau.cs.kieler.animate", (xkb(), xkb(), wkb));
        new DJ("de.cau.cs.kieler.minAnimTime", Elb(400));
        new DJ("de.cau.cs.kieler.maxAnimTime", Elb(4e3));
        new DJ("de.cau.cs.kieler.animTimeFactor", Elb(100));
        jL = new DJ("de.cau.cs.kieler.additionalPortSpace", null);
        qL = new DJ("de.cau.cs.kieler.commentBox", (null, vkb));
        new CJ("de.cau.cs.kieler.diagramType");
        tL = new DJ("de.cau.cs.kieler.edgeLabelPlacement", (EK(), DK));
        vL = new DJ("de.cau.cs.kieler.edgeType", (YK(), WK));
        xL = new CJ("de.cau.cs.kieler.fontName");
        yL = new DJ("de.cau.cs.kieler.fontSize", Elb(0));
        AL = new DJ("de.cau.cs.kieler.hypernode", (null, vkb));
        CL = new DJ("de.cau.cs.kieler.junctionPoints", new jJ());
        new DJ("de.cau.cs.kieler.layoutAncestors", (null, vkb));
        GL = new DJ("de.cau.cs.kieler.margins", new DP());
        HL = new EJ("de.cau.cs.kieler.minHeight", new llb(0), new llb(0));
        IL = new EJ("de.cau.cs.kieler.minWidth", new llb(0), new llb(0));
        KL = new DJ("de.cau.cs.kieler.noLayout", (null, vkb));
        LL = new CJ("de.cau.cs.kieler.offset");
        SL = new CJ("de.cau.cs.kieler.klay.layered.portAnchor");
        UL = new CJ("de.cau.cs.kieler.portIndex");
        WL = new DJ("de.cau.cs.kieler.portSide", (sN(), qN));
        new DJ("de.cau.cs.kieler.progressBar", (null, vkb));
        new DJ("de.cau.cs.kieler.resetConfig", (null, wkb));
        new DJ("de.cau.cs.kieler.scaleFactor", new llb(1));
        dM = new DJ("de.cau.cs.kieler.thickness", new llb(1));
        new DJ("de.cau.cs.kieler.zoomToFit", (null, vkb));
        kL = new CJ("de.cau.cs.kieler.algorithm");
        lL = new DJ("de.cau.cs.kieler.alignment", (iK(), cK));
        nL = new DJ("de.cau.cs.kieler.aspectRatio", new llb(0));
        oL = new CJ("de.cau.cs.kieler.bendPoints");
        pL = new DJ("de.cau.cs.kieler.borderSpacing", new llb(-1));
        rL = new DJ(uzb, (null, vkb));
        sL = new DJ("de.cau.cs.kieler.direction", (sK(), qK));
        uL = new DJ("de.cau.cs.kieler.edgeRouting", (NK(), MK));
        wL = new DJ("de.cau.cs.kieler.expandNodes", (null, vkb));
        zL = new DJ("de.cau.cs.kieler.hierarchyHandling", (eL(), cL));
        BL = new DJ("de.cau.cs.kieler.interactive", (null, vkb));
        DL = new EJ("de.cau.cs.kieler.labelSpacing", new llb(3), new llb(0));
        EL = new DJ("de.cau.cs.kieler.layoutHierarchy", (null, vkb));
        JL = new DJ("de.cau.cs.kieler.nodeLabelPlacement", (oM(), b = Wv(Hkb(Gz), 11), new atb(b, Wv(exb(b, b.length), 11), 0)));
        TL = new DJ("de.cau.cs.kieler.portConstraints", (KM(), JM));
        VL = new DJ("de.cau.cs.kieler.portLabelPlacement", (UM(), TM));
        XL = new EJ("de.cau.cs.kieler.portSpacing", new llb(-1), new llb(0));
        NL = new DJ("de.cau.cs.kieler.portAlignment", (zM(), xM));
        PL = new DJ("de.cau.cs.kieler.portAlignment.north", yM);
        QL = new DJ("de.cau.cs.kieler.portAlignment.south", yM);
        RL = new DJ("de.cau.cs.kieler.portAlignment.west", yM);
        OL = new DJ("de.cau.cs.kieler.portAlignment.east", yM);
        YL = new CJ("de.cau.cs.kieler.position");
        ZL = new CJ("de.cau.cs.kieler.priority");
        new CJ(vzb);
        $L = new DJ("de.cau.cs.kieler.selfLoopInside", (null, vkb));
        _L = new CJ("de.cau.cs.kieler.separateConnComp");
        aM = new DJ("de.cau.cs.kieler.sizeConstraint", (DN(), a = Wv(Hkb(Lz), 11), new atb(a, Wv(exb(a, a.length), 11), 0)));
        bM = new DJ("de.cau.cs.kieler.sizeOptions", Vsb((MN(), KN), Bv(tv(Mz, 1), uyb, 139, 0, [IN])));
        cM = new EJ("de.cau.cs.kieler.spacing", new llb(-1), new llb(0));
        FL = new DJ("de.cau.cs.kieler.layoutPartitions", (null, vkb));
        ML = new CJ("de.cau.cs.kieler.partition");
      }
      function wQ(b, c, d, e) {
        tQ();
        var f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t;
        if (!e) {
          if ((!b.n ? (ypb(), ypb(), wpb) : b.n).R(new xQ(c))) {
            return;
          }
        }
        if (Wv(rQ.a, 18).kb(c)) {
          if (!d.lc()) {
            throw new _J(Pzb + c + Qzb + d + ").");
          }
          o2 = Wv(Wv(rQ.b, 57).cb(c), 79);
          p = d.lc().a;
          sJ(b, o2, p);
          return;
        } else if (Wv(oQ.a, 18).kb(c)) {
          try {
            if (!d.jc()) {
              throw new Xlb();
            }
            o2 = Wv(Wv(oQ.b, 57).cb(c), 79);
            s = Elb(dlb((bmb(), "" + d.jc().a)));
            sJ(b, o2, s);
            return;
          } catch (a) {
            a = OH(a);
            if (aw(a, 130)) {
              throw new _J("Invalid integer format for property '" + c + Qzb + d + ").");
            } else
              throw NH(a);
          }
        } else if (Wv(kQ.a, 18).kb(c)) {
          if (!d.ic()) {
            throw new _J(Pzb + c + Qzb + d + ").");
          }
          o2 = Wv(Wv(kQ.b, 57).cb(c), 79);
          s = (xkb(), d.ic().a ? wkb : vkb);
          sJ(b, o2, s);
          return;
        } else if (Wv(nQ.a, 18).kb(c)) {
          if (!d.jc()) {
            throw new _J("Invalid float format for property '" + c + Qzb + d + ").");
          }
          o2 = Wv(Wv(nQ.b, 57).cb(c), 79);
          s = new klb(d.jc().a);
          sJ(b, o2, s);
          return;
        } else if (Wv(mQ.a, 18).kb(c)) {
          if (!d.lc()) {
            throw new _J(Rzb + c + Qzb + d + ").");
          }
          l = d.lc().a;
          m = null;
          try {
            vQ((eM(), WL), c) ? m = (sN(), Wv(Gc((yN(), xN), l), 32)) : vQ(lL, c) ? m = (iK(), Wv(Gc((mK(), lK), l), 103)) : vQ(sL, c) ? m = (sK(), Wv(Gc((zK(), yK), l), 59)) : vQ(uL, c) ? m = (NK(), Wv(Gc((RK(), QK), l), 122)) : vQ(zL, c) ? m = (eL(), Wv(Gc((iL(), hL), l), 166)) : vQ(NL, c) || vQ(OL, c) || vQ(PL, c) || vQ(QL, c) || vQ(RL, c) ? m = (zM(), Wv(Gc((DM(), CM), l), 100)) : vQ(TL, c) ? m = (KM(), Wv(Gc((QM(), PM), l), 28)) : vQ(VL, c) ? m = (UM(), Wv(Gc((YM(), XM), l), 149)) : vQ(vL, c) ? m = (YK(), Wv(Gc((aL(), _K), l), 133)) : vQ(tL, c) ? m = (EK(), Wv(Gc((IK(), HK), l), 107)) : vQ((Mjb(), ljb), c) ? m = (Z7(), Wv(Gc((c8(), b8), l), 193)) : vQ(zjb, c) ? m = (x8(), Wv(Gc((C8(), B8), l), 173)) : vQ(ojb, c) ? m = (Pgb(), Wv(Gc((Ugb(), Tgb), l), 115)) : vQ(hjb, c) ? m = (lcb(), Wv(Gc((pcb(), ocb), l), 194)) : vQ(kjb, c) ? m = (p9(), Wv(Gc((u9(), t9), l), 192)) : vQ(Bjb, c) ? m = (I1(), Wv(Gc((M1(), L1), l), 109)) : vQ(Ajb, c) ? m = (kbb(), Wv(Gc((pbb(), obb), l), 141)) : vQ(Fjb, c) ? m = (g4(), Wv(Gc((k4(), j4), l), 125)) : vQ(Gjb, c) ? m = (X3(), Wv(Gc((_3(), $3), l), 175)) : vQ(sjb, c) ? m = (_gb(), Wv(Gc((dhb(), chb), l), 124)) : vQ(tjb, c) ? m = (zhb(), Wv(Gc((Dhb(), Chb), l), 110)) : vQ(vjb, c) ? m = (Xib(), Wv(Gc((_ib(), $ib), l), 85)) : vQ(Jjb, c) ? m = (Qjb(), Wv(Gc((Ujb(), Tjb), l), 153)) : vQ(Ljb, c) ? m = (ckb(), Wv(Gc((gkb(), fkb), l), 172)) : vQ(ujb, c) && (m = (Mhb(), Wv(Gc((Qhb(), Phb), l), 174)));
          } catch (a) {
            a = OH(a);
            if (aw(a, 54)) {
              throw new _J(Rzb + c + Qzb + d + ").");
            } else
              throw NH(a);
          }
          o2 = Wv(Wv(mQ.b, 57).cb(c), 79);
          sJ(b, o2, m);
          return;
        } else if (Wv(lQ.a, 18).kb(c)) {
          if (!d.lc()) {
            throw new _J(Rzb + c + Qzb + d + ").");
          }
          k = d.lc().a;
          q = null;
          j = fmb(k, "[\\[\\]\\s,]+");
          for (h = 0, i = j.length; h < i; ++h) {
            g = j[h];
            if (pmb(hmb(g)) == 0) {
              continue;
            }
            if (vQ((eM(), JL), c)) {
              !q && (q = (f = Wv(Hkb(Gz), 11), new atb(f, Wv(exb(f, f.length), 11), 0)));
              Wsb(q, (oM(), Wv(Gc((sM(), rM), g), 41)));
            } else if (vQ(aM, c)) {
              !q && (q = (f = Wv(Hkb(Lz), 11), new atb(f, Wv(exb(f, f.length), 11), 0)));
              Wsb(q, (DN(), Wv(Gc((HN(), GN), g), 150)));
            } else if (vQ(bM, c)) {
              !q && (q = (f = Wv(Hkb(Mz), 11), new atb(f, Wv(exb(f, f.length), 11), 0)));
              Wsb(q, (MN(), Wv(Gc((QN(), PN), g), 139)));
            } else if (vQ((Mjb(), jjb), c)) {
              !q && (q = (f = Wv(Hkb(iF), 11), new atb(f, Wv(exb(f, f.length), 11), 0)));
              Wsb(q, (zgb(), Wv(Gc((Dgb(), Cgb), g), 123)));
            }
          }
          o2 = Wv(Wv(lQ.b, 57).cb(c), 79);
          sJ(b, o2, q);
          return;
        } else if (Wv(qQ.a, 18).kb(c)) {
          if (!d.lc()) {
            throw new _J("Invalid _other_ format for property '" + c + Qzb + d + ").");
          }
          if (vQ((eM(), YL), c) || vQ(SL, c)) {
            try {
              r = new FI();
              AI(r, d.lc().a);
              o2 = Wv(Wv(qQ.b, 57).cb(c), 79);
              sJ(b, o2, r);
              return;
            } catch (a) {
              a = OH(a);
              if (aw(a, 29)) {
                throw new _J("Invalid KVector format for property '" + c + "' " + d + ".");
              } else
                throw NH(a);
            }
          } else if (vQ(oL, c) || vQ(CL, c)) {
            try {
              t = new jJ();
              iJ(t, d.lc().a);
              o2 = Wv(Wv(qQ.b, 57).cb(c), 79);
              sJ(b, o2, t);
              return;
            } catch (a) {
              a = OH(a);
              if (aw(a, 29)) {
                throw new _J("Invalid KVectorChain format for property '" + c + "' " + d + ".");
              } else
                throw NH(a);
            }
          } else if (vQ(GL, c) || vQ(jL, c)) {
            try {
              n = new DP();
              tP(n, d.lc().a);
              o2 = Wv(Wv(qQ.b, 57).cb(c), 79);
              sJ(b, o2, n);
              return;
            } catch (a) {
              a = OH(a);
              if (aw(a, 29)) {
                throw new _J("Invalid Margins format for property '" + c + "' " + d + ".");
              } else
                throw NH(a);
            }
          }
        } else if (Wv(pQ.a, 18).kb(c)) {
          return;
        }
        throw new _J("Unsupported layout option '" + c + Qzb + d + ").");
      }
      var Sxb = "object", Txb = {3: 1, 8: 1, 5: 1, 6: 1}, Uxb = {3: 1, 46: 1}, Vxb = {3: 1, 54: 1, 46: 1}, Wxb = "null", Xxb = "anonymous", Yxb = "Unknown", Zxb = "function", $xb = 2147483647, _xb = {181: 1, 3: 1, 54: 1, 46: 1}, ayb = 65536, byb = 65535, cyb = {3: 1, 54: 1, 29: 1, 46: 1}, dyb = 'For input string: "', eyb = -2147483648, fyb = {56: 1}, gyb = {23: 1, 145: 1, 185: 1}, hyb = {3: 1, 5: 1}, iyb = "Invalid UTF8 sequence", jyb = "fromIndex: ", kyb = "java.lang", lyb = "com.google.gwt.core.client", myb = "com.google.gwt.core.client.impl", nyb = "java.io", oyb = "java.nio.charset", pyb = "javaemul.internal", qyb = "com.google.common.base", ryb = "%s (%s) must not be negative", syb = {3: 1, 5: 1, 6: 1}, tyb = "negative size: ", uyb = {3: 1, 8: 1, 5: 1, 11: 1, 6: 1}, vyb = {68: 1, 136: 1, 3: 1, 23: 1, 17: 1}, wyb = {108: 1, 35: 1}, xyb = "com.google.common.collect", yyb = {108: 1, 35: 1, 96: 1}, zyb = {144: 1, 3: 1}, Ayb = {35: 1}, Byb = {57: 1}, Cyb = "java.util", Dyb = {22: 1, 19: 1}, Eyb = {22: 1, 19: 1, 18: 1}, Fyb = {22: 1, 19: 1, 20: 1}, Gyb = {22: 1, 19: 1, 20: 1, 63: 1}, Hyb = {35: 1, 96: 1}, Iyb = {22: 1, 19: 1, 18: 1, 137: 1}, Jyb = {21: 1}, Kyb = "AbstractMapEntry", Lyb = {207: 1, 22: 1, 19: 1}, Myb = {159: 1, 3: 1, 23: 1, 17: 1}, Nyb = 1073741824, Oyb = {22: 1}, Pyb = {3: 1, 22: 1, 19: 1}, Qyb = {87: 1, 3: 1, 22: 1, 19: 1, 20: 1, 63: 1}, Ryb = {3: 1, 57: 1}, Syb = {3: 1, 22: 1, 19: 1, 18: 1}, Tyb = {64: 1}, Uyb = "arraySize", Vyb = "initialArraySize", Wyb = {64: 1, 188: 1, 3: 1, 23: 1, 17: 1}, Xyb = "occurrences", Yyb = {52: 1, 3: 1, 5: 1}, Zyb = {205: 1, 3: 1, 23: 1, 17: 1}, $yb = 1e-4, _yb = "com.google.gwt.json.client", azb = 4194303, bzb = 1048575, czb = 4194304, dzb = 17592186044416, ezb = -17592186044416, fzb = `([{"' 	\r
`, gzb = `)]}"' 	\r
`, hzb = "The given string contains parts that cannot be parsed as numbers.", izb = "de.cau.cs.kieler.core.math", jzb = -17976931348623157e292, kzb = "de.cau.cs.kieler.core.properties", lzb = {79: 1, 23: 1}, mzb = "de.cau.cs.kieler.core.util", nzb = "de.cau.cs.kieler.kiml", ozb = "LEFT", pzb = "RIGHT", qzb = "CENTER", rzb = "de.cau.cs.kieler.kiml.options", szb = "UNDEFINED", tzb = "NONE", uzb = "de.cau.cs.kieler.debugMode", vzb = "de.cau.cs.kieler.randomSeed", wzb = "de.cau.cs.kieler.kiml.util.nodespacing", xzb = "de.cau.cs.kieler.kiml.util.labelspacing", yzb = "portRatioOrPosition", zzb = "NodeMarginCalculator", Azb = "bottom", Bzb = {286: 1, 121: 1, 3: 1, 5: 1}, Czb = "undefined", Dzb = "text", Ezb = "stacktrace", Fzb = {34: 1, 3: 1, 8: 1, 5: 1, 6: 1}, Gzb = "properties", Hzb = "bendPoints", Izb = "junctionPoints", Jzb = "width", Kzb = "height", Lzb = "padding", Mzb = "children", Nzb = {38: 1, 39: 1, 42: 1, 51: 1, 71: 1, 3: 1, 8: 1, 5: 1, 6: 1}, Ozb = "de.cau.cs.kieler.klay.gwt.client.layout", Pzb = "Invalid boolean format for property '", Qzb = "' (", Rzb = "Invalid enum format for property '", Szb = "de.cau.cs.kieler.klay.layered", Tzb = "Layered layout", Uzb = Infinity, Vzb = -Infinity, Wzb = "de.cau.cs.kieler.klay.layered.compaction.components", Xzb = "de.cau.cs.kieler.klay.layered.compaction.oned", Yzb = " instance has been finished already.", Zzb = "de.cau.cs.kieler.klay.layered.compaction.oned.algs", $zb = "de.cau.cs.kieler.klay.layered.compaction.recthull", _zb = {68: 1}, aAb = "de.cau.cs.kieler.klay.layered.components", bAb = {3: 1, 5: 1, 22: 1, 13: 1, 19: 1, 20: 1, 63: 1}, cAb = 1.600000023841858, dAb = 1e-3, eAb = {31: 1}, fAb = "de.cau.cs.kieler.klay.layered.compound", gAb = {38: 1, 39: 1, 47: 1, 42: 1, 3: 1, 8: 1, 5: 1, 6: 1}, hAb = "de.cau.cs.kieler.klay.layered.graph", iAb = "Port side is undefined", jAb = "de.cau.cs.kieler.klay.layered.intermediate", kAb = "Big nodes pre-processing", lAb = 34028234663852886e22, mAb = {38: 1, 39: 1, 42: 1, 346: 1, 71: 1, 3: 1, 8: 1, 5: 1, 6: 1}, nAb = "Node '", oAb = "' has its layer constraint set to FIRST or FIRST_SEPARATE, but has ", pAb = "at least one incoming edge. Connections between nodes with these ", qAb = "layer constraints are not supported.", rAb = 17976931348623157e292, sAb = "Odd port side processing", tAb = {250: 1, 3: 1, 5: 1}, uAb = 1e-8, vAb = "de.cau.cs.kieler.klay.layered.intermediate.compaction", wAb = "de.cau.cs.kieler.klay.layered.intermediate.greedyswitch", xAb = {227: 1, 3: 1, 5: 1}, yAb = "de.cau.cs.kieler.klay.layered.networksimplex", zAb = "INTERACTIVE", AAb = "de.cau.cs.kieler.klay.layered.p1cycles", BAb = {106: 1, 31: 1}, CAb = "de.cau.cs.kieler.klay.layered.p2layers", DAb = "NETWORK_SIMPLEX", EAb = "de.cau.cs.kieler.klay.layered.p3order", FAb = 5960464477539063e-23, GAb = "Port type is undefined", HAb = 0.30000001192092896, IAb = 0.699999988079071, JAb = 0.8999999761581421, KAb = "de.cau.cs.kieler.klay.layered.p3order.constraints", LAb = "de.cau.cs.kieler.klay.layered.p3order.counting", MAb = "de.cau.cs.kieler.klay.layered.p4nodes", NAb = {625: 1, 3: 1, 5: 1, 6: 1}, OAb = "de.cau.cs.kieler.klay.layered.p4nodes.bk", PAb = "de.cau.cs.kieler.klay.layered.p5edges", QAb = "de.cau.cs.kieler.klay.layered.p5edges.splines", RAb = 1e-6, SAb = -1e-6, TAb = "The list of vectors may not be empty.", UAb = 0.09999999999999998, VAb = "de.cau.cs.kieler.klay.layered.properties", WAb = "_gwt_modCount", XAb = {3: 1, 22: 1, 19: 1, 20: 1, 63: 1}, YAb = {3: 1, 5: 1, 57: 1}, ZAb = {3: 1, 5: 1, 22: 1, 19: 1, 50: 1, 18: 1}, $Ab = "delete", _Ab = 15525485, aBb = 16777216, bBb = 16777215, cBb = {3: 1, 5: 1, 22: 1, 19: 1, 20: 1, 63: 1}, dBb = {3: 1, 23: 1, 17: 1, 138: 1};
      var _, fI, aI, LH = -1;
      gI();
      hI(1, null, {}, pb);
      _.t = function qb(a) {
        return this === a;
      };
      _.u = function sb() {
        return this.$c;
      };
      _.v = function ub() {
        return txb(this);
      };
      _.w = function wb() {
        return ob(this);
      };
      _.toString = function() {
        return this.w();
      };
      hI(46, 1, Uxb);
      _.bc = function ct() {
        return this.f;
      };
      _.w = function dt() {
        var a, b;
        return a = Ikb(this.$c), b = this.bc(), b != null ? a + ": " + b : a;
      };
      hI(54, 46, Vxb);
      hI(72, 54, Vxb, gt);
      hI(164, 72, {164: 1, 3: 1, 54: 1, 46: 1}, kt);
      _.bc = function nt() {
        jt(this);
        return this.c;
      };
      _.cc = function ot() {
        return gw(this.b) === gw(ht) ? null : this.b;
      };
      var ht;
      var Mt;
      hI(642, 1, {});
      hI(356, 642, {}, Tt);
      _.dc = function Ut(a, b) {
        var c = {}, k;
        var d = [];
        a.__gwt$backingJsError = {fnStack: d};
        var e = arguments.callee.caller;
        while (e) {
          var f = (Nt(), e.name || (e.name = Rt(e.toString())));
          d.push(f);
          var g = ":" + f;
          var h = c[g];
          if (h) {
            var i, j;
            for (i = 0, j = h.length; i < j; i++) {
              if (h[i] === e) {
                return;
              }
            }
          }
          (h || (c[g] = [])).push(e);
          e = e.caller;
        }
      };
      _.ec = function Vt(a) {
        var b, c, d, e, f;
        d = (Nt(), f = a.__gwt$backingJsError, f && f.fnStack ? f.fnStack : []);
        c = d.length;
        e = xv(WF, Txb, 146, c, 0, 1);
        for (b = 0; b < c; b++) {
          e[b] = new Zlb(d[b], null, -1);
        }
        return e;
      };
      hI(643, 642, {});
      _.dc = function Yt(c, d) {
        function e(b) {
          if (!("stack" in b)) {
            try {
              throw b;
            } catch (a) {
            }
          }
          return b;
        }
        var f;
        typeof d == "string" ? f = e(new Error(d.replace("\n", " "))) : d && typeof d == Sxb && "stack" in d ? f = d : f = e(new Error());
        c.__gwt$backingJsError = f;
      };
      _.fc = function Zt(a, b, c, d) {
        return new Zlb(b, a + "@" + d, c < 0 ? -1 : c);
      };
      _.ec = function $t(a) {
        var b, c, d, e, f, g, h;
        e = (Nt(), h = a.__gwt$backingJsError, h && h.stack ? h.stack.split("\n") : []);
        f = xv(WF, Txb, 146, 0, 0, 1);
        b = 0;
        d = e.length;
        if (d == 0) {
          return f;
        }
        g = Xt(this, e[0]);
        emb(g.d, Xxb) || (f[b++] = g);
        for (c = 1; c < d; c++) {
          f[b++] = Xt(this, e[c]);
        }
        return f;
      };
      hI(357, 643, {}, _t);
      _.fc = function au(a, b, c, d) {
        return new Zlb(b, a, -1);
      };
      var Sv, Tv, Uv;
      hI(181, 54, _xb);
      hI(351, 181, _xb, ikb);
      hI(288, 1, {}, Kkb);
      _.Oc = function Lkb(a) {
        var b;
        b = new Kkb();
        b.g = 4;
        a > 1 ? b.c = Skb(this, a - 1) : b.c = this;
        return b;
      };
      _.Pc = function Rkb() {
        Gkb(this);
        return this.b;
      };
      _.Qc = function Tkb() {
        return Ikb(this);
      };
      _.Rc = function Vkb() {
        return Jkb(this);
      };
      _.Sc = function Xkb() {
        return (this.g & 4) != 0;
      };
      _.Tc = function Ykb() {
        return (this.g & 1) != 0;
      };
      _.w = function _kb() {
        return ((this.g & 2) != 0 ? "interface " : (this.g & 1) != 0 ? "" : "class ") + (Gkb(this), this.n);
      };
      _.g = 0;
      var Fkb = 1;
      hI(119, 72, {3: 1, 119: 1, 54: 1, 46: 1}, alb);
      hI(29, 72, cyb, rlb, slb);
      hI(95, 72, Vxb, nkb, okb);
      hI(231, 1, {3: 1, 231: 1});
      var blb;
      hI(24, 231, {3: 1, 23: 1, 24: 1, 231: 1}, wlb);
      _.F = function ylb(a) {
        return vlb(this, Wv(a, 24));
      };
      _.t = function zlb(a) {
        return aw(a, 24) && Wv(a, 24).a == this.a;
      };
      _.v = function Alb() {
        return this.a;
      };
      _.w = function Clb() {
        return Dlb(this.a);
      };
      _.a = 0;
      Uv = {3: 1, 345: 1, 23: 1, 2: 1};
      hI(350, 1, fyb, smb);
      _.$b = function tmb(a, b) {
        return rmb($v(a), $v(b));
      };
      hI(257, 95, Vxb, Cmb);
      hI(145, 1, {23: 1, 145: 1});
      _.F = function Kmb(a) {
        return Jmb(this, Wv(a, 145));
      };
      _.t = function Lmb(a) {
        var b;
        if (a === this) {
          return true;
        }
        if (!aw(a, 145)) {
          return false;
        }
        b = Wv(a, 145);
        return emb(this.a, b.a);
      };
      _.v = function Mmb() {
        return Pxb(this.a);
      };
      _.w = function Nmb() {
        return this.a;
      };
      hI(358, 29, cyb, Omb);
      hI(256, 29, {3: 1, 54: 1, 29: 1, 46: 1, 256: 1}, Pmb);
      hI(185, 145, gyb);
      var jxb, kxb, lxb;
      hI(289, 185, gyb, oxb);
      _.Zc = function pxb(a, b, c) {
        var d, e;
        d = xv(jw, hyb, 26, c, 12, 1);
        for (e = 0; e < c; ++e) {
          d[e] = a[b + e] & 255 & byb;
        }
        return d;
      };
      hI(355, 185, gyb, qxb);
      _.Zc = function rxb(a, b, c) {
        var d, e, f, g, h, i, j, k;
        f = 0;
        for (j = 0; j < c; ) {
          ++f;
          e = a[b + j];
          if ((e & 192) == 128) {
            throw new slb(iyb);
          } else if ((e & 128) == 0) {
            ++j;
          } else if ((e & 224) == 192) {
            j += 2;
          } else if ((e & 240) == 224) {
            j += 3;
          } else if ((e & 248) == 240) {
            j += 4;
          } else {
            throw new slb(iyb);
          }
          if (j > c) {
            throw new okb(iyb);
          }
        }
        g = xv(jw, hyb, 26, f, 12, 1);
        k = 0;
        h = 0;
        for (i = 0; i < c; ) {
          e = a[b + i++];
          if ((e & 128) == 0) {
            h = 1;
            e &= 127;
          } else if ((e & 224) == 192) {
            h = 2;
            e &= 31;
          } else if ((e & 240) == 224) {
            h = 3;
            e &= 15;
          } else if ((e & 248) == 240) {
            h = 4;
            e &= 7;
          } else if ((e & 252) == 248) {
            h = 5;
            e &= 3;
          }
          while (--h > 0) {
            d = a[b + i++];
            if ((d & 192) != 128) {
              throw new slb("Invalid UTF8 sequence at " + (b + i - 1) + ", byte=" + (d >>> 0).toString(16));
            }
            e = e << 6 | d & 63;
          }
          k += Ekb(e, g, k);
        }
        return g;
      };
      var UF = Nkb(kyb, "Object", 1);
      var _F = Nkb(kyb, "Throwable", 46);
      var KF = Nkb(kyb, "Exception", 54);
      var VF = Nkb(kyb, "RuntimeException", 72);
      var Zy = Nkb(lyb, "JavaScriptException", 164);
      var ez = Nkb(myb, "StackTraceCreator/Collector", 642);
      var bz = Nkb(myb, "StackTraceCreator/CollectorLegacy", 356);
      var dz = Nkb(myb, "StackTraceCreator/CollectorModern", 643);
      var cz = Nkb(myb, "StackTraceCreator/CollectorModernNoSourceMap", 357);
      var wF = Nkb(nyb, "IOException", 181);
      var zF = Nkb(nyb, "UnsupportedEncodingException", 351);
      var GF = Nkb(kyb, "Class", 288);
      var FF = Nkb(kyb, "ClassCastException", 119);
      var MF = Nkb(kyb, "IllegalArgumentException", 29);
      var OF = Nkb(kyb, "IndexOutOfBoundsException", 95);
      var TF = Nkb(kyb, "Number", 231);
      var PF = Nkb(kyb, "Integer", 24);
      var $F = Nkb(kyb, "String", 2);
      var XF = Nkb(kyb, "String/1", 350);
      var ZF = Nkb(kyb, "StringIndexOutOfBoundsException", 257);
      var bG = Nkb(oyb, "Charset", 145);
      var cG = Nkb(oyb, "IllegalCharsetNameException", 358);
      var dG = Nkb(oyb, "UnsupportedCharsetException", 256);
      var JH = Nkb(pyb, "EmulatedCharset", 185);
      var HH = Nkb(pyb, "EmulatedCharset/LatinCharset", 289);
      var IH = Nkb(pyb, "EmulatedCharset/UtfCharset", 355);
      hI(669, 1, {3: 1});
      var sw = Nkb(qyb, "Optional", 669);
      hI(601, 669, {3: 1}, Ab);
      _.t = function Bb(a) {
        return a === this;
      };
      _.v = function Cb() {
        return 2040732332;
      };
      _.w = function Db() {
        return "Optional.absent()";
      };
      _.A = function Eb(a) {
        _b(a);
        return zb(), yb;
      };
      var yb;
      var nw = Nkb(qyb, "Absent", 601);
      var ow = Pkb(qyb, "Function");
      hI(208, 1, {}, Kb);
      _.C = function Lb(a) {
        return Ib(a);
      };
      var rw = Nkb(qyb, "Joiner", 208);
      hI(363, 208, {}, Nb);
      _.C = function Ob(a) {
        return Mb(this, a);
      };
      var pw = Nkb(qyb, "Joiner/1", 363);
      hI(362, 1, {}, Rb);
      var qw = Nkb(qyb, "Joiner/MapJoiner", 362);
      var tw = Pkb(qyb, "Predicate");
      var gc;
      hI(244, 1, {68: 1, 244: 1, 3: 1}, ic);
      _.D = function jc(a) {
        var b;
        for (b = 0; b < this.a.a.length; b++) {
          if (!Wv(mpb(this.a, b), 68).D(a)) {
            return false;
          }
        }
        return true;
      };
      _.t = function kc(a) {
        var b;
        if (aw(a, 244)) {
          b = Wv(a, 244);
          return cn(this.a, b.a);
        }
        return false;
      };
      _.v = function lc() {
        return Bpb(this.a) + 306654252;
      };
      _.w = function mc() {
        return "Predicates.and(" + Hb((hc(), gc), new wnb(this.a)) + ")";
      };
      var uw = Nkb(qyb, "Predicates/AndPredicate", 244);
      hI(246, 1, {68: 1, 246: 1, 3: 1}, nc);
      _.D = function oc(b) {
        try {
          return this.a.kb(b);
        } catch (a) {
          a = OH(a);
          if (aw(a, 76)) {
            return false;
          } else if (aw(a, 119)) {
            return false;
          } else
            throw NH(a);
        }
      };
      _.t = function pc(a) {
        var b;
        if (aw(a, 246)) {
          b = Wv(a, 246);
          return this.a.t(b.a);
        }
        return false;
      };
      _.v = function qc() {
        return this.a.v();
      };
      _.w = function rc() {
        return "Predicates.in(" + this.a + ")";
      };
      var vw = Nkb(qyb, "Predicates/InPredicate", 246);
      hI(245, 1, {68: 1, 245: 1, 3: 1}, sc);
      _.D = function tc(a) {
        return rb(this.a, a);
      };
      _.t = function uc(a) {
        var b;
        if (aw(a, 245)) {
          b = Wv(a, 245);
          return rb(this.a, b.a);
        }
        return false;
      };
      _.v = function vc() {
        return vb(this.a);
      };
      _.w = function wc() {
        return "Predicates.equalTo(" + this.a + ")";
      };
      var ww = Nkb(qyb, "Predicates/IsEqualToPredicate", 245);
      hI(17, 1, {3: 1, 23: 1, 17: 1});
      _.F = function Bc(a) {
        return xc(this, Wv(a, 17));
      };
      _.t = function Dc(a) {
        return this === a;
      };
      _.v = function Ec() {
        return txb(this);
      };
      _.w = function Fc() {
        return zc(this);
      };
      _.e = 0;
      var IF = Nkb(kyb, "Enum", 17);
      hI(136, 17, vyb);
      var Hc, Ic, Jc, Kc;
      var Bw = Okb(qyb, "Predicates/ObjectPredicate", 136, IF, Nc);
      hI(591, 136, vyb, Oc);
      _.D = function Pc(a) {
        return true;
      };
      _.w = function Qc() {
        return "Predicates.alwaysTrue()";
      };
      var xw = Okb(qyb, "Predicates/ObjectPredicate/1", 591, Bw, null);
      hI(592, 136, vyb, Rc);
      _.D = function Sc(a) {
        return false;
      };
      _.w = function Tc() {
        return "Predicates.alwaysFalse()";
      };
      var yw = Okb(qyb, "Predicates/ObjectPredicate/2", 592, Bw, null);
      hI(593, 136, vyb, Uc);
      _.D = function Vc(a) {
        return a == null;
      };
      _.w = function Wc() {
        return "Predicates.isNull()";
      };
      var zw = Okb(qyb, "Predicates/ObjectPredicate/3", 593, Bw, null);
      hI(594, 136, vyb, Xc);
      _.D = function Yc(a) {
        return a != null;
      };
      _.w = function Zc() {
        return "Predicates.notNull()";
      };
      var Aw = Okb(qyb, "Predicates/ObjectPredicate/4", 594, Bw, null);
      hI(177, 669, {177: 1, 3: 1}, $c);
      _.t = function _c(a) {
        var b;
        if (aw(a, 177)) {
          b = Wv(a, 177);
          return rb(this.a, b.a);
        }
        return false;
      };
      _.v = function ad() {
        return 1502476572 + vb(this.a);
      };
      _.w = function bd() {
        return "Optional.of(" + this.a + ")";
      };
      _.A = function cd(a) {
        return new $c(ac(a.B(this.a), "the Function passed to Optional.transform() must not return null."));
      };
      var Cw = Nkb(qyb, "Present", 177);
      hI(108, 1, wyb);
      _.I = function ed() {
        dd();
      };
      var Xy = Nkb(xyb, "UnmodifiableIterator", 108);
      hI(651, 108, yyb);
      _.J = function fd(a) {
        throw new Hmb();
      };
      _.O = function gd(a) {
        throw new Hmb();
      };
      var Yy = Nkb(xyb, "UnmodifiableListIterator", 651);
      hI(378, 651, yyb);
      _.G = function hd() {
        return this.b < this.c;
      };
      _.K = function jd() {
        return this.b > 0;
      };
      _.H = function kd() {
        if (this.b >= this.c) {
          throw new nvb();
        }
        return Lk(this, this.b++);
      };
      _.L = function ld() {
        return this.b;
      };
      _.M = function md() {
        if (this.b <= 0) {
          throw new nvb();
        }
        return Lk(this, --this.b);
      };
      _.N = function nd() {
        return this.b - 1;
      };
      _.b = 0;
      _.c = 0;
      var Dw = Nkb(xyb, "AbstractIndexedListIterator", 378);
      hI(428, 108, wyb);
      _.G = function rd() {
        return od(this);
      };
      _.H = function sd() {
        return pd(this);
      };
      _.d = 1;
      var Ew = Nkb(xyb, "AbstractIterator", 428);
      hI(653, 1, {144: 1});
      _.P = function vd() {
        var a;
        return a = this.f, !a ? this.f = this.S() : a;
      };
      _.T = function wd() {
        return new Bf(this.P());
      };
      _.t = function xd(a) {
        return Mp(this, a);
      };
      _.v = function yd() {
        return this.P().v();
      };
      _.V = function zd() {
        return this.Y() == 0;
      };
      _.W = function Ad() {
        return ud(this);
      };
      _.w = function Bd() {
        return this.P().w();
      };
      var Xw = Nkb(xyb, "AbstractMultimap", 653);
      hI(294, 653, zyb);
      _.Q = function Nd() {
        Cd(this);
      };
      _.R = function Od(a) {
        return Qmb(this.b, a);
      };
      _.S = function Pd() {
        return new Ie(this, this.b);
      };
      _.T = function Qd() {
        return new If(this, this.b);
      };
      _.$ = function Rd() {
        return Id(this.Z());
      };
      _.U = function Sd(a) {
        return Dd(this, a);
      };
      _.X = function Td(a) {
        return Gd(this, a);
      };
      _.Y = function Ud() {
        return this.c;
      };
      _.c = 0;
      var Uw = Nkb(xyb, "AbstractMapBasedMultimap", 294);
      hI(600, 294, zyb);
      _.Z = function Xd() {
        return new HU(this.a);
      };
      _.$ = function Yd() {
        return Gi(), Gi(), Fi;
      };
      _.U = function $d(a) {
        return Wv(Dd(this, a), 20);
      };
      _.X = function _d(a) {
        return Wv(Gd(this, a), 20);
      };
      _.P = function Wd() {
        var a;
        return a = this.f, !a ? this.f = new Ie(this, this.b) : a;
      };
      _.t = function Zd(a) {
        return Mp(this, a);
      };
      var Fw = Nkb(xyb, "AbstractListMultimap", 600);
      hI(388, 1, Ayb);
      _.G = function ae() {
        return this.b.b || this.d.G();
      };
      _.H = function be() {
        var a;
        if (!this.d.G()) {
          a = pnb(this.b);
          a.yb();
          this.a = Wv(a.zb(), 19);
          this.d = this.a.mb();
        }
        return this.d.H();
      };
      _.I = function ce() {
        this.d.I();
        this.a.V() && qnb(this.b);
        --this.c.c;
      };
      var Kw = Nkb(xyb, "AbstractMapBasedMultimap/Itr", 388);
      hI(389, 388, Ayb, de);
      var Gw = Nkb(xyb, "AbstractMapBasedMultimap/1", 389);
      hI(638, 1, Byb);
      _.Q = function ke() {
        this.bb().Q();
      };
      _._ = function le(a) {
        return ee(this, a);
      };
      _.R = function me(a) {
        return !!ge(this, a, false);
      };
      _.ab = function ne(a) {
        var b, c, d;
        for (c = this.bb().mb(); c.G(); ) {
          b = Wv(c.H(), 21);
          d = b.zb();
          if (gw(a) === gw(d) || a != null && rb(a, d)) {
            return true;
          }
        }
        return false;
      };
      _.t = function oe(a) {
        return fe(this, a);
      };
      _.cb = function pe(a) {
        return re(ge(this, a, false));
      };
      _.v = function se() {
        return Apb(this.bb());
      };
      _.V = function te() {
        return this.Y() == 0;
      };
      _.W = function ue() {
        return new Snb(this);
      };
      _.db = function ve(a, b) {
        throw new Imb("Put not supported on this map");
      };
      _.eb = function we(a) {
        return re(ge(this, a, true));
      };
      _.Y = function xe() {
        return this.bb().Y();
      };
      _.w = function ye() {
        return ie(this);
      };
      _.fb = function ze() {
        return new aob(this);
      };
      var tG = Nkb(Cyb, "AbstractMap", 638);
      hI(654, 638, Byb);
      _.bb = function Ce() {
        return Ae(this);
      };
      _.W = function De() {
        var a;
        a = this.d;
        return !a ? this.d = new Bf(this) : a;
      };
      _.fb = function Ee() {
        return Be(this);
      };
      var ny = Nkb(xyb, "Maps/ViewCachingAbstractMap", 654);
      hI(262, 654, Byb, Ie);
      _.cb = function Ne(a) {
        return Fe(this, a);
      };
      _.eb = function Qe(a) {
        return Ge(this, a);
      };
      _.Q = function Je() {
        this.a == this.b.b ? Cd(this.b) : Ml(new xf(this));
      };
      _.R = function Ke(a) {
        return qp(this.a, a);
      };
      _.hb = function Le() {
        return new sf(this);
      };
      _.gb = function() {
        return this.hb();
      };
      _.t = function Me(a) {
        return this === a || fe(this.a, a);
      };
      _.v = function Oe() {
        return Apb(new inb(this.a));
      };
      _.W = function Pe() {
        return ud(this.b);
      };
      _.Y = function Re() {
        return Zmb(this.a);
      };
      _.w = function Se() {
        return ie(this.a);
      };
      var Jw = Nkb(xyb, "AbstractMapBasedMultimap/AsMap", 262);
      hI(640, 1, Dyb);
      _.ib = function $e(a) {
        return Te();
      };
      _.jb = function _e(a) {
        return Ue(this, a);
      };
      _.Q = function af() {
        We(this);
      };
      _.kb = function bf(a) {
        return Ve(this, a, false);
      };
      _.lb = function cf(a) {
        return Xe(this, a);
      };
      _.V = function df() {
        return this.Y() == 0;
      };
      _.nb = function ef(a) {
        return Ve(this, a, true);
      };
      _.ob = function ff() {
        return this.pb(xv(UF, syb, 1, this.Y(), 4, 1));
      };
      _.pb = function gf(a) {
        return Ye(this, a);
      };
      _.w = function hf() {
        return Ze(this);
      };
      var eG = Nkb(Cyb, "AbstractCollection", 640);
      hI(641, 640, Eyb);
      _.t = function kf(a) {
        return jf(this, a);
      };
      _.v = function lf() {
        return Apb(this);
      };
      var zG = Nkb(Cyb, "AbstractSet", 641);
      hI(649, 641, Eyb);
      var Jy = Nkb(xyb, "Sets/ImprovedAbstractSet", 649);
      hI(655, 649, Eyb);
      _.Q = function nf() {
        this.qb().Q();
      };
      _.kb = function of(a) {
        return mf(this, a);
      };
      _.V = function pf() {
        return this.qb().V();
      };
      _.nb = function qf(a) {
        var b;
        if (this.kb(a)) {
          b = Wv(a, 21);
          return this.qb().W().nb(b.yb());
        }
        return false;
      };
      _.Y = function rf() {
        return this.qb().Y();
      };
      var ky = Nkb(xyb, "Maps/EntrySet", 655);
      hI(387, 655, Eyb, sf);
      _.kb = function tf(a) {
        return Qh(new inb(this.a.a), a);
      };
      _.mb = function uf() {
        return new xf(this.a);
      };
      _.qb = function vf() {
        return this.a;
      };
      _.nb = function wf(a) {
        var b;
        if (!Qh(new inb(this.a.a), a)) {
          return false;
        }
        b = Wv(a, 21);
        Hd(this.a.b, b.yb());
        return true;
      };
      var Hw = Nkb(xyb, "AbstractMapBasedMultimap/AsMap/AsMapEntries", 387);
      hI(299, 1, Ayb, xf);
      _.H = function zf() {
        var a;
        return a = pnb(this.b), this.a = Wv(a.zb(), 19), He(this.c, a);
      };
      _.G = function yf() {
        return this.b.b;
      };
      _.I = function Af() {
        qnb(this.b);
        this.c.b.c -= this.a.Y();
        this.a.Q();
      };
      var Iw = Nkb(xyb, "AbstractMapBasedMultimap/AsMap/AsMapIterator", 299);
      hI(260, 649, Eyb, Bf);
      _.Q = function Cf() {
        this.b.Q();
      };
      _.kb = function Df(a) {
        return this.b.R(a);
      };
      _.V = function Ef() {
        return this.b.V();
      };
      _.mb = function Ff() {
        return mp(), Wl(this.b.bb().mb(), (xp(), vp));
      };
      _.nb = function Gf(a) {
        if (this.b.R(a)) {
          this.b.eb(a);
          return true;
        }
        return false;
      };
      _.Y = function Hf() {
        return this.b.Y();
      };
      var ly = Nkb(xyb, "Maps/KeySet", 260);
      hI(386, 260, Eyb, If);
      _.Q = function Jf() {
        var a;
        Ml((a = this.b.bb().mb(), new Pf(this, a)));
      };
      _.lb = function Kf(a) {
        return this.b.W().lb(a);
      };
      _.t = function Lf(a) {
        return this === a || this.b.W().t(a);
      };
      _.v = function Mf() {
        return this.b.W().v();
      };
      _.mb = function Nf() {
        var a;
        return a = this.b.bb().mb(), new Pf(this, a);
      };
      _.nb = function Of(a) {
        var b, c;
        c = 0;
        b = Wv(this.b.eb(a), 19);
        if (b) {
          c = b.Y();
          b.Q();
          this.a.c -= c;
        }
        return c > 0;
      };
      var Mw = Nkb(xyb, "AbstractMapBasedMultimap/KeySet", 386);
      hI(300, 1, Ayb, Pf);
      _.G = function Qf() {
        return this.c.G();
      };
      _.H = function Rf() {
        this.a = Wv(this.c.H(), 21);
        return this.a.yb();
      };
      _.I = function Sf() {
        var a;
        ec(!!this.a);
        a = Wv(this.a.zb(), 19);
        this.c.I();
        this.b.a.c -= a.Y();
        a.Q();
      };
      var Lw = Nkb(xyb, "AbstractMapBasedMultimap/KeySet/1", 300);
      hI(216, 640, Dyb, _f);
      _.ib = function ag(a) {
        return Tf(this, a);
      };
      _.jb = function bg(a) {
        return Uf(this, a);
      };
      _.Q = function cg() {
        Wf(this);
      };
      _.kb = function dg(a) {
        return Yf(this), this.d.kb(a);
      };
      _.lb = function eg(a) {
        return Yf(this), this.d.lb(a);
      };
      _.t = function fg(a) {
        return Xf(this, a);
      };
      _.v = function gg() {
        return Yf(this), this.d.v();
      };
      _.mb = function hg() {
        return Yf(this), new xg(this);
      };
      _.nb = function ig(a) {
        return Zf(this, a);
      };
      _.Y = function jg() {
        return Yf(this), this.d.Y();
      };
      _.w = function kg() {
        Yf(this);
        return xb(this.d);
      };
      var Pw = Nkb(xyb, "AbstractMapBasedMultimap/WrappedCollection", 216);
      var sH = Pkb(Cyb, "List");
      hI(297, 216, Fyb, mg);
      _.rb = function ng(a, b) {
        var c;
        Yf(this);
        c = this.d.V();
        Wv(this.d, 20).rb(a, b);
        ++this.a.c;
        c && Vf(this);
      };
      _.sb = function og(a) {
        Yf(this);
        return Wv(this.d, 20).sb(a);
      };
      _.tb = function pg() {
        Yf(this);
        return new Cg(this);
      };
      _.ub = function qg(a) {
        Yf(this);
        return new Dg(this, a);
      };
      _.vb = function rg(a) {
        var b;
        Yf(this);
        b = Wv(this.d, 20).vb(a);
        --this.a.c;
        $f(this);
        return b;
      };
      _.wb = function sg(a, b) {
        Yf(this);
        return Wv(this.d, 20).wb(a, b);
      };
      _.xb = function tg(a, b) {
        Yf(this);
        return Ld(this.a, this.e, Wv(this.d, 20).xb(a, b), !this.b ? this : this.b);
      };
      var Rw = Nkb(xyb, "AbstractMapBasedMultimap/WrappedList", 297);
      hI(385, 297, Gyb, ug);
      var Nw = Nkb(xyb, "AbstractMapBasedMultimap/RandomAccessWrappedList", 385);
      hI(189, 1, Ayb, xg);
      _.G = function zg() {
        return wg(this), this.b.G();
      };
      _.H = function Ag() {
        return wg(this), this.b.H();
      };
      _.I = function Bg() {
        this.b.I();
        --this.d.f.c;
        $f(this.d);
      };
      var Ow = Nkb(xyb, "AbstractMapBasedMultimap/WrappedCollection/WrappedIterator", 189);
      hI(298, 189, Hyb, Cg, Dg);
      _.J = function Eg(a) {
        var b;
        b = lg(this.a) == 0;
        (wg(this), Wv(this.b, 96)).J(a);
        ++this.a.a.c;
        b && Vf(this.a);
      };
      _.K = function Fg() {
        return (wg(this), Wv(this.b, 96)).K();
      };
      _.L = function Gg() {
        return (wg(this), Wv(this.b, 96)).L();
      };
      _.M = function Hg() {
        return (wg(this), Wv(this.b, 96)).M();
      };
      _.N = function Ig() {
        return (wg(this), Wv(this.b, 96)).N();
      };
      _.O = function Jg(a) {
        (wg(this), Wv(this.b, 96)).O(a);
      };
      var Qw = Nkb(xyb, "AbstractMapBasedMultimap/WrappedList/WrappedListIterator", 298);
      hI(295, 216, Eyb, Kg);
      var Sw = Nkb(xyb, "AbstractMapBasedMultimap/WrappedSet", 295);
      hI(296, 216, Iyb, Lg);
      var Tw = Nkb(xyb, "AbstractMapBasedMultimap/WrappedSortedSet", 296);
      hI(668, 1, Jyb);
      _.t = function Mg(a) {
        var b;
        if (aw(a, 21)) {
          b = Wv(a, 21);
          return Tb(this.yb(), b.yb()) && Tb(this.zb(), b.zb());
        }
        return false;
      };
      _.v = function Ng() {
        var a, b;
        a = this.yb();
        b = this.zb();
        return (a == null ? 0 : vb(a)) ^ (b == null ? 0 : vb(b));
      };
      _.Ab = function Og(a) {
        throw new Hmb();
      };
      _.w = function Pg() {
        return this.yb() + "=" + this.zb();
      };
      var Vw = Nkb(xyb, Kyb, 668);
      hI(390, 640, Dyb, Qg);
      _.Q = function Rg() {
        Cd(this.a);
      };
      _.kb = function Sg(a) {
        return td(this.a, a);
      };
      _.mb = function Tg() {
        return new de(this.a);
      };
      _.Y = function Ug() {
        return this.a.c;
      };
      var Ww = Nkb(xyb, "AbstractMultimap/Values", 390);
      hI(656, 640, Lyb);
      _.ib = function Wg(a) {
        return this.Bb(a, 1), true;
      };
      _.Bb = function Xg(a, b) {
        throw new Hmb();
      };
      _.jb = function Yg(a) {
        return Eq(this, a);
      };
      _.Q = function Zg() {
        Ml(this.Eb());
      };
      _.kb = function $g(a) {
        return this.Cb(a) > 0;
      };
      _.Cb = function _g(a) {
        var b, c;
        for (c = Vg(this).mb(); c.G(); ) {
          b = Wv(c.H(), 83);
          if (Tb(b.Zb(), a)) {
            return b.Yb();
          }
        }
        return 0;
      };
      _.gb = function ah() {
        return new qh(this);
      };
      _.bb = function bh() {
        return Vg(this);
      };
      _.t = function dh(a) {
        return Fq(this, a);
      };
      _.v = function eh() {
        return Vg(this).v();
      };
      _.V = function fh() {
        return Vg(this).V();
      };
      _.mb = function gh() {
        return Dq(), new Oq(this, Vg(this).mb());
      };
      _.nb = function hh(a) {
        return this.Fb(a, 1) > 0;
      };
      _.Fb = function ih(a, b) {
        throw new Hmb();
      };
      _.Gb = function jh(a, b) {
        var c, d;
        return Dq(), Mh(b, "count"), c = this.Cb(a), d = b - c, d > 0 ? this.Bb(a, d) : d < 0 && this.Fb(a, -d), c;
      };
      _.Hb = function kh(a, b, c) {
        return Gq(this, a, b, c);
      };
      _.Y = function lh() {
        return Hq(this);
      };
      _.w = function mh() {
        return xb(Vg(this));
      };
      var Zw = Nkb(xyb, "AbstractMultiset", 656);
      hI(657, 649, Eyb);
      _.Q = function nh() {
        this.Ib().Q();
      };
      _.kb = function oh(a) {
        var b, c;
        if (aw(a, 83)) {
          c = Wv(a, 83);
          if (c.Yb() <= 0) {
            return false;
          }
          b = this.Ib().Cb(c.Zb());
          return b == c.Yb();
        }
        return false;
      };
      _.nb = function ph(a) {
        var b, c, d, e;
        if (aw(a, 83)) {
          c = Wv(a, 83);
          b = c.Zb();
          d = c.Yb();
          if (d != 0) {
            e = this.Ib();
            return e.Hb(b, d, 0);
          }
        }
        return false;
      };
      var xy = Nkb(xyb, "Multisets/EntrySet", 657);
      hI(396, 657, Eyb, qh);
      _.mb = function rh() {
        return this.a.Eb();
      };
      _.Ib = function sh() {
        return this.a;
      };
      _.Y = function th() {
        return this.a.Db();
      };
      var Yw = Nkb(xyb, "AbstractMultiset/EntrySet", 396);
      hI(384, 294, zyb);
      _.Z = function wh() {
        return new wtb(op(this.a));
      };
      _.$ = function xh() {
        return hi(), kr(), jr;
      };
      _.U = function zh(a) {
        return Wv(Dd(this, a), 18);
      };
      _.X = function Ah(a) {
        return Wv(Gd(this, a), 18);
      };
      _.P = function vh() {
        var a;
        return a = this.f, !a ? this.f = new Ie(this, this.b) : a;
      };
      _.t = function yh(a) {
        return Mp(this, a);
      };
      var $w = Nkb(xyb, "AbstractSetMultimap", 384);
      hI(342, 656, Lyb);
      var _w = Nkb(xyb, "AbstractSortedMultiset", 342);
      hI(280, 600, zyb, Dh);
      _.a = 0;
      var ax = Nkb(xyb, "ArrayListMultimap", 280);
      hI(159, 17, Myb);
      var Eh, Fh;
      var dx = Okb(xyb, "BoundType", 159, IF, Ih);
      hI(623, 159, Myb, Jh);
      var bx = Okb(xyb, "BoundType/1", 623, dx, null);
      hI(624, 159, Myb, Kh);
      var cx = Okb(xyb, "BoundType/2", 624, dx, null);
      var Nh;
      hI(234, 1, Oyb);
      _.w = function Th() {
        return Vl(this.c.mb());
      };
      var fx = Nkb(xyb, "FluentIterable", 234);
      hI(170, 234, Oyb, Vh);
      _.mb = function Wh() {
        return Uh(this);
      };
      var ex = Nkb(xyb, "FluentIterable/2", 170);
      hI(664, 1, {});
      _.w = function Xh() {
        return xb(irb(this.a.d).b);
      };
      var mx = Nkb(xyb, "ForwardingObject", 664);
      hI(665, 664, Dyb);
      _.ib = function Yh(a) {
        return irb(this.a.d), vqb();
      };
      _.jb = function Zh(a) {
        return irb(this.a.d), wqb();
      };
      _.Q = function $h() {
        irb(this.a.d);
        xqb();
      };
      _.kb = function _h(a) {
        return Irb(irb(this.a.d), a);
      };
      _.lb = function ai(a) {
        return Jrb(irb(this.a.d), a);
      };
      _.V = function bi() {
        return irb(this.a.d).b.V();
      };
      _.mb = function ci() {
        var a;
        return a = irb(this.a.d).b.mb(), new Trb(a);
      };
      _.nb = function di(a) {
        return irb(this.a.d), yqb();
      };
      _.Y = function ei() {
        return irb(this.a.d).b.Y();
      };
      _.ob = function fi() {
        return Krb(irb(this.a.d));
      };
      _.pb = function gi(a) {
        return Lrb(irb(this.a.d), a);
      };
      var gx = Nkb(xyb, "ForwardingCollection", 665);
      hI(660, 640, Pyb);
      _.mb = function ti() {
        return this.Kb();
      };
      _.ib = function oi(a) {
        return ii();
      };
      _.jb = function pi(a) {
        return ji();
      };
      _.Q = function qi() {
        li();
      };
      _.kb = function ri(a) {
        return a != null && Ve(this, a, false);
      };
      _.Jb = function si() {
        switch (this.Y()) {
          case 0:
            return Gi(), Gi(), Fi;
          case 1:
            return Gi(), new Er(this.Kb().H());
          default:
            return new Zq(this, this.ob());
        }
      };
      _.nb = function ui(a) {
        return mi();
      };
      var sx = Nkb(xyb, "ImmutableCollection", 660);
      hI(316, 660, Pyb, vi);
      _.mb = function Ai() {
        return Xl(this.a.mb());
      };
      _.kb = function wi(a) {
        return a != null && this.a.kb(a);
      };
      _.lb = function xi(a) {
        return this.a.lb(a);
      };
      _.V = function yi() {
        return this.a.V();
      };
      _.Kb = function zi() {
        return Xl(this.a.mb());
      };
      _.Y = function Bi() {
        return this.a.Y();
      };
      _.ob = function Ci() {
        return this.a.ob();
      };
      _.pb = function Di(a) {
        return this.a.pb(a);
      };
      _.w = function Ei() {
        return xb(this.a);
      };
      var hx = Nkb(xyb, "ForwardingImmutableCollection", 316);
      hI(87, 660, Qyb);
      _.mb = function Pi() {
        return this.Kb();
      };
      _.tb = function Qi() {
        return this.Lb(0);
      };
      _.ub = function Si(a) {
        return this.Lb(a);
      };
      _.xb = function Xi(a, b) {
        return this.Mb(a, b);
      };
      _.rb = function Ji(a, b) {
        throw new Hmb();
      };
      _.t = function Mi(a) {
        return yo(this, a);
      };
      _.v = function Ni() {
        return zo(this);
      };
      _.Kb = function Oi() {
        return this.Lb(0);
      };
      _.Lb = function Ri(a) {
        return Hi(this, a);
      };
      _.vb = function Ui(a) {
        throw new Hmb();
      };
      _.wb = function Vi(a, b) {
        throw new Hmb();
      };
      _.Mb = function Wi(a, b) {
        var c;
        return Yi((c = new Mo(this), new Mnb(c, a, b)));
      };
      var Fi;
      var wx = Nkb(xyb, "ImmutableList", 87);
      hI(667, 87, Qyb);
      _.mb = function gj() {
        return Xl(this.Nb().mb());
      };
      _.xb = function jj(a, b) {
        return Yi(this.Nb().xb(a, b));
      };
      _.kb = function _i(a) {
        return Zi(this, a);
      };
      _.lb = function aj(a) {
        return this.Nb().lb(a);
      };
      _.t = function bj(a) {
        return this.Nb().t(a);
      };
      _.sb = function cj(a) {
        return $i(this, a);
      };
      _.v = function dj() {
        return this.Nb().v();
      };
      _.V = function ej() {
        return this.Nb().V();
      };
      _.Kb = function fj() {
        return Xl(this.Nb().mb());
      };
      _.Y = function hj() {
        return this.Nb().Y();
      };
      _.Mb = function ij(a, b) {
        return Yi(this.Nb().xb(a, b));
      };
      _.ob = function kj() {
        return this.Nb().pb(xv(UF, syb, 1, this.Nb().Y(), 4, 1));
      };
      _.pb = function lj(a) {
        return this.Nb().pb(a);
      };
      _.w = function mj() {
        return xb(this.Nb());
      };
      var ix = Nkb(xyb, "ForwardingImmutableList", 667);
      hI(524, 1, Ryb);
      _.bb = function wj() {
        return nj(this);
      };
      _.W = function Aj() {
        return oj(this);
      };
      _.fb = function Gj() {
        return this.Rb();
      };
      _.Q = function qj() {
        throw new Hmb();
      };
      _.R = function rj(a) {
        return this.cb(a) != null;
      };
      _.ab = function sj(a) {
        return this.Rb().kb(a);
      };
      _.Pb = function uj() {
        return new Uk(this);
      };
      _.Qb = function vj() {
        return new Zk(this);
      };
      _.t = function xj(a) {
        return pp(this, a);
      };
      _.v = function yj() {
        return nj(this).v();
      };
      _.V = function zj() {
        return this.Y() == 0;
      };
      _.db = function Cj(a, b) {
        return pj();
      };
      _.eb = function Dj(a) {
        throw new Hmb();
      };
      _.w = function Ej() {
        var a;
        return mp(), a = umb(Ph(this.Y()), 123), Qb(lp, a, nj(this).mb()), a.a += "}", a.a;
      };
      _.Rb = function Fj() {
        if (this.g) {
          return this.g;
        }
        return this.g = this.Qb();
      };
      _.e = null;
      _.f = null;
      _.g = null;
      var Cx = Nkb(xyb, "ImmutableMap", 524);
      hI(320, 524, Ryb);
      _.R = function Ij(a) {
        return qp(this.d, a);
      };
      _.ab = function Jj(a) {
        return hrb(this.d, a);
      };
      _.Ob = function Kj() {
        return ck(new Vj(this));
      };
      _.Pb = function Lj() {
        return ck(krb(this.d));
      };
      _.Qb = function Mj() {
        return hi(), new vi(lrb(this.d));
      };
      _.t = function Nj(a) {
        return jrb(this.d, a);
      };
      _.cb = function Oj(a) {
        return a == null ? null : rp(this.d, a);
      };
      _.v = function Pj() {
        return this.d.c.v();
      };
      _.V = function Qj() {
        return this.d.c.V();
      };
      _.Y = function Rj() {
        return this.d.c.Y();
      };
      _.w = function Sj() {
        return xb(this.d.c);
      };
      var kx = Nkb(xyb, "ForwardingImmutableMap", 320);
      hI(666, 665, Eyb);
      _.t = function Tj(a) {
        return a === this || Drb(irb(this.a.d), a);
      };
      _.v = function Uj() {
        return irb(this.a.d).b.v();
      };
      var nx = Nkb(xyb, "ForwardingSet", 666);
      hI(523, 666, Eyb, Vj);
      _.kb = function Wj(b) {
        if (aw(b, 21) && Wv(b, 21).yb() == null) {
          return false;
        }
        try {
          return Irb(irb(this.a.d), b);
        } catch (a) {
          a = OH(a);
          if (aw(a, 119)) {
            return false;
          } else
            throw NH(a);
        }
      };
      _.pb = function Xj(a) {
        var b;
        b = Lrb(irb(this.a.d), a);
        irb(this.a.d).b.Y() < b.length && Av(b, irb(this.a.d).b.Y(), null);
        return b;
      };
      var jx = Nkb(xyb, "ForwardingImmutableMap/1", 523);
      hI(663, 660, Syb);
      _.mb = function ak() {
        return this.Kb();
      };
      _.t = function $j(a) {
        return mr(this, a);
      };
      _.v = function _j() {
        return nr(this);
      };
      var Fx = Nkb(xyb, "ImmutableSet", 663);
      hI(315, 663, Syb);
      _.mb = function jk() {
        return Xl(new Nqb(this.a.b.mb()));
      };
      _.kb = function ek(a) {
        return a != null && Brb(this.a, a);
      };
      _.lb = function fk(a) {
        return Crb(this.a, a);
      };
      _.v = function gk() {
        return this.a.b.v();
      };
      _.V = function hk() {
        return this.a.b.V();
      };
      _.Kb = function ik() {
        return Xl(new Nqb(this.a.b.mb()));
      };
      _.Y = function kk() {
        return this.a.b.Y();
      };
      _.ob = function lk() {
        return this.a.b.ob();
      };
      _.pb = function mk(a) {
        return Erb(this.a, a);
      };
      _.w = function nk() {
        return xb(this.a.b);
      };
      var lx = Nkb(xyb, "ForwardingImmutableSet", 315);
      hI(178, 1, {178: 1, 3: 1}, sk);
      _.t = function tk(a) {
        var b;
        if (aw(a, 178)) {
          b = Wv(a, 178);
          return this.a.t(b.a) && this.b == b.b && this.c == b.c && this.d == b.d && this.f == b.f && Tb(this.e, b.e) && Tb(this.g, b.g);
        }
        return false;
      };
      _.v = function uk() {
        return fpb(Bv(tv(UF, 1), syb, 1, 4, [this.a, this.e, this.d, this.g, this.f]));
      };
      _.w = function vk() {
        return umb(xmb(umb(xmb(umb(ymb(xmb(new zmb(), this.a), ":"), this.d == (Gh(), Eh) ? 91 : 40), this.b ? this.e : "-\u221E"), 44), this.c ? this.g : "\u221E"), this.f == Eh ? 93 : 41).a;
      };
      _.b = false;
      _.c = false;
      var ox = Nkb(xyb, "GeneralRange", 178);
      hI(215, 384, zyb, xk);
      _.a = 2;
      var px = Nkb(xyb, "HashMultimap", 215);
      hI(661, 87, Qyb);
      _.kb = function yk(a) {
        return this.Sb().kb(a);
      };
      _.V = function zk() {
        return this.Sb().V();
      };
      _.Y = function Ak() {
        return this.Sb().Y();
      };
      var qx = Nkb(xyb, "ImmutableAsList", 661);
      hI(275, 320, Ryb);
      _.Rb = function Ck() {
        return this.Ub();
      };
      _.fb = function Ek() {
        return this.Ub();
      };
      _.Ub = function Dk() {
        return oj(this.Tb());
      };
      var rx = Nkb(xyb, "ImmutableBiMap", 275);
      hI(341, 668, {3: 1, 21: 1}, Fk);
      _.yb = function Gk() {
        return this.a;
      };
      _.zb = function Hk() {
        return this.b;
      };
      _.Ab = function Ik(a) {
        throw new Hmb();
      };
      var tx = Nkb(xyb, "ImmutableEntry", 341);
      hI(436, 315, Syb, Jk);
      var ux = Nkb(xyb, "ImmutableEnumSet", 436);
      hI(379, 378, yyb, Mk);
      var vx = Nkb(xyb, "ImmutableList/1", 379);
      hI(266, 108, wyb, Nk);
      _.G = function Ok() {
        return this.a.G();
      };
      _.H = function Pk() {
        return Wv(this.a.H(), 21).yb();
      };
      var xx = Nkb(xyb, "ImmutableMap/1", 266);
      hI(670, 663, Syb);
      _.mb = function Sk() {
        var a;
        return a = nj(this.a).Kb(), new Nk(a);
      };
      _.Jb = function Qk() {
        return new jl(this);
      };
      _.Kb = function Rk() {
        var a;
        return (a = this.c, !a ? this.c = new jl(this) : a).Kb();
      };
      var Ex = Nkb(xyb, "ImmutableSet/Indexed", 670);
      hI(606, 670, Syb, Uk);
      _.mb = function Xk() {
        var a;
        return a = nj(this.a).Kb(), new Nk(a);
      };
      _.kb = function Vk(a) {
        return this.a.R(a);
      };
      _.Kb = function Wk() {
        var a;
        return a = nj(this.a).Kb(), new Nk(a);
      };
      _.Y = function Yk() {
        return this.a.Y();
      };
      var yx = Nkb(xyb, "ImmutableMapKeySet", 606);
      hI(604, 660, Pyb, Zk);
      _.mb = function bl() {
        return new dl(this);
      };
      _.kb = function $k(a) {
        return a != null && (Il(), Il(), Tl(new dl(this), (hc(), a == null ? (Lc(), Jc) : new sc(a))) != -1);
      };
      _.Jb = function _k() {
        var a;
        a = ki(nj(this.a));
        return new gl(this, a);
      };
      _.Kb = function al() {
        return new dl(this);
      };
      _.Y = function cl() {
        return this.a.Y();
      };
      var Bx = Nkb(xyb, "ImmutableMapValues", 604);
      hI(282, 108, wyb, dl);
      _.G = function el() {
        return this.a.G();
      };
      _.H = function fl() {
        return Wv(this.a.H(), 21).zb();
      };
      var zx = Nkb(xyb, "ImmutableMapValues/1", 282);
      hI(605, 661, Qyb, gl);
      _.Sb = function hl() {
        return this.a;
      };
      _.sb = function il(a) {
        return Wv(this.b.sb(a), 21).zb();
      };
      var Ax = Nkb(xyb, "ImmutableMapValues/2", 605);
      hI(311, 661, Qyb, jl);
      _.Sb = function kl() {
        return this.a;
      };
      _.sb = function ll(a) {
        return Tk(this.a, a);
      };
      var Dx = Nkb(xyb, "ImmutableSet/Indexed/1", 311);
      hI(414, 234, Oyb, vl);
      _.mb = function wl() {
        return Nl(this.a);
      };
      _.w = function xl() {
        return Ze(this.a) + " (cycled)";
      };
      var Hx = Nkb(xyb, "Iterables/1", 414);
      hI(105, 1, Tyb, yl);
      _.B = function zl(a) {
        return Wv(a, 22).mb();
      };
      var Gx = Nkb(xyb, "Iterables/12", 105);
      hI(415, 234, Oyb, Bl);
      _.mb = function Cl() {
        return Al(this);
      };
      var Ix = Nkb(xyb, "Iterables/4", 415);
      hI(416, 234, Oyb, El);
      _.mb = function Fl() {
        return Dl(this);
      };
      var Jx = Nkb(xyb, "Iterables/5", 416);
      var Gl, Hl;
      hI(424, 651, yyb, Yl);
      _.G = function Zl() {
        return false;
      };
      _.K = function $l() {
        return false;
      };
      _.H = function _l() {
        throw new nvb();
      };
      _.L = function am() {
        return 0;
      };
      _.M = function bm() {
        throw new nvb();
      };
      _.N = function cm() {
        return -1;
      };
      var Lx = Nkb(xyb, "Iterators/1", 424);
      hI(264, 108, wyb, dm);
      _.G = function em() {
        return !this.a;
      };
      _.H = function fm() {
        if (this.a) {
          throw new nvb();
        }
        this.a = true;
        return this.b;
      };
      _.a = false;
      var Kx = Nkb(xyb, "Iterators/11", 264);
      hI(425, 1, Ayb, gm);
      _.G = function hm() {
        return false;
      };
      _.H = function im() {
        throw new nvb();
      };
      _.I = function jm() {
        ec(false);
      };
      var Mx = Nkb(xyb, "Iterators/2", 425);
      hI(426, 108, wyb, km);
      _.G = function lm() {
        return this.a.G();
      };
      _.H = function mm() {
        return this.a.H();
      };
      var Nx = Nkb(xyb, "Iterators/3", 426);
      hI(427, 1, Ayb, om);
      _.G = function pm() {
        return this.a.G() || this.b.mb().G();
      };
      _.H = function qm() {
        return nm(this);
      };
      _.I = function rm() {
        this.a.I();
      };
      var Ox = Nkb(xyb, "Iterators/4", 427);
      hI(429, 428, wyb, tm);
      var Px = Nkb(xyb, "Iterators/6", 429);
      hI(261, 1, Ayb);
      _.G = function wm() {
        return this.b.G();
      };
      _.H = function xm() {
        return um(this);
      };
      _.I = function ym() {
        this.b.I();
      };
      var Oy = Nkb(xyb, "TransformedIterator", 261);
      hI(430, 261, Ayb, Am);
      _.Vb = function Bm(a) {
        return zm(this, a);
      };
      var Qx = Nkb(xyb, "Iterators/7", 430);
      hI(313, 1, Ayb);
      _.G = function Fm() {
        return Cm(this);
      };
      _.H = function Gm() {
        return Dm(this);
      };
      _.I = function Hm() {
        ec(!!this.c);
        this.c.I();
        this.c = null;
      };
      var Ay = Nkb(xyb, "MultitransformedIterator", 313);
      hI(90, 313, {90: 1, 35: 1}, Im);
      _.Wb = function Jm(a) {
        return Wv(a, 35);
      };
      var Sx = Nkb(xyb, "Iterators/ConcatenatedIterator", 90);
      hI(314, 313, Ayb, Lm);
      _.Wb = function Mm(a) {
        return Km(Wv(a, 35));
      };
      var Rx = Nkb(xyb, "Iterators/ConcatenatedIterator/1", 314);
      hI(329, 653, zyb, Um);
      _.U = function $m(a) {
        return new Bn(this, a);
      };
      _.X = function an(a) {
        return Sm(this, a);
      };
      _.Q = function Wm() {
        Pm(this);
      };
      _.R = function Xm(a) {
        return Qm(this, a);
      };
      _.S = function Ym() {
        return new Pp(this);
      };
      _.T = function Zm() {
        return new Hn(this);
      };
      _.V = function _m() {
        return !this.a;
      };
      _.Y = function bn() {
        return this.d;
      };
      _.c = 0;
      _.d = 0;
      var _x = Nkb(xyb, "LinkedListMultimap", 329);
      hI(647, 640, Fyb);
      _.rb = function en(a, b) {
        throw new Imb("Add not supported on this list");
      };
      _.ib = function fn(a) {
        this.rb(this.Y(), a);
        return true;
      };
      _.Q = function gn() {
        this.Xb(0, this.Y());
      };
      _.t = function hn(a) {
        return cn(this, a);
      };
      _.v = function jn() {
        return Bpb(this);
      };
      _.mb = function kn() {
        return new wnb(this);
      };
      _.tb = function ln() {
        return this.ub(0);
      };
      _.ub = function mn(a) {
        return new Fnb(this, a);
      };
      _.vb = function nn(a) {
        throw new Imb("Remove not supported on this list");
      };
      _.Xb = function on(a, b) {
        var c, d;
        d = this.ub(a);
        for (c = a; c < b; ++c) {
          d.H();
          d.I();
        }
      };
      _.wb = function pn(a, b) {
        throw new Imb("Set not supported on this list");
      };
      _.xb = function qn(a, b) {
        return new Mnb(this, a, b);
      };
      _.d = 0;
      var lG = Nkb(Cyb, "AbstractList", 647);
      hI(648, 647, Fyb);
      _.rb = function vn(a, b) {
        rn(this, a, b);
      };
      _.sb = function wn(a) {
        return tn(this, a);
      };
      _.mb = function xn() {
        return this.ub(0);
      };
      _.vb = function yn(a) {
        return un(this, a);
      };
      _.wb = function zn(b, c) {
        var d, e;
        d = this.ub(b);
        try {
          e = d.H();
          d.O(c);
          return e;
        } catch (a) {
          a = OH(a);
          if (aw(a, 74)) {
            throw new okb("Can't set element " + b);
          } else
            throw NH(a);
        }
      };
      var yG = Nkb(Cyb, "AbstractSequentialList", 648);
      hI(276, 648, Fyb, Bn);
      _.ub = function Cn(a) {
        return An(this, a);
      };
      _.Y = function Dn() {
        var a;
        a = Wv(Smb(this.a.b, this.b), 126);
        return !a ? 0 : a.a;
      };
      var Vx = Nkb(xyb, "LinkedListMultimap/1", 276);
      hI(330, 648, Fyb, En);
      _.ub = function Fn(a) {
        return new _n(this.a, a);
      };
      _.Y = function Gn() {
        return this.a.d;
      };
      var Tx = Nkb(xyb, "LinkedListMultimap/1EntriesImpl", 330);
      hI(563, 649, Eyb, Hn);
      _.kb = function In(a) {
        return Qm(this.a, a);
      };
      _.mb = function Jn() {
        return new Nn(this.a);
      };
      _.nb = function Kn(a) {
        return !Sm(this.a, a).a.V();
      };
      _.Y = function Ln() {
        return Zmb(this.a.b);
      };
      var Ux = Nkb(xyb, "LinkedListMultimap/1KeySetImpl", 563);
      hI(562, 1, Ayb, Nn);
      _.G = function On() {
        Mn(this);
        return !!this.c;
      };
      _.H = function Pn() {
        Mn(this);
        Vm(this.c);
        this.a = this.c;
        stb(this.d, this.a.a);
        do {
          this.c = this.c.b;
        } while (!!this.c && !stb(this.d, this.c.a));
        return this.a.a;
      };
      _.I = function Qn() {
        Mn(this);
        ec(!!this.a);
        Ml(new mo(this.e, this.a.a));
        this.a = null;
        this.b = this.e.c;
      };
      _.b = 0;
      var Wx = Nkb(xyb, "LinkedListMultimap/DistinctKeyIterator", 562);
      hI(126, 1, {126: 1}, Rn);
      _.a = 0;
      var Xx = Nkb(xyb, "LinkedListMultimap/KeyList", 126);
      hI(560, 668, Jyb, Sn);
      _.yb = function Tn() {
        return this.a;
      };
      _.zb = function Un() {
        return this.f;
      };
      _.Ab = function Vn(a) {
        var b;
        b = this.f;
        this.f = a;
        return b;
      };
      var Zx = Nkb(xyb, "LinkedListMultimap/Node", 560);
      hI(561, 1, Hyb, _n);
      _.J = function ao(a) {
        Wv(a, 21);
        Wn();
      };
      _.H = function eo() {
        return Yn(this);
      };
      _.M = function go() {
        return Zn(this);
      };
      _.O = function jo(a) {
        Wv(a, 21);
        $n();
      };
      _.G = function bo() {
        Xn(this);
        return !!this.c;
      };
      _.K = function co() {
        Xn(this);
        return !!this.e;
      };
      _.L = function fo() {
        return this.d;
      };
      _.N = function ho() {
        return this.d - 1;
      };
      _.I = function io() {
        Xn(this);
        ec(!!this.a);
        if (this.a != this.c) {
          this.e = this.a.d;
          --this.d;
        } else {
          this.c = this.a.b;
        }
        Tm(this.f, this.a);
        this.a = null;
        this.b = this.f.c;
      };
      _.b = 0;
      _.d = 0;
      var Yx = Nkb(xyb, "LinkedListMultimap/NodeIterator", 561);
      hI(241, 1, Hyb, mo, no);
      _.J = function oo(a) {
        this.e = Nm(this.f, this.b, a, this.c);
        ++this.d;
        this.a = null;
      };
      _.G = function po() {
        return !!this.c;
      };
      _.K = function qo() {
        return !!this.e;
      };
      _.H = function ro() {
        return ko(this);
      };
      _.L = function so() {
        return this.d;
      };
      _.M = function to() {
        return lo(this);
      };
      _.N = function uo() {
        return this.d - 1;
      };
      _.I = function vo() {
        ec(!!this.a);
        if (this.a != this.c) {
          this.e = this.a.e;
          --this.d;
        } else {
          this.c = this.a.c;
        }
        Tm(this.f, this.a);
        this.a = null;
      };
      _.O = function wo(a) {
        dc(!!this.a);
        this.a.f = a;
      };
      _.d = 0;
      var $x = Nkb(xyb, "LinkedListMultimap/ValueForKeyIterator", 241);
      hI(419, 647, Fyb);
      _.rb = function Go(a, b) {
        this.a.rb(a, b);
      };
      _.kb = function Ho(a) {
        return this.a.kb(a);
      };
      _.sb = function Io(a) {
        return this.a.sb(a);
      };
      _.vb = function Jo(a) {
        return this.a.vb(a);
      };
      _.wb = function Ko(a, b) {
        return this.a.wb(a, b);
      };
      _.Y = function Lo() {
        return this.a.Y();
      };
      var by = Nkb(xyb, "Lists/AbstractListWrapper", 419);
      hI(420, 419, Gyb);
      var cy = Nkb(xyb, "Lists/RandomAccessListWrapper", 420);
      hI(422, 420, Gyb, Mo);
      _.ub = function No(a) {
        return this.a.ub(a);
      };
      var ay = Nkb(xyb, "Lists/1", 422);
      hI(88, 647, {88: 1, 22: 1, 19: 1, 20: 1}, Ro);
      _.rb = function So(a, b) {
        this.a.rb(Qo(this, a), b);
      };
      _.Q = function To() {
        this.a.Q();
      };
      _.sb = function Uo(a) {
        return this.a.sb(Po(this, a));
      };
      _.mb = function Vo() {
        return Oo(this, 0);
      };
      _.ub = function Wo(a) {
        return Oo(this, a);
      };
      _.vb = function Xo(a) {
        return this.a.vb(Po(this, a));
      };
      _.Xb = function Yo(a, b) {
        (cc(a, b, this.a.Y()), Fo(this.a.xb(Qo(this, b), Qo(this, a)))).Q();
      };
      _.wb = function Zo(a, b) {
        return this.a.wb(Po(this, a), b);
      };
      _.Y = function $o() {
        return this.a.Y();
      };
      _.xb = function _o(a, b) {
        return cc(a, b, this.a.Y()), Fo(this.a.xb(Qo(this, b), Qo(this, a)));
      };
      var fy = Nkb(xyb, "Lists/ReverseList", 88);
      hI(220, 88, {88: 1, 22: 1, 19: 1, 20: 1, 63: 1}, ap);
      var dy = Nkb(xyb, "Lists/RandomAccessReverseList", 220);
      hI(421, 1, Hyb, bp);
      _.J = function cp(a) {
        this.c.J(a);
        this.c.M();
        this.a = false;
      };
      _.G = function dp() {
        return this.c.K();
      };
      _.K = function ep() {
        return this.c.G();
      };
      _.H = function fp() {
        if (!this.c.K()) {
          throw new nvb();
        }
        this.a = true;
        return this.c.M();
      };
      _.L = function gp() {
        return Qo(this.b, this.c.L());
      };
      _.M = function hp() {
        if (!this.c.G()) {
          throw new nvb();
        }
        this.a = true;
        return this.c.H();
      };
      _.N = function ip() {
        return Qo(this.b, this.c.L()) - 1;
      };
      _.I = function jp() {
        ec(this.a);
        this.c.I();
        this.a = false;
      };
      _.O = function kp(a) {
        dc(this.a);
        this.c.O(a);
      };
      _.a = false;
      var ey = Nkb(xyb, "Lists/ReverseList/1", 421);
      var lp;
      hI(376, 261, Ayb, tp);
      _.Vb = function up(a) {
        return mp(), new Fk(a, aq(this.a, a));
      };
      var gy = Nkb(xyb, "Maps/1", 376);
      hI(188, 17, Wyb);
      var vp, wp;
      var jy = Okb(xyb, "Maps/EntryFunction", 188, IF, zp);
      hI(374, 188, Wyb, Ap);
      _.B = function Bp(a) {
        return Wv(a, 21).yb();
      };
      var hy = Okb(xyb, "Maps/EntryFunction/1", 374, jy, null);
      hI(375, 188, Wyb, Cp);
      _.B = function Dp(a) {
        return Wv(a, 21).zb();
      };
      var iy = Okb(xyb, "Maps/EntryFunction/2", 375, jy, null);
      hI(373, 640, Dyb, Fp);
      _.Q = function Gp() {
        this.a.Q();
      };
      _.kb = function Hp(a) {
        return this.a.ab(a);
      };
      _.V = function Ip() {
        return this.a.V();
      };
      _.mb = function Jp() {
        return Ep(this);
      };
      _.nb = function Kp(b) {
        var c, d;
        try {
          return Ve(this, b, true);
        } catch (a) {
          a = OH(a);
          if (aw(a, 45)) {
            for (d = this.a.bb().mb(); d.G(); ) {
              c = Wv(d.H(), 21);
              if (Tb(b, c.zb())) {
                this.a.eb(c.yb());
                return true;
              }
            }
            return false;
          } else
            throw NH(a);
        }
      };
      _.Y = function Lp() {
        return this.a.Y();
      };
      var my = Nkb(xyb, "Maps/Values", 373);
      hI(301, 654, Byb, Pp);
      _.cb = function Tp(a) {
        return this.a.R(a) ? this.a.U(a) : null;
      };
      _.eb = function Wp(a) {
        return this.a.R(a) ? this.a.X(a) : null;
      };
      _.Q = function Qp() {
        this.a.Q();
      };
      _.R = function Rp(a) {
        return this.a.R(a);
      };
      _.hb = function Sp() {
        return new Yp(this);
      };
      _.gb = function() {
        return this.hb();
      };
      _.V = function Up() {
        return this.a.V();
      };
      _.W = function Vp() {
        return this.a.W();
      };
      _.Y = function Xp() {
        return this.a.W().Y();
      };
      var qy = Nkb(xyb, "Multimaps/AsMap", 301);
      hI(393, 655, Eyb, Yp);
      _.mb = function Zp() {
        return np(this.a.a.W(), new bq(this));
      };
      _.qb = function $p() {
        return this.a;
      };
      _.nb = function _p(a) {
        var b;
        if (!mf(this, a)) {
          return false;
        }
        b = Wv(a, 21);
        Op(this.a, b.yb());
        return true;
      };
      var py = Nkb(xyb, "Multimaps/AsMap/EntrySet", 393);
      hI(395, 1, Tyb, bq);
      _.B = function cq(a) {
        return aq(this, a);
      };
      var oy = Nkb(xyb, "Multimaps/AsMap/EntrySet/1", 395);
      hI(391, 656, Lyb, eq);
      _.Q = function fq() {
        Pm(this.a);
      };
      _.kb = function gq(a) {
        return Qm(this.a, a);
      };
      _.Cb = function hq(a) {
        var b;
        return b = Wv(rp(Om(this.a), a), 19), !b ? 0 : b.Y();
      };
      _.gb = function iq() {
        return new wq(this);
      };
      _.Db = function jq() {
        return Om(this.a).Y();
      };
      _.Eb = function kq() {
        return new nq(Ae(Om(this.a)).mb());
      };
      _.mb = function lq() {
        return dq(this);
      };
      _.Fb = function mq(a, b) {
        var c, d, e, f, g;
        Mh(b, Xyb);
        if (b == 0) {
          return g = Wv(rp(Om(this.a), a), 19), !g ? 0 : g.Y();
        }
        f = Wv(rp(Om(this.a), a), 19);
        if (!f) {
          return 0;
        }
        e = f.Y();
        if (b >= e) {
          f.Q();
        } else {
          d = f.mb();
          for (c = 0; c < b; c++) {
            d.H();
            d.I();
          }
        }
        return e;
      };
      var uy = Nkb(xyb, "Multimaps/Keys", 391);
      hI(302, 261, Ayb, nq);
      _.Vb = function oq(a) {
        return new tq(Wv(a, 21));
      };
      var sy = Nkb(xyb, "Multimaps/Keys/1", 302);
      hI(658, 1, {83: 1});
      _.t = function qq(a) {
        var b;
        if (aw(a, 83)) {
          b = Wv(a, 83);
          return this.Yb() == b.Yb() && Tb(this.Zb(), b.Zb());
        }
        return false;
      };
      _.v = function rq() {
        var a;
        a = this.Zb();
        return (a == null ? 0 : vb(a)) ^ this.Yb();
      };
      _.w = function sq() {
        return pq(this);
      };
      var wy = Nkb(xyb, "Multisets/AbstractEntry", 658);
      hI(394, 658, {83: 1}, tq);
      _.Yb = function uq() {
        return Wv(this.a.zb(), 19).Y();
      };
      _.Zb = function vq() {
        return this.a.yb();
      };
      var ry = Nkb(xyb, "Multimaps/Keys/1/1", 394);
      hI(392, 657, Eyb, wq);
      _.kb = function xq(a) {
        var b, c;
        if (aw(a, 83)) {
          c = Wv(a, 83);
          b = Wv(Om(this.a.a).cb(c.Zb()), 19);
          return !!b && b.Y() == c.Yb();
        }
        return false;
      };
      _.V = function yq() {
        return !this.a.a.a;
      };
      _.mb = function zq() {
        return new nq(Ae(Om(this.a.a)).mb());
      };
      _.Ib = function Aq() {
        return this.a;
      };
      _.nb = function Bq(a) {
        var b, c;
        if (aw(a, 83)) {
          c = Wv(a, 83);
          b = Wv(Om(this.a.a).cb(c.Zb()), 19);
          if (!!b && b.Y() == c.Yb()) {
            b.Q();
            return true;
          }
        }
        return false;
      };
      _.Y = function Cq() {
        return Om(this.a.a).Y();
      };
      var ty = Nkb(xyb, "Multimaps/Keys/KeysEntrySet", 392);
      hI(659, 1, fyb);
      var Cy = Nkb(xyb, "Ordering", 659);
      hI(398, 659, fyb, Jq);
      _.$b = function Kq(a, b) {
        return Iq(Wv(a, 83), Wv(b, 83));
      };
      var vy = Nkb(xyb, "Multisets/1", 398);
      hI(397, 658, {83: 1, 3: 1}, Lq);
      _.Yb = function Mq() {
        return this.a;
      };
      _.Zb = function Nq() {
        return this.b;
      };
      _.a = 0;
      var yy = Nkb(xyb, "Multisets/ImmutableEntry", 397);
      hI(303, 1, Ayb, Oq);
      _.G = function Pq() {
        return this.d > 0 || this.c.G();
      };
      _.H = function Qq() {
        if (!(this.d > 0 || this.c.G())) {
          throw new nvb();
        }
        if (this.d == 0) {
          this.b = Wv(this.c.H(), 83);
          this.f = this.d = this.b.Yb();
        }
        --this.d;
        this.a = true;
        return this.b.Zb();
      };
      _.I = function Rq() {
        ec(this.a);
        this.f == 1 ? this.c.I() : this.e.Fb(this.b.Zb(), 1) > 0;
        --this.f;
        this.a = false;
      };
      _.a = false;
      _.d = 0;
      _.f = 0;
      var zy = Nkb(xyb, "Multisets/MultisetIteratorImpl", 303);
      hI(622, 659, {3: 1, 56: 1}, Vq);
      _.$b = function Wq(a, b) {
        return Uq(Wv(a, 23), Wv(b, 23));
      };
      _.w = function Xq() {
        return "Ordering.natural()";
      };
      var Sq;
      var By = Nkb(xyb, "NaturalOrdering", 622);
      hI(343, 661, Qyb, Zq);
      _.ub = function br(a) {
        return Hi(this.b, a);
      };
      _.Sb = function $q() {
        return this.a;
      };
      _.sb = function _q(a) {
        return $i(this.b, a);
      };
      _.Lb = function ar(a) {
        return Hi(this.b, a);
      };
      var Dy = Nkb(xyb, "RegularImmutableAsList", 343);
      hI(559, 275, Ryb, er);
      _.Tb = function fr() {
        return this.a;
      };
      var cr;
      var Ey = Nkb(xyb, "RegularImmutableBiMap", 559);
      hI(53, 667, Qyb, gr);
      _.Nb = function hr() {
        return this.a;
      };
      var Fy = Nkb(xyb, "RegularImmutableList", 53);
      hI(321, 320, Ryb, ir);
      var Gy = Nkb(xyb, "RegularImmutableMap", 321);
      hI(265, 315, Syb, lr);
      var jr;
      var Hy = Nkb(xyb, "RegularImmutableSet", 265);
      hI(650, 641, Eyb);
      var Ky = Nkb(xyb, "Sets/SetView", 650);
      hI(377, 650, Eyb, tr);
      _.kb = function ur(a) {
        return ttb(this.b, a) && ttb(this.c, a);
      };
      _.lb = function vr(a) {
        return Xe(this.b, a) && Xe(this.c, a);
      };
      _.V = function wr() {
        return sr(this);
      };
      _.mb = function xr() {
        var a;
        return Pl((a = new Snb(this.b.a).a.bb().mb(), new Ynb(a)), this.a);
      };
      _.Y = function yr() {
        var a;
        return Ul(Pl((a = new Snb(this.b.a).a.bb().mb(), new Ynb(a)), this.a));
      };
      var Iy = Nkb(xyb, "Sets/2", 377);
      hI(328, 275, Ryb, zr, Ar);
      _.fb = function Dr() {
        return hi(), new Gr(this.c);
      };
      _.Tb = function Br() {
        var a;
        a = this.a;
        return !a ? this.a = new Ar(this.c, this.b, this) : a;
      };
      _.Ub = function Cr() {
        return hi(), new Gr(this.c);
      };
      var Ly = Nkb(xyb, "SingletonImmutableBiMap", 328);
      hI(127, 667, Qyb, Er);
      _.Nb = function Fr() {
        return this.a;
      };
      var My = Nkb(xyb, "SingletonImmutableList", 127);
      hI(135, 663, Syb, Gr);
      _.mb = function Jr() {
        return Il(), new dm(this.a);
      };
      _.kb = function Hr(a) {
        return rb(this.a, a);
      };
      _.Kb = function Ir() {
        return Il(), new dm(this.a);
      };
      _.Y = function Kr() {
        return 1;
      };
      var Ny = Nkb(xyb, "SingletonImmutableSet", 135);
      hI(285, 342, {207: 1, 3: 1, 22: 1, 19: 1}, Ur, Vr);
      _.Bb = function Wr(a, b) {
        return Lr(this, a, b);
      };
      _.Cb = function Xr(a) {
        return Pr(this, a);
      };
      _.Db = function Yr() {
        return $s(Or(this, (qs(), os)));
      };
      _.Eb = function $r() {
        return new ks(this);
      };
      _.Fb = function _r(a, b) {
        return Sr(this, a, b);
      };
      _.Gb = function as(a, b) {
        return Tr(this, a, b);
      };
      _.Hb = function bs(a, b, c) {
        var d, e, f;
        Mh(c, "newCount");
        Mh(b, "oldCount");
        Xb(ok(this.b, a));
        f = this.c.a;
        if (!f) {
          if (b == 0) {
            c > 0 && Lr(this, a, c);
            return true;
          } else {
            return false;
          }
        }
        e = xv(mw, Yyb, 26, 1, 12, 1);
        d = Ms(f, this.d, a, b, c, e);
        Us(this.c, f, d);
        return e[0] == b;
      };
      _.Y = function cs() {
        return $s(Or(this, (qs(), ps)));
      };
      var Wy = Nkb(xyb, "TreeMultiset", 285);
      hI(619, 658, {83: 1}, fs);
      _.Yb = function gs() {
        var a;
        a = this.b.c;
        return a == 0 ? Pr(this.a, this.b.b) : a;
      };
      _.Zb = function hs() {
        return this.b.b;
      };
      var Py = Nkb(xyb, "TreeMultiset/1", 619);
      hI(620, 1, Ayb, ks);
      _.H = function ms() {
        return js(this);
      };
      _.G = function ls() {
        return is(this);
      };
      _.I = function ns() {
        ec(!!this.b);
        Tr(this.c, this.b.b.b, 0);
        this.b = null;
      };
      var Qy = Nkb(xyb, "TreeMultiset/2", 620);
      hI(205, 17, Zyb);
      var os, ps;
      var Ty = Okb(xyb, "TreeMultiset/Aggregate", 205, IF, ss);
      hI(617, 205, Zyb, ts);
      _._b = function us(a) {
        return a.c;
      };
      _.ac = function vs(a) {
        return !a ? 0 : a.j;
      };
      var Ry = Okb(xyb, "TreeMultiset/Aggregate/1", 617, Ty, null);
      hI(618, 205, Zyb, ws);
      _._b = function xs(a) {
        return 1;
      };
      _.ac = function ys(a) {
        return !a ? 0 : a.a;
      };
      var Sy = Okb(xyb, "TreeMultiset/Aggregate/2", 618, Ty, null);
      hI(206, 658, {83: 1, 206: 1}, Os);
      _.Yb = function Ps() {
        return this.c;
      };
      _.Zb = function Qs() {
        return this.b;
      };
      _.w = function Ss() {
        return Dq(), pq(new Lq(this.b, this.c));
      };
      _.a = 0;
      _.c = 0;
      _.d = 0;
      _.j = 0;
      var Uy = Nkb(xyb, "TreeMultiset/AvlNode", 206);
      hI(616, 1, {}, Vs);
      var Vy = Nkb(xyb, "TreeMultiset/Reference", 616);
      var $y = Nkb(lyb, "JavaScriptObject$", 0);
      var qt;
      hI(628, 1, {});
      var _y = Nkb(lyb, "Scheduler", 628);
      var ut = 0, vt = 0, wt = -1;
      hI(360, 628, {}, Jt);
      var Ft;
      var az = Nkb(myb, "SchedulerImpl", 360);
      hI(646, 1, {});
      _.hc = function bu() {
        return null;
      };
      _.ic = function cu() {
        return null;
      };
      _.jc = function du() {
        return null;
      };
      _.kc = function eu() {
        return null;
      };
      _.lc = function fu() {
        return null;
      };
      var nz = Nkb(_yb, "JSONValue", 646);
      hI(214, 646, {214: 1}, ju, ku);
      _.t = function lu(a) {
        if (!aw(a, 214)) {
          return false;
        }
        return this.a == Wv(a, 214).a;
      };
      _.gc = function mu() {
        return qu;
      };
      _.v = function nu() {
        return txb(this.a);
      };
      _.hc = function ou() {
        return this;
      };
      _.w = function pu() {
        var a, b, c;
        c = new Bmb("[");
        for (b = 0, a = this.a.length; b < a; b++) {
          b > 0 && (c.a += ",", c);
          xmb(c, gu(this, b));
        }
        c.a += "]";
        return c.a;
      };
      var fz = Nkb(_yb, "JSONArray", 214);
      hI(292, 646, {}, uu);
      _.gc = function vu() {
        return yu;
      };
      _.ic = function wu() {
        return this;
      };
      _.w = function xu() {
        return Bkb(this.a);
      };
      _.a = false;
      var ru, su;
      var gz = Nkb(_yb, "JSONBoolean", 292);
      hI(371, 72, Vxb, zu);
      var hz = Nkb(_yb, "JSONException", 371);
      hI(435, 646, {}, Cu);
      _.gc = function Du() {
        return Fu;
      };
      _.w = function Eu() {
        return Wxb;
      };
      var Au;
      var iz = Nkb(_yb, "JSONNull", 435);
      hI(104, 646, {104: 1}, Gu);
      _.t = function Hu(a) {
        if (!aw(a, 104)) {
          return false;
        }
        return this.a == Wv(a, 104).a;
      };
      _.gc = function Iu() {
        return Mu;
      };
      _.v = function Ju() {
        return hw(Ixb(this.a));
      };
      _.jc = function Ku() {
        return this;
      };
      _.w = function Lu() {
        return this.a + "";
      };
      _.a = 0;
      var jz = Nkb(_yb, "JSONNumber", 104);
      hI(69, 646, {69: 1}, Tu, Uu);
      _.t = function Vu(a) {
        if (!aw(a, 69)) {
          return false;
        }
        return this.a == Wv(a, 69).a;
      };
      _.gc = function Wu() {
        return $u;
      };
      _.v = function Xu() {
        return txb(this.a);
      };
      _.kc = function Yu() {
        return this;
      };
      _.w = function Zu() {
        var a, b, c, d, e, f;
        f = new Bmb("{");
        a = true;
        e = Nu(this, xv($F, Txb, 2, 0, 5, 1));
        for (c = 0, d = e.length; c < d; ++c) {
          b = e[c];
          a ? a = false : (f.a += ", ", f);
          ymb(f, st(b));
          f.a += ":";
          xmb(f, Pu(this, b));
        }
        f.a += "}";
        return f.a;
      };
      var lz = Nkb(_yb, "JSONObject", 69);
      hI(361, 641, Eyb, _u);
      _.kb = function av(a) {
        return ew(a) && Ou(this.a, $v(a));
      };
      _.mb = function bv() {
        return new wnb(new opb(this.b));
      };
      _.Y = function cv() {
        return this.b.length;
      };
      var kz = Nkb(_yb, "JSONObject/1", 361);
      var dv;
      hI(97, 646, {97: 1}, lv);
      _.t = function mv(a) {
        if (!aw(a, 97)) {
          return false;
        }
        return emb(this.a, Wv(a, 97).a);
      };
      _.gc = function nv() {
        return rv;
      };
      _.v = function ov() {
        return Pxb(this.a);
      };
      _.lc = function pv() {
        return this;
      };
      _.w = function qv() {
        return st(this.a);
      };
      var mz = Nkb(_yb, "JSONString", 97);
      var Ov, Pv, Qv;
      hI(186, 1, {}, sI, tI);
      _.b = false;
      _.c = 0;
      _.d = -1;
      _.e = 0;
      _.f = false;
      _.j = 0;
      var oz = Nkb("de.cau.cs.kieler.core.alg", "BasicProgressMonitor", 186);
      hI(10, 1, {10: 1, 286: 1, 3: 1, 5: 1}, FI, GI, HI, II);
      _.t = function JI(a) {
        return yI(this, a);
      };
      _.v = function KI() {
        return hw(Ixb(this.a)) + Blb(hw(Ixb(this.b)));
      };
      _.w = function NI() {
        return "(" + this.a + "," + this.b + ")";
      };
      _.a = 0;
      _.b = 0;
      var qz = Nkb(izb, "KVector", 10);
      hI(58, 648, {3: 1, 5: 1, 22: 1, 19: 1, 58: 1, 20: 1}, aJ);
      _.ib = function bJ(a) {
        return QI(this, a);
      };
      _.Q = function cJ() {
        _I(this);
      };
      _.ub = function dJ(a) {
        return WI(this, a);
      };
      _.Y = function eJ() {
        return this.b;
      };
      _.b = 0;
      var rH = Nkb(Cyb, "LinkedList", 58);
      hI(44, 58, {44: 1, 286: 1, 3: 1, 5: 1, 22: 1, 19: 1, 58: 1, 20: 1}, jJ, kJ);
      _.w = function mJ() {
        var a, b, c;
        a = new Bmb("(");
        b = WI(this, 0);
        while (b.b != b.d.c) {
          c = Wv(_ub(b), 10);
          ymb(a, c.a + "," + c.b);
          b.b != b.d.c && (a.a += "; ", a);
        }
        return a.a += ")", a.a;
      };
      var pz = Nkb(izb, "KVectorChain", 44);
      var rz = Pkb(kzb, "IProperty");
      hI(131, 1, {179: 1, 131: 1, 3: 1}, tJ);
      var sz = Nkb(kzb, "MapPropertyHolder", 131);
      hI(14, 1, lzb, AJ, BJ, CJ, DJ, EJ, FJ);
      _.F = function GJ(a) {
        return xJ(this, Wv(a, 79));
      };
      _.t = function HJ(a) {
        return yJ(this, a);
      };
      _.mc = function IJ() {
        return this.b;
      };
      _.nc = function JJ() {
        return this.c;
      };
      _.oc = function KJ() {
        return this.d;
      };
      _.v = function LJ() {
        return Pxb(this.b);
      };
      _.w = function MJ() {
        return this.b;
      };
      var uJ, vJ;
      var vz = Nkb(kzb, "Property", 14);
      hI(366, 1, {23: 1}, NJ);
      _.F = function OJ(a) {
        return -1;
      };
      var tz = Nkb(kzb, "Property/1", 366);
      hI(367, 1, {23: 1}, PJ);
      _.F = function QJ(a) {
        return 1;
      };
      var uz = Nkb(kzb, "Property/2", 367);
      hI(27, 1, {27: 1, 22: 1}, RJ);
      _.t = function SJ(a) {
        var b, c, d;
        if (aw(a, 27)) {
          c = Wv(a, 27);
          b = this.a == null ? c.a == null : rb(this.a, c.a);
          d = this.b == null ? c.b == null : rb(this.b, c.b);
          return b && d;
        } else {
          return false;
        }
      };
      _.v = function TJ() {
        var a, b, c, d, e, f;
        c = this.a == null ? 0 : vb(this.a);
        a = c & byb;
        b = c & -65536;
        f = this.b == null ? 0 : vb(this.b);
        d = f & byb;
        e = f & -65536;
        return a ^ e >> 16 & byb | b ^ d << 16;
      };
      _.mb = function UJ() {
        return new WJ(this);
      };
      _.w = function VJ() {
        return this.a == null && this.b == null ? "pair(null,null)" : this.a == null ? "pair(null," + xb(this.b) + ")" : this.b == null ? "pair(" + xb(this.a) + ",null)" : "pair(" + xb(this.a) + "," + xb(this.b) + ")";
      };
      var xz = Nkb(mzb, "Pair", 27);
      hI(431, 1, Ayb, WJ);
      _.G = function XJ() {
        return !this.c && (!this.b && this.a.a != null || this.a.b != null);
      };
      _.H = function YJ() {
        if (!this.c && !this.b && this.a.a != null) {
          this.b = true;
          return this.a.a;
        } else if (!this.c && this.a.b != null) {
          this.c = true;
          return this.a.b;
        }
        throw new nvb();
      };
      _.I = function ZJ() {
        this.c && this.a.b != null ? this.a.b = null : this.b && this.a.a != null && (this.a.a = null);
        throw new tlb();
      };
      _.b = false;
      _.c = false;
      var wz = Nkb(mzb, "Pair/1", 431);
      hI(228, 72, Vxb, $J);
      var yz = Nkb(nzb, "UnsupportedConfigurationException", 228);
      hI(99, 72, Vxb, _J);
      var zz = Nkb(nzb, "UnsupportedGraphException", 99);
      var aK;
      hI(103, 17, {103: 1, 3: 1, 23: 1, 17: 1}, jK);
      var cK, dK, eK, fK, gK, hK;
      var Az = Okb(rzb, "Alignment", 103, IF, kK);
      var lK;
      hI(59, 17, {59: 1, 3: 1, 23: 1, 17: 1}, wK);
      var nK, oK, pK, qK, rK;
      var Bz = Okb(rzb, "Direction", 59, IF, xK);
      var yK;
      hI(107, 17, {107: 1, 3: 1, 23: 1, 17: 1}, FK);
      var AK, BK, CK, DK;
      var Cz = Okb(rzb, "EdgeLabelPlacement", 107, IF, GK);
      var HK;
      hI(122, 17, {122: 1, 3: 1, 23: 1, 17: 1}, OK);
      var JK, KK, LK, MK;
      var Dz = Okb(rzb, "EdgeRouting", 122, IF, PK);
      var QK;
      hI(133, 17, {133: 1, 3: 1, 23: 1, 17: 1}, ZK);
      var SK, TK, UK, VK, WK, XK;
      var Ez = Okb(rzb, "EdgeType", 133, IF, $K);
      var _K;
      hI(166, 17, {166: 1, 3: 1, 23: 1, 17: 1}, fL);
      var bL, cL, dL;
      var Fz = Okb(rzb, "HierarchyHandling", 166, IF, gL);
      var hL;
      var jL, kL, lL, mL, nL, oL, pL, qL, rL, sL, tL, uL, vL, wL, xL, yL, zL, AL, BL, CL, DL, EL, FL, GL, HL, IL, JL, KL, LL, ML, NL, OL, PL, QL, RL, SL, TL, UL, VL, WL, XL, YL, ZL, $L, _L, aM, bM, cM, dM;
      hI(41, 17, {41: 1, 3: 1, 23: 1, 17: 1}, pM);
      var fM, gM, hM, iM, jM, kM, lM, mM, nM;
      var Gz = Okb(rzb, "NodeLabelPlacement", 41, IF, qM);
      var rM;
      hI(100, 17, {100: 1, 3: 1, 23: 1, 17: 1}, AM);
      var uM, vM, wM, xM, yM;
      var Hz = Okb(rzb, "PortAlignment", 100, IF, BM);
      var CM;
      hI(28, 17, {28: 1, 3: 1, 23: 1, 17: 1}, NM);
      var EM, FM, GM, HM, IM, JM;
      var Iz = Okb(rzb, "PortConstraints", 28, IF, OM);
      var PM;
      hI(149, 17, {149: 1, 3: 1, 23: 1, 17: 1}, VM);
      var RM, SM, TM;
      var Jz = Okb(rzb, "PortLabelPlacement", 149, IF, WM);
      var XM;
      hI(32, 17, {32: 1, 3: 1, 23: 1, 17: 1}, uN);
      var ZM, $M, _M, aN, bN, cN, dN, eN, fN, gN, hN, iN, jN, kN, lN, mN, nN, oN, pN, qN, rN;
      var Kz = Okb(rzb, "PortSide", 32, IF, wN);
      var xN;
      hI(150, 17, {150: 1, 3: 1, 23: 1, 17: 1}, EN);
      var zN, AN, BN, CN;
      var Lz = Okb(rzb, "SizeConstraint", 150, IF, FN);
      var GN;
      hI(139, 17, {139: 1, 3: 1, 23: 1, 17: 1}, NN);
      var IN, JN, KN, LN;
      var Mz = Okb(rzb, "SizeOptions", 139, IF, ON);
      var PN;
      hI(62, 1, {62: 1}, UN, VN);
      _.t = function WN(a) {
        var b;
        if (a == null || !aw(a, 62)) {
          return false;
        }
        b = Wv(a, 62);
        return ovb(this.d, b.d) && ovb(this.e, b.e) && ovb(this.c, b.c) && ovb(this.b, b.b);
      };
      _.v = function XN() {
        return fpb(Bv(tv(UF, 1), syb, 1, 4, [this.d, this.e, this.c, this.b]));
      };
      _.w = function YN() {
        return "Rect[x=" + this.d + ",y=" + this.e + ",w=" + this.c + ",h=" + this.b + "]";
      };
      _.b = 0;
      _.c = 0;
      _.d = 0;
      _.e = 0;
      var Tz = Nkb(wzb, "Rectangle", 62);
      hI(283, 62, {283: 1, 62: 1}, ZN);
      _.a = 0;
      var Nz = Nkb(xzb, "LabelGroup", 283);
      hI(67, 17, {67: 1, 3: 1, 23: 1, 17: 1}, vO);
      var $N, _N, aO, bO, cO, dO, eO, fO, gO, hO, iO, jO, kO, lO, mO, nO, oO, pO, qO, rO, sO, tO;
      var Oz = Okb(xzb, "LabelLocation", 67, IF, xO);
      hI(225, 17, {225: 1, 3: 1, 23: 1, 17: 1}, EO);
      var AO, BO, CO;
      var Pz = Okb(xzb, "TextAlignment", 225, IF, FO);
      var HO;
      hI(589, 1, {}, fP);
      _.a = 0;
      _.b = false;
      _.d = 0;
      _.f = 0;
      _.k = 0;
      _.r = 0;
      _.s = 0;
      var Qz = Nkb(wzb, "LabelAndNodeSizeProcessor/NodeData", 589);
      hI(171, 17, {171: 1, 3: 1, 23: 1, 17: 1}, lP);
      var gP, hP, iP, jP;
      var Rz = Okb(wzb, "LabelSide", 171, IF, mP);
      hI(590, 1, {}, rP);
      _.b = true;
      _.c = true;
      _.d = true;
      _.e = true;
      var Sz = Nkb(wzb, zzb, 590);
      hI(121, 1, Bzb);
      _.t = function wP(a) {
        var b;
        if (aw(a, 121)) {
          b = Wv(a, 121);
          return this.d == b.d && this.a == b.a && this.b == b.b && this.c == b.c;
        } else {
          return false;
        }
      };
      _.v = function xP() {
        var a, b;
        a = hw(Ixb(this.b)) << 16;
        a |= hw(Ixb(this.a)) & byb;
        b = hw(Ixb(this.c)) << 16;
        b |= hw(Ixb(this.d)) & byb;
        return a ^ b;
      };
      _.w = function zP() {
        return "[top=" + this.d + ",left=" + this.b + ",bottom=" + this.a + ",right=" + this.c + "]";
      };
      _.a = 0;
      _.b = 0;
      _.c = 0;
      _.d = 0;
      var Wz = Nkb(wzb, "Spacing", 121);
      hI(232, 121, Bzb, AP, BP, CP);
      var Uz = Nkb(wzb, "Spacing/Insets", 232);
      hI(65, 121, {286: 1, 121: 1, 65: 1, 3: 1, 5: 1}, DP, EP, FP);
      var Vz = Nkb(wzb, "Spacing/Margins", 65);
      hI(364, 1, {}, jQ);
      _.c = false;
      _.d = null;
      _.g = null;
      var OP, PP, QP;
      var Xz = Nkb(Ozb, "JsonGraphImporter", 364);
      var kQ, lQ, mQ, nQ, oQ, pQ, qQ, rQ, sQ;
      hI(417, 14, lzb, xQ);
      var Yz = Nkb(Ozb, "LayoutOptionResolver/DummyProperty", 417);
      hI(348, 1, {}, CQ);
      var yQ;
      var Zz = Nkb(Ozb, "RecursiveLGraphLayout", 348);
      hI(73, 99, {73: 1, 3: 1, 54: 1, 46: 1}, EQ, FQ, GQ);
      var $z = Nkb(Ozb, "UnsupportedJsonGraphException", 73);
      hI(380, 1, {}, OQ);
      var HQ, IQ;
      var _z = Nkb(Szb, "GraphConfigurator", 380);
      hI(49, 1, {}, WQ);
      var aA = Nkb(Szb, "IntermediateProcessingConfiguration", 49);
      hI(365, 1, {}, dR);
      var bA = Nkb(Szb, "KlayLayered", 365);
      hI(577, 1, {}, kR);
      _.i = 0;
      var eR;
      var eA = Nkb(Wzb, "ComponentsToCGraphTransformer", 577);
      var UR;
      hI(578, 1, {}, lR);
      _.tc = function mR(a, b) {
        return Qlb(a.wc(), b.wc());
      };
      _.uc = function nR(a, b) {
        return Qlb(a.xc(), b.xc());
      };
      var cA = Nkb(Wzb, "ComponentsToCGraphTransformer/1", 578);
      hI(25, 1, {25: 1});
      _.k = 0;
      _.o = null;
      _.p = true;
      _.r = Vzb;
      var kA = Nkb(Xzb, "CNode", 25);
      hI(198, 25, {198: 1, 25: 1}, pR, qR);
      _.vc = function rR() {
        this.b.d = this.j.d;
        this.b.e = this.j.e;
      };
      _.wc = function sR() {
        return this.a != null ? Ixb(this.a) : this.c.i;
      };
      _.xc = function tR() {
        return this.a != null ? Ixb(this.a) : this.c.i;
      };
      _.w = function uR() {
        return "";
      };
      var dA = Nkb(Wzb, "ComponentsToCGraphTransformer/CRectNode", 198);
      hI(549, 1, {}, HR);
      var vR, wR;
      var hA = Nkb(Wzb, "OneDimensionalComponentsCompaction", 549);
      hI(550, 1, Tyb, IR);
      _.B = function JR(a) {
        return xR(), xkb(), Wv(Wv(a, 27).a, 25).f.f != 0 ? wkb : vkb;
      };
      var fA = Nkb(Wzb, "OneDimensionalComponentsCompaction/lambda$0$Type", 550);
      hI(551, 1, Tyb, KR);
      _.B = function LR(a) {
        return xR(), xkb(), uS(Wv(Wv(a, 27).a, 25).n, Wv(Wv(a, 27).b, 59)) || Wv(Wv(a, 27).a, 25).f.f != 0 && uS(Wv(Wv(a, 27).a, 25).n, Wv(Wv(a, 27).b, 59)) ? wkb : vkb;
      };
      var gA = Nkb(Wzb, "OneDimensionalComponentsCompaction/lambda$1$Type", 551);
      hI(324, 1, {}, NR);
      var iA = Nkb(Xzb, "CGraph", 324);
      hI(78, 1, {78: 1}, QR);
      _.b = 0;
      _.c = 0;
      _.d = 0;
      _.f = 0;
      _.i = true;
      _.j = Vzb;
      var jA = Nkb(Xzb, "CGroup", 78);
      hI(470, 1, {}, WR);
      _.tc = function XR(a, b) {
        return Nlb(a.wc(), b.wc());
      };
      _.uc = function YR(a, b) {
        return Nlb(a.xc(), b.xc());
      };
      var lA = Nkb(Xzb, "ISpacingsHandler/1", 470);
      hI(323, 1, {}, rS);
      _.e = false;
      var ZR, $R, _R;
      var nA = Nkb(Xzb, "OneDimensionalCompactor", 323);
      hI(554, 1, Tyb, sS);
      _.B = function tS(a) {
        return aS(), xkb(), Wv(Wv(a, 27).a, 25).f.f != 0 ? wkb : vkb;
      };
      var mA = Nkb(Xzb, "OneDimensionalCompactor/lambda$0$Type", 554);
      hI(335, 1, {}, xS);
      _.a = false;
      _.b = false;
      _.c = false;
      _.d = false;
      var oA = Nkb(Xzb, "Quadruplet", 335);
      hI(587, 1, {}, yS);
      _.Cc = function zS(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s;
        k = Uzb;
        for (d = new Tob(a.a.b); d.a < d.c.c.length; ) {
          b = Wv(Rob(d), 25);
          k = Qlb(k, b.f.g.j.d + b.g.a);
        }
        q = new aJ();
        for (h = new Tob(a.a.a); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 78);
          g.j = k;
          g.f == 0 && (TI(q, g, q.c.b, q.c), true);
        }
        while (q.b != 0) {
          g = Wv(q.b == 0 ? null : (Bxb(q.b != 0), $I(q, q.a.a)), 78);
          e = g.g.j.d;
          for (n = (p = new Snb(g.a.a).a.bb().mb(), new Ynb(p)); n.a.G(); ) {
            l = (f = Wv(n.a.H(), 21), Wv(f.yb(), 25));
            s = g.j + l.g.a;
            l.f.i || l.j.d < s ? l.r = s : l.r = l.j.d;
          }
          e -= g.g.r;
          g.b += e;
          a.d == (sK(), pK) || a.d == nK ? g.c += e : g.c -= e;
          for (m = (o2 = new Snb(g.a.a).a.bb().mb(), new Ynb(o2)); m.a.G(); ) {
            l = (f = Wv(m.a.H(), 21), Wv(f.yb(), 25));
            for (j = l.i.mb(); j.G(); ) {
              i = Wv(j.H(), 25);
              tK(a.d) ? r = a.g.tc(l, i) : r = a.g.uc(l, i);
              i.f.j = Nlb(i.f.j, l.r + l.j.c + r - i.g.a);
              i.p || (i.f.j = Nlb(i.f.j, i.j.d - i.g.a));
              --i.f.f;
              i.f.f == 0 && QI(q, i.f);
            }
          }
        }
        for (c = new Tob(a.a.b); c.a < c.c.c.length; ) {
          b = Wv(Rob(c), 25);
          b.j.d = b.r;
        }
      };
      var pA = Nkb(Zzb, "LongestPathCompaction", 587);
      hI(588, 1, {}, AS);
      _.Dc = function BS(a) {
        var b, c, d, e, f, g, h;
        for (c = new Tob(a.a.b); c.a < c.c.c.length; ) {
          b = Wv(Rob(c), 25);
          b.i.Q();
        }
        for (e = new Tob(a.a.b); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 25);
          for (g = new Tob(a.a.b); g.a < g.c.c.length; ) {
            f = Wv(Rob(g), 25);
            if (d == f) {
              continue;
            }
            if (!!d.f && d.f == f.f) {
              continue;
            }
            tK(a.d) ? h = a.g.uc(d, f) : h = a.g.tc(d, f);
            d != f.o && (f.j.d > d.j.d || d.j.d == f.j.d && d.j.c < f.j.c) && SR(f.j.e + f.j.b + h, d.j.e) && TR(f.j.e, d.j.e + d.j.b + h) && d.i.ib(f);
          }
        }
      };
      var qA = Nkb(Zzb, "QuadraticConstraintCalculation", 588);
      hI(317, 1, {}, FS);
      _.Dc = function GS(a) {
        this.b = a;
        ES(this, new RS(), new TS());
      };
      var xA = Nkb(Zzb, "ScanlineConstraintCalculator", 317);
      var JA = Pkb($zb, "Scanline/EventHandler");
      hI(464, 1, {160: 1}, KS);
      _.Ec = function LS(a) {
        IS(this, Wv(a, 235));
      };
      var sA = Nkb(Zzb, "ScanlineConstraintCalculator/ConstraintsScanlineHandler", 464);
      hI(465, 1, fyb, MS);
      _.$b = function NS(a, b) {
        return glb((Wv(a, 25).j.d + Wv(a, 25).j.c) / 2, (Wv(b, 25).j.d + Wv(b, 25).j.c) / 2);
      };
      var rA = Nkb(Zzb, "ScanlineConstraintCalculator/ConstraintsScanlineHandler/lambda$0$Type", 465);
      hI(235, 1, {235: 1}, OS);
      _.a = false;
      var tA = Nkb(Zzb, "ScanlineConstraintCalculator/Timestamp", 235);
      hI(466, 1, fyb, PS);
      _.$b = function QS(a, b) {
        return HS(a, b);
      };
      var uA = Nkb(Zzb, "ScanlineConstraintCalculator/lambda$0$Type", 466);
      hI(467, 1, _zb, RS);
      _.D = function SS(a) {
        return true;
      };
      var vA = Nkb(Zzb, "ScanlineConstraintCalculator/lambda$1$Type", 467);
      hI(468, 1, Tyb, TS);
      _.B = function US(a) {
        return 0;
      };
      var wA = Nkb(Zzb, "ScanlineConstraintCalculator/lambda$2$Type", 468);
      hI(48, 1, {48: 1}, VS, WS);
      _.t = function XS(a) {
        var b;
        if (a == null) {
          return false;
        }
        if (zA != tb(a)) {
          return false;
        }
        b = Wv(a, 48);
        return ovb(this.c, b.c) && ovb(this.d, b.d);
      };
      _.v = function YS() {
        return fpb(Bv(tv(UF, 1), syb, 1, 4, [this.c, this.d]));
      };
      _.w = function ZS() {
        return "(" + this.c + ", " + this.d + (this.a ? "cx" : "") + this.b + ")";
      };
      _.a = true;
      _.c = 0;
      _.d = 0;
      var zA = Nkb($zb, "Point", 48);
      hI(201, 17, {201: 1, 3: 1, 23: 1, 17: 1}, fT);
      var $S, _S, aT, bT;
      var yA = Okb($zb, "Point/Quadrant", 201, IF, iT);
      hI(569, 1, {}, qT);
      _.b = null;
      _.c = null;
      _.d = null;
      _.e = null;
      _.f = null;
      var jT, kT, lT, mT, nT;
      var IA = Nkb($zb, "RectilinearConvexHull", 569);
      hI(243, 1, {160: 1}, xT);
      _.Ec = function yT(a) {
        wT(this, Wv(a, 48));
      };
      _.b = 0;
      var uT;
      var BA = Nkb($zb, "RectilinearConvexHull/MaximalElementsEventHandler", 243);
      hI(571, 1, fyb, AT);
      _.$b = function BT(a, b) {
        return zT(a, b);
      };
      var AA = Nkb($zb, "RectilinearConvexHull/MaximalElementsEventHandler/lambda$0$Type", 571);
      hI(570, 1, {160: 1}, DT);
      _.Ec = function ET(a) {
        CT(this, Wv(a, 48));
      };
      _.a = 0;
      _.b = null;
      _.c = null;
      _.d = null;
      _.e = null;
      var CA = Nkb($zb, "RectilinearConvexHull/RectangleEventHandler", 570);
      hI(572, 1, fyb, FT);
      _.$b = function GT(a, b) {
        return oT(), Wv(a, 48).c == Wv(b, 48).c ? glb(Wv(b, 48).d, Wv(a, 48).d) : glb(Wv(a, 48).c, Wv(b, 48).c);
      };
      var DA = Nkb($zb, "RectilinearConvexHull/lambda$0$Type", 572);
      hI(573, 1, fyb, HT);
      _.$b = function IT(a, b) {
        return oT(), Wv(a, 48).c == Wv(b, 48).c ? glb(Wv(a, 48).d, Wv(b, 48).d) : glb(Wv(a, 48).c, Wv(b, 48).c);
      };
      var EA = Nkb($zb, "RectilinearConvexHull/lambda$1$Type", 573);
      hI(574, 1, fyb, JT);
      _.$b = function KT(a, b) {
        return oT(), Wv(a, 48).c == Wv(b, 48).c ? glb(Wv(b, 48).d, Wv(a, 48).d) : glb(Wv(b, 48).c, Wv(a, 48).c);
      };
      var FA = Nkb($zb, "RectilinearConvexHull/lambda$2$Type", 574);
      hI(575, 1, fyb, LT);
      _.$b = function MT(a, b) {
        return oT(), Wv(a, 48).c == Wv(b, 48).c ? glb(Wv(a, 48).d, Wv(b, 48).d) : glb(Wv(b, 48).c, Wv(a, 48).c);
      };
      var GA = Nkb($zb, "RectilinearConvexHull/lambda$3$Type", 575);
      hI(576, 1, fyb, NT);
      _.$b = function OT(a, b) {
        return sT(a, b);
      };
      var HA = Nkb($zb, "RectilinearConvexHull/lambda$4$Type", 576);
      hI(469, 1, {}, QT);
      var KA = Nkb($zb, "Scanline", 469);
      hI(662, 1, {});
      var LA = Nkb(aAb, "AbstractGraphPlacer", 662);
      hI(222, 1, {222: 1}, _T);
      var WT;
      var NA = Nkb(aAb, "ComponentGroup", 222);
      hI(434, 662, {}, fU);
      _.Fc = function gU(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2;
        this.a.c = xv(UF, syb, 1, 0, 4, 1);
        b.b.c = xv(UF, syb, 1, 0, 4, 1);
        if (a.V()) {
          b.e.a = 0;
          b.e.b = 0;
          return;
        }
        f = Wv(a.sb(0), 55);
        qJ(b, f);
        for (e = a.mb(); e.G(); ) {
          d = Wv(e.H(), 55);
          aU(this, d);
        }
        n = new FI();
        o2 = 2 * Wv(rJ(f, (Rib(), Jib)), 15).a;
        for (i = new Tob(this.a); i.a < i.c.c.length; ) {
          g = Wv(Rob(i), 222);
          j = bU(g, o2);
          VT(Jd(g.a), n.a, n.b);
          n.a += j.a;
          n.b += j.b;
        }
        b.e.a = n.a - o2;
        b.e.b = n.b - o2;
        if (Ckb(Ixb(Xv(rJ(f, (Mjb(), ijb))))) && gw(rJ(f, (eM(), uL))) === gw((NK(), JK))) {
          for (m = a.mb(); m.G(); ) {
            k = Wv(m.H(), 55);
            UT(k, k.d.a, k.d.b);
          }
          c = new sU();
          iU(c, a, o2);
          for (l = a.mb(); l.G(); ) {
            k = Wv(l.H(), 55);
            vI(BI(k.d), c.e);
          }
          vI(BI(b.e), c.a);
        }
        for (h = new Tob(this.a); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 222);
          TT(b, Jd(g.a));
        }
      };
      var MA = Nkb(aAb, "ComponentGroupGraphPlacer", 434);
      hI(322, 1, {}, sU);
      var VA = Nkb(aAb, "ComponentsCompactor", 322);
      hI(13, 647, bAb, GU, HU, IU);
      _.rb = function JU(a, b) {
        uU(this, a, b);
      };
      _.ib = function KU(a) {
        return vU(this, a);
      };
      _.jb = function LU(a) {
        return xU(this, a);
      };
      _.Q = function MU() {
        this.c = xv(UF, syb, 1, 0, 4, 1);
      };
      _.kb = function NU(a) {
        return zU(this, a, 0) != -1;
      };
      _.sb = function OU(a) {
        return yU(this, a);
      };
      _.V = function PU() {
        return this.c.length == 0;
      };
      _.mb = function QU() {
        return new Tob(this);
      };
      _.vb = function RU(a) {
        return AU(this, a);
      };
      _.nb = function SU(a) {
        return BU(this, a);
      };
      _.Xb = function TU(a, b) {
        CU(this, a, b);
      };
      _.wb = function UU(a, b) {
        return DU(this, a, b);
      };
      _.Y = function VU() {
        return this.c.length;
      };
      _.ob = function WU() {
        return EU(this);
      };
      _.pb = function XU(a) {
        return FU(this, a);
      };
      var BG = Nkb(Cyb, "ArrayList", 13);
      hI(532, 13, bAb, $U);
      _.ib = function _U(a) {
        return ZU(this, Wv(a, 48));
      };
      var OA = Nkb(aAb, "ComponentsCompactor/Hullpoints", 532);
      hI(529, 1, {347: 1}, bV);
      _.a = false;
      var PA = Nkb(aAb, "ComponentsCompactor/InternalComponent", 529);
      hI(528, 1, Oyb, cV);
      _.mb = function dV() {
        return new Tob(this.a);
      };
      var QA = Nkb(aAb, "ComponentsCompactor/InternalConnectedComponents", 528);
      hI(531, 1, {251: 1}, eV);
      _.zc = function gV() {
        return null;
      };
      _.Ac = function hV() {
        return this.a;
      };
      _.yc = function fV() {
        return oU(this.d);
      };
      _.Bc = function iV() {
        return this.b;
      };
      var RA = Nkb(aAb, "ComponentsCompactor/InternalExternalExtension", 531);
      hI(530, 1, {251: 1}, jV);
      _.Ac = function mV() {
        return this.a;
      };
      _.yc = function kV() {
        return oU(this.d);
      };
      _.zc = function lV() {
        return this.c;
      };
      _.Bc = function nV() {
        return this.b;
      };
      var SA = Nkb(aAb, "ComponentsCompactor/InternalUnionExternalExtension", 530);
      hI(534, 1, {}, oV);
      var TA = Nkb(aAb, "ComponentsCompactor/OuterSegments", 534);
      hI(533, 1, {}, pV);
      var UA = Nkb(aAb, "ComponentsCompactor/Segments", 533);
      hI(381, 1, {}, tV);
      var WA = Nkb(aAb, "ComponentsProcessor", 381);
      hI(432, 662, {}, uV);
      _.Fc = function vV(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A;
        if (a.Y() == 1) {
          t = Wv(a.sb(0), 55);
          if (t != b) {
            b.b.c = xv(UF, syb, 1, 0, 4, 1);
            ST(b, t, 0, 0);
            qJ(b, t);
            YW(b.a, t.a);
            b.e.a = t.e.a;
            b.e.b = t.e.b;
          }
          return;
        } else if (a.V()) {
          b.b.c = xv(UF, syb, 1, 0, 4, 1);
          b.e.a = 0;
          b.e.b = 0;
          return;
        }
        for (h = a.mb(); h.G(); ) {
          f = Wv(h.H(), 55);
          q = 0;
          for (o2 = new Tob(f.b); o2.a < o2.c.c.length; ) {
            n = Wv(Rob(o2), 9);
            q += Wv(rJ(n, (Rib(), Eib)), 24).a;
          }
          f.k = q;
        }
        Gpb(a, new xV());
        e = Wv(a.sb(0), 55);
        b.b.c = xv(UF, syb, 1, 0, 4, 1);
        qJ(b, e);
        m = 0;
        v = 0;
        for (i = a.mb(); i.G(); ) {
          f = Wv(i.H(), 55);
          s = f.e;
          m = Nlb(m, s.a);
          v += s.a * s.b;
        }
        m = Nlb(m, Math.sqrt(v) * Wv(rJ(b, (Rib(), Rhb)), 15).a);
        u = cAb * Wv(rJ(b, Jib), 15).a;
        w = 0;
        A = 0;
        l = 0;
        c = u;
        for (g = a.mb(); g.G(); ) {
          f = Wv(g.H(), 55);
          s = f.e;
          if (w + s.a > m) {
            w = 0;
            A += l + u;
            l = 0;
          }
          p = f.d;
          UT(f, w + p.a, A + p.b);
          p.a = 0;
          p.b = 0;
          c = Nlb(c, w + s.a);
          l = Nlb(l, s.b);
          w += s.a + u;
        }
        b.e.a = c;
        b.e.b = A + l;
        r = Wv(rJ(b, Jib), 15).a;
        if (Ckb(Ixb(Xv(rJ(e, (Mjb(), ijb)))))) {
          d = new sU();
          iU(d, a, r);
          for (k = a.mb(); k.G(); ) {
            j = Wv(k.H(), 55);
            vI(BI(j.d), d.e);
          }
          vI(BI(b.e), d.a);
        }
        TT(b, a);
      };
      var YA = Nkb(aAb, "SimpleRowGraphPlacer", 432);
      hI(433, 1, fyb, xV);
      _.$b = function yV(a, b) {
        return wV(Wv(a, 55), Wv(b, 55));
      };
      var XA = Nkb(aAb, "SimpleRowGraphPlacer/1", 433);
      hI(369, 1, eAb, CV);
      _.sc = function DV(a, b) {
        BV(a, b);
      };
      var zV;
      var $A = Nkb(fAb, "CompoundGraphPostprocessor", 369);
      hI(370, 1, _zb, EV);
      _.D = function FV(a) {
        var b;
        return b = Wv(rJ(Wv(a, 114).b, (eM(), CL)), 44), !!b && b.b != 0;
      };
      var ZA = Nkb(fAb, "CompoundGraphPostprocessor/1", 370);
      hI(368, 1, eAb, SV);
      _.sc = function TV(a, b) {
        NV(this, a, b);
      };
      var aB = Nkb(fAb, "CompoundGraphPreprocessor", 368);
      hI(187, 1, {187: 1}, UV);
      _.c = false;
      var _A = Nkb(fAb, "CompoundGraphPreprocessor/ExternalPort", 187);
      hI(114, 1, {114: 1}, XV);
      _.w = function YV() {
        return zc(this.c) + ":" + gW(this.b);
      };
      var cB = Nkb(fAb, "CrossHierarchyEdge", 114);
      hI(310, 1, fyb, $V);
      _.$b = function _V(a, b) {
        return ZV(this, Wv(a, 114), Wv(b, 114));
      };
      var bB = Nkb(fAb, "CrossHierarchyEdgeComparator", 310);
      hI(147, 131, {179: 1, 131: 1, 147: 1, 3: 1});
      _.k = 0;
      var lB = Nkb(hAb, "LGraphElement", 147);
      hI(12, 147, {179: 1, 131: 1, 12: 1, 147: 1, 3: 1}, hW);
      _.w = function iW() {
        return gW(this);
      };
      var dB = Nkb(hAb, "LEdge", 12);
      hI(55, 147, {179: 1, 131: 1, 55: 1, 147: 1, 3: 1, 22: 1}, kW);
      _.mb = function lW() {
        return new Tob(this.c);
      };
      _.w = function mW() {
        if (this.c.c.length == 0) {
          return "G-unlayered" + Ze(this.b);
        } else if (this.b.c.length == 0) {
          return "G-layered" + Ze(this.c);
        }
        return "G[layerless" + Ze(this.b) + ", layers" + Ze(this.c) + "]";
      };
      var mB = Nkb(hAb, "LGraph", 55);
      hI(273, 1, {});
      _.pc = function rW() {
        return this.e.j;
      };
      var eB = Nkb(hAb, "LGraphAdapters/AbstractLShapeAdapter", 273);
      hI(240, 1, {627: 1}, tW);
      _.b = null;
      var fB = Nkb(hAb, "LGraphAdapters/LEdgeAdapter", 240);
      hI(325, 1, {}, wW);
      _.pc = function xW() {
        return this.a.e;
      };
      _.b = null;
      _.c = false;
      var gB = Nkb(hAb, "LGraphAdapters/LGraphAdapter", 325);
      hI(224, 273, {129: 1, 224: 1}, yW);
      var hB = Nkb(hAb, "LGraphAdapters/LLabelAdapter", 224);
      hI(555, 273, {626: 1}, BW);
      _.a = null;
      _.b = null;
      _.c = false;
      var iB = Nkb(hAb, "LGraphAdapters/LNodeAdapter", 555);
      hI(556, 273, {161: 1}, FW);
      _.a = null;
      _.b = null;
      _.c = null;
      _.d = false;
      var jB = Nkb(hAb, "LGraphAdapters/LPortAdapter", 556);
      hI(557, 1, fyb, HW);
      _.$b = function IW(a, b) {
        return GW(Wv(a, 7), Wv(b, 7));
      };
      var kB = Nkb(hAb, "LGraphAdapters/PortComparator", 557);
      hI(168, 1, {168: 1}, ZW, $W);
      _.t = function _W(a) {
        var b;
        if (aw(a, 168)) {
          b = Wv(a, 168);
          return this.d == b.d && this.a == b.a && this.b == b.b && this.c == b.c;
        } else {
          return false;
        }
      };
      _.v = function aX() {
        var a, b;
        a = hw(Ixb(this.b)) << 16;
        a |= hw(Ixb(this.a)) & byb;
        b = hw(Ixb(this.c)) << 16;
        b |= hw(Ixb(this.d)) & byb;
        return a ^ b;
      };
      _.w = function bX() {
        return "Insets[top=" + this.d + ",left=" + this.b + ",bottom=" + this.a + ",right=" + this.c + "]";
      };
      _.a = 0;
      _.b = 0;
      _.c = 0;
      _.d = 0;
      var nB = Nkb(hAb, "LInsets", 168);
      hI(165, 147, {179: 1, 131: 1, 147: 1, 165: 1, 3: 1});
      var CB = Nkb(hAb, "LShape", 165);
      hI(33, 165, {179: 1, 131: 1, 147: 1, 33: 1, 165: 1, 3: 1}, dX);
      _.w = function eX() {
        return this.a == null ? "l_" + this.k : "l_" + this.a;
      };
      var oB = Nkb(hAb, "LLabel", 33);
      hI(9, 165, {179: 1, 131: 1, 147: 1, 9: 1, 165: 1, 3: 1}, uX);
      _.w = function vX() {
        return tX(this);
      };
      var qB = Nkb(hAb, "LNode", 9);
      hI(132, 17, {132: 1, 3: 1, 23: 1, 17: 1}, DX);
      var wX, xX, yX, zX, AX, BX;
      var pB = Okb(hAb, "LNode/NodeType", 132, IF, EX);
      hI(7, 165, {179: 1, 131: 1, 147: 1, 7: 1, 165: 1, 3: 1}, RX);
      _.w = function SX() {
        var a;
        return a = OX(this), a == null ? "p_" + this.k : "p_" + a;
      };
      var FX, GX, HX, IX, JX, KX;
      var BB = Nkb(hAb, "LPort", 7);
      hI(399, 1, _zb, UX);
      _.D = function VX(a) {
        return TX(a);
      };
      var rB = Nkb(hAb, "LPort/1", 399);
      hI(400, 1, _zb, XX);
      _.D = function YX(a) {
        return WX(a);
      };
      var sB = Nkb(hAb, "LPort/2", 400);
      hI(401, 1, _zb, ZX);
      _.D = function $X(a) {
        return Wv(a, 7).g == (sN(), $M);
      };
      var tB = Nkb(hAb, "LPort/3", 401);
      hI(402, 1, _zb, _X);
      _.D = function aY(a) {
        return Wv(a, 7).g == (sN(), ZM);
      };
      var uB = Nkb(hAb, "LPort/4", 402);
      hI(403, 1, _zb, bY);
      _.D = function cY(a) {
        return Wv(a, 7).g == (sN(), pN);
      };
      var vB = Nkb(hAb, "LPort/5", 403);
      hI(404, 1, _zb, dY);
      _.D = function eY(a) {
        return Wv(a, 7).g == (sN(), rN);
      };
      var wB = Nkb(hAb, "LPort/6", 404);
      hI(190, 1, Oyb, fY);
      _.mb = function gY() {
        var a;
        a = new Tob(this.a.b);
        return new hY(a);
      };
      var yB = Nkb(hAb, "LPort/7", 190);
      hI(405, 1, Ayb, hY);
      _.H = function jY() {
        return Wv(Rob(this.a), 12).c;
      };
      _.G = function iY() {
        return Qob(this.a);
      };
      _.I = function kY() {
        Sob(this.a);
      };
      var xB = Nkb(hAb, "LPort/7/1", 405);
      hI(169, 1, Oyb, lY);
      _.mb = function mY() {
        var a;
        return a = new Tob(this.a.e), new nY(a);
      };
      var AB = Nkb(hAb, "LPort/8", 169);
      hI(304, 1, Ayb, nY);
      _.H = function pY() {
        return Wv(Rob(this.a), 12).d;
      };
      _.G = function oY() {
        return Qob(this.a);
      };
      _.I = function qY() {
        Sob(this.a);
      };
      var zB = Nkb(hAb, "LPort/8/1", 304);
      hI(16, 147, {179: 1, 131: 1, 147: 1, 16: 1, 3: 1, 22: 1}, sY);
      _.mb = function tY() {
        return new Tob(this.a);
      };
      _.w = function uY() {
        return "L_" + zU(this.b.c, this, 0) + Ze(this.a);
      };
      var DB = Nkb(hAb, "Layer", 16);
      hI(437, 1, eAb, wY);
      _.sc = function xY(a, b) {
        var c, d, e, f, g, h, i;
        nI(b, "Big nodes intermediate-processing", 1);
        this.a = a;
        for (f = new Tob(this.a.c); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 16);
          i = Eo(e.a);
          c = pl(i, new zY());
          for (h = Pl(c.b.mb(), c.a); od(h); ) {
            g = Wv(pd(h), 9);
            if (gw(rJ(g, (Mjb(), vjb))) === gw((Xib(), Uib)) || gw(rJ(g, vjb)) === gw(Vib)) {
              d = vY(this, g, false);
              sJ(d, vjb, Wv(rJ(g, vjb), 85));
              sJ(g, vjb, Wib);
            } else {
              vY(this, g, true);
            }
          }
        }
        pI(b);
      };
      var FB = Nkb(jAb, "BigNodesIntermediateProcessor", 437);
      hI(438, 1, _zb, zY);
      _.D = function AY(a) {
        return yY(Wv(a, 9));
      };
      var EB = Nkb(jAb, "BigNodesIntermediateProcessor/1", 438);
      hI(582, 1, Tyb, CY);
      _.B = function DY(a) {
        var b;
        return BY((b = this, iw(a), b));
      };
      var GB = Nkb(jAb, "BigNodesLabelHandler/CompoundFunction", 582);
      hI(332, 1, {}, HY);
      _.a = 0;
      _.e = null;
      _.f = 0;
      var KB = Nkb(jAb, "BigNodesLabelHandler/Handler", 332);
      hI(583, 1, Tyb, JY);
      _.B = function KY(a) {
        var b;
        return IY((b = this, iw(a), b));
      };
      var HB = Nkb(jAb, "BigNodesLabelHandler/Handler/1", 583);
      hI(584, 1, Tyb, MY);
      _.B = function NY(a) {
        var b;
        return LY((b = this, iw(a), b));
      };
      var IB = Nkb(jAb, "BigNodesLabelHandler/Handler/2", 584);
      hI(585, 1, Tyb, PY);
      _.B = function QY(a) {
        var b;
        return OY((b = this, iw(a), b));
      };
      var JB = Nkb(jAb, "BigNodesLabelHandler/Handler/3", 585);
      hI(439, 1, eAb, SY);
      _.sc = function TY(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p;
        nI(b, "Big nodes post-processing", 1);
        this.a = a;
        for (h = new Tob(this.a.c); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 16);
          c = pl(g.a, new VY());
          for (j = Pl(c.b.mb(), c.a); od(j); ) {
            i = Wv(pd(j), 9);
            l = Wv(rJ(i, (Rib(), Whb)), 15);
            f = RY(this, i);
            p = new GU();
            for (o2 = nX(f, (sN(), ZM)).mb(); o2.G(); ) {
              m = Wv(o2.H(), 7);
              p.c[p.c.length] = m;
              k = m.i.a - f.j.a;
              m.i.a = l.a + k;
            }
            i.j.a = l.a;
            for (n = new Tob(p); n.a < n.c.c.length; ) {
              m = Wv(Rob(n), 7);
              PX(m, i);
            }
            this.a.e.a < i.i.a + i.j.a && (this.a.e.a = i.i.a + i.j.a);
            e = Wv(rJ(i, Thb), 20);
            xU(i.c, e);
            d = Wv(rJ(i, Uhb), 64);
            !!d && d.B(null);
          }
        }
        pI(b);
      };
      var MB = Nkb(jAb, "BigNodesPostProcessor", 439);
      hI(440, 1, _zb, VY);
      _.D = function WY(a) {
        return UY(Wv(a, 9));
      };
      var LB = Nkb(jAb, "BigNodesPostProcessor/1", 440);
      hI(441, 1, eAb, YY);
      _.sc = function ZY(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n;
        nI(b, kAb, 1);
        this.c = a;
        l = this.c.b;
        e = 0;
        for (i = new Tob(l); i.a < i.c.c.length; ) {
          g = Wv(Rob(i), 9);
          g.k = e++;
        }
        this.d = Wv(rJ(this.c, (Rib(), Jib)), 15).a;
        this.a = Wv(rJ(this.c, (eM(), sL)), 59);
        this.b = l.c.length;
        f = lAb;
        for (j = new Tob(l); j.a < j.c.c.length; ) {
          g = Wv(Rob(j), 9);
          g.g == (CX(), AX) && g.j.a < f && (f = g.j.a);
        }
        f = 50 > f ? 50 : f;
        c = new GU();
        n = f + this.d;
        for (k = new Tob(l); k.a < k.c.c.length; ) {
          g = Wv(Rob(k), 9);
          if (g.g == (CX(), AX) && g.j.a > n) {
            m = 1;
            d = g.j.a;
            while (d > f) {
              ++m;
              d = (g.j.a - (m - 1) * this.d) / m;
            }
            vU(c, new _Y(this, g, m, d));
          }
        }
        for (h = new Tob(c); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 267);
          XY(g.d) && $Y(g);
        }
        pI(b);
      };
      _.b = 0;
      _.d = 0;
      var OB = Nkb(jAb, "BigNodesPreProcessor", 441);
      hI(267, 1, {267: 1}, _Y);
      _.a = 0;
      _.c = 0;
      var NB = Nkb(jAb, "BigNodesPreProcessor/BigNode", 267);
      hI(442, 1, eAb, cZ);
      _.sc = function dZ(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p;
        nI(b, kAb, 1);
        aZ = Ckb(Ixb(Xv(rJ(a, (eM(), rL)))));
        this.c = a;
        n = new GU();
        for (g = new Tob(a.c); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 16);
          xU(n, f.a);
        }
        e = 0;
        for (k = new Tob(n); k.a < k.c.c.length; ) {
          i = Wv(Rob(k), 9);
          i.k = e++;
        }
        this.d = Wv(rJ(this.c, (Rib(), Jib)), 15).a;
        this.a = Wv(rJ(this.c, sL), 59);
        this.b = n.c.length;
        h = lAb;
        for (l = new Tob(n); l.a < l.c.c.length; ) {
          i = Wv(Rob(l), 9);
          i.g == (CX(), AX) && i.j.a < h && (h = i.j.a);
        }
        h = 50 > h ? 50 : h;
        c = new GU();
        p = h + this.d;
        for (m = new Tob(n); m.a < m.c.c.length; ) {
          i = Wv(Rob(m), 9);
          if (i.g == (CX(), AX) && i.j.a > p) {
            o2 = 1;
            d = i.j.a;
            while (d > h) {
              ++o2;
              d = (i.j.a - (o2 - 1) * this.d) / o2;
            }
            vU(c, new nZ(this, i, o2));
          }
        }
        for (j = new Tob(c); j.a < j.c.c.length; ) {
          i = Wv(Rob(j), 268);
          bZ(i) && gZ(i);
        }
        pI(b);
      };
      _.b = 0;
      _.d = 0;
      var aZ = false;
      var QB = Nkb(jAb, "BigNodesSplitter", 442);
      hI(268, 1, {268: 1}, nZ);
      _.a = 0;
      _.e = 4;
      var PB = Nkb(jAb, "BigNodesSplitter/BigNode", 268);
      hI(443, 1, eAb, qZ);
      _.sc = function rZ(a, b) {
        var c, d, e, f, g, h, i, j;
        nI(b, "Comment post-processing", 1);
        i = Wv(rJ(a, (Rib(), Jib)), 15).a;
        for (f = new Tob(a.c); f.a < f.c.c.length; ) {
          e = Wv(Rob(f), 16);
          d = new GU();
          for (h = new Tob(e.a); h.a < h.c.c.length; ) {
            g = Wv(Rob(h), 9);
            j = Wv(rJ(g, Qib), 20);
            c = Wv(rJ(g, Yhb), 20);
            if (!!j || !!c) {
              pZ(g, j, c, i);
              !!j && xU(d, j);
              !!c && xU(d, c);
            }
          }
          xU(e.a, d);
        }
        pI(b);
      };
      var RB = Nkb(jAb, "CommentPostprocessor", 443);
      hI(444, 1, eAb, tZ);
      _.sc = function uZ(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q;
        nI(b, "Comment pre-processing", 1);
        h = new Tob(a.b);
        while (h.a < h.c.c.length) {
          g = Wv(Rob(h), 9);
          if (Ckb(Ixb(Xv(rJ(g, (eM(), qL)))))) {
            d = 0;
            c = null;
            i = null;
            for (n = new Tob(g.f); n.a < n.c.c.length; ) {
              l = Wv(Rob(n), 7);
              d += l.b.c.length + l.e.c.length;
              if (l.b.c.length == 1) {
                c = Wv(yU(l.b, 0), 12);
                i = c.c;
              }
              if (l.e.c.length == 1) {
                c = Wv(yU(l.e, 0), 12);
                i = c.d;
              }
            }
            if (d == 1 && i.b.c.length + i.e.c.length == 1 && !Ckb(Ixb(Xv(rJ(i.f, qL))))) {
              sZ(g, c, i, i.f);
              Sob(h);
            } else {
              q = new GU();
              for (m = new Tob(g.f); m.a < m.c.c.length; ) {
                l = Wv(Rob(m), 7);
                for (k = new Tob(l.e); k.a < k.c.c.length; ) {
                  j = Wv(Rob(k), 12);
                  j.d.e.c.length == 0 || (q.c[q.c.length] = j, true);
                }
                for (f = new Tob(l.b); f.a < f.c.c.length; ) {
                  e = Wv(Rob(f), 12);
                  e.c.b.c.length == 0 || (q.c[q.c.length] = e, true);
                }
              }
              for (p = new Tob(q); p.a < p.c.c.length; ) {
                o2 = Wv(Rob(p), 12);
                cW(o2, true);
              }
            }
          }
        }
        pI(b);
      };
      var SB = Nkb(jAb, "CommentPreprocessor", 444);
      hI(445, 1, eAb, wZ);
      _.sc = function xZ(a, b) {
        var c, d, e, f, g, h, i, j, k, l;
        nI(b, "Edge and layer constraint edge reversal", 1);
        for (j = new Tob(a.b); j.a < j.c.c.length; ) {
          i = Wv(Rob(j), 9);
          g = Wv(rJ(i, (Mjb(), vjb)), 85);
          f = null;
          switch (g.e) {
            case 1:
            case 2:
              f = (Hgb(), Ggb);
              break;
            case 3:
            case 4:
              f = (Hgb(), Egb);
          }
          if (f) {
            sJ(i, (Rib(), dib), (Hgb(), Ggb));
            f == Egb ? vZ(i, g, (djb(), bjb)) : f == Ggb && vZ(i, g, (djb(), ajb));
          } else {
            if (MM(Wv(rJ(i, (eM(), TL)), 28)) && i.f.c.length != 0) {
              c = true;
              for (l = new Tob(i.f); l.a < l.c.c.length; ) {
                k = Wv(Rob(l), 7);
                if (!(k.g == (sN(), ZM) && k.b.c.length - k.e.c.length > 0 || k.g == rN && k.b.c.length - k.e.c.length < 0)) {
                  c = false;
                  break;
                }
                if (k.g == rN) {
                  for (e = new Tob(k.e); e.a < e.c.c.length; ) {
                    d = Wv(Rob(e), 12);
                    h = Wv(rJ(d.d.f, vjb), 85);
                    if (h == (Xib(), Uib) || h == Vib) {
                      c = false;
                      break;
                    }
                  }
                }
                if (k.g == ZM) {
                  for (e = new Tob(k.b); e.a < e.c.c.length; ) {
                    d = Wv(Rob(e), 12);
                    h = Wv(rJ(d.c.f, vjb), 85);
                    if (h == (Xib(), Sib) || h == Tib) {
                      c = false;
                      break;
                    }
                  }
                }
              }
              c && vZ(i, g, (djb(), cjb));
            }
          }
        }
        pI(b);
      };
      var TB = Nkb(jAb, "EdgeAndLayerConstraintEdgeReverser", 445);
      hI(446, 1, eAb, AZ);
      _.sc = function BZ(a, b) {
        var c, d, e, f, g, h, i, j, k, l;
        nI(b, "End label placement", 1);
        g = Wv(rJ(a, (eM(), DL)), 15).a;
        this.a = (mp(), new ntb());
        this.c = new ntb();
        this.b = new ntb();
        for (i = new Tob(a.c); i.a < i.c.c.length; ) {
          h = Wv(Rob(i), 16);
          for (k = new Tob(h.a); k.a < k.c.c.length; ) {
            j = Wv(Rob(k), 9);
            for (d = Uh(mX(j)); Cm(d); ) {
              c = Wv(Dm(d), 12);
              for (f = new Tob(c.b); f.a < f.c.c.length; ) {
                e = Wv(Rob(f), 33);
                (gw(rJ(e, tL)) === gw((EK(), CK)) || gw(rJ(e, tL)) === gw(BK)) && (l = null, gw(rJ(e, tL)) === gw(CK) ? l = c.c : gw(rJ(e, tL)) === gw(BK) && (l = c.d), Qmb(this.a, l.f) || Umb(this.a, l.f, 0), Qmb(this.c, l.f) || Umb(this.c, l.f, 0), Qmb(this.b, l) || Umb(this.b, l, 0), gw(rJ(e, (Rib(), pib))) === gw((kP(), gP)) ? zZ(e, l, g) : yZ(e, l, g), void 0);
              }
            }
          }
        }
        pI(b);
      };
      var UB = Nkb(jAb, "EndLabelProcessor", 446);
      hI(269, 1, eAb, SZ);
      _.sc = function TZ(a, b) {
        var c, d, e, f, g;
        nI(b, "Graph transformation (" + this.a + ")", 1);
        e = Ao(a.b);
        for (d = new Tob(a.c); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 16);
          xU(e, c.a);
        }
        switch (this.a.e) {
          case 0:
            JZ(e, a);
            break;
          case 1:
            NZ(e);
            g = Wv(rJ(a, (Mjb(), ojb)), 115);
            !!g && sJ(a, ojb, Qgb(g));
            MZ(a.d);
            MZ(a.e);
            break;
          case 2:
            JZ(e, a);
            LZ(e, a);
            NZ(e);
            f = Wv(rJ(a, (Mjb(), ojb)), 115);
            !!f && sJ(a, ojb, Qgb(f));
            MZ(a.d);
            MZ(a.e);
        }
        pI(b);
      };
      var WB = Nkb(jAb, "GraphTransformer", 269);
      hI(221, 17, {221: 1, 3: 1, 23: 1, 17: 1}, YZ);
      var UZ, VZ, WZ;
      var VB = Okb(jAb, "GraphTransformer/Mode", 221, IF, ZZ);
      hI(448, 1, eAb, d$);
      _.sc = function e$(a, b) {
        nI(b, "Hierarchical port constraint processing", 1);
        a$(a);
        c$(a);
        pI(b);
      };
      var YB = Nkb(jAb, "HierarchicalPortConstraintProcessor", 448);
      hI(449, 1, fyb, g$);
      _.$b = function h$(a, b) {
        return f$(Wv(a, 9), Wv(b, 9));
      };
      var XB = Nkb(jAb, "HierarchicalPortConstraintProcessor/NodeComparator", 449);
      hI(450, 1, eAb, j$);
      _.sc = function k$(a, b) {
        var c, d, e, f, g, h, i, j, k, l;
        nI(b, "Hierarchical port dummy size processing", 1);
        i = new GU();
        l = new GU();
        h = Wv(rJ(a, (Rib(), Jib)), 15).a;
        k = h * Wv(rJ(a, (Mjb(), qjb)), 15).a;
        c = k * 2;
        for (e = new Tob(a.c); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 16);
          i.c = xv(UF, syb, 1, 0, 4, 1);
          l.c = xv(UF, syb, 1, 0, 4, 1);
          for (g = new Tob(d.a); g.a < g.c.c.length; ) {
            f = Wv(Rob(g), 9);
            if (f.g == (CX(), xX)) {
              j = Wv(rJ(f, hib), 32);
              j == (sN(), $M) ? (i.c[i.c.length] = f, true) : j == pN && (l.c[l.c.length] = f, true);
            }
          }
          i$(i, true, c);
          i$(l, false, c);
        }
        pI(b);
      };
      var ZB = Nkb(jAb, "HierarchicalPortDummySizeProcessor", 450);
      hI(451, 1, eAb, w$);
      _.sc = function x$(a, b) {
        var c, d, e, f;
        nI(b, "Orthogonally routing hierarchical port edges", 1);
        this.a = 0;
        c = s$(a);
        v$(a, c);
        u$(this, a, c);
        q$(a);
        d = Wv(rJ(a, (eM(), TL)), 28);
        e = a.c;
        p$((Cxb(0, e.c.length), Wv(e.c[0], 16)), d, a);
        p$(Wv(yU(e, e.c.length - 1), 16), d, a);
        f = a.c;
        n$((Cxb(0, f.c.length), Wv(f.c[0], 16)));
        n$(Wv(yU(f, f.c.length - 1), 16));
        pI(b);
      };
      _.a = 0;
      var aC = Nkb(jAb, "HierarchicalPortOrthogonalEdgeRouter", 451);
      hI(452, 1, fyb, z$);
      _.$b = function A$(a, b) {
        return y$(Wv(a, 9), Wv(b, 9));
      };
      var $B = Nkb(jAb, "HierarchicalPortOrthogonalEdgeRouter/1", 452);
      hI(453, 1, fyb, C$);
      _.$b = function D$(a, b) {
        return B$(Wv(a, 9), Wv(b, 9));
      };
      var _B = Nkb(jAb, "HierarchicalPortOrthogonalEdgeRouter/2", 453);
      hI(454, 1, eAb, F$);
      _.sc = function G$(a, b) {
        var c;
        nI(b, "Hierarchical port position processing", 1);
        c = a.c;
        c.c.length > 0 && E$((Cxb(0, c.c.length), Wv(c.c[0], 16)), a);
        c.c.length > 1 && E$(Wv(yU(c, c.c.length - 1), 16), a);
        pI(b);
      };
      var bC = Nkb(jAb, "HierarchicalPortPositionProcessor", 454);
      hI(471, 1, eAb, I$);
      _.sc = function J$(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p;
        nI(b, "Hyperedge merging", 1);
        n = new Fnb(a.c, 0);
        while (n.b < n.d.Y()) {
          m = (Bxb(n.b < n.d.Y()), Wv(n.d.sb(n.c = n.b++), 16));
          p = m.a;
          if (p.c.length == 0) {
            continue;
          }
          h = null;
          l = null;
          for (o2 = 0; o2 < p.c.length; o2++) {
            c = (Cxb(o2, p.c.length), Wv(p.c[o2], 9));
            g = c.g;
            if (g == (CX(), zX) && l == zX) {
              e = Wv(rJ(c, (Rib(), qib)), 7);
              j = Wv(rJ(h, qib), 7);
              f = Wv(rJ(c, rib), 7);
              k = Wv(rJ(h, rib), 7);
              d = !!e || !!f;
              i = !!j || !!k;
              if (d && i && (e == j || f == k)) {
                H$(c, h, e == j, f == k);
                Cxb(o2, p.c.length);
                hxb(p.c, o2, 1);
                --o2;
                c = h;
                g = l;
              }
            }
            h = c;
            l = g;
          }
        }
        pI(b);
      };
      var cC = Nkb(jAb, "HyperedgeDummyMerger", 471);
      hI(472, 1, eAb, L$);
      _.sc = function M$(a, b) {
        var c, d, e, f, g, h, i, j, k, l;
        nI(b, "Hypernodes processing", 1);
        for (e = new Tob(a.c); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 16);
          for (h = new Tob(d.a); h.a < h.c.c.length; ) {
            g = Wv(Rob(h), 9);
            if (Ckb(Ixb(Xv(rJ(g, (eM(), AL))))) && g.f.c.length <= 2) {
              l = 0;
              k = 0;
              c = 0;
              f = 0;
              for (j = new Tob(g.f); j.a < j.c.c.length; ) {
                i = Wv(Rob(j), 7);
                switch (i.g.e) {
                  case 1:
                    ++l;
                    break;
                  case 2:
                    ++k;
                    break;
                  case 3:
                    ++c;
                    break;
                  case 4:
                    ++f;
                }
              }
              l == 0 && c == 0 && K$(a, g, f <= k);
            }
          }
        }
        pI(b);
      };
      var dC = Nkb(jAb, "HypernodesProcessor", 472);
      hI(473, 1, eAb, N$);
      _.sc = function O$(a, b) {
        var c, d, e, f, g, h, i, j, k;
        nI(b, "Layer constraint edge reversal", 1);
        for (g = new Tob(a.c); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 16);
          k = -1;
          c = new GU();
          j = Wv(FU(f.a, xv(qB, Nzb, 9, f.a.c.length, 0, 1)), 51);
          for (e = 0; e < j.length; e++) {
            d = Wv(rJ(j[e], (Rib(), mib)), 140);
            if (k == -1) {
              d != (Hhb(), Ghb) && (k = e);
            } else {
              if (d == (Hhb(), Ghb)) {
                rX(j[e], null);
                qX(j[e], k++, f);
              }
            }
            d == (Hhb(), Ehb) && vU(c, j[e]);
          }
          for (i = new Tob(c); i.a < i.c.c.length; ) {
            h = Wv(Rob(i), 9);
            rX(h, null);
            rX(h, f);
          }
        }
        pI(b);
      };
      var eC = Nkb(jAb, "InLayerConstraintProcessor", 473);
      hI(474, 1, eAb, R$);
      _.sc = function W$(a, b) {
        var c, d, e, f, g, h;
        if (!Wv(rJ(a, (Rib(), jib)), 18).kb((ohb(), hhb))) {
          return;
        }
        for (h = new Tob(a.b); h.a < h.c.c.length; ) {
          f = Wv(Rob(h), 9);
          if (f.g == (CX(), AX)) {
            e = Wv(rJ(f, (eM(), GL)), 65);
            this.c = Qlb(this.c, f.i.a - e.b);
            this.a = Nlb(this.a, f.i.a + f.j.a + e.c);
            this.d = Qlb(this.d, f.i.b - e.d);
            this.b = Nlb(this.b, f.i.b + f.j.b + e.a);
          }
        }
        for (g = new Tob(a.b); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 9);
          if (f.g != (CX(), AX)) {
            switch (f.g.e) {
              case 2:
                d = Wv(rJ(f, (Mjb(), vjb)), 85);
                if (d == (Xib(), Tib)) {
                  f.i.a = this.c - 10;
                  Q$(f, new X$()).A(new Z$(f));
                  break;
                }
                if (d == Vib) {
                  f.i.a = this.a + 10;
                  Q$(f, new _$()).A(new b_(f));
                  break;
                }
                c = Wv(rJ(f, mib), 140);
                if (c == (Hhb(), Ghb)) {
                  P$(f).A(new d_(f));
                  f.i.b = this.d - 10;
                  break;
                }
                if (c == Ehb) {
                  P$(f).A(new f_(f));
                  f.i.b = this.b + 10;
                  break;
                }
                break;
              default:
                throw new slb("The node type " + f.g + " is not supported by the " + lC);
            }
          }
        }
      };
      _.a = Vzb;
      _.b = Vzb;
      _.c = Uzb;
      _.d = Uzb;
      var lC = Nkb(jAb, "InteractiveExternalPortPositioner", 474);
      hI(475, 1, Tyb, X$);
      _.B = function Y$(a) {
        return Wv(a, 12).d.f;
      };
      var fC = Nkb(jAb, "InteractiveExternalPortPositioner/lambda$0$Type", 475);
      hI(476, 1, Tyb, Z$);
      _.B = function $$(a) {
        return S$(this.a, a);
      };
      var gC = Nkb(jAb, "InteractiveExternalPortPositioner/lambda$1$Type", 476);
      hI(477, 1, Tyb, _$);
      _.B = function a_(a) {
        return Wv(a, 12).c.f;
      };
      var hC = Nkb(jAb, "InteractiveExternalPortPositioner/lambda$2$Type", 477);
      hI(478, 1, Tyb, b_);
      _.B = function c_(a) {
        return T$(this.a, a);
      };
      var iC = Nkb(jAb, "InteractiveExternalPortPositioner/lambda$3$Type", 478);
      hI(479, 1, Tyb, d_);
      _.B = function e_(a) {
        return U$(this.a, a);
      };
      var jC = Nkb(jAb, "InteractiveExternalPortPositioner/lambda$4$Type", 479);
      hI(480, 1, Tyb, f_);
      _.B = function g_(a) {
        return V$(this.a, a);
      };
      var kC = Nkb(jAb, "InteractiveExternalPortPositioner/lambda$5$Type", 480);
      hI(37, 17, {37: 1, 3: 1, 23: 1, 17: 1}, f0);
      var h_, i_, j_, k_, l_, m_, n_, o_, p_, q_, r_, s_, t_, u_, v_, w_, x_, y_, z_, A_, B_, C_, D_, E_, F_, G_, H_, I_, J_, K_, L_, M_, N_, O_, P_, Q_, R_, S_, T_, U_, V_, W_, X_, Y_, Z_, $_, __, a0, b0, c0;
      var mC = Okb(jAb, "IntermediateProcessorStrategy", 37, IF, g0);
      hI(503, 1, eAb, k0);
      _.sc = function l0(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s;
        nI(b, "Inverted port preprocessing", 1);
        j = a.c;
        i = new Fnb(j, 0);
        c = null;
        s = new GU();
        while (i.b < i.d.Y()) {
          r = c;
          c = (Bxb(i.b < i.d.Y()), Wv(i.d.sb(i.c = i.b++), 16));
          for (m = new Tob(s); m.a < m.c.c.length; ) {
            k = Wv(Rob(m), 9);
            rX(k, r);
          }
          s.c = xv(UF, syb, 1, 0, 4, 1);
          for (n = new Tob(c.a); n.a < n.c.c.length; ) {
            k = Wv(Rob(n), 9);
            if (k.g != (CX(), AX)) {
              continue;
            }
            if (!MM(Wv(rJ(k, (eM(), TL)), 28))) {
              continue;
            }
            for (q = pX(k, (djb(), ajb), (sN(), ZM)).mb(); q.G(); ) {
              o2 = Wv(q.H(), 7);
              h = o2.b;
              g = Wv(FU(h, xv(dB, gAb, 12, h.c.length, 0, 1)), 47);
              for (e = 0, f = g.length; e < f; ++e) {
                d = g[e];
                h0(a, o2, d, s);
              }
            }
            for (p = pX(k, bjb, rN).mb(); p.G(); ) {
              o2 = Wv(p.H(), 7);
              h = o2.e;
              g = Wv(FU(h, xv(dB, gAb, 12, h.c.length, 0, 1)), 47);
              for (e = 0, f = g.length; e < f; ++e) {
                d = g[e];
                i0(a, o2, d, s);
              }
            }
          }
        }
        for (l = new Tob(s); l.a < l.c.c.length; ) {
          k = Wv(Rob(l), 9);
          rX(k, c);
        }
        pI(b);
      };
      var nC = Nkb(jAb, "InvertedPortProcessor", 503);
      hI(481, 1, eAb, m0);
      _.sc = function n0(a, b) {
        nI(b, "Node and Port Label Placement and Node Sizing", 1);
        GO((nW(), nW(), new wW(a, false)));
        pI(b);
      };
      var oC = Nkb(jAb, "LabelAndNodeSizeProcessor", 481);
      hI(482, 1, eAb, q0);
      _.sc = function r0(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t;
        nI(b, "Label dummy insertions", 1);
        m = new GU();
        k = Wv(rJ(a, (eM(), DL)), 15).a;
        l = Wv(rJ(a, sL), 59);
        for (o2 = new Tob(a.b); o2.a < o2.c.c.length; ) {
          n = Wv(Rob(o2), 9);
          for (q = new Tob(n.f); q.a < q.c.c.length; ) {
            p = Wv(Rob(q), 7);
            for (h = new Tob(p.e); h.a < h.c.c.length; ) {
              g = Wv(Rob(h), 12);
              if (g.c.f != g.d.f && ol(g.b, o0)) {
                s = Do(g.b.c.length);
                c = new uX(a);
                sX(c, (CX(), yX));
                sJ(c, (Rib(), uib), g);
                sJ(c, Hib, s);
                sJ(c, TL, (KM(), FM));
                sJ(c, qib, g.c);
                sJ(c, rib, g.d);
                m.c[m.c.length] = c;
                i1(g, c);
                t = Wv(rJ(g, dM), 15).a;
                if (t < 0) {
                  t = 0;
                  sJ(g, dM, new llb(t));
                }
                r = Math.floor(t / 2);
                for (e = new Tob(c.f); e.a < e.c.c.length; ) {
                  d = Wv(Rob(e), 7);
                  d.i.b = r;
                }
                f = c.j;
                i = new Fnb(g.b, 0);
                while (i.b < i.d.Y()) {
                  j = (Bxb(i.b < i.d.Y()), Wv(i.d.sb(i.c = i.b++), 33));
                  if (gw(rJ(j, tL)) === gw((EK(), AK))) {
                    if (l == (sK(), rK) || l == nK) {
                      f.a += j.j.a + k;
                      f.b = Nlb(f.b, j.j.b);
                    } else {
                      f.a = Nlb(f.a, j.j.a);
                      f.b += j.j.b + k;
                    }
                    s.c[s.c.length] = j;
                    vnb(i);
                  }
                }
                if (l == (sK(), rK) || l == nK) {
                  f.a -= k;
                  f.b += k + t;
                } else {
                  f.b += k + t;
                }
              }
            }
          }
        }
        xU(a.b, m);
        pI(b);
      };
      var o0;
      var qC = Nkb(jAb, "LabelDummyInserter", 482);
      hI(483, 1, _zb, s0);
      _.D = function t0(a) {
        return gw(rJ(Wv(a, 33), (eM(), tL))) === gw((EK(), AK));
      };
      var pC = Nkb(jAb, "LabelDummyInserter/1", 483);
      hI(484, 1, eAb, w0);
      _.sc = function x0(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m;
        nI(b, "Label dummy removal", 1);
        e = Wv(rJ(a, (eM(), DL)), 15).a;
        h = Wv(rJ(a, sL), 59);
        for (g = new Tob(a.c); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 16);
          j = new Fnb(f.a, 0);
          while (j.b < j.d.Y()) {
            i = (Bxb(j.b < j.d.Y()), Wv(j.d.sb(j.c = j.b++), 9));
            if (i.g == (CX(), yX)) {
              k = Wv(rJ(i, (Rib(), uib)), 12);
              m = Wv(rJ(k, dM), 15).a;
              c = new II(i.i);
              gw(rJ(i, pib)) === gw((kP(), hP)) && (c.b += m + e);
              d = new HI(i.j.a, i.j.b - m - e);
              l = Wv(rJ(i, Hib), 20);
              h == (sK(), rK) || h == nK ? v0(l, c, e, d, gw(rJ(i, pib)) !== gw(gP)) : u0(l, c, e, d);
              xU(k.b, l);
              c1(i, false);
              vnb(j);
            }
          }
        }
        pI(b);
      };
      var rC = Nkb(jAb, "LabelDummyRemover", 484);
      hI(485, 1, eAb, A0);
      _.sc = function B0(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s;
        nI(b, "Label dummy switching", 1);
        c = new GU();
        l = new GU();
        h = new GU();
        n = new GU();
        for (g = new Tob(a.c); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 16);
          for (k = new Tob(f.a); k.a < k.c.c.length; ) {
            j = Wv(Rob(k), 9);
            if (j.g == (CX(), yX)) {
              c.c[c.c.length] = j;
              h.c = xv(UF, syb, 1, 0, 4, 1);
              n.c = xv(UF, syb, 1, 0, 4, 1);
              p = j;
              do {
                p = Wv(Dm(Uh(iX(p))), 12).c.f;
                p.g == zX && (h.c[h.c.length] = p, true);
              } while (p.g == zX);
              s = j;
              do {
                s = Wv(Dm(Uh(mX(s))), 12).d.f;
                s.g == zX && (n.c[n.c.length] = s, true);
              } while (s.g == zX);
              i = h.c.length;
              o2 = n.c.length;
              if (i > o2 + 1) {
                m = (i + o2) / 2 | 0;
                vU(l, new RJ(j, (Cxb(m, h.c.length), Wv(h.c[m], 9))));
              } else if (o2 > i + 1) {
                m = ((o2 - i) / 2 | 0) - 1;
                vU(l, new RJ(j, (Cxb(m, n.c.length), Wv(n.c[m], 9))));
              }
            }
          }
        }
        for (r = new Tob(l); r.a < r.c.c.length; ) {
          q = Wv(Rob(r), 27);
          z0(Wv(q.a, 9), Wv(q.b, 9));
        }
        for (e = new Tob(c); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 9);
          y0(d, new C0(), (Rib(), rib));
          y0(d, new E0(), qib);
        }
        pI(b);
      };
      var uC = Nkb(jAb, "LabelDummySwitcher", 485);
      hI(486, 1, Tyb, C0);
      _.B = function D0(a) {
        return Wv(Dm(Uh(iX(Wv(a, 9)))), 12).c.f;
      };
      var sC = Nkb(jAb, "LabelDummySwitcher/lambda$0$Type", 486);
      hI(487, 1, Tyb, E0);
      _.B = function F0(a) {
        return Wv(Dm(Uh(mX(Wv(a, 9)))), 12).d.f;
      };
      var tC = Nkb(jAb, "LabelDummySwitcher/lambda$1$Type", 487);
      hI(488, 1, eAb, G0);
      _.sc = function H0(a, b) {
        nI(b, "Label management", 1);
        iw(rJ(a, (bK(), aK)));
        pI(b);
      };
      var vC = Nkb(jAb, "LabelManagementProcessor", 488);
      hI(489, 1, eAb, S0);
      _.sc = function T0(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p;
        i = Wv(rJ(a, (Mjb(), ojb)), 115);
        nI(b, "Label side selection (" + i + ")", 1);
        j = (_b(a), new Vh(a));
        switch (i.e) {
          case 0:
            L0(j);
            break;
          case 1:
            K0(j);
            break;
          case 2:
            O0(j);
            break;
          case 3:
            N0(j);
            break;
          case 4:
            R0(j);
        }
        for (h = new Tob(a.c); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 16);
          for (d = new Tob(g.a); d.a < d.c.c.length; ) {
            c = Wv(Rob(d), 9);
            for (n = new Tob(c.f); n.a < n.c.c.length; ) {
              l = Wv(Rob(n), 7);
              for (f = new Tob(l.c); f.a < f.c.c.length; ) {
                e = Wv(Rob(f), 33);
                gw(rJ(e, (Rib(), pib))) === gw((kP(), jP)) && sJ(e, pib, I0);
              }
            }
            if (c.g == (CX(), yX)) {
              if (gw(rJ(c, (Rib(), pib))) === gw((kP(), gP))) {
                k = Wv(rJ(c, uib), 12);
                p = Wv(rJ(k, (eM(), dM)), 15).a;
                o2 = c.j.b - Math.ceil(p / 2);
                for (m = new Tob(c.f); m.a < m.c.c.length; ) {
                  l = Wv(Rob(m), 7);
                  l.i.b = o2;
                }
              }
            }
          }
        }
        pI(b);
      };
      var I0;
      var xC = Nkb(jAb, "LabelSideSelector", 489);
      hI(490, 1, fyb, V0);
      _.$b = function W0(a, b) {
        return U0(Wv(a, 7), Wv(b, 7));
      };
      var wC = Nkb(jAb, "LabelSideSelector/1", 490);
      hI(495, 1, eAb, Z0);
      _.sc = function $0(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t;
        nI(b, "Layer constraint application", 1);
        j = a.c;
        if (j.c.length == 0) {
          pI(b);
          return;
        }
        f = (Cxb(0, j.c.length), Wv(j.c[0], 16));
        g = Wv(yU(j, j.c.length - 1), 16);
        s = new sY(a);
        t = new sY(a);
        for (i = new Tob(j); i.a < i.c.c.length; ) {
          h = Wv(Rob(i), 16);
          p = Wv(FU(h.a, xv(qB, Nzb, 9, h.a.c.length, 0, 1)), 51);
          for (m = 0, o2 = p.length; m < o2; ++m) {
            l = p[m];
            c = Wv(rJ(l, (Mjb(), vjb)), 85);
            switch (c.e) {
              case 1:
                rX(l, f);
                X0(l, false);
                break;
              case 2:
                rX(l, s);
                X0(l, true);
                break;
              case 3:
                rX(l, g);
                Y0(l);
                break;
              case 4:
                rX(l, t);
                Y0(l);
            }
          }
        }
        if (j.c.length >= 2) {
          k = true;
          q = (Cxb(1, j.c.length), Wv(j.c[1], 16));
          for (n = new Tob(f.a); n.a < n.c.c.length; ) {
            l = Wv(Rob(n), 9);
            if (gw(rJ(l, (Mjb(), vjb))) === gw((Xib(), Wib))) {
              k = false;
              break;
            }
            for (e = Uh(mX(l)); Cm(e); ) {
              d = Wv(Dm(e), 12);
              if (d.d.f.d == q) {
                k = false;
                break;
              }
            }
            if (!k) {
              break;
            }
          }
          if (k) {
            p = Wv(FU(f.a, xv(qB, Nzb, 9, f.a.c.length, 0, 1)), 51);
            for (m = 0, o2 = p.length; m < o2; ++m) {
              l = p[m];
              rX(l, q);
            }
            BU(j, f);
          }
        }
        if (j.c.length >= 2) {
          k = true;
          r = Wv(yU(j, j.c.length - 2), 16);
          for (n = new Tob(g.a); n.a < n.c.c.length; ) {
            l = Wv(Rob(n), 9);
            if (gw(rJ(l, (Mjb(), vjb))) === gw((Xib(), Wib))) {
              k = false;
              break;
            }
            for (e = Uh(iX(l)); Cm(e); ) {
              d = Wv(Dm(e), 12);
              if (d.c.f.d == r) {
                k = false;
                break;
              }
            }
            if (!k) {
              break;
            }
          }
          if (k) {
            p = Wv(FU(g.a, xv(qB, Nzb, 9, g.a.c.length, 0, 1)), 51);
            for (m = 0, o2 = p.length; m < o2; ++m) {
              l = p[m];
              rX(l, r);
            }
            BU(j, g);
          }
        }
        j.c.length == 1 && (Cxb(0, j.c.length), Wv(j.c[0], 16)).a.c.length == 0 && AU(j, 0);
        s.a.c.length == 0 || (Fxb(0, j.c.length), fxb(j.c, 0, s));
        t.a.c.length == 0 || (j.c[j.c.length] = t, true);
        pI(b);
      };
      var yC = Nkb(jAb, "LayerConstraintProcessor", 495);
      hI(496, 1, eAb, _0);
      _.sc = function a1(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2;
        nI(b, "Layer size calculation", 1);
        j = rAb;
        i = 5e-324;
        for (g = new Tob(a.c); g.a < g.c.c.length; ) {
          f = Wv(Rob(g), 16);
          h = f.c;
          h.a = 0;
          h.b = 0;
          if (f.a.c.length == 0) {
            continue;
          }
          for (l = new Tob(f.a); l.a < l.c.c.length; ) {
            k = Wv(Rob(l), 9);
            n = k.j;
            m = k.e;
            h.a = Nlb(h.a, n.a + m.b + m.c);
          }
          d = Wv(yU(f.a, 0), 9);
          o2 = d.i.b - d.e.d;
          e = Wv(yU(f.a, f.a.c.length - 1), 9);
          c = e.i.b + e.j.b + e.e.a;
          h.b = c - o2;
          j = j < o2 ? j : o2;
          i = i > c ? i : c;
        }
        a.e.b = i - j;
        a.d.b -= j;
        pI(b);
      };
      var zC = Nkb(jAb, "LayerSizeAndGraphHeightCalculator", 496);
      hI(497, 1, eAb, b1);
      _.sc = function d1(a, b) {
        var c, d, e, f, g;
        nI(b, "Edge joining", 1);
        c = Ckb(Ixb(Xv(rJ(a, (Mjb(), gjb)))));
        for (e = new Tob(a.c); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 16);
          g = new Fnb(d.a, 0);
          while (g.b < g.d.Y()) {
            f = (Bxb(g.b < g.d.Y()), Wv(g.d.sb(g.c = g.b++), 9));
            if (f.g == (CX(), zX)) {
              c1(f, c);
              vnb(g);
            }
          }
        }
        pI(b);
      };
      var AC = Nkb(jAb, "LongEdgeJoiner", 497);
      hI(498, 1, eAb, e1);
      _.sc = function g1(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n;
        nI(b, "Edge splitting", 1);
        if (a.c.c.length <= 2) {
          pI(b);
          return;
        }
        f = new Fnb(a.c, 0);
        g = (Bxb(f.b < f.d.Y()), Wv(f.d.sb(f.c = f.b++), 16));
        while (f.b < f.d.Y()) {
          e = g;
          g = (Bxb(f.b < f.d.Y()), Wv(f.d.sb(f.c = f.b++), 16));
          for (i = new Tob(e.a); i.a < i.c.c.length; ) {
            h = Wv(Rob(i), 9);
            for (k = new Tob(h.f); k.a < k.c.c.length; ) {
              j = Wv(Rob(k), 7);
              for (d = new Tob(j.e); d.a < d.c.c.length; ) {
                c = Wv(Rob(d), 12);
                m = c.d;
                l = m.f.d;
                l != e && l != g && i1(c, (n = new uX(a), sX(n, (CX(), zX)), sJ(n, (Rib(), uib), c), sJ(n, (eM(), TL), (KM(), FM)), rX(n, g), n));
              }
            }
          }
        }
        pI(b);
      };
      var BC = Nkb(jAb, "LongEdgeSplitter", 498);
      hI(499, 1, eAb, k1);
      _.sc = function l1(a, b) {
        var c, d, e, f, g, h, i, j;
        nI(b, "Node margin calculation", 1);
        c = new rP((nW(), new wW(a, true)));
        oP(c);
        h = Wv(rJ(a, (Rib(), Jib)), 15).a;
        for (e = new Tob(a.c); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 16);
          for (g = new Tob(d.a); g.a < g.c.c.length; ) {
            f = Wv(Rob(g), 9);
            j1(f, h);
            i = f.e;
            j = Wv(rJ(f, Oib), 65);
            i.b = Nlb(i.b, j.b);
            i.c = Nlb(i.c, j.c);
            i.a = Nlb(i.a, j.a);
            i.d = Nlb(i.d, j.d);
          }
        }
        pI(b);
      };
      var CC = Nkb(jAb, zzb, 499);
      hI(491, 1, eAb, q1);
      _.sc = function t1(a, b) {
        var c, d, e, f, g, h, i, j, k, l;
        nI(b, "Node promotion heuristic", 1);
        this.g = a;
        m1(this);
        this.q = Wv(rJ(a, (Mjb(), Bjb)), 109);
        j = Wv(rJ(this.g, Cjb), 24).a;
        e = new u1();
        switch (this.q.e) {
          case 2:
          case 1:
            o1(this, e);
            break;
          case 3:
            this.q = (I1(), H1);
            o1(this, e);
            h = 0;
            for (g = new Tob(this.a); g.a < g.c.c.length; ) {
              f = Wv(Rob(g), 24);
              h = Plb(h, f.a);
            }
            if (h > this.j) {
              this.q = B1;
              o1(this, e);
            }
            break;
          case 4:
            this.q = (I1(), H1);
            o1(this, e);
            i = 0;
            for (d = new Tob(this.b); d.a < d.c.c.length; ) {
              c = Yv(Rob(d));
              i = Nlb(i, (Dxb(c), c));
            }
            if (i > this.k) {
              this.q = E1;
              o1(this, e);
            }
            break;
          case 6:
            l = hw(Llb(this.f.length * j / 100));
            o1(this, new w1(l));
            break;
          case 5:
            k = hw(Llb(this.d * j / 100));
            o1(this, new y1(k));
            break;
          default:
            o1(this, e);
        }
        p1(this, a);
        pI(b);
      };
      _.d = 0;
      _.e = 0;
      _.i = 0;
      _.j = 0;
      _.k = 0;
      _.n = 0;
      var HC = Nkb(jAb, "NodePromotion", 491);
      hI(492, 1, Tyb, u1);
      _.B = function v1(a) {
        return xkb(), xkb(), wkb;
      };
      var DC = Nkb(jAb, "NodePromotion/lambda$0$Type", 492);
      hI(493, 1, Tyb, w1);
      _.B = function x1(a) {
        return r1(this.a, a);
      };
      _.a = 0;
      var EC = Nkb(jAb, "NodePromotion/lambda$1$Type", 493);
      hI(494, 1, Tyb, y1);
      _.B = function z1(a) {
        return s1(this.a, a);
      };
      _.a = 0;
      var FC = Nkb(jAb, "NodePromotion/lambda$2$Type", 494);
      hI(109, 17, {109: 1, 3: 1, 23: 1, 17: 1}, J1);
      var A1, B1, C1, D1, E1, F1, G1, H1;
      var GC = Okb(jAb, "NodePromotionStrategy", 109, IF, K1);
      var L1;
      hI(500, 1, eAb, R1);
      _.sc = function S1(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u;
        nI(b, sAb, 1);
        n = Wv(rJ(a, (eM(), uL)), 122);
        for (e = new Tob(a.c); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 16);
          i = Wv(FU(d.a, xv(qB, Nzb, 9, d.a.c.length, 0, 1)), 51);
          for (g = 0, h = i.length; g < h; ++g) {
            f = i[g];
            if (f.g != (CX(), BX)) {
              continue;
            }
            if (n == (NK(), LK)) {
              for (k = new Tob(f.f); k.a < k.c.c.length; ) {
                j = Wv(Rob(k), 7);
                j.b.c.length == 0 || P1(j);
                j.e.c.length == 0 || Q1(j);
              }
            } else if (aw(rJ(f, (Rib(), uib)), 12)) {
              p = Wv(rJ(f, uib), 12);
              q = Wv(nX(f, (sN(), rN)).mb().H(), 7);
              r = Wv(nX(f, ZM).mb().H(), 7);
              s = Wv(rJ(q, uib), 7);
              t = Wv(rJ(r, uib), 7);
              dW(p, t);
              eW(p, s);
              u = new II(r.f.i);
              u.a = MI(Bv(tv(qz, 1), Fzb, 10, 0, [t.f.i, t.i, t.a])).a;
              QI(p.a, u);
              u = new II(q.f.i);
              u.a = MI(Bv(tv(qz, 1), Fzb, 10, 0, [s.f.i, s.i, s.a])).a;
              QI(p.a, u);
            } else {
              if (f.f.c.length >= 2) {
                o2 = true;
                l = new Tob(f.f);
                c = Wv(Rob(l), 7);
                while (l.a < l.c.c.length) {
                  m = c;
                  c = Wv(Rob(l), 7);
                  if (!rb(rJ(m, uib), rJ(c, uib))) {
                    o2 = false;
                    break;
                  }
                }
              } else {
                o2 = false;
              }
              for (k = new Tob(f.f); k.a < k.c.c.length; ) {
                j = Wv(Rob(k), 7);
                j.b.c.length == 0 || N1(j, o2);
                j.e.c.length == 0 || O1(j, o2);
              }
            }
            rX(f, null);
          }
        }
        pI(b);
      };
      var IC = Nkb(jAb, "NorthSouthPortPostprocessor", 500);
      hI(501, 1, eAb, X1);
      _.sc = function Y1(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u;
        nI(b, sAb, 1);
        o2 = new GU();
        u = new GU();
        for (j = new Tob(a.c); j.a < j.c.c.length; ) {
          i = Wv(Rob(j), 16);
          q = -1;
          n = Wv(FU(i.a, xv(qB, Nzb, 9, i.a.c.length, 0, 1)), 51);
          for (l = 0, m = n.length; l < m; ++l) {
            k = n[l];
            ++q;
            if (!(k.g == (CX(), AX) && MM(Wv(rJ(k, (eM(), TL)), 28)))) {
              continue;
            }
            LM(Wv(rJ(k, (eM(), TL)), 28)) || W1(k);
            sJ(k, (Rib(), nib), k);
            o2.c = xv(UF, syb, 1, 0, 4, 1);
            u.c = xv(UF, syb, 1, 0, 4, 1);
            c = new GU();
            t = new aJ();
            ml(t, nX(k, (sN(), $M)));
            U1(a, t, o2, u, c);
            h = q;
            for (f = new Tob(o2); f.a < f.c.c.length; ) {
              d = Wv(Rob(f), 9);
              qX(d, h, i);
              ++q;
              sJ(d, nib, k);
              g = Wv(yU(d.f, 0), 7);
              p = Wv(rJ(g, uib), 7);
              Ckb(Ixb(Xv(rJ(p, (Mjb(), Djb))))) || Wv(rJ(d, oib), 20).ib(k);
            }
            _I(t);
            for (s = nX(k, pN).mb(); s.G(); ) {
              r = Wv(s.H(), 7);
              TI(t, r, t.a, t.a.a);
            }
            U1(a, t, u, null, c);
            for (e = new Tob(u); e.a < e.c.c.length; ) {
              d = Wv(Rob(e), 9);
              qX(d, ++q, i);
              sJ(d, nib, k);
              g = Wv(yU(d.f, 0), 7);
              p = Wv(rJ(g, uib), 7);
              Ckb(Ixb(Xv(rJ(p, (Mjb(), Djb))))) || Wv(rJ(k, oib), 20).ib(d);
            }
            c.c.length == 0 || sJ(k, Shb, c);
          }
        }
        pI(b);
      };
      var KC = Nkb(jAb, "NorthSouthPortPreprocessor", 501);
      hI(502, 1, fyb, Z1);
      _.$b = function $1(a, b) {
        var c, d;
        return c = a.g, d = b.g, c != d ? c.e - d.e : a.k == b.k ? 0 : c == (sN(), $M) ? a.k - b.k : b.k - a.k;
      };
      var JC = Nkb(jAb, "NorthSouthPortPreprocessor/lambda$0$Type", 502);
      hI(504, 1, eAb, _1);
      _.sc = function a2(a, b) {
        var c, d, e, f, g, h;
        nI(b, "Removing partition constraint edges", 1);
        for (d = new Tob(a.c); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 16);
          for (f = new Tob(c.a); f.a < f.c.c.length; ) {
            e = Wv(Rob(f), 9);
            h = new Tob(e.f);
            while (h.a < h.c.c.length) {
              g = Wv(Rob(h), 7);
              Ckb(Ixb(Xv(rJ(g, (Rib(), Aib))))) && Sob(h);
            }
          }
        }
        pI(b);
      };
      var LC = Nkb(jAb, "PartitionPostprocessor", 504);
      hI(505, 1, eAb, c2);
      _.sc = function d2(a, b) {
        var c, d, e, f, g, h, i, j, k, l;
        nI(b, "Adding partition constraint edges", 1);
        this.a = new GU();
        for (h = new Tob(a.b); h.a < h.c.c.length; ) {
          f = Wv(Rob(h), 9);
          e = Wv(rJ(f, (eM(), ML)), 24);
          b2(this, e.a).ib(f);
        }
        for (d = 0; d < this.a.c.length - 1; d++) {
          for (g = Wv(yU(this.a, d), 20).mb(); g.G(); ) {
            f = Wv(g.H(), 9);
            k = new RX();
            PX(k, f);
            QX(k, (sN(), ZM));
            sJ(k, (Rib(), Aib), (xkb(), xkb(), wkb));
            for (j = Wv(yU(this.a, d + 1), 20).mb(); j.G(); ) {
              i = Wv(j.H(), 9);
              l = new RX();
              PX(l, i);
              QX(l, rN);
              sJ(l, Aib, (null, wkb));
              c = new hW();
              sJ(c, Aib, (null, wkb));
              sJ(c, (eM(), ZL), Elb(20));
              dW(c, k);
              eW(c, l);
            }
          }
        }
        this.a = null;
        pI(b);
      };
      var MC = Nkb(jAb, "PartitionPreprocessor", 505);
      hI(506, 1, eAb, f2);
      _.sc = function g2(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p;
        nI(b, "Port distribution", 1);
        c = jW(a);
        n = 0;
        k = 0;
        for (e = 0, g = c.length; e < g; ++e) {
          d = c[e];
          for (i = 0, j = d.length; i < j; ++i) {
            h = d[i];
            h.k = k++;
            for (m = new Tob(h.f); m.a < m.c.c.length; ) {
              l = Wv(Rob(m), 7);
              l.k = n++;
            }
          }
        }
        for (f = new Tob(a.c); f.a < f.c.c.length; ) {
          d = Wv(Rob(f), 16);
          e2(d);
        }
        p = Wv(rJ(a, (Rib(), Gib)), 154);
        o2 = wvb(p, 1) != 0 ? new P9(xv(lw, tAb, 26, n, 12, 1)) : new M9(xv(lw, tAb, 26, n, 12, 1));
        Z8(o2, c);
        pI(b);
      };
      var NC = Nkb(jAb, "PortDistributionProcessor", 506);
      hI(507, 1, eAb, h2);
      _.sc = function i2(a, b) {
        var c, d, e, f, g;
        nI(b, "Port order processing", 1);
        g = new k2();
        for (d = new Tob(a.c); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 16);
          for (f = new Tob(c.a); f.a < f.c.c.length; ) {
            e = Wv(Rob(f), 9);
            MM(Wv(rJ(e, (eM(), TL)), 28)) && Gpb(e.f, g);
          }
        }
        pI(b);
      };
      var PC = Nkb(jAb, "PortListSorter", 507);
      hI(508, 1, fyb, k2);
      _.$b = function l2(a, b) {
        return j2(Wv(a, 7), Wv(b, 7));
      };
      var OC = Nkb(jAb, "PortListSorter/PortComparator", 508);
      hI(509, 1, eAb, n2);
      _.sc = function o2(a, b) {
        var c, d, e, f, g;
        nI(b, "Port side processing", 1);
        for (g = new Tob(a.b); g.a < g.c.c.length; ) {
          e = Wv(Rob(g), 9);
          m2(e);
        }
        for (d = new Tob(a.c); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 16);
          for (f = new Tob(c.a); f.a < f.c.c.length; ) {
            e = Wv(Rob(f), 9);
            m2(e);
          }
        }
        pI(b);
      };
      var QC = Nkb(jAb, "PortSideProcessor", 509);
      hI(510, 1, eAb, q2);
      _.sc = function r2(a, b) {
        var c, d, e, f, g, h, i, j, k, l;
        nI(b, "Restoring reversed edges", 1);
        for (h = new Tob(a.c); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 16);
          for (j = new Tob(g.a); j.a < j.c.c.length; ) {
            i = Wv(Rob(j), 9);
            for (l = new Tob(i.f); l.a < l.c.c.length; ) {
              k = Wv(Rob(l), 7);
              f = Wv(FU(k.e, xv(dB, gAb, 12, k.e.c.length, 0, 1)), 47);
              for (d = 0, e = f.length; d < e; ++d) {
                c = f[d];
                Ckb(Ixb(Xv(rJ(c, (Rib(), Iib))))) && cW(c, false);
              }
            }
          }
        }
        pI(b);
      };
      var RC = Nkb(jAb, "ReversedEdgeRestorer", 510);
      hI(511, 1, eAb, x2);
      _.sc = function y2(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C, D, F, G, H, I, J;
        nI(b, "Sausage Folding", 1);
        this.b = Wv(rJ(a, (Rib(), Jib)), 15).a;
        this.a = this.b * Wv(rJ(a, (Mjb(), Ejb)), 15).a;
        o2 = t2(this, a);
        n = a.c.c.length;
        p = u2(this, a);
        G = n * p;
        e = Wv(rJ(a, (eM(), sL)), 59);
        e == (sK(), oK) || e == pK || e == qK ? d = Wv(rJ(a, Rhb), 15).a : d = 1 / Wv(rJ(a, Rhb), 15).a;
        c = G / o2;
        if (d > c) {
          pI(b);
          return;
        }
        D = 0;
        f = rAb;
        do {
          ++D;
          c = G / D / (o2 * D);
          m = f;
          f = c - d <= 0 ? 0 - (c - d) : c - d;
        } while (c > d);
        m < f && --D;
        B = n / (1 > D ? 1 : D) | 0;
        j = B;
        u = B;
        J = true;
        while (j < n) {
          l = Wv(yU(a.c, j), 16);
          C = true;
          s = null;
          t = null;
          K:
            for (I = new Tob(l.a); I.a < I.c.c.length; ) {
              H = Wv(Rob(I), 9);
              for (h = Uh(iX(H)); Cm(h); ) {
                g = Wv(Dm(h), 12);
                if (!!s && s != H) {
                  C = false;
                  break K;
                }
                s = H;
                F = g.c.f;
                if (!!t && t != F) {
                  C = false;
                  break K;
                }
                t = F;
              }
            }
          if (J && C) {
            u = 0;
            J = false;
          }
          if (j != u) {
            v = Wv(yU(a.c, u), 16);
            for (r = new Tob(Ao(l.a)); r.a < r.c.c.length; ) {
              q = Wv(Rob(r), 9);
              qX(q, v.a.c.length, v);
              if (u == 0) {
                for (h = new Tob(Ao(iX(q))); h.a < h.c.c.length; ) {
                  g = Wv(Rob(h), 12);
                  cW(g, true);
                  sJ(a, cib, (xkb(), xkb(), wkb));
                  v2(a, g);
                  i = new GU();
                  s2(a, g.c, g, i);
                  for (A = new Tob(i); A.a < A.c.c.length; ) {
                    w = Wv(Rob(A), 9);
                    qX(w, v.a.c.length - 1, v);
                  }
                }
              }
            }
          }
          u >= B && (J = true);
          ++u;
          ++j;
        }
        k = new Fnb(a.c, 0);
        while (k.b < k.d.Y()) {
          l = (Bxb(k.b < k.d.Y()), Wv(k.d.sb(k.c = k.b++), 16));
          l.a.c.length == 0 && vnb(k);
        }
        pI(b);
      };
      _.a = 0;
      _.b = 0;
      var SC = Nkb(jAb, "SausageFolding", 511);
      hI(512, 1, eAb, A2);
      _.sc = function B2(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s;
        nI(b, "Self-loop processing", 1);
        c = new GU();
        for (k = new Tob(a.c); k.a < k.c.c.length; ) {
          j = Wv(Rob(k), 16);
          c.c = xv(UF, syb, 1, 0, 4, 1);
          for (m = new Tob(j.a); m.a < m.c.c.length; ) {
            l = Wv(Rob(m), 9);
            for (o2 = new Tob(l.f); o2.a < o2.c.c.length; ) {
              n = Wv(Rob(o2), 7);
              i = Wv(FU(n.e, xv(dB, gAb, 12, n.e.c.length, 0, 1)), 47);
              for (g = 0, h = i.length; g < h; ++g) {
                f = i[g];
                if (f.c.f != f.d.f) {
                  continue;
                }
                p = f.c;
                r = f.d;
                q = p.g;
                s = r.g;
                (q == (sN(), $M) || q == pN) && s == rN ? cW(f, false) : q == pN && s == $M ? cW(f, false) : q == ZM && s != ZM && cW(f, false);
                q == ZM && s == rN ? vU(c, z2(a, f, r, p)) : q == rN && s == ZM && vU(c, z2(a, f, p, r));
              }
            }
          }
          for (e = new Tob(c); e.a < e.c.c.length; ) {
            d = Wv(Rob(e), 9);
            rX(d, j);
          }
        }
        pI(b);
      };
      var TC = Nkb(jAb, "SelfLoopProcessor", 512);
      hI(513, 1, eAb, H2);
      _.sc = function I2(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2;
        nI(b, "Spline SelfLoop positioning", 1);
        k = Wv(rJ(a, (Mjb(), Jjb)), 153);
        for (j = new Tob(a.c); j.a < j.c.c.length; ) {
          i = Wv(Rob(j), 16);
          for (m = new Tob(i.a); m.a < m.c.c.length; ) {
            l = Wv(Rob(m), 9);
            g = Wv(rJ(l, (Rib(), Nib)), 20);
            h = new GU();
            for (e = g.mb(); e.G(); ) {
              c = Wv(e.H(), 75);
              ceb(c);
              if ((n = pr(c.g), Ue(n, c.i), n).a.Y() == 0) {
                h.c[h.c.length] = c;
              } else {
                G2(c);
                c.g.a.Y() == 0 || C2(c);
              }
            }
            switch (k.e) {
              case 0:
                o2 = new Q2(l);
                P2(o2);
                N2(o2, h);
                break;
              case 2:
                for (f = new Tob(h); f.a < f.c.c.length; ) {
                  c = Wv(Rob(f), 75);
                  aeb(c, (Ieb(), meb), true);
                }
                break;
              case 1:
                for (d = new Tob(h); d.a < d.c.c.length; ) {
                  c = Wv(Rob(d), 75);
                  aeb(c, (Ieb(), meb), true);
                }
            }
            switch (k.e) {
              case 0:
              case 1:
                F2(g);
                break;
              case 2:
                E2(g);
            }
          }
        }
        pI(b);
      };
      var ZC = Nkb(jAb, "SplineSelfLoopPositioner", 513);
      hI(515, 1, {}, Q2);
      var WC = Nkb(jAb, "SplineSelfLoopPositioner/DistributedLoopSidesCalculator", 515);
      hI(516, 1, {}, $2);
      _.d = true;
      var VC = Nkb(jAb, "SplineSelfLoopPositioner/DistributedLoopSidesCalculator/SortedLoopSides", 516);
      hI(116, 1, {116: 1}, _2);
      _.a = 0;
      _.b = 0;
      var UC = Nkb(jAb, "SplineSelfLoopPositioner/DistributedLoopSidesCalculator/SortedLoopSides/SizeOfSide", 116);
      hI(318, 1, {}, g3);
      var a3;
      var XC = Nkb(jAb, "SplineSelfLoopPositioner/PortReadder", 318);
      hI(514, 1, fyb, i3);
      _.$b = function j3(a, b) {
        return h3(Wv(a, 75), Wv(b, 75));
      };
      var YC = Nkb(jAb, "SplineSelfLoopPositioner/TextWidthComparator", 514);
      hI(517, 1, eAb, l3);
      _.sc = function o3(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s;
        nI(b, "Spline SelfLoop pre-processing.", 1);
        k = new Wub();
        for (m = new Tob(a.b); m.a < m.c.c.length; ) {
          l = Wv(Rob(m), 9);
          k3(l);
          k.a.Q();
          for (h = Uh(mX(l)); Cm(h); ) {
            f = Wv(Dm(h), 12);
            bW(f) && (n = k.a.db(f, k), n == null);
          }
          for (g = (o2 = new Snb(k.a).a.bb().mb(), new Ynb(o2)); g.a.G(); ) {
            f = (i = Wv(g.a.H(), 21), Wv(i.yb(), 12));
            r = f.c.g;
            s = f.d.g;
            (r == (sN(), $M) && (s == ZM || s == pN) || r == ZM && s == pN || r == pN && s == rN || r == rN && (s == $M || s == ZM)) && cW(f, false);
          }
          c = n3(k, l);
          sJ(l, (Rib(), Nib), c);
          if (!LM(Wv(rJ(l, (eM(), TL)), 28))) {
            q = new vtb();
            for (e = new Tob(c); e.a < e.c.c.length; ) {
              d = Wv(Rob(e), 75);
              Ue(q, Zdb(d));
              Ue(q, d.i);
            }
            j = new Fnb(l.f, 0);
            while (j.b < j.d.Y()) {
              p = (Bxb(j.b < j.d.Y()), Wv(j.d.sb(j.c = j.b++), 7));
              q.a.R(p) && vnb(j);
            }
          }
        }
        pI(b);
      };
      var $C = Nkb(jAb, "SplineSelfLoopPreProcessor", 517);
      hI(518, 1, eAb, u3);
      _.sc = function v3(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C, D, F, G, H, I;
        nI(b, "Spline SelfLoop routing", 1);
        D = new I3();
        for (m = new Tob(a.c); m.a < m.c.c.length; ) {
          l = Wv(Rob(m), 16);
          for (s = new Tob(l.a); s.a < s.c.c.length; ) {
            r = Wv(Rob(s), 9);
            u = r.f;
            n = new Wub();
            for (d = Wv(rJ(r, (Rib(), Nib)), 20).mb(); d.G(); ) {
              c = Wv(d.H(), 75);
              Ue(n, c.a);
            }
            v = new GU();
            for (g = (t = new Snb(n.a).a.bb().mb(), new Ynb(t)); g.a.G(); ) {
              f = (h = Wv(g.a.H(), 21), Wv(h.yb(), 12));
              B = f.c;
              G = f.d;
              k = new Tob(f.c.f.f);
              A = 0;
              F = 0;
              i = 0;
              j = 0;
              while (i < 2) {
                e = Wv(Rob(k), 7);
                if (B == e) {
                  A = j;
                  ++i;
                }
                if (G == e) {
                  F = j;
                  ++i;
                }
                ++j;
              }
              w = Wv(rJ(f, Mib), 60);
              C = w == (Ieb(), neb) || w == keb ? u.c.length - (F - A < 0 ? -(F - A) : F - A) + 1 : F - A < 0 ? -(F - A) : F - A;
              vU(v, new G3(A, F, C, w, f));
            }
            Gpb(v, D);
            p = new vtb();
            o2 = new Tob(v);
            if (o2.a < o2.c.c.length) {
              q = t3(Wv(Rob(o2), 195), p);
              while (o2.a < o2.c.c.length) {
                Afb(q, t3(Wv(Rob(o2), 195), p));
              }
              sJ(r, Oib, (H = new DP(), I = new Bfb(r.j.a, r.j.b), H.d = Nlb(0, I.d - q.d), H.b = Nlb(0, I.b - q.b), H.a = Nlb(0, q.a - I.a), H.c = Nlb(0, q.c - I.c), H));
            }
          }
        }
        pI(b);
      };
      var fD = Nkb(jAb, "SplineSelfLoopRouter", 518);
      hI(91, 1, {91: 1}, w3);
      _.w = function x3() {
        return this.b + ": " + this.d + " -> " + this.a + " " + zc(this.c);
      };
      _.a = 0;
      _.b = 0;
      _.d = 0;
      var cD = Nkb(jAb, "SplineSelfLoopRouter/LoopPadding", 91);
      hI(521, 1, _zb, z3);
      _.D = function A3(a) {
        return y3(this, Wv(a, 91));
      };
      _.a = 0;
      _.c = 0;
      var _C = Nkb(jAb, "SplineSelfLoopRouter/LoopPadding/EnclosingPredicate", 521);
      hI(520, 1, fyb, C3);
      _.$b = function D3(a, b) {
        return B3(Wv(a, 91), Wv(b, 91));
      };
      var aD = Nkb(jAb, "SplineSelfLoopRouter/LoopPadding/MarginComparator", 520);
      hI(196, 1, _zb, E3);
      _.D = function F3(a) {
        return Wv(a, 91).c == this.a;
      };
      var bD = Nkb(jAb, "SplineSelfLoopRouter/LoopPadding/PortSidePredicate", 196);
      hI(195, 1, {195: 1}, G3);
      _.c = 0;
      _.d = 0;
      _.e = 0;
      var eD = Nkb(jAb, "SplineSelfLoopRouter/SelfLoopEdge", 195);
      hI(519, 1, fyb, I3);
      _.$b = function J3(a, b) {
        return H3(Wv(a, 195), Wv(b, 195));
      };
      var dD = Nkb(jAb, "SplineSelfLoopRouter/SelfLoopEdge/StepSizeComparator", 519);
      hI(82, 25, {25: 1, 82: 1}, L3);
      _.vc = function M3() {
        var a, b, c, d;
        for (b = WI(this.a, 0); b.b != b.d.c; ) {
          a = Wv(_ub(b), 10);
          a.a = this.j.d;
        }
        for (d = WI(this.c, 0); d.b != d.d.c; ) {
          c = Wv(_ub(d), 10);
          c.a = this.j.d;
        }
      };
      _.wc = function N3() {
        return this.b;
      };
      _.xc = function O3() {
        return this.e;
      };
      _.w = function P3() {
        return Ze(new Snb(this.d.a));
      };
      _.b = 0;
      _.e = 0;
      var gD = Nkb(vAb, "CLEdge", 82);
      hI(93, 25, {25: 1, 93: 1}, Q3);
      _.vc = function R3() {
        this.b.i.a = this.j.d + this.b.e.b;
      };
      _.wc = function S3() {
        if (this.b.g == (CX(), xX)) {
          return 0;
        }
        return this.a;
      };
      _.xc = function T3() {
        if (this.b.g == (CX(), xX)) {
          return 0;
        }
        return this.c;
      };
      _.w = function U3() {
        return xb(rJ(this.b, (Rib(), uib)));
      };
      _.a = 0;
      _.c = 0;
      var hD = Nkb(vAb, "CLNode", 93);
      hI(175, 17, {175: 1, 3: 1, 23: 1, 17: 1}, Y3);
      var V3, W3;
      var iD = Okb(vAb, "ConstraintCalculationStrategy", 175, IF, Z3);
      var $3;
      hI(125, 17, {125: 1, 3: 1, 23: 1, 17: 1}, h4);
      var a4, b4, c4, d4, e4, f4;
      var jD = Okb(vAb, "GraphCompactionStrategy", 125, IF, i4);
      var j4;
      hI(455, 1, eAb, o4);
      _.sc = function p4(a, b) {
        var c, d, e;
        d = Wv(rJ(a, (Mjb(), Fjb)), 125);
        if (d == (g4(), e4)) {
          return;
        }
        nI(b, "Horizontal Compaction", 1);
        this.a = a;
        e = new Q4();
        c = new rS(P4(e, a));
        pS(c, this.b);
        switch (Wv(rJ(a, Gjb), 175).e) {
          case 1:
            nS(c, l4);
            break;
          default:
            nS(c, (aS(), $R));
        }
        switch (d.e) {
          case 1:
            hS(c);
            break;
          case 2:
            hS(gS(c, (sK(), pK)));
            break;
          case 3:
            hS(bS(gS(hS(c), (sK(), pK))));
            break;
          case 4:
            hS(bS(oS(gS(hS(c), (sK(), pK)), new H4())));
            break;
          case 5:
            hS(mS(c, m4));
        }
        gS(c, (sK(), oK));
        c.e = true;
        L4(e);
        pI(b);
      };
      var l4, m4;
      var sD = Nkb(vAb, "HorizontalGraphCompactor", 455);
      hI(462, 1, {}, q4);
      _.tc = function r4(a, b) {
        var c, d, e;
        if (aw(a, 82) && aw(b, 82) && !sr(or(Wv(a, 82).d, Wv(b, 82).d))) {
          return 0;
        }
        c = null;
        aw(a, 93) && (c = Wv(a, 93).b);
        d = null;
        aw(b, 93) && (d = Wv(b, 93).b);
        if (!!c && c.g == (CX(), xX) || !!d && d.g == (CX(), xX)) {
          return 0;
        }
        e = Wv(rJ(this.a.a, (Rib(), Kib)), 134);
        return Vjb(e, c ? c.g : (CX(), zX), d ? d.g : (CX(), zX));
      };
      _.uc = function s4(a, b) {
        if (aw(a, 82) && aw(b, 82) && !sr(or(Wv(a, 82).d, Wv(b, 82).d))) {
          return 1;
        }
        return Qlb(a.xc(), b.xc());
      };
      var kD = Nkb(vAb, "HorizontalGraphCompactor/1", 462);
      hI(456, 317, {}, u4);
      _.Dc = function v4(a) {
        var b, c, d;
        this.b = a;
        ES(this, new z4(), this.a);
        ES(this, new B4(), this.a);
        b = Uzb;
        for (d = new Tob(this.b.a.b); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 25);
          if (aw(c, 93) && Wv(c, 93).b.g == (CX(), xX)) {
            continue;
          }
          b = Qlb(b, Ixb(w4(this.a, c)));
        }
        b == Uzb && (b = 0);
        ES(this, new D4(), new F4(b));
      };
      var qD = Nkb(vAb, "HorizontalGraphCompactor/EdgeAwareScanlineConstraintCalculation", 456);
      hI(457, 1, Tyb, x4);
      _.B = function y4(a) {
        return w4(this, a);
      };
      var lD = Nkb(vAb, "HorizontalGraphCompactor/EdgeAwareScanlineConstraintCalculation/lambda$0$Type", 457);
      hI(458, 1, _zb, z4);
      _.D = function A4(a) {
        return aw(Wv(a, 25), 82);
      };
      var mD = Nkb(vAb, "HorizontalGraphCompactor/EdgeAwareScanlineConstraintCalculation/lambda$1$Type", 458);
      hI(459, 1, _zb, B4);
      _.D = function C4(a) {
        return aw(Wv(a, 25), 93);
      };
      var nD = Nkb(vAb, "HorizontalGraphCompactor/EdgeAwareScanlineConstraintCalculation/lambda$2$Type", 459);
      hI(460, 1, _zb, D4);
      _.D = function E4(a) {
        return true;
      };
      var oD = Nkb(vAb, "HorizontalGraphCompactor/EdgeAwareScanlineConstraintCalculation/lambda$3$Type", 460);
      hI(461, 1, Tyb, F4);
      _.B = function G4(a) {
        return this.a;
      };
      _.a = 0;
      var pD = Nkb(vAb, "HorizontalGraphCompactor/EdgeAwareScanlineConstraintCalculation/lambda$4$Type", 461);
      hI(463, 1, Tyb, H4);
      _.B = function I4(a) {
        return n4(), xkb(), uS(Wv(Wv(a, 27).a, 25).n, Wv(Wv(a, 27).b, 59)) ? vkb : wkb;
      };
      var rD = Nkb(vAb, "HorizontalGraphCompactor/lambda$0$Type", 463);
      hI(553, 1, {}, Q4);
      _.c = false;
      var tD = Nkb(vAb, "LGraphToCGraphTransformer", 553);
      hI(552, 1, {}, U4);
      _.Cc = function V4(a) {
        var b, c, d, e, f;
        this.a = a;
        this.d = new l7();
        this.c = xv(UD, syb, 61, this.a.a.a.c.length, 0, 1);
        this.b = 0;
        for (c = new Tob(this.a.a.a); c.a < c.c.c.length; ) {
          b = Wv(Rob(c), 78);
          b.d = this.b;
          f = x7(z7(y7(new A7(), this.b), b), this.d);
          this.c[this.b] = f;
          ++this.b;
        }
        T4(this);
        S4(this);
        R4(this);
        F7(W7(this.d), new sI());
        for (e = new Tob(this.a.a.b); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 25);
          d.r = this.c[d.f.d].e + d.g.a;
          d.j.d = d.r;
        }
      };
      _.b = 0;
      var uD = Nkb(vAb, "NetworkSimplexCompaction", 552);
      hI(142, 1, {142: 1, 23: 1}, X4);
      _.F = function Y4(a) {
        return W4(this, Wv(a, 142));
      };
      _.c = false;
      _.d = true;
      _.i = 0;
      _.j = 0;
      _.k = 0;
      _.n = 0;
      var vD = Nkb(vAb, "VerticalSegment", 142);
      hI(586, 1, {}, _4);
      _.e = false;
      var wD = Nkb(wAb, "AllCrossingsCounter", 586);
      hI(339, 1, {});
      var xD = Nkb(wAb, "BetweenLayerEdgeAllCrossingsCounter", 339);
      hI(613, 1, {}, k5);
      _.c = 0;
      _.e = 0;
      _.i = 0;
      var AD = Nkb(wAb, "BetweenLayerEdgeTwoNodeCrossingsCounter", 613);
      hI(284, 1, {284: 1}, r5);
      _.w = function s5() {
        return "AdjacencyList [node=" + this.d + ", adjacencies= " + this.a + "]";
      };
      _.b = 0;
      _.c = 0;
      _.f = 0;
      var zD = Nkb(wAb, "BetweenLayerEdgeTwoNodeCrossingsCounter/AdjacencyList", 284);
      hI(128, 1, {128: 1, 23: 1}, v5);
      _.F = function w5(a) {
        return t5(this, Wv(a, 128));
      };
      _.w = function x5() {
        return "Adjacency [position=" + this.c + ", cardinality=" + this.a + ", currentCardinality=" + this.b + "]";
      };
      _.a = 0;
      _.b = 0;
      _.c = 0;
      var yD = Nkb(wAb, "BetweenLayerEdgeTwoNodeCrossingsCounter/AdjacencyList/Adjacency", 128);
      hI(610, 339, {}, y5);
      _.Gc = function z5(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C, D, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, $, ab, bb, cb, db, eb, fb, gb, hb, ib, jb, kb, lb, mb, nb;
        eb = 0;
        for (I = 0, L = a.length; I < L; ++I) {
          G = a[I];
          if (LM(Wv(rJ(G, (eM(), TL)), 28))) {
            for (U = new Tob(G.f); U.a < U.c.c.length; ) {
              T = Wv(Rob(U), 7);
              W = 0;
              for (g = new Tob(T.e); g.a < g.c.c.length; ) {
                f = Wv(Rob(g), 12);
                G.d != f.d.f.d && ++W;
              }
              W > 0 && (this.a[T.k] = eb++);
            }
          } else {
            N = 0;
            for (U = new Tob(G.f); U.a < U.c.c.length; ) {
              T = Wv(Rob(U), 7);
              for (g = new Tob(T.e); g.a < g.c.c.length; ) {
                f = Wv(Rob(g), 12);
                G.d != f.d.f.d && ++N;
              }
              this.a[T.k] = eb;
            }
            N > 0 && ++eb;
          }
        }
        jb = 0;
        for (J = 0, M = b.length; J < M; ++J) {
          G = b[J];
          if (LM(Wv(rJ(G, (eM(), TL)), 28))) {
            O = 0;
            for (U = new Tob(G.f); U.a < U.c.c.length; ) {
              T = Wv(Rob(U), 7);
              if (T.g == (sN(), $M)) {
                for (g = new Tob(T.b); g.a < g.c.c.length; ) {
                  f = Wv(Rob(g), 12);
                  if (G.d != f.c.f.d) {
                    ++O;
                    break;
                  }
                }
              } else {
                break;
              }
            }
            Q = 0;
            X = new Fnb(G.f, G.f.c.length);
            while (X.b > 0) {
              T = (Bxb(X.b > 0), Wv(X.a.sb(X.c = --X.b), 7));
              W = 0;
              for (g = new Tob(T.b); g.a < g.c.c.length; ) {
                f = Wv(Rob(g), 12);
                G.d != f.c.f.d && ++W;
              }
              if (W > 0) {
                if (T.g == (sN(), $M)) {
                  this.a[T.k] = jb;
                  ++jb;
                } else {
                  this.a[T.k] = jb + O + Q;
                  ++Q;
                }
              }
            }
            jb += Q;
          } else {
            N = 0;
            for (U = new Tob(G.f); U.a < U.c.c.length; ) {
              T = Wv(Rob(U), 7);
              for (g = new Tob(T.b); g.a < g.c.c.length; ) {
                f = Wv(Rob(g), 12);
                G.d != f.c.f.d && ++N;
              }
              this.a[T.k] = jb;
            }
            N > 0 && ++jb;
          }
        }
        V = new ntb();
        p = new vtb();
        for (H = 0, K = a.length; H < K; ++H) {
          G = a[H];
          for (hb = new Tob(G.f); hb.a < hb.c.c.length; ) {
            gb = Wv(Rob(hb), 7);
            for (g = new Tob(gb.e); g.a < g.c.c.length; ) {
              f = Wv(Rob(g), 12);
              lb = f.d;
              if (G.d != lb.f.d) {
                fb = Wv(re(Ktb(V.d, gb)), 204);
                kb = Wv(re(Ktb(V.d, lb)), 204);
                if (!fb && !kb) {
                  o2 = new B5();
                  p.a.db(o2, p);
                  QI(o2.a, f);
                  QI(o2.e, gb);
                  Ltb(V.d, gb, o2);
                  QI(o2.e, lb);
                  Ltb(V.d, lb, o2);
                } else if (!fb) {
                  QI(kb.a, f);
                  QI(kb.e, gb);
                  Ltb(V.d, gb, kb);
                } else if (!kb) {
                  QI(fb.a, f);
                  QI(fb.e, lb);
                  Ltb(V.d, lb, fb);
                } else if (fb == kb) {
                  QI(fb.a, f);
                } else {
                  QI(fb.a, f);
                  for (S = WI(kb.e, 0); S.b != S.d.c; ) {
                    R = Wv(_ub(S), 7);
                    Ltb(V.d, R, fb);
                  }
                  Ue(fb.a, kb.a);
                  Ue(fb.e, kb.e);
                  p.a.eb(kb) != null;
                }
              }
            }
          }
        }
        q = Wv(Ye(p, xv(CD, {675: 1, 3: 1, 5: 1, 6: 1}, 204, p.a.Y(), 0, 1)), 675);
        F = a[0].d;
        db = b[0].d;
        for (m = 0, n = q.length; m < n; ++m) {
          l = q[m];
          l.f = eb;
          l.g = jb;
          for (U = WI(l.e, 0); U.b != U.d.c; ) {
            T = Wv(_ub(U), 7);
            Y = this.a[T.k];
            if (T.f.d == F) {
              if (Y < l.f) {
                l.f = Y;
                l.b = txb(T);
              }
              Y > l.c && (l.c = Y);
            } else if (T.f.d == db) {
              Y < l.g && (l.g = Y);
              Y > l.d && (l.d = Y);
            }
          }
        }
        ipb(q, 0, q.length, (hsb(), hsb(), gsb));
        ib = xv(mw, Yyb, 26, q.length, 12, 1);
        c = xv(mw, Yyb, 26, jb + 1, 12, 1);
        for (s = 0; s < q.length; s++) {
          ib[s] = q[s].g;
          c[ib[s]] = 1;
        }
        e = 0;
        for (t = 0; t < c.length; t++) {
          c[t] == 1 ? c[t] = e : --e;
        }
        Z = 0;
        for (u = 0; u < ib.length; u++) {
          ib[u] += c[ib[u]];
          Z = Plb(Z, ib[u] + 1);
        }
        k = 1;
        while (k < Z) {
          k *= 2;
        }
        nb = 2 * k - 1;
        k -= 1;
        mb = xv(mw, Yyb, 26, nb, 12, 1);
        d = 0;
        for (i = 0, j = ib.length; i < j; ++i) {
          h = ib[i];
          w = h + k;
          ++mb[w];
          while (w > 0) {
            w % 2 > 0 && (d += mb[w + 1]);
            w = (w - 1) / 2 | 0;
            ++mb[w];
          }
        }
        D = xv(BD, syb, 158, q.length * 2, 0, 1);
        for (v = 0; v < q.length; v++) {
          D[2 * v] = new E5(q[v], q[v].f, q[v].c, 0);
          D[2 * v + 1] = new E5(q[v], q[v].c, q[v].f, 1);
        }
        ipb(D, 0, D.length, (null, gsb));
        P = 0;
        for (B = 0, C = D.length; B < C; ++B) {
          A = D[B];
          switch (A.d) {
            case 0:
              ++P;
              break;
            case 1:
              --P;
              d += P;
          }
        }
        cb = xv(BD, syb, 158, q.length * 2, 0, 1);
        for (r = 0; r < q.length; r++) {
          cb[2 * r] = new E5(q[r], q[r].g, q[r].d, 0);
          cb[2 * r + 1] = new E5(q[r], q[r].d, q[r].g, 1);
        }
        ipb(cb, 0, cb.length, (null, gsb));
        P = 0;
        for (ab = 0, bb = cb.length; ab < bb; ++ab) {
          $ = cb[ab];
          switch ($.d) {
            case 0:
              ++P;
              break;
            case 1:
              --P;
              d += P;
          }
        }
        return d;
      };
      var DD = Nkb(wAb, "BetweenLayerHyperedgeAllCrossingsCounter", 610);
      hI(204, 1, {204: 1, 23: 1}, B5);
      _.F = function C5(a) {
        return A5(this, Wv(a, 204));
      };
      _.b = 0;
      _.c = 0;
      _.d = 0;
      _.f = 0;
      _.g = 0;
      var CD = Nkb(wAb, "BetweenLayerHyperedgeAllCrossingsCounter/Hyperedge", 204);
      hI(158, 1, {158: 1, 23: 1}, E5);
      _.F = function F5(a) {
        return D5(this, Wv(a, 158));
      };
      _.b = 0;
      _.c = 0;
      _.d = 0;
      var BD = Nkb(wAb, "BetweenLayerHyperedgeAllCrossingsCounter/HyperedgeCorner", 158);
      hI(611, 339, {}, H5);
      _.Gc = function J5(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B;
        B = 0;
        f = 0;
        h = a[0].d;
        u = b[0].d;
        for (k = 0, m = b.length; k < m; ++k) {
          i = b[k];
          if (LM(Wv(rJ(i, (eM(), TL)), 28))) {
            o2 = 0;
            for (r = new Tob(i.f); r.a < r.c.c.length; ) {
              q = Wv(Rob(r), 7);
              if (q.g == (sN(), $M)) {
                for (e = new Tob(q.b); e.a < e.c.c.length; ) {
                  d = Wv(Rob(e), 12);
                  if (d.c.f.d == h) {
                    ++o2;
                    break;
                  }
                }
              } else {
                break;
              }
            }
            p = 0;
            t = new Fnb(i.f, i.f.c.length);
            while (t.b > 0) {
              q = (Bxb(t.b > 0), Wv(t.a.sb(t.c = --t.b), 7));
              s = 0;
              for (e = new Tob(q.b); e.a < e.c.c.length; ) {
                d = Wv(Rob(e), 12);
                d.c.f.d == h && ++s;
              }
              if (s > 0) {
                if (q.g == (sN(), $M)) {
                  this.a[q.k] = B;
                  ++B;
                } else {
                  this.a[q.k] = B + o2 + p;
                  ++p;
                }
                f += s;
              }
            }
            B += p;
          } else {
            n = 0;
            for (r = new Tob(i.f); r.a < r.c.c.length; ) {
              q = Wv(Rob(r), 7);
              for (e = new Tob(q.b); e.a < e.c.c.length; ) {
                d = Wv(Rob(e), 12);
                d.c.f.d == h && ++n;
              }
              this.a[q.k] = B;
            }
            if (n > 0) {
              ++B;
              f += n;
            }
          }
        }
        v = xv(mw, Yyb, 26, f, 12, 1);
        g = 0;
        for (j = 0, l = a.length; j < l; ++j) {
          i = a[j];
          if (LM(Wv(rJ(i, (eM(), TL)), 28))) {
            for (r = new Tob(i.f); r.a < r.c.c.length; ) {
              q = Wv(Rob(r), 7);
              w = g;
              for (e = new Tob(q.e); e.a < e.c.c.length; ) {
                d = Wv(Rob(e), 12);
                A = d.d;
                A.f.d == u && K5(v, w, g++, this.a[A.k]);
              }
            }
          } else {
            w = g;
            for (r = new Tob(i.f); r.a < r.c.c.length; ) {
              q = Wv(Rob(r), 7);
              for (e = new Tob(q.e); e.a < e.c.c.length; ) {
                d = Wv(Rob(e), 12);
                A = d.d;
                A.f.d == u && K5(v, w, g++, this.a[A.k]);
              }
            }
          }
        }
        c = G5(B, f, v);
        return c;
      };
      var ED = Nkb(wAb, "BetweenLayerStraightEdgeAllCrossingsCounter", 611);
      hI(338, 1, {}, N5);
      _.b = 0;
      _.e = false;
      var FD = Nkb(wAb, "CrossingMatrixFiller", 338);
      hI(447, 1, eAb, $5);
      _.sc = function _5(a, b) {
        var c, d, e, f;
        nI(b, "Greedy switch crossing reduction", 1);
        this.e = Wv(rJ(a, (Mjb(), tjb)), 110);
        c = a.c.c.length;
        if (c < 2 || this.e == (zhb(), rhb)) {
          pI(b);
          return;
        }
        Q5(this, a);
        this.e.b ? (this.e.a ? R5(this) : Z5(this), d = P5(this), e = this.e.a ? this.c : Z4(this.b, this.d), this.i = !this.i, this.d = this.g, this.e.a ? R5(this) : Z5(this), f = this.e.a ? this.c : Z4(this.b, this.d), e <= f && S5(this, d), void 0) : this.e.a ? R5(this) : Z5(this);
        T5(this, this.a);
        pI(b);
      };
      _.c = 0;
      _.i = true;
      var GD = Nkb(wAb, "GreedySwitchProcessor", 447);
      hI(340, 1, {}, k6);
      var HD = Nkb(wAb, "InLayerEdgeAllCrossingsCounter", 340);
      hI(614, 340, {}, r6);
      _.b = 0;
      _.d = 0;
      var JD = Nkb(wAb, "InLayerEdgeTwoNodeCrossingCounter", 614);
      hI(226, 1, {226: 1, 23: 1}, t6);
      _.F = function u6(a) {
        return s6(this, Wv(a, 226));
      };
      _.w = function v6() {
        return "ComparableEdgeAndPort [port=" + this.b + ", edge=" + this.a + ", portPosition=" + this.c + "]";
      };
      _.c = 0;
      var ID = Nkb(wAb, "InLayerEdgeTwoNodeCrossingCounter/ComparableEdgeAndPort", 226);
      hI(612, 1, {}, F6);
      _.e = true;
      _.f = 0;
      _.g = 0;
      _.k = false;
      var KD = Nkb(wAb, "NorthSouthEdgeAllCrossingsCounter", 612);
      hI(615, 1, {}, R6);
      _.b = 0;
      _.d = 0;
      _.e = false;
      var LD = Nkb(wAb, "NorthSouthEdgeNeighbouringNodeCrossingsCounter", 615);
      hI(143, 1, Oyb, U6);
      _.mb = function V6() {
        return T6(this);
      };
      _.b = 0;
      var ND = Nkb(wAb, "PortIterable", 143);
      hI(344, 1, Ayb, W6);
      _.H = function Y6() {
        return Wv(Dnb(this.a), 7);
      };
      _.G = function X6() {
        return this.a.b > 0;
      };
      _.I = function Z6() {
        throw new Hmb();
      };
      var MD = Nkb(wAb, "PortIterable/1", 344);
      hI(336, 1, {}, b7);
      var OD = Nkb(wAb, "SwitchDecider", 336);
      hI(89, 1, {89: 1}, d7);
      _.w = function e7() {
        return "NEdge[id=" + this.b + " w=" + this.f + " d=" + this.a + "]";
      };
      _.a = 1;
      _.b = 0;
      _.e = false;
      _.f = 0;
      var QD = Nkb(yAb, "NEdge", 89);
      hI(157, 1, {}, k7);
      var PD = Nkb(yAb, "NEdge/NEdgeBuilder", 157);
      hI(278, 1, {}, l7);
      var RD = Nkb(yAb, "NGraph", 278);
      hI(61, 1, {61: 1}, n7);
      _.b = 0;
      _.d = -1;
      _.e = 0;
      _.i = -1;
      _.j = false;
      var UD = Nkb(yAb, "NNode", 61);
      hI(333, 13, bAb, q7);
      _.rb = function r7(a, b) {
        ++this.d;
        Fxb(a, this.c.length);
        fxb(this.c, a, b);
      };
      _.ib = function s7(a) {
        return o7(this, a);
      };
      _.jb = function t7(a) {
        ++this.d;
        return xU(this, a);
      };
      _.Q = function u7() {
        ++this.d;
        this.c = xv(UF, syb, 1, 0, 4, 1);
      };
      _.vb = function v7(a) {
        ++this.d;
        return AU(this, a);
      };
      _.nb = function w7(a) {
        return p7(this, a);
      };
      var SD = Nkb(yAb, "NNode/ChangeAwareArrayList", 333);
      hI(199, 1, {}, A7);
      var TD = Nkb(yAb, "NNode/NNodeBuilder", 199);
      hI(595, 1, {}, V7);
      _.a = false;
      _.f = $xb;
      _.j = 0;
      var VD = Nkb(yAb, "NetworkSimplex", 595);
      hI(193, 17, {180: 1, 193: 1, 3: 1, 23: 1, 17: 1}, $7);
      _.rc = function _7() {
        switch (this.e) {
          case 0:
            return new g8();
          case 1:
            return new m8();
          default:
            throw new slb("No implementation is available for the cycle breaker " + (this.d != null ? this.d : "" + this.e));
        }
      };
      var X7, Y7;
      var WD = Okb(AAb, "CycleBreakingStrategy", 193, IF, a8);
      var b8;
      hI(539, 1, BAb, g8);
      _.qc = function h8(a) {
        return d8;
      };
      _.sc = function i8(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C, D, F, G, H, I, J;
        nI(b, "Greedy cycle removal", 1);
        r = a.b;
        J = r.c.length;
        this.a = xv(mw, Yyb, 26, J, 12, 1);
        this.c = xv(mw, Yyb, 26, J, 12, 1);
        this.b = xv(mw, Yyb, 26, J, 12, 1);
        h = 0;
        for (p = new Tob(r); p.a < p.c.c.length; ) {
          n = Wv(Rob(p), 9);
          n.k = h;
          for (w = new Tob(n.f); w.a < w.c.c.length; ) {
            u = Wv(Rob(w), 7);
            for (f = new Tob(u.b); f.a < f.c.c.length; ) {
              c = Wv(Rob(f), 12);
              if (c.c.f == n) {
                continue;
              }
              C = Wv(rJ(c, (Rib(), Eib)), 24).a;
              this.a[h] += C > 0 ? C + 1 : 1;
            }
            for (e = new Tob(u.e); e.a < e.c.c.length; ) {
              c = Wv(Rob(e), 12);
              if (c.d.f == n) {
                continue;
              }
              C = Wv(rJ(c, (Rib(), Eib)), 24).a;
              this.c[h] += C > 0 ? C + 1 : 1;
            }
          }
          this.c[h] == 0 ? QI(this.d, n) : this.a[h] == 0 && QI(this.e, n);
          ++h;
        }
        m = -1;
        l = 1;
        j = new GU();
        D = Wv(rJ(a, (Rib(), Gib)), 154);
        while (J > 0) {
          while (this.d.b != 0) {
            G = Wv(YI(this.d), 9);
            this.b[G.k] = m--;
            f8(this, G);
            --J;
          }
          while (this.e.b != 0) {
            H = Wv(YI(this.e), 9);
            this.b[H.k] = l++;
            f8(this, H);
            --J;
          }
          if (J > 0) {
            k = eyb;
            for (q = new Tob(r); q.a < q.c.c.length; ) {
              n = Wv(Rob(q), 9);
              if (this.b[n.k] == 0) {
                s = this.c[n.k] - this.a[n.k];
                if (s >= k) {
                  if (s > k) {
                    j.c = xv(UF, syb, 1, 0, 4, 1);
                    k = s;
                  }
                  j.c[j.c.length] = n;
                }
              }
            }
            i = Wv(yU(j, vvb(D, j.c.length)), 9);
            this.b[i.k] = l++;
            f8(this, i);
            --J;
          }
        }
        F = r.c.length + 1;
        for (h = 0; h < r.c.length; h++) {
          this.b[h] < 0 && (this.b[h] += F);
        }
        for (o2 = new Tob(r); o2.a < o2.c.c.length; ) {
          n = Wv(Rob(o2), 9);
          B = Wv(FU(n.f, xv(BB, mAb, 7, n.f.c.length, 0, 1)), 346);
          for (v = 0, A = B.length; v < A; ++v) {
            u = B[v];
            t = Wv(FU(u.e, xv(dB, gAb, 12, u.e.c.length, 0, 1)), 47);
            for (d = 0, g = t.length; d < g; ++d) {
              c = t[d];
              I = c.d.f.k;
              if (this.b[n.k] > this.b[I]) {
                cW(c, true);
                sJ(a, cib, (xkb(), xkb(), wkb));
              }
            }
          }
        }
        this.a = null;
        this.c = null;
        this.b = null;
        _I(this.e);
        _I(this.d);
        pI(b);
      };
      var d8;
      var XD = Nkb(AAb, "GreedyCycleBreaker", 539);
      hI(540, 1, BAb, m8);
      _.qc = function n8(a) {
        return j8;
      };
      _.sc = function o8(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p;
        nI(b, "Interactive cycle breaking", 1);
        k = new GU();
        for (m = new Tob(a.b); m.a < m.c.c.length; ) {
          l = Wv(Rob(m), 9);
          l.k = 1;
          n = kX(l).a;
          for (j = oX(l, (djb(), bjb)).mb(); j.G(); ) {
            i = Wv(j.H(), 7);
            for (e = new Tob(i.e); e.a < e.c.c.length; ) {
              c = Wv(Rob(e), 12);
              o2 = c.d.f;
              if (o2 != l) {
                p = kX(o2).a;
                p < n && (k.c[k.c.length] = c, true);
              }
            }
          }
        }
        for (f = new Tob(k); f.a < f.c.c.length; ) {
          c = Wv(Rob(f), 12);
          cW(c, true);
        }
        k.c = xv(UF, syb, 1, 0, 4, 1);
        for (h = new Tob(a.b); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 9);
          g.k > 0 && l8(this, g, k);
        }
        for (d = new Tob(k); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 12);
          cW(c, true);
        }
        k.c = xv(UF, syb, 1, 0, 4, 1);
        pI(b);
      };
      var j8;
      var YD = Nkb(AAb, "InteractiveCycleBreaker", 540);
      hI(543, 1, BAb, q8);
      _.qc = function r8(a) {
        return TQ(RQ(new WQ(), (d0(), z_)), I_);
      };
      _.sc = function s8(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p;
        nI(b, "Interactive node layering", 1);
        c = new GU();
        for (l = new Tob(a.b); l.a < l.c.c.length; ) {
          j = Wv(Rob(l), 9);
          h = j.i.a;
          g = h + j.j.a;
          g = h + 1 > g ? h + 1 : g;
          p = new Fnb(c, 0);
          d = null;
          while (p.b < p.d.Y()) {
            n = (Bxb(p.b < p.d.Y()), Wv(p.d.sb(p.c = p.b++), 239));
            if (n.c >= g) {
              Bxb(p.b > 0);
              p.a.sb(p.c = --p.b);
              break;
            } else if (n.a > h) {
              if (!d) {
                vU(n.b, j);
                n.c = Qlb(n.c, h);
                n.a = Nlb(n.a, g);
                d = n;
              } else {
                xU(d.b, n.b);
                d.a = Nlb(d.a, n.a);
                vnb(p);
              }
            }
          }
          if (!d) {
            d = new t8();
            d.c = h;
            d.a = g;
            Anb(p, d);
            vU(d.b, j);
          }
        }
        f = a.c;
        i = 0;
        for (o2 = new Tob(c); o2.a < o2.c.c.length; ) {
          n = Wv(Rob(o2), 239);
          e = new sY(a);
          e.k = i++;
          f.c[f.c.length] = e;
          for (m = new Tob(n.b); m.a < m.c.c.length; ) {
            j = Wv(Rob(m), 9);
            rX(j, e);
            j.k = 0;
          }
        }
        for (k = new Tob(a.b); k.a < k.c.c.length; ) {
          j = Wv(Rob(k), 9);
          j.k == 0 && p8(this, j, a);
        }
        while ((Cxb(0, f.c.length), Wv(f.c[0], 16)).a.c.length == 0) {
          Cxb(0, f.c.length);
          f.c.splice(0, 1);
        }
        a.b.c = xv(UF, syb, 1, 0, 4, 1);
        pI(b);
      };
      var $D = Nkb(CAb, "InteractiveLayerer", 543);
      hI(239, 1, {239: 1}, t8);
      _.a = 0;
      _.c = 0;
      var ZD = Nkb(CAb, "InteractiveLayerer/LayerSpan", 239);
      hI(173, 17, {180: 1, 173: 1, 3: 1, 23: 1, 17: 1}, y8);
      _.rc = function z8() {
        switch (this.e) {
          case 0:
            return new U8();
          case 1:
            return new J8();
          case 2:
            return new q8();
          default:
            throw new slb("No implementation is available for the layerer " + (this.d != null ? this.d : "" + this.e));
        }
      };
      var u8, v8, w8;
      var _D = Okb(CAb, "LayeringStrategy", 173, IF, A8);
      var B8;
      hI(542, 1, BAb, J8);
      _.qc = function K8(a) {
        var b;
        b = XQ(D8);
        Ckb(Ixb(Xv(rJ(a, (Mjb(), njb))))) || gw(rJ(a, Ljb)) === gw((ckb(), _jb)) ? QQ(b, E8) : gw(rJ(a, Ljb)) === gw((ckb(), akb)) && QQ(b, F8);
        Ckb(Ixb(Xv(rJ(a, Ijb)))) && UQ(b, (d0(), Y_));
        return b;
      };
      _.sc = function L8(a, b) {
        var c, d, e, f, g;
        nI(b, "Longest path layering", 1);
        this.a = a;
        g = this.a.b;
        this.b = xv(mw, Yyb, 26, g.c.length, 12, 1);
        c = 0;
        for (f = new Tob(g); f.a < f.c.c.length; ) {
          d = Wv(Rob(f), 9);
          d.k = c;
          this.b[c] = -1;
          ++c;
        }
        for (e = new Tob(g); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 9);
          I8(this, d);
        }
        g.c = xv(UF, syb, 1, 0, 4, 1);
        this.a = null;
        this.b = null;
        pI(b);
      };
      var D8, E8, F8;
      var aE = Nkb(CAb, "LongestPathLayerer", 542);
      hI(541, 1, BAb, U8);
      _.qc = function V8(a) {
        var b;
        b = XQ(M8);
        if (Ckb(Ixb(Xv(rJ(a, (Mjb(), njb))))) || gw(rJ(a, Ljb)) === gw((ckb(), _jb))) {
          QQ(b, N8);
          this.d = (ckb(), _jb);
        } else if (gw(rJ(a, Ljb)) === gw((ckb(), akb))) {
          QQ(b, O8);
          this.d = akb;
        }
        return b;
      };
      _.sc = function W8(a, b) {
        var c, d, e, f, g, h, i, j, k, l;
        nI(b, "Network simplex layering", 1);
        this.b = a;
        l = Wv(rJ(a, (Mjb(), Kjb)), 24).a * 4;
        k = this.b.b;
        if (k.c.length < 1) {
          pI(b);
          return;
        }
        for (d = WI(Q8(this, k), 0); d.b != d.d.c; ) {
          c = Wv(_ub(d), 20);
          f = l * hw(Tlb(c.Y()));
          e = T8(c);
          F7(S7(U7(T7(W7(e), f), this.b), this.d == (ckb(), _jb)), rI(b, 1));
          h = this.b.c;
          for (j = new Tob(e.a); j.a < j.c.c.length; ) {
            i = Wv(Rob(j), 61);
            while (h.c.length <= i.e) {
              uU(h, h.c.length, new sY(this.b));
            }
            g = Wv(i.f, 9);
            rX(g, Wv(yU(h, i.e), 16));
          }
        }
        k.c = xv(UF, syb, 1, 0, 4, 1);
        this.a = null;
        this.b = null;
        this.c = null;
        pI(b);
      };
      var M8, N8, O8;
      var bE = Nkb(CAb, "NetworkSimplexLayerer", 541);
      hI(326, 1, {});
      var dE = Nkb(EAb, "AbstractPortDistributor", 326);
      hI(558, 1, fyb, a9);
      _.$b = function b9(a, b) {
        return _8(this, Wv(a, 7), Wv(b, 7));
      };
      var cE = Nkb(EAb, "AbstractPortDistributor/1", 558);
      hI(564, 1, {}, j9);
      var gE = Nkb(EAb, "BarycenterHeuristic", 564);
      hI(272, 1, {272: 1}, k9);
      _.b = 0;
      _.d = 0;
      _.e = false;
      var eE = Nkb(EAb, "BarycenterHeuristic/BarycenterState", 272);
      hI(565, 1, fyb, l9);
      _.$b = function m9(a, b) {
        return f9(this.a, a, b);
      };
      var fE = Nkb(EAb, "BarycenterHeuristic/lambda$0$Type", 565);
      hI(192, 17, {180: 1, 192: 1, 3: 1, 23: 1, 17: 1}, q9);
      _.rc = function r9() {
        switch (this.e) {
          case 0:
            return new I9();
          case 1:
            return new y9();
          default:
            throw new slb("No implementation is available for the crossing minimizer " + (this.d != null ? this.d : "" + this.e));
        }
      };
      var n9, o9;
      var hE = Okb(EAb, "CrossingMinimizationStrategy", 192, IF, s9);
      var t9;
      hI(526, 1, BAb, y9);
      _.qc = function z9(a) {
        var b;
        b = XQ(v9);
        Wv(rJ(a, (Rib(), jib)), 18).kb((ohb(), khb)) && TQ(b, (d0(), V_));
        return b;
      };
      _.sc = function A9(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2;
        nI(b, "Interactive crossing minimization", 1);
        m = 0;
        for (e = new Tob(a.c); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 16);
          c = 0;
          j = 0;
          for (i = new Tob(d.a); i.a < i.c.c.length; ) {
            g = Wv(Rob(i), 9);
            if (g.i.a > 0) {
              c += g.i.a + g.j.a / 2;
              ++j;
            }
            for (l = new Tob(g.f); l.a < l.c.c.length; ) {
              k = Wv(Rob(l), 7);
              k.k = m++;
            }
          }
          c /= j;
          o2 = xv(kw, hyb, 26, d.a.c.length, 12, 1);
          f = 0;
          for (h = new Tob(d.a); h.a < h.c.c.length; ) {
            g = Wv(Rob(h), 9);
            g.k = f++;
            o2[g.k] = x9(g, c);
            g.g == (CX(), zX) && sJ(g, (Rib(), wib), o2[g.k]);
          }
          Gpb(d.a, new C9(o2));
        }
        n = new P9(xv(lw, tAb, 26, m, 12, 1));
        Z8(n, jW(a));
        pI(b);
      };
      var v9;
      var jE = Nkb(EAb, "InteractiveCrossingMinimizer", 526);
      hI(527, 1, fyb, C9);
      _.$b = function D9(a, b) {
        return B9(this, Wv(a, 9), Wv(b, 9));
      };
      var iE = Nkb(EAb, "InteractiveCrossingMinimizer/1", 527);
      hI(525, 1, BAb, I9);
      _.qc = function K9(a) {
        var b;
        b = XQ(E9);
        Wv(rJ(a, (Rib(), jib)), 18).kb((ohb(), khb)) && TQ(b, (d0(), V_));
        return b;
      };
      _.sc = function L9(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C, D, F, G, H;
        nI(b, "Layer sweep crossing minimization", 1);
        F = Wv(rJ(a, (Rib(), Gib)), 154);
        q = a.c.c.length;
        if (q < 2) {
          pI(b);
          return;
        }
        G9(this, a);
        d = $xb;
        H = Wv(rJ(a, (Mjb(), Kjb)), 24).a;
        c = xv(eE, Txb, 671, a.c.c.length, 0, 2);
        m = 0;
        for (p = new Tob(a.c); p.a < p.c.c.length; ) {
          o2 = Wv(Rob(p), 16);
          o2.k = m;
          c[m] = xv(eE, {671: 1, 3: 1, 5: 1, 6: 1}, 272, o2.a.c.length, 0, 1);
          n = 0;
          for (v = new Tob(o2.a); v.a < v.c.c.length; ) {
            u = Wv(Rob(v), 9);
            u.k = n;
            c[m][n] = new k9(u);
            ++n;
          }
          ++m;
        }
        e = new X9(c, this.g);
        f = new j9(c, e, F, this.j);
        A = new P9(this.j);
        t = new M9(this.j);
        for (G = 0; G < H && d > 0; G++) {
          k = wvb(F, 1) != 0;
          j = k ? 0 : q - 1;
          i = this.b[j];
          C = wvb(F, 1) != 0 ? A : t;
          H9(i, f, k, false, true);
          g = $xb;
          h = true;
          do {
            J9(this.b, this.k);
            D = g;
            g = 0;
            g += bab(this.f, i, j);
            if (k) {
              for (r = 1; r < q; r++) {
                l = this.b[r];
                X8(C, i, (djb(), bjb));
                H9(l, f, true, !h, false);
                g += bab(this.f, l, r);
                this.d[r] || this.c[r - 1] ? g += lab(this.e, i, l) : g += hab(this.i, i, l);
                i = l;
              }
              j = q - 1;
            } else {
              for (r = q - 2; r >= 0; r--) {
                l = this.b[r];
                X8(C, i, (djb(), ajb));
                H9(l, f, false, !h, false);
                g += bab(this.f, l, r);
                this.c[r] || this.d[r + 1] ? g += lab(this.e, l, i) : g += hab(this.i, l, i);
                i = l;
              }
              j = 0;
            }
            h = false;
            k = !k;
          } while (g < D && g > 0);
          if (g < d || D < d) {
            if (g <= D) {
              J9(this.b, this.a);
              d = g;
            } else {
              J9(this.k, this.a);
              d = D;
            }
          }
        }
        s = new Fnb(a.c, 0);
        while (s.b < s.d.Y()) {
          o2 = (Bxb(s.b < s.d.Y()), Wv(s.d.sb(s.c = s.b++), 16));
          B = this.a[s.b - 1];
          w = new Fnb(o2.a, 0);
          while (w.b < w.d.Y()) {
            Bxb(w.b < w.d.Y());
            w.d.sb(w.c = w.b++);
            Enb(w, B[w.b - 1]);
          }
        }
        this.j = null;
        this.a = null;
        this.b = null;
        this.k = null;
        this.i = null;
        this.e = null;
        this.c = null;
        this.d = null;
        Pm(this.g);
        pI(b);
      };
      var E9;
      var kE = Nkb(EAb, "LayerSweepCrossingMinimizer", 525);
      hI(327, 326, {}, M9);
      _.Hc = function N9(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m, n, o2;
        m = this.a;
        if (LM(Wv(rJ(a, (eM(), TL)), 28))) {
          switch (c.e) {
            case 1: {
              e = 0;
              h = 0;
              for (l = new Tob(a.f); l.a < l.c.c.length; ) {
                j = Wv(Rob(l), 7);
                if (j.b.c.length != 0) {
                  ++e;
                  j.g == (sN(), $M) && ++h;
                }
              }
              i = b + h;
              o2 = b + e;
              for (k = oX(a, (djb(), ajb)).mb(); k.G(); ) {
                j = Wv(k.H(), 7);
                if (j.g == (sN(), $M)) {
                  m[j.k] = i;
                  --i;
                } else {
                  m[j.k] = o2;
                  --o2;
                }
              }
              return e;
            }
            case 2: {
              n = 0;
              for (k = oX(a, (djb(), bjb)).mb(); k.G(); ) {
                j = Wv(k.H(), 7);
                ++n;
                m[j.k] = b + n;
              }
              return n;
            }
            default:
              throw new rlb();
          }
        } else {
          g = 4;
          f = 0;
          for (l = oX(a, c).mb(); l.G(); ) {
            j = Wv(l.H(), 7);
            d = O9(c, j.g);
            g = g < d - 1 ? g : d - 1;
            f = f > d ? f : d;
          }
          if (f > g) {
            for (k = oX(a, c).mb(); k.G(); ) {
              j = Wv(k.H(), 7);
              m[j.k] = b + O9(c, j.g) - g;
            }
            return f - g;
          }
          return 0;
        }
      };
      var lE = Nkb(EAb, "LayerTotalPortDistributor", 327);
      hI(274, 326, {}, P9);
      _.Hc = function Q9(a, b, c) {
        var d, e, f, g, h, i, j, k, l, m, n;
        l = this.a;
        if (LM(Wv(rJ(a, (eM(), TL)), 28))) {
          switch (c.e) {
            case 1: {
              e = 0;
              f = 0;
              for (k = new Tob(a.f); k.a < k.c.c.length; ) {
                i = Wv(Rob(k), 7);
                if (i.b.c.length != 0) {
                  ++e;
                  i.g == (sN(), $M) && ++f;
                }
              }
              d = 1 / (e + 1);
              g = b + f * d;
              n = b + 1 - d;
              for (j = oX(a, (djb(), ajb)).mb(); j.G(); ) {
                i = Wv(j.H(), 7);
                if (i.g == (sN(), $M)) {
                  l[i.k] = g;
                  g -= d;
                } else {
                  l[i.k] = n;
                  n -= d;
                }
              }
              break;
            }
            case 2: {
              h = 0;
              for (k = new Tob(a.f); k.a < k.c.c.length; ) {
                i = Wv(Rob(k), 7);
                i.e.c.length == 0 || ++h;
              }
              d = 1 / (h + 1);
              m = b + d;
              for (j = oX(a, (djb(), bjb)).mb(); j.G(); ) {
                i = Wv(j.H(), 7);
                l[i.k] = m;
                m += d;
              }
              break;
            }
            default:
              throw new slb(GAb);
          }
        } else {
          for (j = oX(a, c).mb(); j.G(); ) {
            i = Wv(j.H(), 7);
            l[i.k] = b + R9(c, i.g);
          }
        }
        return 1;
      };
      var mE = Nkb(EAb, "NodeRelativePortDistributor", 274);
      hI(566, 1, {}, X9);
      var oE = Nkb(KAb, "ForsterConstraintResolver", 566);
      hI(102, 1, {102: 1}, $9, _9);
      _.w = function aab() {
        var a, b;
        b = new zmb();
        b.a += "[";
        for (a = 0; a < this.d.length; a++) {
          ymb(b, tX(this.d[a]));
          W9(this.g, this.d[0]).a != null && ymb(ymb((b.a += "<", b), ilb(Ixb(W9(this.g, this.d[0]).a))), ">");
          a < this.d.length - 1 && (b.a += ", ", b);
        }
        return b.a += "]", b.a;
      };
      _.a = 0;
      _.c = 0;
      _.f = 0;
      var nE = Nkb(KAb, "ForsterConstraintResolver/ConstraintGroup", 102);
      hI(331, 1, {});
      var pE = Nkb(LAb, "AbstractCrossingsCounter", 331);
      hI(568, 331, {}, iab);
      var qE = Nkb(LAb, "BarthJuengerMutzelCrossingsCounter", 568);
      hI(567, 331, {}, mab);
      var uE = Nkb(LAb, "HyperedgeCrossingsCounter", 567);
      hI(197, 1, {197: 1, 23: 1}, oab);
      _.F = function pab(a) {
        return nab(this, Wv(a, 197));
      };
      _.b = 0;
      _.c = 0;
      _.e = 0;
      _.f = 0;
      var tE = Nkb(LAb, "HyperedgeCrossingsCounter/Hyperedge", 197);
      hI(156, 1, {156: 1, 23: 1}, rab);
      _.F = function sab(a) {
        return qab(this, Wv(a, 156));
      };
      _.b = 0;
      _.c = 0;
      var sE = Nkb(LAb, "HyperedgeCrossingsCounter/HyperedgeCorner", 156);
      hI(242, 17, {242: 1, 3: 1, 23: 1, 17: 1}, wab);
      var tab, uab;
      var rE = Okb(LAb, "HyperedgeCrossingsCounter/HyperedgeCorner/Type", 242, IF, xab);
      hI(545, 1, BAb, Bab);
      _.qc = function Cab(a) {
        return Wv(rJ(a, (Rib(), jib)), 18).kb((ohb(), hhb)) ? yab : null;
      };
      _.sc = function Dab(a, b) {
        var c, d;
        nI(b, "Interactive node placement", 1);
        this.a = Wv(rJ(a, (Rib(), Kib)), 134);
        for (d = new Tob(a.c); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 16);
          Aab(this, c);
        }
        pI(b);
      };
      var yab;
      var vE = Nkb(MAb, "InteractiveNodePlacer", 545);
      hI(546, 1, BAb, Qab);
      _.qc = function Rab(a) {
        return Wv(rJ(a, (Rib(), jib)), 18).kb((ohb(), hhb)) ? Eab : null;
      };
      _.sc = function Sab(a, b) {
        nI(b, "Linear segments node placement", 1);
        this.b = Wv(rJ(a, (Rib(), Kib)), 134);
        Pab(this, a);
        Lab(this, a);
        Iab(this, a);
        Oab(this);
        this.a = null;
        this.b = null;
        pI(b);
      };
      var Eab, Fab, Gab;
      var xE = Nkb(MAb, "LinearSegmentsNodePlacer", 546);
      hI(111, 1, {111: 1, 23: 1}, Wab);
      _.F = function Xab(a) {
        return Tab(this, Wv(a, 111));
      };
      _.t = function Yab(a) {
        var b;
        if (aw(a, 111)) {
          b = Wv(a, 111);
          return this.b == b.b;
        }
        return false;
      };
      _.v = function Zab() {
        return this.b;
      };
      _.w = function $ab() {
        return "ls" + Ze(this.f);
      };
      _.a = 0;
      _.b = 0;
      _.c = -1;
      _.d = -1;
      _.i = 0;
      var wE = Nkb(MAb, "LinearSegmentsNodePlacer/LinearSegment", 111);
      hI(548, 1, BAb, cbb);
      _.qc = function dbb(a) {
        return Wv(rJ(a, (Rib(), jib)), 18).kb((ohb(), hhb)) ? _ab : null;
      };
      _.sc = function ebb(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C, D, F, G, H, I, J;
        H = Wv(rJ(a, (Rib(), Kib)), 134);
        u = (mp(), new ntb());
        t = 0;
        e = new l7();
        for (i = new Tob(a.c); i.a < i.c.c.length; ) {
          g = Wv(Rob(i), 16);
          D = null;
          C = null;
          for (n = new Tob(g.a); n.a < n.c.c.length; ) {
            m = Wv(Rob(n), 9);
            ++t;
            s = x7(new A7(), e);
            s.f = m;
            Ltb(u.d, m, s);
            m.e.d = Llb(m.e.d);
            if (C) {
              r = new d7();
              r.f = 0;
              r.a = hw(Mlb(D.e.d + D.j.b + D.e.a + Xjb(H, Wv(C.f, 9), m)));
              r.c = C;
              r.d = s;
              o7(C.g, r);
              o7(s.c, r);
            }
            D = m;
            C = s;
          }
        }
        for (j = new Tob(a.c); j.a < j.c.c.length; ) {
          g = Wv(Rob(j), 16);
          for (n = new Tob(g.a); n.a < n.c.c.length; ) {
            m = Wv(Rob(n), 9);
            for (A = new Tob(m.f); A.a < A.c.c.length; ) {
              w = Wv(Rob(A), 7);
              J = w.i.b + w.a.b;
              if (J != Math.floor(J)) {
                v = J - ZH(TH(Math.round(J)));
                w.i.b -= v;
              }
            }
          }
        }
        for (h = new Tob(a.c); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 16);
          for (n = new Tob(g.a); n.a < n.c.c.length; ) {
            m = Wv(Rob(n), 9);
            for (l = Uh(mX(m)); Cm(l); ) {
              k = Wv(Dm(l), 12);
              if (bW(k)) {
                continue;
              }
              if (k.d.f.d == g) {
                continue;
              }
              G = k.c.f.e.d + k.c.i.b + k.c.a.b;
              I = k.d.f.e.d + k.d.i.b + k.d.a.b;
              c = I - G;
              B = hw(c);
              d = x7(new A7(), e);
              o2 = new d7();
              o2.f = bbb(k);
              o2.a = B > 0 ? B : 0;
              o2.c = d;
              o2.d = Wv(Smb(u, k.c.f), 61);
              o7(o2.c.g, o2);
              o7(o2.d.c, o2);
              F = new d7();
              F.f = bbb(k);
              F.a = B < 0 ? -B : 0;
              F.c = d;
              F.d = Wv(Smb(u, k.d.f), 61);
              o7(F.c.g, F);
              o7(F.d.c, F);
            }
          }
        }
        f = Wv(rJ(a, (Mjb(), Kjb)), 24).a * hw(Math.sqrt(t));
        F7(S7(T7(W7(e), f), false), rI(b, 1));
        for (q = new Tob(e.a); q.a < q.c.c.length; ) {
          p = Wv(Rob(q), 61);
          if (p.f != null) {
            m = Wv(p.f, 9);
            m.i.b = p.e + m.e.d;
          }
        }
      };
      var _ab;
      var yE = Nkb(MAb, "NetworkSimplexPlacer", 548);
      hI(141, 17, {180: 1, 141: 1, 3: 1, 23: 1, 17: 1}, lbb);
      _.rc = function mbb() {
        switch (this.e) {
          case 0:
            return new sbb();
          case 1:
            return new Bab();
          case 2:
            return new Qab();
          case 3:
            return new dcb();
          case 4:
            return new cbb();
          default:
            throw new slb("No implementation is available for the node placer " + (this.d != null ? this.d : "" + this.e));
        }
      };
      var fbb, gbb, hbb, ibb, jbb;
      var zE = Okb(MAb, "NodePlacementStrategy", 141, IF, nbb);
      var obb;
      hI(544, 1, BAb, sbb);
      _.qc = function tbb(a) {
        return Wv(rJ(a, (Rib(), jib)), 18).kb((ohb(), hhb)) ? qbb : null;
      };
      _.sc = function ubb(a, b) {
        var c, d, e, f, g, h, i, j, k, l;
        nI(b, "Simple node placement", 1);
        l = Wv(rJ(a, (Rib(), Kib)), 134);
        h = 0;
        for (f = new Tob(a.c); f.a < f.c.c.length; ) {
          d = Wv(Rob(f), 16);
          g = d.c;
          g.b = 0;
          c = null;
          for (j = new Tob(d.a); j.a < j.c.c.length; ) {
            i = Wv(Rob(j), 9);
            !!c && (g.b += Vjb(l, i.g, c.g) * l.d);
            g.b += i.e.d + i.j.b + i.e.a;
            c = i;
          }
          h = Nlb(h, g.b);
        }
        for (e = new Tob(a.c); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 16);
          g = d.c;
          k = (h - g.b) / 2;
          c = null;
          for (j = new Tob(d.a); j.a < j.c.c.length; ) {
            i = Wv(Rob(j), 9);
            !!c && (k += Vjb(l, i.g, c.g) * l.d);
            k += i.e.d;
            i.i.b = k;
            k += i.j.b + i.e.a;
            c = i;
          }
        }
        pI(b);
      };
      var qbb;
      var AE = Nkb(MAb, "SimpleNodePlacer", 544);
      hI(81, 1, {81: 1}, Cbb);
      _.w = function Dbb() {
        var a;
        a = "";
        this.c == (Gbb(), Fbb) ? a += pzb : this.c == Ebb && (a += ozb);
        this.k == (Lbb(), Jbb) ? a += "DOWN" : this.k == Kbb ? a += "UP" : a += "BALANCED";
        return a;
      };
      var DE = Nkb(OAb, "BKAlignedLayout", 81);
      hI(248, 17, {248: 1, 3: 1, 23: 1, 17: 1}, Hbb);
      var Ebb, Fbb;
      var BE = Okb(OAb, "BKAlignedLayout/HDirection", 248, IF, Ibb);
      hI(247, 17, {247: 1, 3: 1, 23: 1, 17: 1}, Mbb);
      var Jbb, Kbb;
      var CE = Okb(OAb, "BKAlignedLayout/VDirection", 247, IF, Nbb);
      hI(596, 1, {}, Qbb);
      var EE = Nkb(OAb, "BKAligner", 596);
      hI(599, 1, {}, Vbb);
      var HE = Nkb(OAb, "BKCompactor", 599);
      hI(279, 1, {279: 1}, Wbb);
      _.a = 0;
      var FE = Nkb(OAb, "BKCompactor/ClassEdge", 279);
      hI(200, 1, {200: 1}, Ybb);
      _.a = 0;
      _.b = 0;
      var GE = Nkb(OAb, "BKCompactor/ClassNode", 200);
      hI(547, 1, BAb, dcb);
      _.qc = function hcb(a) {
        return Wv(rJ(a, (Rib(), jib)), 18).kb((ohb(), hhb)) ? Zbb : null;
      };
      _.sc = function icb(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t;
        nI(b, "Brandes & Koepf node placement", 1);
        this.b = a;
        this.d = scb(a);
        this.a = Ckb(Ixb(Xv(rJ(a, (Mjb(), mjb)))));
        this.e = gw(rJ(a, sjb)) === gw((_gb(), Vgb));
        ccb(this, a);
        n = (Mh(4, Vyb), new HU(4));
        switch (Wv(rJ(a, sjb), 124).e) {
          case 3:
            o2 = new Cbb(a, this.d.d, (Lbb(), Jbb), (Gbb(), Ebb));
            n.c[n.c.length] = o2;
            break;
          case 1:
            p = new Cbb(a, this.d.d, (Lbb(), Kbb), (Gbb(), Ebb));
            n.c[n.c.length] = p;
            break;
          case 4:
            s = new Cbb(a, this.d.d, (Lbb(), Jbb), (Gbb(), Fbb));
            n.c[n.c.length] = s;
            break;
          case 2:
            t = new Cbb(a, this.d.d, (Lbb(), Kbb), (Gbb(), Fbb));
            n.c[n.c.length] = t;
            break;
          default:
            o2 = new Cbb(a, this.d.d, (Lbb(), Jbb), (Gbb(), Ebb));
            p = new Cbb(a, this.d.d, Kbb, Ebb);
            s = new Cbb(a, this.d.d, Jbb, Fbb);
            t = new Cbb(a, this.d.d, Kbb, Fbb);
            n.c[n.c.length] = s;
            n.c[n.c.length] = t;
            n.c[n.c.length] = o2;
            n.c[n.c.length] = p;
        }
        c = new Qbb(a, this.d);
        for (f = new Tob(n); f.a < f.c.c.length; ) {
          d = Wv(Rob(f), 81);
          Pbb(c, d, this.c);
          Obb(d);
        }
        k = new Vbb(a, this.d);
        for (g = new Tob(n); g.a < g.c.c.length; ) {
          d = Wv(Rob(g), 81);
          Sbb(k, d);
        }
        if (this.a) {
          for (h = new Tob(n); h.a < h.c.c.length; ) {
            d = Wv(Rob(h), 81);
            Fmb();
            d + " size is " + Abb(d);
          }
        }
        j = null;
        if (this.e) {
          i = acb(this, n, this.d.d);
          _bb(this, a, i) && (j = i);
        }
        if (!j) {
          for (h = new Tob(n); h.a < h.c.c.length; ) {
            d = Wv(Rob(h), 81);
            _bb(this, a, d) && (!j || Abb(j) > Abb(d)) && (j = d);
          }
        }
        !j && (j = (Cxb(0, n.c.length), Wv(n.c[0], 81)));
        for (m = new Tob(a.c); m.a < m.c.c.length; ) {
          l = Wv(Rob(m), 16);
          for (r = new Tob(l.a); r.a < r.c.c.length; ) {
            q = Wv(Rob(r), 9);
            q.i.b = Ixb(j.n[q.k]) + Ixb(j.d[q.k]);
          }
        }
        if (this.a) {
          Fmb();
          "Blocks: " + ecb(j);
          "Classes: " + fcb(j);
        }
        for (e = new Tob(n); e.a < e.c.c.length; ) {
          d = Wv(Rob(e), 81);
          d.f = null;
          d.b = null;
          d.a = null;
          d.d = null;
          d.i = null;
          d.g = null;
          d.n = null;
        }
        qcb(this.d);
        this.c.a.Q();
        pI(b);
      };
      _.a = false;
      _.e = false;
      var Zbb;
      var IE = Nkb(OAb, "BKNodePlacer", 547);
      hI(194, 17, {194: 1, 3: 1, 23: 1, 17: 1}, mcb);
      var jcb, kcb;
      var JE = Okb(OAb, "CompactionStrategy", 194, IF, ncb);
      var ocb;
      hI(597, 1, {}, rcb);
      _.d = 0;
      var LE = Nkb(OAb, "NeighborhoodInformation", 597);
      hI(598, 1, fyb, wcb);
      _.$b = function xcb(a, b) {
        return vcb(this, Wv(a, 27), Wv(b, 27));
      };
      var KE = Nkb(OAb, "NeighborhoodInformation/NeighborComparator", 598);
      hI(334, 1, {});
      var PE = Nkb(OAb, "ThresholdStrategy", 334);
      hI(602, 334, {}, Ccb);
      _.Ic = function Dcb(a, b, c) {
        return this.a.k == (Lbb(), Kbb) ? Uzb : Vzb;
      };
      _.Jc = function Ecb() {
      };
      var ME = Nkb(OAb, "ThresholdStrategy/NullThresholdStrategy", 602);
      hI(249, 1, {249: 1}, Fcb);
      _.c = false;
      _.d = false;
      var NE = Nkb(OAb, "ThresholdStrategy/Postprocessable", 249);
      hI(603, 334, {}, Jcb);
      _.Ic = function Kcb(a, b, c) {
        var d, e, f;
        e = b == c;
        d = this.a.a[c.k] == b;
        if (!(e || d)) {
          return a;
        }
        f = a;
        if (this.a.c == (Gbb(), Fbb)) {
          e && (f = Gcb(this, b, true));
          (f == Infinity || f == -Infinity) && d && (f = Gcb(this, c, false));
        } else {
          e && (f = Gcb(this, b, true));
          (f == Infinity || f == -Infinity) && d && (f = Gcb(this, c, false));
        }
        return f;
      };
      _.Jc = function Lcb() {
        var a, b, c, d;
        while (this.d.b != 0) {
          d = Wv(XI(this.d), 249);
          c = Hcb(this, d);
          if (!c.a) {
            continue;
          }
          a = c.a;
          if (this.c.a[a.c.f.d.k] === this.c.a[a.d.f.d.k]) {
            continue;
          }
          b = Icb(this, d);
          b || Tvb(this.e, d);
        }
        while (this.e.a.c.length != 0) {
          Icb(this, Wv(Svb(this.e), 249));
        }
      };
      var OE = Nkb(OAb, "ThresholdStrategy/SimpleThresholdStrategy", 603);
      hI(423, 1, {180: 1}, Mcb);
      _.rc = function Ncb() {
        switch (this.a.e) {
          case 1:
            return new Rdb();
          case 3:
            return new Wfb();
          default:
            return new Ycb();
        }
      };
      var QE = Nkb(PAb, "EdgeRouterFactory", 423);
      hI(538, 1, BAb, Ycb);
      _.qc = function Zcb(a) {
        var b, c;
        c = Wv(rJ(a, (Rib(), jib)), 18);
        b = new WQ();
        if (c.kb((ohb(), ihb))) {
          QQ(b, Scb);
          QQ(b, Ucb);
        }
        if (c.kb(khb) || Ckb(Ixb(Xv(rJ(a, (Mjb(), rjb)))))) {
          QQ(b, Ucb);
          c.kb(lhb) && QQ(b, Vcb);
        }
        c.kb(hhb) && QQ(b, Rcb);
        c.kb(nhb) && QQ(b, Wcb);
        c.kb(jhb) && QQ(b, Tcb);
        c.kb(ehb) && QQ(b, Pcb);
        c.kb(ghb) && QQ(b, Qcb);
        return b;
      };
      _.sc = function $cb(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2;
        nI(b, "Orthogonal edge routing", 1);
        m = Wv(rJ(a, (Rib(), Kib)), 134);
        Ckb(Ixb(Xv(rJ(a, (eM(), rL)))));
        k = new cdb(0, m.a);
        o2 = 0;
        f = new Fnb(a.c, 0);
        g = null;
        h = null;
        do {
          i = f.b < f.d.Y() ? (Bxb(f.b < f.d.Y()), Wv(f.d.sb(f.c = f.b++), 16)) : null;
          j = !i ? null : i.a;
          if (g) {
            UW(g, o2);
            o2 += g.c.a;
          }
          n = !g ? o2 : o2 + m.b;
          l = bdb(k, a, h, j, n);
          d = !g || nl(h, (Ndb(), Mdb));
          e = !i || nl(j, (Ndb(), Mdb));
          if (l > 0) {
            c = m.b + (l - 1) * m.a;
            !!i && (c += m.b);
            c < m.f && !d && !e && (c = m.f);
            o2 += c;
          } else
            !d && !e && (o2 += m.f);
          g = i;
          h = j;
        } while (i);
        a.e.a = o2;
        pI(b);
      };
      var Pcb, Qcb, Rcb, Scb, Tcb, Ucb, Vcb, Wcb;
      var RE = Nkb(PAb, "OrthogonalEdgeRouter", 538);
      hI(277, 1, {}, cdb);
      _.a = 0;
      _.c = 0;
      var XE = Nkb(PAb, "OrthogonalRoutingGenerator", 277);
      hI(118, 1, {118: 1}, kdb);
      _.w = function ldb() {
        return this.a + "->" + this.b;
      };
      _.c = 0;
      var SE = Nkb(PAb, "OrthogonalRoutingGenerator/Dependency", 118);
      hI(80, 1, {80: 1, 23: 1}, odb);
      _.F = function pdb(a) {
        return ndb(this, Wv(a, 80));
      };
      _.t = function qdb(a) {
        var b;
        if (aw(a, 80)) {
          b = Wv(a, 80);
          return this.d == b.d;
        }
        return false;
      };
      _.v = function rdb() {
        return this.d;
      };
      _.w = function sdb() {
        var a, b, c, d;
        a = new Bmb("{");
        d = new Tob(this.g);
        while (d.a < d.c.c.length) {
          c = Wv(Rob(d), 7);
          b = lX(c.f);
          b == null && (b = "n" + jX(c.f));
          a.a += "" + b;
          d.a < d.c.c.length && (a.a += ",", a);
        }
        a.a += "}";
        return a.a;
      };
      _.a = NaN;
      _.c = 0;
      _.d = 0;
      _.f = 0;
      _.i = 0;
      _.k = NaN;
      var TE = Nkb(PAb, "OrthogonalRoutingGenerator/HyperNode", 80);
      hI(580, 1, {}, tdb);
      _.Kc = function udb(a, b) {
        var c, d, e, f, g, h, i, j, k, l;
        l = b + a.i * this.a.c;
        for (h = new Tob(a.g); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 7);
          i = MI(Bv(tv(qz, 1), Fzb, 10, 0, [g.f.i, g.i, g.a])).a;
          for (d = new Tob(g.e); d.a < d.c.c.length; ) {
            c = Wv(Rob(d), 12);
            j = c.d;
            k = MI(Bv(tv(qz, 1), Fzb, 10, 0, [j.f.i, j.i, j.a])).a;
            if ((i - k <= 0 ? 0 - (i - k) : i - k) > dAb) {
              e = new HI(i, l);
              QI(c.a, e);
              _cb(this.a, c, a, e, false);
              f = new HI(k, l);
              QI(c.a, f);
              _cb(this.a, c, a, f, false);
            }
          }
        }
      };
      _.Lc = function vdb(a) {
        return a.f.i.a + a.i.a + a.a.a;
      };
      _.Mc = function wdb() {
        return sN(), pN;
      };
      _.Nc = function xdb() {
        return sN(), $M;
      };
      var UE = Nkb(PAb, "OrthogonalRoutingGenerator/NorthToSouthRoutingStrategy", 580);
      hI(581, 1, {}, ydb);
      _.Kc = function zdb(a, b) {
        var c, d, e, f, g, h, i, j, k, l;
        l = b - a.i * this.a.c;
        for (h = new Tob(a.g); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 7);
          i = MI(Bv(tv(qz, 1), Fzb, 10, 0, [g.f.i, g.i, g.a])).a;
          for (d = new Tob(g.e); d.a < d.c.c.length; ) {
            c = Wv(Rob(d), 12);
            j = c.d;
            k = MI(Bv(tv(qz, 1), Fzb, 10, 0, [j.f.i, j.i, j.a])).a;
            if ((i - k <= 0 ? 0 - (i - k) : i - k) > dAb) {
              e = new HI(i, l);
              QI(c.a, e);
              _cb(this.a, c, a, e, false);
              f = new HI(k, l);
              QI(c.a, f);
              _cb(this.a, c, a, f, false);
            }
          }
        }
      };
      _.Lc = function Adb(a) {
        return a.f.i.a + a.i.a + a.a.a;
      };
      _.Mc = function Bdb() {
        return sN(), $M;
      };
      _.Nc = function Cdb() {
        return sN(), pN;
      };
      var VE = Nkb(PAb, "OrthogonalRoutingGenerator/SouthToNorthRoutingStrategy", 581);
      hI(579, 1, {}, Ddb);
      _.Kc = function Edb(a, b) {
        var c, d, e, f, g, h, i, j, k, l;
        l = b + a.i * this.a.c;
        for (h = new Tob(a.g); h.a < h.c.c.length; ) {
          g = Wv(Rob(h), 7);
          i = MI(Bv(tv(qz, 1), Fzb, 10, 0, [g.f.i, g.i, g.a])).b;
          for (d = new Tob(g.e); d.a < d.c.c.length; ) {
            c = Wv(Rob(d), 12);
            j = c.d;
            k = MI(Bv(tv(qz, 1), Fzb, 10, 0, [j.f.i, j.i, j.a])).b;
            if ((i - k <= 0 ? 0 - (i - k) : i - k) > dAb) {
              e = new HI(l, i);
              QI(c.a, e);
              _cb(this.a, c, a, e, true);
              f = new HI(l, k);
              QI(c.a, f);
              _cb(this.a, c, a, f, true);
            }
          }
        }
      };
      _.Lc = function Fdb(a) {
        return a.f.i.b + a.i.b + a.a.b;
      };
      _.Mc = function Gdb() {
        return sN(), ZM;
      };
      _.Nc = function Hdb() {
        return sN(), rN;
      };
      var WE = Nkb(PAb, "OrthogonalRoutingGenerator/WestToEastRoutingStrategy", 579);
      hI(535, 1, BAb, Rdb);
      _.qc = function Sdb(a) {
        var b, c;
        c = Wv(rJ(a, (Rib(), jib)), 18);
        b = new WQ();
        if (c.kb((ohb(), khb)) || Ckb(Ixb(Xv(rJ(a, (Mjb(), rjb)))))) {
          QQ(b, Kdb);
          c.kb(lhb) && QQ(b, Ldb);
        }
        c.kb(ehb) && QQ(b, Idb);
        c.kb(ghb) && QQ(b, Jdb);
        return b;
      };
      _.sc = function Tdb(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v;
        nI(b, "Polyline edge routing", 1);
        l = Wv(rJ(a, (Rib(), Jib)), 15).a;
        c = Wv(rJ(a, (Mjb(), qjb)), 15).a;
        q = 0;
        if (a.c.c.length != 0) {
          r = Pdb(Wv(yU(a.c, 0), 16));
          q = 0.4 * c * r;
        }
        f = new Fnb(a.c, 0);
        while (f.b < f.d.Y()) {
          e = (Bxb(f.b < f.d.Y()), Wv(f.d.sb(f.c = f.b++), 16));
          d = nl(e, Mdb);
          d && q > 0 && (q -= l);
          UW(e, q);
          i = 0;
          for (k = new Tob(e.a); k.a < k.c.c.length; ) {
            j = Wv(Rob(k), 9);
            h = 0;
            for (n = Uh(mX(j)); Cm(n); ) {
              m = Wv(Dm(n), 12);
              o2 = MX(m.c).b;
              p = MX(m.d).b;
              if (e == m.d.f.d) {
                s = m.c;
                t = m.d;
                u = (MI(Bv(tv(qz, 1), Fzb, 10, 0, [s.f.i, s.i, s.a])).b + MI(Bv(tv(qz, 1), Fzb, 10, 0, [t.f.i, t.i, t.a])).b) / 2;
                s.g == (sN(), ZM) ? v = new HI(q + s.f.d.c.a + 0.4 * c * (o2 - p <= 0 ? 0 - (o2 - p) : o2 - p), u) : v = new HI(q - 0.4 * c * (o2 - p <= 0 ? 0 - (o2 - p) : o2 - p), u);
                rn(m.a, 0, v);
                if (m.c.g == rN) {
                  o2 = 0;
                  p = 0;
                }
              }
              h = h > (p - o2 <= 0 ? 0 - (p - o2) : p - o2) ? h : p - o2 <= 0 ? 0 - (p - o2) : p - o2;
            }
            switch (j.g.e) {
              case 0:
              case 4:
              case 1:
              case 3:
                Qdb(this, j, q);
            }
            i = i > h ? i : h;
          }
          if (f.b < f.d.Y()) {
            r = Pdb((Bxb(f.b < f.d.Y()), Wv(f.d.sb(f.c = f.b++), 16)));
            i = i > r ? i : r;
            Bxb(f.b > 0);
            f.a.sb(f.c = --f.b);
          }
          g = 0.4 * c * i;
          !d && f.b < f.d.Y() && (g += l);
          q += e.c.a + g;
        }
        this.a.a.Q();
        a.e.a = q;
        pI(b);
      };
      var Idb, Jdb, Kdb, Ldb, Mdb;
      var ZE = Nkb(PAb, "PolylineEdgeRouter", 535);
      hI(536, 1, _zb, Vdb);
      _.D = function Wdb(a) {
        return Udb(Wv(a, 9));
      };
      var YE = Nkb(PAb, "PolylineEdgeRouter/1", 536);
      hI(75, 1, {75: 1}, deb);
      _.w = function eeb() {
        var a, b, c, d;
        c = new zmb();
        !!this.e && ymb(ymb(c, zc(this.e)), ": ");
        for (b = WI(Zdb(this), 0); b.b != b.d.c; ) {
          a = Wv(_ub(b), 7);
          ymb(ymb(umb(ymb(c, (d = OX(a), d == null ? "p_" + a.k : "p_" + d)), 32), zc(a.g)), " / ");
        }
        return kkb(c, pmb(c.a) - 2 - 1);
      };
      _.j = 0;
      _.k = 0;
      var $E = Nkb(QAb, "ConnectedSelfLoopComponent", 75);
      hI(60, 17, {60: 1, 3: 1, 23: 1, 17: 1}, Peb);
      _.c = 0;
      var feb, geb, heb, ieb, jeb, keb, leb, meb, neb, oeb, peb, qeb, reb, seb, teb, ueb, veb, web, xeb, yeb, zeb, Aeb, Beb, Ceb, Deb, Eeb, Feb, Geb, Heb;
      var _E = Okb(QAb, "LoopSide", 60, IF, Seb);
      hI(203, 1, {}, dfb, efb, ffb);
      _.w = function pfb() {
        return this.b.w();
      };
      _.c = 0;
      _.d = false;
      _.e = false;
      _.f = false;
      _.i = 0;
      _.j = 0;
      var bF = Nkb(QAb, "NubSpline", 203);
      hI(92, 1, {92: 1}, sfb, tfb);
      var aF = Nkb(QAb, "NubSpline/PolarCP", 92);
      hI(281, 203, {}, ufb);
      var cF = Nkb(QAb, "NubsSelfLoop", 281);
      hI(112, 1, {}, Bfb, Cfb, Dfb, Efb, Ffb);
      _.a = jzb;
      _.b = rAb;
      _.c = jzb;
      _.d = rAb;
      var dF = Nkb(QAb, "Rectangle", 112);
      hI(537, 1, BAb, Wfb);
      _.qc = function Yfb(a) {
        var b, c;
        b = new WQ();
        c = Wv(rJ(a, (Rib(), jib)), 18);
        c.kb((ohb(), nhb)) && QQ(b, Lfb);
        c.kb(ehb) && QQ(b, Hfb);
        if (c.kb(khb) || Ckb(Ixb(Xv(rJ(a, (Mjb(), rjb)))))) {
          QQ(b, Jfb);
          c.kb(lhb) && QQ(b, Kfb);
        }
        c.kb(ghb) && QQ(b, Ifb);
        return b;
      };
      _.sc = function $fb(a, b) {
        var c, d, e, f, g, h, i, j, k, l, m, n, o2, p, q, r, s, t, u, v, w, A, B, C, D, F, G, H, I, J, K, L;
        nI(b, "Spline edge routing", 1);
        u = Wv(rJ(a, (Rib(), Jib)), 15).a;
        this.a = u * Wv(rJ(a, (Mjb(), qjb)), 15).a;
        L = 0;
        q = new Tob(a.c);
        r = null;
        J = (mp(), new ntb());
        I = new GU();
        i = true;
        j = true;
        do {
          A = q.a < q.c.c.length ? Wv(Rob(q), 16) : null;
          m = new GU();
          g = new GU();
          s = new Wub();
          C = new Wub();
          G = new Wub();
          Tfb(new RJ(r, A), new RJ(s, C), g, J, I, G);
          Sfb(s, C, (fgb(), dgb), true, g, m);
          Sfb(s, C, dgb, false, g, m);
          Sfb(s, C, egb, true, g, m);
          Sfb(s, C, egb, false, g, m);
          Rfb(g, s, C, m);
          H = new Fnb(m, 0);
          while (H.b < H.d.Y()) {
            k = (Bxb(H.b < H.d.Y()), Wv(H.d.sb(H.c = H.b++), 77));
            K = new Fnb(m, H.b);
            while (K.b < K.d.Y()) {
              l = (Bxb(K.b < K.d.Y()), Wv(K.d.sb(K.c = K.b++), 77));
              Qfb(k, l);
            }
          }
          Xfb(m, Wv(rJ(a, Gib), 154));
          _fb(m);
          B = L + 10;
          if (A) {
            j = !A || nl(A.a, (Ndb(), Mdb));
            t = -1;
            for (e = new Tob(m); e.a < e.c.c.length; ) {
              c = Wv(Rob(e), 77);
              t = Plb(t, c.n);
            }
            ++t;
            if (t > 0) {
              n = (t + 1) * this.a;
              n < u && !i && !j && (n = u);
              B += n;
            } else
              i || j || Vfb(r) || Vfb(A) || (B += u);
            UW(A, B);
          }
          for (F = (w = new Snb(G.a).a.bb().mb(), new Ynb(w)); F.a.G(); ) {
            D = (h = Wv(F.a.H(), 21), Wv(h.yb(), 12));
            v = D.c.f.i;
            hJ(D.a, v);
            for (p = new Tob(D.b); p.a < p.c.c.length; ) {
              o2 = Wv(Rob(p), 33);
              vI(o2.i, v);
            }
          }
          for (f = new Tob(m); f.a < f.c.c.length; ) {
            c = Wv(Rob(f), 77);
            c.f ? Ofb(c, L) : Pfb(this, c, L, B);
          }
          if (A) {
            L = B + A.c.a + 10;
          } else {
            t = -1;
            for (e = new Tob(m); e.a < e.c.c.length; ) {
              c = Wv(Rob(e), 77);
              t = Plb(t, c.n);
            }
            t >= 0 && (L += (t + 2) * this.a);
          }
          r = A;
          i = j;
        } while (A);
        for (d = new Tob(I); d.a < d.c.c.length; ) {
          c = Wv(Rob(d), 12);
          Nfb(c, J);
        }
        a.e.a = L;
        pI(b);
      };
      _.a = 3;
      var Hfb, Ifb, Jfb, Kfb, Lfb;
      var hF = Nkb(QAb, "SplineEdgeRouter", 537);
      hI(117, 1, {117: 1}, bgb);
      _.w = function cgb() {
        return this.a + " ->(" + this.c + ") " + this.b;
      };
      _.c = 0;
      var eF = Nkb(QAb, "SplineEdgeRouter/Dependency", 117);
      hI(223, 17, {223: 1, 3: 1, 23: 1, 17: 1}, ggb);
      var dgb, egb;
      var fF = Okb(QAb, "SplineEdgeRouter/SideToProcess", 223, IF, hgb);
      hI(77, 1, {77: 1, 23: 1}, lgb, mgb);
      _.F = function ngb(a) {
        return jgb(this, Wv(a, 77));
      };
      _.a = 0;
      _.b = 0;
      _.e = 0;
      _.f = false;
      _.i = 0;
      _.k = 0;
      _.n = 0;
      _.p = 0;
      var gF = Nkb(QAb, "SplineEdgeRouter/SplineHyperEdge", 77);
      hI(123, 17, {123: 1, 3: 1, 23: 1, 17: 1}, Agb);
      var tgb, ugb, vgb, wgb, xgb, ygb;
      var iF = Okb(VAb, "ContentAlignment", 123, IF, Bgb);
      var Cgb;
      hI(218, 17, {218: 1, 3: 1, 23: 1, 17: 1}, Igb);
      var Egb, Fgb, Ggb;
      var jF = Okb(VAb, "EdgeConstraint", 218, IF, Jgb);
      hI(115, 17, {115: 1, 3: 1, 23: 1, 17: 1}, Rgb);
      var Kgb, Lgb, Mgb, Ngb, Ogb;
      var kF = Okb(VAb, "EdgeLabelSideSelection", 115, IF, Sgb);
      var Tgb;
      hI(124, 17, {124: 1, 3: 1, 23: 1, 17: 1}, ahb);
      var Vgb, Wgb, Xgb, Ygb, Zgb, $gb;
      var lF = Okb(VAb, "FixedAlignment", 124, IF, bhb);
      var chb;
      hI(113, 17, {113: 1, 3: 1, 23: 1, 17: 1}, phb);
      var ehb, fhb, ghb, hhb, ihb, jhb, khb, lhb, mhb, nhb;
      var mF = Okb(VAb, "GraphProperties", 113, IF, qhb);
      hI(110, 17, {110: 1, 3: 1, 23: 1, 17: 1}, Ahb);
      _.a = false;
      _.b = false;
      _.c = false;
      var rhb, shb, thb, uhb, vhb, whb, xhb, yhb;
      var nF = Okb(VAb, "GreedySwitchType", 110, IF, Bhb);
      var Chb;
      hI(140, 17, {140: 1, 3: 1, 23: 1, 17: 1}, Ihb);
      var Ehb, Fhb, Ghb;
      var oF = Okb(VAb, "InLayerConstraint", 140, IF, Jhb);
      hI(174, 17, {174: 1, 3: 1, 23: 1, 17: 1}, Nhb);
      var Khb, Lhb;
      var pF = Okb(VAb, "InteractiveReferencePoint", 174, IF, Ohb);
      var Phb;
      var Rhb, Shb, Thb, Uhb, Vhb, Whb, Xhb, Yhb, Zhb, $hb, _hb, aib, bib, cib, dib, eib, fib, gib, hib, iib, jib, kib, lib, mib, nib, oib, pib, qib, rib, sib, tib, uib, vib, wib, xib, yib, zib, Aib, Bib, Cib, Dib, Eib, Fib, Gib, Hib, Iib, Jib, Kib, Lib, Mib, Nib, Oib, Pib, Qib;
      hI(85, 17, {85: 1, 3: 1, 23: 1, 17: 1}, Yib);
      var Sib, Tib, Uib, Vib, Wib;
      var qF = Okb(VAb, "LayerConstraint", 85, IF, Zib);
      var $ib;
      hI(219, 17, {219: 1, 3: 1, 23: 1, 17: 1}, ejb);
      var ajb, bjb, cjb;
      var rF = Okb(VAb, "PortType", 219, IF, fjb);
      var gjb, hjb, ijb, jjb, kjb, ljb, mjb, njb, ojb, pjb, qjb, rjb, sjb, tjb, ujb, vjb, wjb, xjb, yjb, zjb, Ajb, Bjb, Cjb, Djb, Ejb, Fjb, Gjb, Hjb, Ijb, Jjb, Kjb, Ljb;
      hI(153, 17, {153: 1, 3: 1, 23: 1, 17: 1}, Rjb);
      var Njb, Ojb, Pjb;
      var sF = Okb(VAb, "SelfLoopPlacement", 153, IF, Sjb);
      var Tjb;
      hI(134, 1, {134: 1}, $jb);
      _.a = 0;
      _.b = 0;
      _.c = 0;
      _.d = 0;
      _.e = 0;
      _.f = 0;
      var tF = Nkb(VAb, "Spacings", 134);
      hI(172, 17, {172: 1, 3: 1, 23: 1, 17: 1}, dkb);
      var _jb, akb, bkb;
      var uF = Okb(VAb, "WideNodesStrategy", 172, IF, ekb);
      var fkb;
      hI(644, 1, {});
      var xF = Nkb(nyb, "OutputStream", 644);
      hI(645, 644, {});
      var vF = Nkb(nyb, "FilterOutputStream", 645);
      hI(291, 645, {}, hkb);
      var yF = Nkb(nyb, "PrintStream", 291);
      hI(255, 1, {});
      _.w = function mkb() {
        return this.a;
      };
      var AF = Nkb(kyb, "AbstractStringBuilder", 255);
      hI(621, 95, Vxb, pkb);
      var BF = Nkb(kyb, "ArrayIndexOutOfBoundsException", 621);
      hI(290, 72, Vxb, qkb, rkb);
      var CF = Nkb(kyb, "ArrayStoreException", 290);
      hI(252, 46, Uxb);
      var JF = Nkb(kyb, "Error", 252);
      hI(84, 252, Uxb, tkb, ukb);
      var DF = Nkb(kyb, "AssertionError", 84);
      Sv = {3: 1, 349: 1, 23: 1};
      var vkb, wkb;
      var EF = Nkb(kyb, "Boolean", 349);
      Tv = {3: 1, 23: 1, 184: 1, 231: 1};
      var HF = Nkb(kyb, "Double", 184);
      hI(15, 231, {3: 1, 23: 1, 15: 1, 231: 1}, klb, llb);
      _.F = function mlb(a) {
        return jlb(this, Wv(a, 15));
      };
      _.t = function nlb(a) {
        return aw(a, 15) && Wv(a, 15).a == this.a;
      };
      _.v = function olb() {
        return hw(this.a);
      };
      _.w = function plb() {
        return qlb(this.a);
      };
      _.a = 0;
      var LF = Nkb(kyb, "Float", 15);
      hI(101, 72, Vxb, tlb, ulb);
      var NF = Nkb(kyb, "IllegalStateException", 101);
      var Flb;
      var Hlb;
      hI(608, 72, Vxb, Ulb);
      var QF = Nkb(kyb, "NegativeArraySizeException", 608);
      hI(76, 72, {3: 1, 54: 1, 76: 1, 46: 1}, Vlb, Wlb);
      var RF = Nkb(kyb, "NullPointerException", 76);
      hI(130, 29, {3: 1, 54: 1, 29: 1, 130: 1, 46: 1}, Xlb, Ylb);
      var SF = Nkb(kyb, "NumberFormatException", 130);
      hI(146, 1, {3: 1, 146: 1}, Zlb);
      _.t = function $lb(a) {
        var b;
        if (aw(a, 146)) {
          b = Wv(a, 146);
          return this.c == b.c && ovb(this.d, b.d) && ovb(this.a, b.a) && ovb(this.b, b.b);
        }
        return false;
      };
      _.v = function _lb() {
        return fpb(Bv(tv(UF, 1), syb, 1, 4, [Elb(this.c), this.a, this.d, this.b]));
      };
      _.w = function amb() {
        return this.a + "." + this.d + "(" + (this.b != null ? this.b : "Unknown Source") + (this.c >= 0 ? ":" + this.c : "") + ")";
      };
      _.c = 0;
      var WF = Nkb(kyb, "StackTraceElement", 146);
      hI(98, 255, {345: 1}, zmb, Amb, Bmb);
      var YF = Nkb(kyb, "StringBuilder", 98);
      var Dmb, Emb;
      hI(45, 72, {3: 1, 54: 1, 46: 1, 45: 1}, Hmb, Imb);
      var aG = Nkb(kyb, "UnsupportedOperationException", 45);
      hI(213, 638, Byb);
      _.Q = function _mb() {
        Ymb(this);
      };
      _.R = function anb(a) {
        return Qmb(this, a);
      };
      _.ab = function bnb(a) {
        return Rmb(this, a, this.e) || Rmb(this, a, this.d);
      };
      _.bb = function cnb() {
        return new inb(this);
      };
      _.cb = function dnb(a) {
        return Smb(this, a);
      };
      _.db = function enb(a, b) {
        return Umb(this, a, b);
      };
      _.eb = function fnb(a) {
        return Wmb(this, a);
      };
      _.Y = function gnb() {
        return Zmb(this);
      };
      var hG = Nkb(Cyb, "AbstractHashMap", 213);
      hI(120, 641, Eyb, inb);
      _.Q = function jnb() {
        this.a.Q();
      };
      _.kb = function knb(a) {
        return hnb(this, a);
      };
      _.mb = function lnb() {
        return new rnb(this.a);
      };
      _.nb = function mnb(a) {
        var b;
        if (hnb(this, a)) {
          b = Wv(a, 21).yb();
          this.a.eb(b);
          return true;
        }
        return false;
      };
      _.Y = function nnb() {
        return this.a.Y();
      };
      var gG = Nkb(Cyb, "AbstractHashMap/EntrySet", 120);
      hI(148, 1, Ayb, rnb);
      _.H = function tnb() {
        return pnb(this);
      };
      _.G = function snb() {
        return this.b;
      };
      _.I = function unb() {
        qnb(this);
      };
      _.b = false;
      var fG = Nkb(Cyb, "AbstractHashMap/EntrySetIterator", 148);
      hI(162, 1, Ayb, wnb);
      _.G = function xnb() {
        return this.b < this.d.Y();
      };
      _.H = function ynb() {
        return Bxb(this.G()), this.d.sb(this.c = this.b++);
      };
      _.I = function znb() {
        vnb(this);
      };
      _.b = 0;
      _.c = -1;
      var iG = Nkb(Cyb, "AbstractList/IteratorImpl", 162);
      hI(43, 162, Hyb, Fnb);
      _.J = function Gnb(a) {
        Anb(this, a);
      };
      _.K = function Hnb() {
        return this.b > 0;
      };
      _.L = function Inb() {
        return this.b;
      };
      _.M = function Jnb() {
        return Dnb(this);
      };
      _.N = function Knb() {
        return this.b - 1;
      };
      _.O = function Lnb(a) {
        Enb(this, a);
      };
      var jG = Nkb(Cyb, "AbstractList/ListIteratorImpl", 43);
      hI(258, 647, Fyb, Mnb);
      _.rb = function Nnb(a, b) {
        Fxb(a, this.b);
        this.c.rb(this.a + a, b);
        ++this.b;
      };
      _.sb = function Onb(a) {
        Cxb(a, this.b);
        return this.c.sb(this.a + a);
      };
      _.vb = function Pnb(a) {
        var b;
        Cxb(a, this.b);
        b = this.c.vb(this.a + a);
        --this.b;
        return b;
      };
      _.wb = function Qnb(a, b) {
        Cxb(a, this.b);
        return this.c.wb(this.a + a, b);
      };
      _.Y = function Rnb() {
        return this.b;
      };
      _.a = 0;
      _.b = 0;
      var kG = Nkb(Cyb, "AbstractList/SubList", 258);
      hI(36, 641, Eyb, Snb);
      _.Q = function Tnb() {
        this.a.Q();
      };
      _.kb = function Unb(a) {
        return this.a.R(a);
      };
      _.mb = function Vnb() {
        var a;
        return a = this.a.bb().mb(), new Ynb(a);
      };
      _.nb = function Wnb(a) {
        if (this.a.R(a)) {
          this.a.eb(a);
          return true;
        }
        return false;
      };
      _.Y = function Xnb() {
        return this.a.Y();
      };
      var nG = Nkb(Cyb, "AbstractMap/1", 36);
      hI(40, 1, Ayb, Ynb);
      _.G = function Znb() {
        return this.a.G();
      };
      _.H = function $nb() {
        var a;
        return a = Wv(this.a.H(), 21), a.yb();
      };
      _.I = function _nb() {
        this.a.I();
      };
      var mG = Nkb(Cyb, "AbstractMap/1/1", 40);
      hI(211, 640, Dyb, aob);
      _.Q = function bob() {
        this.a.Q();
      };
      _.kb = function cob(a) {
        return this.a.ab(a);
      };
      _.mb = function dob() {
        var a;
        return a = this.a.bb().mb(), new fob(a);
      };
      _.Y = function eob() {
        return this.a.Y();
      };
      var pG = Nkb(Cyb, "AbstractMap/2", 211);
      hI(212, 1, Ayb, fob);
      _.G = function gob() {
        return this.a.G();
      };
      _.H = function hob() {
        var a;
        return a = Wv(this.a.H(), 21), a.zb();
      };
      _.I = function iob() {
        this.a.I();
      };
      var oG = Nkb(Cyb, "AbstractMap/2/1", 212);
      hI(210, 1, {210: 1, 21: 1});
      _.t = function kob(a) {
        var b;
        if (!aw(a, 21)) {
          return false;
        }
        b = Wv(a, 21);
        return ovb(this.d, b.yb()) && ovb(this.e, b.zb());
      };
      _.yb = function lob() {
        return this.d;
      };
      _.zb = function mob() {
        return this.e;
      };
      _.v = function nob() {
        return pvb(this.d) ^ pvb(this.e);
      };
      _.Ab = function oob(a) {
        return job(this, a);
      };
      _.w = function pob() {
        return this.d + "=" + this.e;
      };
      var qG = Nkb(Cyb, "AbstractMap/AbstractEntry", 210);
      hI(163, 210, {210: 1, 163: 1, 21: 1}, qob);
      var rG = Nkb(Cyb, "AbstractMap/SimpleEntry", 163);
      hI(652, 1, Jyb);
      _.t = function rob(a) {
        var b;
        if (!aw(a, 21)) {
          return false;
        }
        b = Wv(a, 21);
        return ovb(this.yb(), b.yb()) && ovb(this.zb(), b.zb());
      };
      _.v = function sob() {
        return pvb(this.yb()) ^ pvb(this.zb());
      };
      _.w = function tob() {
        return this.yb() + "=" + this.zb();
      };
      var sG = Nkb(Cyb, Kyb, 652);
      hI(639, 638, Byb);
      _._ = function wob(a) {
        return uob(this, a);
      };
      _.R = function xob(a) {
        return vob(this, a);
      };
      _.bb = function yob() {
        return new Bob(this);
      };
      _.cb = function zob(a) {
        return re(Wvb(this, a));
      };
      _.W = function Aob() {
        return new Gob(this);
      };
      var xG = Nkb(Cyb, "AbstractNavigableMap", 639);
      hI(287, 641, Eyb, Bob);
      _.kb = function Cob(a) {
        return aw(a, 21) && uob(this.b, Wv(a, 21));
      };
      _.mb = function Dob() {
        return new rwb(this.b);
      };
      _.nb = function Eob(a) {
        var b;
        if (aw(a, 21)) {
          b = Wv(a, 21);
          return dwb(this.b, b);
        }
        return false;
      };
      _.Y = function Fob() {
        return this.b.c;
      };
      var uG = Nkb(Cyb, "AbstractNavigableMap/EntrySet", 287);
      hI(229, 641, Iyb, Gob);
      _.Q = function Hob() {
        Vvb(this.a);
      };
      _.kb = function Iob(a) {
        return vob(this.a, a);
      };
      _.mb = function Job() {
        var a;
        return a = new rwb(new wwb(this.a).b), new Mob(a);
      };
      _.nb = function Kob(a) {
        if (vob(this.a, a)) {
          cwb(this.a, a);
          return true;
        }
        return false;
      };
      _.Y = function Lob() {
        return this.a.c;
      };
      var wG = Nkb(Cyb, "AbstractNavigableMap/NavigableKeySet", 229);
      hI(230, 1, Ayb, Mob);
      _.G = function Nob() {
        return Bnb(this.a.a);
      };
      _.H = function Oob() {
        var a;
        return a = pwb(this.a), a.yb();
      };
      _.I = function Pob() {
        qwb(this.a);
      };
      var vG = Nkb(Cyb, "AbstractNavigableMap/NavigableKeySet/1", 230);
      hI(4, 1, Ayb, Tob);
      _.G = function Uob() {
        return Qob(this);
      };
      _.H = function Vob() {
        return Rob(this);
      };
      _.I = function Wob() {
        Sob(this);
      };
      _.a = 0;
      _.b = -1;
      var AG = Nkb(Cyb, "ArrayList/1", 4);
      hI(94, 647, XAb, opb);
      _.kb = function ppb(a) {
        return dn(this, a) != -1;
      };
      _.sb = function qpb(a) {
        return mpb(this, a);
      };
      _.wb = function rpb(a, b) {
        var c;
        c = (Cxb(a, this.a.length), this.a[a]);
        Av(this.a, a, b);
        return c;
      };
      _.Y = function spb() {
        return this.a.length;
      };
      _.ob = function tpb() {
        return npb(this, xv(UF, syb, 1, this.a.length, 4, 1));
      };
      _.pb = function upb(a) {
        return npb(this, a);
      };
      var CG = Nkb(Cyb, "Arrays/ArrayList", 94);
      var vpb, wpb, xpb;
      hI(413, 1, fyb, Ipb);
      _.$b = function Jpb(a, b) {
        return zT(b, a);
      };
      var DG = Nkb(Cyb, "Collections/2", 413);
      hI(406, 647, XAb, Kpb);
      _.kb = function Lpb(a) {
        return false;
      };
      _.sb = function Mpb(a) {
        Cxb(a, 0);
        return null;
      };
      _.mb = function Npb() {
        return ypb(), Rpb(), Qpb;
      };
      _.tb = function Opb() {
        return ypb(), Rpb(), Qpb;
      };
      _.Y = function Ppb() {
        return 0;
      };
      var FG = Nkb(Cyb, "Collections/EmptyList", 406);
      hI(407, 1, Hyb, Spb);
      _.J = function Tpb(a) {
        throw new Hmb();
      };
      _.G = function Upb() {
        return false;
      };
      _.K = function Vpb() {
        return false;
      };
      _.H = function Wpb() {
        throw new nvb();
      };
      _.L = function Xpb() {
        return 0;
      };
      _.M = function Ypb() {
        throw new nvb();
      };
      _.N = function Zpb() {
        return -1;
      };
      _.I = function $pb() {
        throw new tlb();
      };
      _.O = function _pb(a) {
        throw new tlb();
      };
      var Qpb;
      var EG = Nkb(Cyb, "Collections/EmptyListIterator", 407);
      hI(409, 638, Ryb, aqb);
      _.R = function bqb(a) {
        return false;
      };
      _.ab = function cqb(a) {
        return false;
      };
      _.bb = function dqb() {
        return ypb(), xpb;
      };
      _.cb = function eqb(a) {
        return null;
      };
      _.W = function fqb() {
        return ypb(), xpb;
      };
      _.Y = function gqb() {
        return 0;
      };
      _.fb = function hqb() {
        return ypb(), vpb;
      };
      var GG = Nkb(Cyb, "Collections/EmptyMap", 409);
      hI(408, 641, Syb, iqb);
      _.kb = function jqb(a) {
        return false;
      };
      _.mb = function kqb() {
        return ypb(), Rpb(), Qpb;
      };
      _.Y = function lqb() {
        return 0;
      };
      var HG = Nkb(Cyb, "Collections/EmptySet", 408);
      hI(410, 1, fyb, pqb);
      _.$b = function qqb(a, b) {
        return oqb(Wv(a, 23), Wv(b, 23));
      };
      var mqb;
      var IG = Nkb(Cyb, "Collections/ReverseComparator", 410);
      hI(411, 647, {3: 1, 22: 1, 19: 1, 20: 1}, rqb);
      _.kb = function sqb(a) {
        return ovb(this.a, a);
      };
      _.sb = function tqb(a) {
        Cxb(a, 1);
        return this.a;
      };
      _.Y = function uqb() {
        return 1;
      };
      var JG = Nkb(Cyb, "Collections/SingletonList", 411);
      hI(217, 1, Dyb, zqb);
      _.ib = function Aqb(a) {
        return vqb();
      };
      _.jb = function Bqb(a) {
        return wqb();
      };
      _.Q = function Cqb() {
        xqb();
      };
      _.kb = function Dqb(a) {
        return this.b.kb(a);
      };
      _.lb = function Eqb(a) {
        return this.b.lb(a);
      };
      _.V = function Fqb() {
        return this.b.V();
      };
      _.mb = function Gqb() {
        return new Nqb(this.b.mb());
      };
      _.nb = function Hqb(a) {
        return yqb();
      };
      _.Y = function Iqb() {
        return this.b.Y();
      };
      _.ob = function Jqb() {
        return this.b.ob();
      };
      _.pb = function Kqb(a) {
        return this.b.pb(a);
      };
      _.w = function Lqb() {
        return xb(this.b);
      };
      var LG = Nkb(Cyb, "Collections/UnmodifiableCollection", 217);
      hI(152, 1, Ayb, Nqb);
      _.G = function Oqb() {
        return this.b.G();
      };
      _.H = function Pqb() {
        return this.b.H();
      };
      _.I = function Qqb() {
        Mqb();
      };
      var KG = Nkb(Cyb, "Collections/UnmodifiableCollectionIterator", 152);
      hI(233, 217, Fyb, Rqb);
      _.rb = function Sqb(a, b) {
        throw new Hmb();
      };
      _.t = function Tqb(a) {
        return this.a.t(a);
      };
      _.sb = function Uqb(a) {
        return this.a.sb(a);
      };
      _.v = function Vqb() {
        return this.a.v();
      };
      _.V = function Wqb() {
        return this.a.V();
      };
      _.tb = function Xqb() {
        return new arb(this.a.ub(0));
      };
      _.ub = function Yqb(a) {
        return new arb(this.a.ub(a));
      };
      _.vb = function Zqb(a) {
        throw new Hmb();
      };
      _.wb = function $qb(a, b) {
        throw new Hmb();
      };
      _.xb = function _qb(a, b) {
        return new Rqb(this.a.xb(a, b));
      };
      var NG = Nkb(Cyb, "Collections/UnmodifiableList", 233);
      hI(309, 152, Hyb, arb);
      _.J = function brb(a) {
        throw new Hmb();
      };
      _.K = function crb() {
        return this.a.K();
      };
      _.L = function drb() {
        return this.a.L();
      };
      _.M = function erb() {
        return this.a.M();
      };
      _.N = function frb() {
        return this.a.N();
      };
      _.O = function grb(a) {
        throw new Hmb();
      };
      var MG = Nkb(Cyb, "Collections/UnmodifiableListIterator", 309);
      hI(305, 1, Byb, mrb);
      _.Q = function nrb() {
        throw new Hmb();
      };
      _.R = function orb(a) {
        return this.c.R(a);
      };
      _.ab = function prb(a) {
        return hrb(this, a);
      };
      _.bb = function qrb() {
        return irb(this);
      };
      _.t = function rrb(a) {
        return jrb(this, a);
      };
      _.cb = function srb(a) {
        return this.c.cb(a);
      };
      _.v = function trb() {
        return this.c.v();
      };
      _.V = function urb() {
        return this.c.V();
      };
      _.W = function vrb() {
        return krb(this);
      };
      _.db = function wrb(a, b) {
        throw new Hmb();
      };
      _.eb = function xrb(a) {
        throw new Hmb();
      };
      _.Y = function yrb() {
        return this.c.Y();
      };
      _.w = function zrb() {
        return xb(this.c);
      };
      _.fb = function Arb() {
        return lrb(this);
      };
      var RG = Nkb(Cyb, "Collections/UnmodifiableMap", 305);
      hI(151, 217, Eyb, Frb);
      _.t = function Grb(a) {
        return Drb(this, a);
      };
      _.v = function Hrb() {
        return this.b.v();
      };
      var TG = Nkb(Cyb, "Collections/UnmodifiableSet", 151);
      hI(412, 151, Eyb, Nrb);
      _.kb = function Orb(a) {
        return Irb(this, a);
      };
      _.lb = function Prb(a) {
        return Jrb(this, a);
      };
      _.mb = function Qrb() {
        var a;
        return a = this.b.mb(), new Trb(a);
      };
      _.ob = function Rrb() {
        return Krb(this);
      };
      _.pb = function Srb(a) {
        return Lrb(this, a);
      };
      var QG = Nkb(Cyb, "Collections/UnmodifiableMap/UnmodifiableEntrySet", 412);
      hI(263, 1, Ayb, Trb);
      _.H = function Vrb() {
        return new Xrb(Wv(this.a.H(), 21));
      };
      _.G = function Urb() {
        return this.a.G();
      };
      _.I = function Wrb() {
        throw new Hmb();
      };
      var OG = Nkb(Cyb, "Collections/UnmodifiableMap/UnmodifiableEntrySet/1", 263);
      hI(306, 1, Jyb, Xrb);
      _.t = function Yrb(a) {
        return this.a.t(a);
      };
      _.yb = function Zrb() {
        return this.a.yb();
      };
      _.zb = function $rb() {
        return this.a.zb();
      };
      _.v = function _rb() {
        return this.a.v();
      };
      _.Ab = function asb(a) {
        throw new Hmb();
      };
      _.w = function bsb() {
        return xb(this.a);
      };
      var PG = Nkb(Cyb, "Collections/UnmodifiableMap/UnmodifiableEntrySet/UnmodifiableEntry", 306);
      hI(307, 233, Gyb, csb);
      var SG = Nkb(Cyb, "Collections/UnmodifiableRandomAccessList", 307);
      hI(308, 151, Iyb, dsb);
      _.t = function esb(a) {
        return this.a.t(a);
      };
      _.v = function fsb() {
        return this.a.v();
      };
      var UG = Nkb(Cyb, "Collections/UnmodifiableSortedSet", 308);
      var gsb;
      hI(522, 1, fyb, isb);
      _.$b = function jsb(a, b) {
        Dxb(a);
        Dxb(b);
        return Akb(Wv(a, 23), b);
      };
      var VG = Nkb(Cyb, "Comparators/1", 522);
      hI(202, 72, Vxb, nsb);
      var WG = Nkb(Cyb, "ConcurrentModificationException", 202);
      hI(609, 72, Vxb, osb);
      var XG = Nkb(Cyb, "EmptyStackException", 609);
      hI(319, 638, Byb, vsb);
      _.db = function Bsb(a, b) {
        return ssb(this, a, b);
      };
      _.Q = function wsb() {
        psb(this);
      };
      _.R = function xsb(a) {
        return Ysb(this.a, a);
      };
      _.ab = function ysb(a) {
        var b, c;
        for (c = new jtb(this.a); c.a < c.c.a.length; ) {
          b = itb(c);
          if (ovb(a, this.b[b.e])) {
            return true;
          }
        }
        return false;
      };
      _.bb = function zsb() {
        return new Fsb(this);
      };
      _.cb = function Asb(a) {
        return qsb(this, a);
      };
      _.eb = function Csb(a) {
        return tsb(this, a);
      };
      _.Y = function Dsb() {
        return this.a.c;
      };
      var _G = Nkb(Cyb, "EnumMap", 319);
      hI(236, 641, Eyb, Fsb);
      _.Q = function Gsb() {
        psb(this.a);
      };
      _.kb = function Hsb(a) {
        return Esb(this, a);
      };
      _.mb = function Isb() {
        return new Lsb(this.a);
      };
      _.nb = function Jsb(a) {
        var b;
        if (Esb(this, a)) {
          b = Wv(a, 21).yb();
          tsb(this.a, b);
          return true;
        }
        return false;
      };
      _.Y = function Ksb() {
        return this.a.a.c;
      };
      var ZG = Nkb(Cyb, "EnumMap/EntrySet", 236);
      hI(237, 1, Ayb, Lsb);
      _.H = function Nsb() {
        return this.b = itb(this.a), new Psb(this.c, this.b);
      };
      _.G = function Msb() {
        return htb(this.a);
      };
      _.I = function Osb() {
        uxb(!!this.b);
        tsb(this.c, this.b);
        this.b = null;
      };
      var YG = Nkb(Cyb, "EnumMap/EntrySetIterator", 237);
      hI(238, 652, Jyb, Psb);
      _.yb = function Qsb() {
        return this.a;
      };
      _.zb = function Rsb() {
        return this.b.b[this.a.e];
      };
      _.Ab = function Ssb(a) {
        return usb(this.b, this.a.e, a);
      };
      var $G = Nkb(Cyb, "EnumMap/MapEntry", 238);
      hI(86, 641, {22: 1, 19: 1, 86: 1, 18: 1});
      var cH = Nkb(Cyb, "EnumSet", 86);
      hI(66, 86, {22: 1, 19: 1, 86: 1, 66: 1, 18: 1}, atb);
      _.ib = function btb(a) {
        return Wsb(this, Wv(a, 17));
      };
      _.kb = function ctb(a) {
        return Ysb(this, a);
      };
      _.mb = function dtb() {
        return new jtb(this);
      };
      _.nb = function etb(a) {
        return $sb(this, a);
      };
      _.Y = function ftb() {
        return this.c;
      };
      _.c = 0;
      var bH = Nkb(Cyb, "EnumSet/EnumSetImpl", 66);
      hI(167, 1, Ayb, jtb);
      _.H = function ltb() {
        return itb(this);
      };
      _.G = function ktb() {
        return htb(this);
      };
      _.I = function mtb() {
        uxb(this.b != -1);
        Av(this.c.b, this.b, null);
        --this.c.c;
        this.b = -1;
      };
      _.a = -1;
      _.b = -1;
      var aH = Nkb(Cyb, "EnumSet/EnumSetImpl/IteratorImpl", 167);
      hI(30, 213, YAb, ntb, otb, ptb);
      _.Uc = function qtb(a, b) {
        return gw(a) === gw(b) || a != null && rb(a, b);
      };
      _.Vc = function rtb(a) {
        var b;
        b = vb(a);
        return b | 0;
      };
      var dH = Nkb(Cyb, "HashMap", 30);
      hI(50, 641, ZAb, vtb, wtb, xtb);
      _.ib = function ztb(a) {
        return stb(this, a);
      };
      _.Q = function Atb() {
        this.a.Q();
      };
      _.Wc = function Btb() {
        return new xtb(this);
      };
      _.kb = function Ctb(a) {
        return ttb(this, a);
      };
      _.V = function Dtb() {
        return this.a.Y() == 0;
      };
      _.mb = function Etb() {
        var a;
        return a = new Snb(this.a).a.bb().mb(), new Ynb(a);
      };
      _.nb = function Ftb(a) {
        return utb(this, a);
      };
      _.Y = function Gtb() {
        return this.a.Y();
      };
      _.w = function Htb() {
        return Ze(new Snb(this.a));
      };
      var eH = Nkb(Cyb, "HashSet", 50);
      hI(418, 1, Oyb, Ntb);
      _.mb = function Otb() {
        return new Ptb(this);
      };
      _.c = 0;
      var gH = Nkb(Cyb, "InternalHashCodeMap", 418);
      hI(312, 1, Ayb, Ptb);
      _.H = function Rtb() {
        return this.d = this.a[this.c++], this.d;
      };
      _.G = function Qtb() {
        var a;
        if (this.c < this.a.length) {
          return true;
        }
        a = this.b.next();
        if (!a.done) {
          this.a = a.value[1];
          this.c = 0;
          return true;
        }
        return false;
      };
      _.I = function Stb() {
        Mtb(this.e, this.d.yb());
        this.c != 0 && --this.c;
      };
      _.c = 0;
      _.d = null;
      var fH = Nkb(Cyb, "InternalHashCodeMap/1", 312);
      var Xtb;
      hI(382, 1, Oyb, fub);
      _.mb = function gub() {
        return new hub(this);
      };
      _.c = 0;
      _.d = 0;
      var jH = Nkb(Cyb, "InternalStringMap", 382);
      hI(293, 1, Ayb, hub);
      _.H = function jub() {
        return this.c = this.a, this.a = this.b.next(), new lub(this.d, this.c, this.d.d);
      };
      _.G = function iub() {
        return !this.a.done;
      };
      _.I = function kub() {
        eub(this.d, this.c.value[0]);
      };
      var hH = Nkb(Cyb, "InternalStringMap/1", 293);
      hI(383, 652, Jyb, lub);
      _.yb = function mub() {
        return this.b.value[0];
      };
      _.zb = function nub() {
        if (this.a.d != this.c) {
          return cub(this.a, this.b.value[0]);
        }
        return this.b.value[1];
      };
      _.Ab = function oub(a) {
        return dub(this.a, this.b.value[0], a);
      };
      _.c = 0;
      var iH = Nkb(Cyb, "InternalStringMap/2", 383);
      hI(155, 30, YAb, wub, xub);
      _.Q = function yub() {
        qub(this);
      };
      _.R = function zub(a) {
        return Qmb(this.c, a);
      };
      _.ab = function Aub(a) {
        var b;
        b = this.b.a;
        while (b != this.b) {
          if (ovb(b.e, a)) {
            return true;
          }
          b = b.a;
        }
        return false;
      };
      _.bb = function Bub() {
        return new Lub(this);
      };
      _.cb = function Cub(a) {
        return rub(this, a);
      };
      _.db = function Dub(a, b) {
        return tub(this, a, b);
      };
      _.eb = function Eub(a) {
        return vub(this, a);
      };
      _.Y = function Fub() {
        return Zmb(this.c);
      };
      _.a = false;
      var nH = Nkb(Cyb, "LinkedHashMap", 155);
      hI(176, 163, {210: 1, 163: 1, 176: 1, 21: 1}, Iub, Jub);
      var kH = Nkb(Cyb, "LinkedHashMap/ChainEntry", 176);
      hI(270, 641, Eyb, Lub);
      _.Q = function Mub() {
        qub(this.a);
      };
      _.kb = function Nub(a) {
        return Kub(this, a);
      };
      _.mb = function Oub() {
        return new Sub(this);
      };
      _.nb = function Pub(a) {
        var b;
        if (Kub(this, a)) {
          b = Wv(a, 21).yb();
          vub(this.a, b);
          return true;
        }
        return false;
      };
      _.Y = function Qub() {
        return Zmb(this.a.c);
      };
      var mH = Nkb(Cyb, "LinkedHashMap/EntrySet", 270);
      hI(271, 1, Ayb, Sub);
      _.H = function Uub() {
        return Rub(this);
      };
      _.G = function Tub() {
        return this.b != this.c.a.b;
      };
      _.I = function Vub() {
        uxb(!!this.a);
        ksb(this.c.a.c, this);
        Hub(this.a);
        Wmb(this.c.a.c, this.a.d);
        lsb(this.c.a.c, this);
        this.a = null;
      };
      var lH = Nkb(Cyb, "LinkedHashMap/EntrySet/EntryIterator", 271);
      hI(70, 50, ZAb, Wub, Xub, Yub);
      _.Wc = function Zub() {
        return new Yub(this);
      };
      var oH = Nkb(Cyb, "LinkedHashSet", 70);
      hI(372, 1, Hyb, cvb);
      _.J = function dvb(a) {
        $ub(this, a);
      };
      _.G = function evb() {
        return this.b != this.d.c;
      };
      _.K = function fvb() {
        return this.b.b != this.d.a;
      };
      _.H = function gvb() {
        return _ub(this);
      };
      _.L = function hvb() {
        return this.a;
      };
      _.M = function ivb() {
        return avb(this);
      };
      _.N = function jvb() {
        return this.a - 1;
      };
      _.I = function kvb() {
        bvb(this);
      };
      _.O = function lvb(a) {
        uxb(!!this.c);
        this.c.c = a;
      };
      _.a = 0;
      _.c = null;
      var pH = Nkb(Cyb, "LinkedList/ListIteratorImpl", 372);
      hI(259, 1, {}, mvb);
      var qH = Nkb(Cyb, "LinkedList/Node", 259);
      hI(74, 72, {3: 1, 54: 1, 46: 1, 74: 1}, nvb);
      var tH = Nkb(Cyb, "NoSuchElementException", 74);
      hI(154, 1, {154: 1}, yvb, zvb);
      _.a = 0;
      _.b = 0;
      var qvb, rvb, svb = 0;
      var uH = Nkb(Cyb, "Random", 154);
      hI(607, 647, cBb);
      _.rb = function Avb(a, b) {
        Dvb(a, this.a.c.length + 1);
        uU(this.a, a, b);
      };
      _.ib = function Bvb(a) {
        return vU(this.a, a);
      };
      _.jb = function Cvb(a) {
        return xU(this.a, a);
      };
      _.Q = function Evb() {
        this.a.c = xv(UF, syb, 1, 0, 4, 1);
      };
      _.kb = function Fvb(a) {
        return zU(this.a, a, 0) != -1;
      };
      _.lb = function Gvb(a) {
        return Xe(this.a, a);
      };
      _.sb = function Hvb(a) {
        Dvb(a, this.a.c.length);
        return yU(this.a, a);
      };
      _.V = function Ivb() {
        return this.a.c.length == 0;
      };
      _.mb = function Jvb() {
        return new Tob(this.a);
      };
      _.vb = function Kvb(a) {
        return Dvb(a, this.a.c.length), AU(this.a, a);
      };
      _.Xb = function Lvb(a, b) {
        CU(this.a, a, b);
      };
      _.wb = function Mvb(a, b) {
        Dvb(a, this.a.c.length);
        return DU(this.a, a, b);
      };
      _.Y = function Nvb() {
        return this.a.c.length;
      };
      _.xb = function Ovb(a, b) {
        return new Mnb(this.a, a, b);
      };
      _.ob = function Pvb() {
        return EU(this.a);
      };
      _.pb = function Qvb(a) {
        return FU(this.a, a);
      };
      _.w = function Rvb() {
        return Ze(this.a);
      };
      var GH = Nkb(Cyb, "Vector", 607);
      hI(337, 607, cBb, Uvb);
      var vH = Nkb(Cyb, "Stack", 337);
      hI(253, 639, Ryb, iwb, jwb);
      _.Q = function kwb() {
        Vvb(this);
      };
      _.bb = function lwb() {
        return new wwb(this);
      };
      _.db = function mwb(a, b) {
        return bwb(this, a, b);
      };
      _.eb = function nwb(a) {
        return cwb(this, a);
      };
      _.Y = function owb() {
        return this.c;
      };
      _.c = 0;
      var EH = Nkb(Cyb, "TreeMap", 253);
      hI(182, 1, Ayb, rwb);
      _.H = function uwb() {
        return pwb(this);
      };
      _.G = function twb() {
        return Bnb(this.a);
      };
      _.I = function vwb() {
        qwb(this);
      };
      var wH = Nkb(Cyb, "TreeMap/EntryIterator", 182);
      hI(209, 287, Eyb, wwb);
      _.Q = function xwb() {
        Vvb(this.a);
      };
      var xH = Nkb(Cyb, "TreeMap/EntrySet", 209);
      hI(183, 163, {210: 1, 163: 1, 21: 1, 183: 1}, ywb);
      _.b = false;
      var yH = Nkb(Cyb, "TreeMap/Node", 183);
      hI(254, 1, {}, zwb);
      _.w = function Awb() {
        return "State: mv=" + this.c + " value=" + this.d + " done=" + this.a + " found=" + this.b;
      };
      _.a = false;
      _.b = false;
      _.c = false;
      var zH = Nkb(Cyb, "TreeMap/State", 254);
      hI(138, 17, dBb, Gwb);
      _.Xc = function Hwb() {
        return false;
      };
      _.Yc = function Iwb() {
        return false;
      };
      var Bwb, Cwb, Dwb, Ewb;
      var DH = Okb(Cyb, "TreeMap/SubMapType", 138, IF, Jwb);
      hI(352, 138, dBb, Kwb);
      _.Yc = function Lwb() {
        return true;
      };
      var AH = Okb(Cyb, "TreeMap/SubMapType/1", 352, DH, null);
      hI(353, 138, dBb, Mwb);
      _.Xc = function Nwb() {
        return true;
      };
      _.Yc = function Owb() {
        return true;
      };
      var BH = Okb(Cyb, "TreeMap/SubMapType/2", 353, DH, null);
      hI(354, 138, dBb, Pwb);
      _.Xc = function Qwb() {
        return true;
      };
      var CH = Okb(Cyb, "TreeMap/SubMapType/3", 354, DH, null);
      hI(191, 641, {3: 1, 22: 1, 19: 1, 18: 1, 137: 1, 191: 1}, Vwb, Wwb);
      _.ib = function Xwb(a) {
        return Rwb(this, a);
      };
      _.Q = function Ywb() {
        Vvb(this.a);
      };
      _.kb = function Zwb(a) {
        return vob(this.a, a);
      };
      _.mb = function $wb() {
        var a;
        return a = new rwb(new wwb(new Gob(this.a).a).b), new Mob(a);
      };
      _.nb = function _wb(a) {
        return Uwb(this, a);
      };
      _.Y = function axb() {
        return this.a.c;
      };
      var FH = Nkb(Cyb, "TreeSet", 191);
      var sxb = 0;
      var Kxb, Lxb = 0, Mxb;
      var mw = Qkb("int", "I");
      var KH = Qkb("boolean", "Z");
      var jw = Qkb("char", "C");
      var kw = Qkb("double", "D");
      var lw = Qkb("float", "F");
      var Rxb = zt;
      var gwtOnLoad = gwtOnLoad = dI;
      bI(lI);
      eI("permProps", [[["locale", "default"], ["user.agent", "gecko1_8"]]]);
      var $moduleName, $moduleBase, $stats = function() {
      }, $sessionId = function() {
      };
      gwtOnLoad(null, "klay", null);
    })();
  });

  // node_modules/cytoscape-klay/cytoscape-klay.js
  var require_cytoscape_klay = __commonJS((exports, module) => {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory(require_klay());
      else if (typeof define === "function" && define.amd)
        define(["klayjs"], factory);
      else if (typeof exports === "object")
        exports["cytoscapeKlay"] = factory(require_klay());
      else
        root["cytoscapeKlay"] = factory(root["$klay"]);
    })(exports, function(__WEBPACK_EXTERNAL_MODULE_4__) {
      return function(modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
          if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
          }
          var module2 = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
          };
          modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
          module2.l = true;
          return module2.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.i = function(value) {
          return value;
        };
        __webpack_require__.d = function(exports2, name, getter) {
          if (!__webpack_require__.o(exports2, name)) {
            Object.defineProperty(exports2, name, {
              configurable: false,
              enumerable: true,
              get: getter
            });
          }
        };
        __webpack_require__.n = function(module2) {
          var getter = module2 && module2.__esModule ? function getDefault() {
            return module2["default"];
          } : function getModuleExports() {
            return module2;
          };
          __webpack_require__.d(getter, "a", getter);
          return getter;
        };
        __webpack_require__.o = function(object, property) {
          return Object.prototype.hasOwnProperty.call(object, property);
        };
        __webpack_require__.p = "";
        return __webpack_require__(__webpack_require__.s = 3);
      }([
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var klay2 = __webpack_require__(4);
          var assign = __webpack_require__(1);
          var defaults = __webpack_require__(2);
          var klayNSLookup = {
            addUnnecessaryBendpoints: "de.cau.cs.kieler.klay.layered.unnecessaryBendpoints",
            alignment: "de.cau.cs.kieler.alignment",
            aspectRatio: "de.cau.cs.kieler.aspectRatio",
            borderSpacing: "borderSpacing",
            compactComponents: "de.cau.cs.kieler.klay.layered.components.compact",
            compactionStrategy: "de.cau.cs.kieler.klay.layered.nodeplace.compactionStrategy",
            contentAlignment: "de.cau.cs.kieler.klay.layered.contentAlignment",
            crossingMinimization: "de.cau.cs.kieler.klay.layered.crossMin",
            cycleBreaking: "de.cau.cs.kieler.klay.layered.cycleBreaking",
            debugMode: "de.cau.cs.kieler.debugMode",
            direction: "de.cau.cs.kieler.direction",
            edgeLabelSideSelection: "de.cau.cs.kieler.klay.layered.edgeLabelSideSelection",
            edgeRouting: "de.cau.cs.kieler.edgeRouting",
            edgeSpacingFactor: "de.cau.cs.kieler.klay.layered.edgeSpacingFactor",
            feedbackEdges: "de.cau.cs.kieler.klay.layered.feedBackEdges",
            fixedAlignment: "de.cau.cs.kieler.klay.layered.fixedAlignment",
            greedySwitchCrossingMinimization: "de.cau.cs.kieler.klay.layered.greedySwitch",
            hierarchyHandling: "de.cau.cs.kieler.hierarchyHandling",
            inLayerSpacingFactor: "de.cau.cs.kieler.klay.layered.inLayerSpacingFactor",
            interactiveReferencePoint: "de.cau.cs.kieler.klay.layered.interactiveReferencePoint",
            layerConstraint: "de.cau.cs.kieler.klay.layered.layerConstraint",
            layoutHierarchy: "de.cau.cs.kieler.layoutHierarchy",
            linearSegmentsDeflectionDampening: "de.cau.cs.kieler.klay.layered.linearSegmentsDeflectionDampening",
            mergeEdges: "de.cau.cs.kieler.klay.layered.mergeEdges",
            mergeHierarchyCrossingEdges: "de.cau.cs.kieler.klay.layered.mergeHierarchyEdges",
            noLayout: "de.cau.cs.kieler.noLayout",
            nodeLabelPlacement: "de.cau.cs.kieler.nodeLabelPlacement",
            nodeLayering: "de.cau.cs.kieler.klay.layered.nodeLayering",
            nodePlacement: "de.cau.cs.kieler.klay.layered.nodePlace",
            portAlignment: "de.cau.cs.kieler.portAlignment",
            portAlignmentEastern: "de.cau.cs.kieler.portAlignment.east",
            portAlignmentNorth: "de.cau.cs.kieler.portAlignment.north",
            portAlignmentSouth: "de.cau.cs.kieler.portAlignment.south",
            portAlignmentWest: "de.cau.cs.kieler.portAlignment.west",
            portConstraints: "de.cau.cs.kieler.portConstraints",
            portLabelPlacement: "de.cau.cs.kieler.portLabelPlacement",
            portOffset: "de.cau.cs.kieler.offset",
            portSide: "de.cau.cs.kieler.portSide",
            portSpacing: "de.cau.cs.kieler.portSpacing",
            postCompaction: "de.cau.cs.kieler.klay.layered.postCompaction",
            priority: "de.cau.cs.kieler.priority",
            randomizationSeed: "de.cau.cs.kieler.randomSeed",
            routeSelfLoopInside: "de.cau.cs.kieler.selfLoopInside",
            separateConnectedComponents: "de.cau.cs.kieler.separateConnComp",
            sizeConstraint: "de.cau.cs.kieler.sizeConstraint",
            sizeOptions: "de.cau.cs.kieler.sizeOptions",
            spacing: "de.cau.cs.kieler.spacing",
            splineSelfLoopPlacement: "de.cau.cs.kieler.klay.layered.splines.selfLoopPlacement",
            thoroughness: "de.cau.cs.kieler.klay.layered.thoroughness",
            wideNodesOnMultipleLayers: "de.cau.cs.kieler.klay.layered.wideNodesOnMultipleLayers"
          };
          var mapToKlayNS = function mapToKlayNS2(klayOpts) {
            var keys = Object.keys(klayOpts);
            var ret = {};
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              var nsKey = klayNSLookup[key];
              var val = klayOpts[key];
              ret[nsKey] = val;
            }
            return ret;
          };
          var klayOverrides = {
            interactiveReferencePoint: "CENTER"
          };
          var getPos = function getPos2(ele) {
            var parent = ele.parent();
            var k = ele.scratch("klay");
            var p = {
              x: k.x,
              y: k.y
            };
            while (parent.nonempty()) {
              var kp = parent.scratch("klay");
              p.x += kp.x;
              p.y += kp.y;
              parent = parent.parent();
            }
            return p;
          };
          var makeNode = function makeNode2(node, options) {
            var dims = node.layoutDimensions(options);
            var padding = node.numericStyle("padding");
            var k = {
              _cyEle: node,
              id: node.id(),
              padding: {
                top: padding,
                left: padding,
                bottom: padding,
                right: padding
              }
            };
            if (!node.isParent()) {
              k.width = dims.w;
              k.height = dims.h;
            }
            node.scratch("klay", k);
            return k;
          };
          var makeEdge = function makeEdge2(edge, options) {
            var k = {
              _cyEle: edge,
              id: edge.id(),
              source: edge.data("source"),
              target: edge.data("target"),
              properties: {}
            };
            var priority = options.priority(edge);
            if (priority != null) {
              k.properties.priority = priority;
            }
            edge.scratch("klay", k);
            return k;
          };
          var makeGraph = function makeGraph2(nodes, edges, options) {
            var klayNodes = [];
            var klayEdges = [];
            var klayEleLookup = {};
            var graph = {
              id: "root",
              children: [],
              edges: []
            };
            for (var i = 0; i < nodes.length; i++) {
              var n = nodes[i];
              var k = makeNode(n, options);
              klayNodes.push(k);
              klayEleLookup[n.id()] = k;
            }
            for (var _i = 0; _i < edges.length; _i++) {
              var e = edges[_i];
              var _k = makeEdge(e, options);
              klayEdges.push(_k);
              klayEleLookup[e.id()] = _k;
            }
            for (var _i2 = 0; _i2 < klayNodes.length; _i2++) {
              var _k2 = klayNodes[_i2];
              var _n = _k2._cyEle;
              if (!_n.isChild()) {
                graph.children.push(_k2);
              } else {
                var parent = _n.parent();
                var parentK = klayEleLookup[parent.id()];
                var children = parentK.children = parentK.children || [];
                children.push(_k2);
              }
            }
            for (var _i3 = 0; _i3 < klayEdges.length; _i3++) {
              var _k3 = klayEdges[_i3];
              var _e = _k3._cyEle;
              var parentSrc = _e.source().parent();
              var parentTgt = _e.target().parent();
              if (false) {
                var kp = klayEleLookup[parentSrc.id()];
                kp.edges = kp.edges || [];
                kp.edges.push(_k3);
              } else {
                graph.edges.push(_k3);
              }
            }
            return graph;
          };
          function Layout2(options) {
            var klayOptions = options.klay;
            this.options = assign({}, defaults, options);
            this.options.klay = assign({}, defaults.klay, klayOptions, klayOverrides);
          }
          Layout2.prototype.run = function() {
            var layout = this;
            var options = this.options;
            var eles = options.eles;
            var nodes = eles.nodes();
            var edges = eles.edges();
            var graph = makeGraph(nodes, edges, options);
            klay2.layout({
              graph,
              options: mapToKlayNS(options.klay),
              success: function success() {
              },
              error: function error(_error) {
                throw _error;
              }
            });
            nodes.filter(function(n) {
              return !n.isParent();
            }).layoutPositions(layout, options, getPos);
            return this;
          };
          Layout2.prototype.stop = function() {
            return this;
          };
          Layout2.prototype.destroy = function() {
            return this;
          };
          module2.exports = Layout2;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          module2.exports = Object.assign != null ? Object.assign.bind(Object) : function(tgt) {
            for (var _len = arguments.length, srcs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              srcs[_key - 1] = arguments[_key];
            }
            srcs.filter(function(src) {
              return src != null;
            }).forEach(function(src) {
              Object.keys(src).forEach(function(k) {
                return tgt[k] = src[k];
              });
            });
            return tgt;
          };
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var defaults = {
            nodeDimensionsIncludeLabels: false,
            fit: true,
            padding: 20,
            animate: false,
            animateFilter: function animateFilter(node, i) {
              return true;
            },
            animationDuration: 500,
            animationEasing: void 0,
            transform: function transform(node, pos) {
              return pos;
            },
            ready: void 0,
            stop: void 0,
            klay: {
              addUnnecessaryBendpoints: false,
              aspectRatio: 1.6,
              borderSpacing: 20,
              compactComponents: false,
              crossingMinimization: "LAYER_SWEEP",
              cycleBreaking: "GREEDY",
              direction: "UNDEFINED",
              edgeRouting: "ORTHOGONAL",
              edgeSpacingFactor: 0.5,
              feedbackEdges: false,
              fixedAlignment: "NONE",
              inLayerSpacingFactor: 1,
              layoutHierarchy: false,
              linearSegmentsDeflectionDampening: 0.3,
              mergeEdges: false,
              mergeHierarchyCrossingEdges: true,
              nodeLayering: "NETWORK_SIMPLEX",
              nodePlacement: "BRANDES_KOEPF",
              randomizationSeed: 1,
              routeSelfLoopInside: false,
              separateConnectedComponents: true,
              spacing: 20,
              thoroughness: 7
            },
            priority: function priority(edge) {
              return null;
            }
          };
          module2.exports = defaults;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var impl = __webpack_require__(0);
          var register = function register2(cytoscape3) {
            if (!cytoscape3) {
              return;
            }
            cytoscape3("layout", "klay", impl);
          };
          if (typeof cytoscape !== "undefined") {
            register(cytoscape);
          }
          module2.exports = register;
        },
        function(module2, exports2) {
          module2.exports = __WEBPACK_EXTERNAL_MODULE_4__;
        }
      ]);
    });
  });

  // app.jsx
  var import_cytoscape = __toModule(require_cytoscape_cjs());
  var import_cytoscape_cise = __toModule(require_cytoscape_cise());
  var import_cytoscape_dagre = __toModule(require_cytoscape_dagre());
  var import_cytoscape_cola = __toModule(require_cytoscape_cola());
  var import_cytoscape_klay = __toModule(require_cytoscape_klay());
  globalThis.cytoscape = import_cytoscape.default;
  import_cytoscape.default.use(import_cytoscape_cise.default);
  import_cytoscape.default.use(import_cytoscape_dagre.default);
  import_cytoscape.default.use(import_cytoscape_cola.default);
  import_cytoscape.default.use(import_cytoscape_klay.default);
})();
//# sourceMappingURL=cytoscape.bundle.js.map
